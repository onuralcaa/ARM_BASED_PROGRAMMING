
015_2_STM32_SSD1306_INA219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008250  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c4c  080083e0  080083e0  000183e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800902c  0800902c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009034  08009034  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800903c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e8  08009224  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08009224  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ab1  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cc  00000000  00000000  00028cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211ce  00000000  00000000  0002b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab62  00000000  00000000  0004c8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c90  00000000  00000000  00057410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b0a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003758  00000000  00000000  0011b0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083c8 	.word	0x080083c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080083c8 	.word	0x080083c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <wireWriteRegister>:
/*! 
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	80bb      	strh	r3, [r7, #4]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	733b      	strb	r3, [r7, #12]
	i2c_temp[1] = value;
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2302      	movs	r3, #2
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <wireWriteRegister+0x4c>)
 8001032:	f001 fa2f 	bl	8002494 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f000 fe42 	bl	8001cc0 <HAL_Delay>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000210 	.word	0x20000210

08001048 <wireReadRegister>:
/*! 
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	b29a      	uxth	r2, r3
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2302      	movs	r3, #2
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <wireReadRegister+0x4c>)
 800106e:	f001 fb0b 	bl	8002688 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fe24 	bl	8001cc0 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	801a      	strh	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000210 	.word	0x20000210

08001098 <setCalibration_16V_400mA>:
    @brief set device to alibration which uses the highest precision for 
      current measurement (0.1mA), at the expense of 
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  
  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <setCalibration_16V_400mA+0x40>)
 80010a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a4:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <setCalibration_16V_400mA+0x44>)
 80010a8:	2214      	movs	r2, #20
 80010aa:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <setCalibration_16V_400mA+0x48>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above 
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <setCalibration_16V_400mA+0x40>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2005      	movs	r0, #5
 80010bc:	f7ff ff9c 	bl	8000ff8 <wireWriteRegister>
  
  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 80010c0:	f240 139f 	movw	r3, #415	; 0x19f
 80010c4:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff94 	bl	8000ff8 <wireWriteRegister>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000020c 	.word	0x2000020c
 80010dc:	20000204 	.word	0x20000204
 80010e0:	20000208 	.word	0x20000208

080010e4 <getBusVoltage_raw>:
/*! 
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getBusVoltage_raw() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	4619      	mov	r1, r3
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff ffaa 	bl	8001048 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b21b      	sxth	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <getCurrent_raw>:
/*! 
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <getCurrent_raw+0x2c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4619      	mov	r1, r3
 8001116:	2005      	movs	r0, #5
 8001118:	f7ff ff6e 	bl	8000ff8 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 800111c:	1dbb      	adds	r3, r7, #6
 800111e:	4619      	mov	r1, r3
 8001120:	2004      	movs	r0, #4
 8001122:	f7ff ff91 	bl	8001048 <wireReadRegister>
  
  return (int16_t)value;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b21b      	sxth	r3, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000020c 	.word	0x2000020c

08001138 <getBusVoltage_V>:
/*! 
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getBusVoltage_V() {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 800113e:	f7ff ffd1 	bl	80010e4 <getBusVoltage_raw>
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9ea 	bl	8000524 <__aeabi_i2d>
 8001150:	a309      	add	r3, pc, #36	; (adr r3, 8001178 <getBusVoltage_V+0x40>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa4f 	bl	80005f8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fd41 	bl	8000be8 <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	ee07 3a90 	vmov	s15, r3
}
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	d2f1a9fc 	.word	0xd2f1a9fc
 800117c:	3f50624d 	.word	0x3f50624d

08001180 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8001186:	f7ff ffbf 	bl	8001108 <getCurrent_raw>
 800118a:	4603      	mov	r3, r0
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <getCurrent_mA+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a4:	edd7 6a01 	vldr	s13, [r7, #4]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ee07 3a90 	vmov	s15, r3
}
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000204 	.word	0x20000204

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f000 fd08 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f85a 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 f91e 	bl	8001410 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011d4:	f000 f8c0 	bl	8001358 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011d8:	f000 f8ec 	bl	80013b4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80011dc:	f000 f95e 	bl	800149c <ssd1306_Init>
  setCalibration_16V_400mA();
 80011e0:	f7ff ff5a 	bl	8001098 <setCalibration_16V_400mA>
  HAL_Delay(50);
 80011e4:	2032      	movs	r0, #50	; 0x32
 80011e6:	f000 fd6b 	bl	8001cc0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  current = getCurrent_mA();
 80011ea:	f7ff ffc9 	bl	8001180 <getCurrent_mA>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <main+0xa8>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
	  voltage = getBusVoltage_V();
 80011f8:	f7ff ff9e 	bl	8001138 <getBusVoltage_V>
 80011fc:	eef0 7a40 	vmov.f32	s15, s0
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <main+0xac>)
 8001202:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(lcd_buffer,"Current: %2f mA",current);
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <main+0xa8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4917      	ldr	r1, [pc, #92]	; (8001274 <main+0xb0>)
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <main+0xb4>)
 8001218:	f003 fae4 	bl	80047e4 <siprintf>
	  ssd1306_SetCursor(0,0);
 800121c:	2100      	movs	r1, #0
 800121e:	2000      	movs	r0, #0
 8001220:	f000 faf0 	bl	8001804 <ssd1306_SetCursor>
      ssd1306_WriteString(lcd_buffer, Font_7x10, White);
 8001224:	4a15      	ldr	r2, [pc, #84]	; (800127c <main+0xb8>)
 8001226:	2301      	movs	r3, #1
 8001228:	ca06      	ldmia	r2, {r1, r2}
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <main+0xb4>)
 800122c:	f000 fac4 	bl	80017b8 <ssd1306_WriteString>

	  sprintf(lcd_buffer,"Voltage: %2f V",voltage);
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <main+0xac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f987 	bl	8000548 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4910      	ldr	r1, [pc, #64]	; (8001280 <main+0xbc>)
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <main+0xb4>)
 8001242:	f003 facf 	bl	80047e4 <siprintf>
	  ssd1306_SetCursor(0,12);
 8001246:	210c      	movs	r1, #12
 8001248:	2000      	movs	r0, #0
 800124a:	f000 fadb 	bl	8001804 <ssd1306_SetCursor>
      ssd1306_WriteString(lcd_buffer, Font_7x10, White);
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <main+0xb8>)
 8001250:	2301      	movs	r3, #1
 8001252:	ca06      	ldmia	r2, {r1, r2}
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <main+0xb4>)
 8001256:	f000 faaf 	bl	80017b8 <ssd1306_WriteString>

      ssd1306_UpdateScreen();
 800125a:	f000 f99d 	bl	8001598 <ssd1306_UpdateScreen>
      HAL_Delay(250);
 800125e:	20fa      	movs	r0, #250	; 0xfa
 8001260:	f000 fd2e 	bl	8001cc0 <HAL_Delay>
      ssd1306_Fill(Black);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f973 	bl	8001550 <ssd1306_Fill>
  {
 800126a:	e7be      	b.n	80011ea <main+0x26>
 800126c:	200002b8 	.word	0x200002b8
 8001270:	200002bc 	.word	0x200002bc
 8001274:	080083e0 	.word	0x080083e0
 8001278:	200002c0 	.word	0x200002c0
 800127c:	20000000 	.word	0x20000000
 8001280:	080083f0 	.word	0x080083f0

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	; 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fc1e 	bl	8003ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <SystemClock_Config+0xcc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <SystemClock_Config+0xcc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <SystemClock_Config+0xd0>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <SystemClock_Config+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f8:	23a8      	movs	r3, #168	; 0xa8
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001300:	2304      	movs	r3, #4
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f001 ff3f 	bl	800318c <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001314:	f000 f8a4 	bl	8001460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001324:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2105      	movs	r1, #5
 8001336:	4618      	mov	r0, r3
 8001338:	f002 f996 	bl	8003668 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001342:	f000 f88d 	bl	8001460 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x50>)
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <MX_I2C1_Init+0x54>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_I2C1_Init+0x58>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001396:	f000 ff39 	bl	800220c <HAL_I2C_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a0:	f000 f85e 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000210 	.word	0x20000210
 80013ac:	40005400 	.word	0x40005400
 80013b0:	00061a80 	.word	0x00061a80

080013b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_I2C2_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_I2C2_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_I2C2_Init+0x50>)
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_I2C2_Init+0x58>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_I2C2_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_I2C2_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_I2C2_Init+0x50>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_I2C2_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_I2C2_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_I2C2_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_I2C2_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_I2C2_Init+0x50>)
 80013f2:	f000 ff0b 	bl	800220c <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 f830 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000264 	.word	0x20000264
 8001408:	40005800 	.word	0x40005800
 800140c:	00061a80 	.word	0x00061a80

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_GPIO_Init+0x4c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <MX_GPIO_Init+0x4c>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_GPIO_Init+0x4c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_GPIO_Init+0x4c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <MX_GPIO_Init+0x4c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_GPIO_Init+0x4c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <ssd1306_WriteCommand>:

extern I2C_HandleTypeDef hi2c2;

//I2C write command
void ssd1306_WriteCommand(uint8_t command)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af04      	add	r7, sp, #16
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001476:	230a      	movs	r3, #10
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	2200      	movs	r2, #0
 8001486:	2178      	movs	r1, #120	; 0x78
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <ssd1306_WriteCommand+0x2c>)
 800148a:	f001 f803 	bl	8002494 <HAL_I2C_Mem_Write>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000264 	.word	0x20000264

0800149c <ssd1306_Init>:


//Initializing SSD1306 chip
uint8_t ssd1306_Init(void)
{	
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 80014a0:	2064      	movs	r0, #100	; 0x64
 80014a2:	f000 fc0d 	bl	8001cc0 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80014a6:	20ae      	movs	r0, #174	; 0xae
 80014a8:	f7ff ffe0 	bl	800146c <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80014ac:	2020      	movs	r0, #32
 80014ae:	f7ff ffdd 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ffda 	bl	800146c <ssd1306_WriteCommand>


	ssd1306_WriteCommand(0x81); //--set contrast control register
 80014b8:	2081      	movs	r0, #129	; 0x81
 80014ba:	f7ff ffd7 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0);
 80014be:	20f0      	movs	r0, #240	; 0xf0
 80014c0:	f7ff ffd4 	bl	800146c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA6); //--set normal display
 80014c4:	20a6      	movs	r0, #166	; 0xa6
 80014c6:	f7ff ffd1 	bl	800146c <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80014ca:	20a8      	movs	r0, #168	; 0xa8
 80014cc:	f7ff ffce 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SSD1306_HEIGHT - 1); //
 80014d0:	201f      	movs	r0, #31
 80014d2:	f7ff ffcb 	bl	800146c <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014d6:	20a4      	movs	r0, #164	; 0xa4
 80014d8:	f7ff ffc8 	bl	800146c <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD3); //-set display offset
 80014dc:	20d3      	movs	r0, #211	; 0xd3
 80014de:	f7ff ffc5 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff ffc2 	bl	800146c <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014e8:	20d5      	movs	r0, #213	; 0xd5
 80014ea:	f7ff ffbf 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x80); //--set divide ratio
 80014ee:	2080      	movs	r0, #128	; 0x80
 80014f0:	f7ff ffbc 	bl	800146c <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014f4:	20d9      	movs	r0, #217	; 0xd9
 80014f6:	f7ff ffb9 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80014fa:	2022      	movs	r0, #34	; 0x22
 80014fc:	f7ff ffb6 	bl	800146c <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001500:	20da      	movs	r0, #218	; 0xda
 8001502:	f7ff ffb3 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x02);	//128*32
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff ffb0 	bl	800146c <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800150c:	20db      	movs	r0, #219	; 0xdb
 800150e:	f7ff ffad 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); 
 8001512:	2040      	movs	r0, #64	; 0x40
 8001514:	f7ff ffaa 	bl	800146c <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001518:	208d      	movs	r0, #141	; 0x8d
 800151a:	f7ff ffa7 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800151e:	2014      	movs	r0, #20
 8001520:	f7ff ffa4 	bl	800146c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001524:	20af      	movs	r0, #175	; 0xaf
 8001526:	f7ff ffa1 	bl	800146c <ssd1306_WriteCommand>
	
	/* Clear screen */
	ssd1306_Fill(Black);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f810 	bl	8001550 <ssd1306_Fill>
	
	/* Update screen */
	ssd1306_UpdateScreen();
 8001530:	f000 f832 	bl	8001598 <ssd1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <ssd1306_Init+0xb0>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <ssd1306_Init+0xb0>)
 800153c:	2200      	movs	r2, #0
 800153e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <ssd1306_Init+0xb0>)
 8001542:	2201      	movs	r2, #1
 8001544:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200004dc 	.word	0x200004dc

08001550 <ssd1306_Fill>:


//Fill screen with black or white
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00d      	b.n	800157c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <ssd1306_Fill+0x1a>
 8001566:	2100      	movs	r1, #0
 8001568:	e000      	b.n	800156c <ssd1306_Fill+0x1c>
 800156a:	21ff      	movs	r1, #255	; 0xff
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <ssd1306_Fill+0x44>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3301      	adds	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001582:	d3ed      	bcc.n	8001560 <ssd1306_Fill+0x10>
	}
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200002dc 	.word	0x200002dc

08001598 <ssd1306_UpdateScreen>:


//Update RAM to screen
void ssd1306_UpdateScreen(void) 
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e01d      	b.n	80015e0 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	3b50      	subs	r3, #80	; 0x50
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff5e 	bl	800146c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ff5b 	bl	800146c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80015b6:	2010      	movs	r0, #16
 80015b8:	f7ff ff58 	bl	800146c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c2,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <ssd1306_UpdateScreen+0x58>)
 80015c2:	4413      	add	r3, r2
 80015c4:	2264      	movs	r2, #100	; 0x64
 80015c6:	9202      	str	r2, [sp, #8]
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	2178      	movs	r1, #120	; 0x78
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <ssd1306_UpdateScreen+0x5c>)
 80015d6:	f000 ff5d 	bl	8002494 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3301      	adds	r3, #1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b07      	cmp	r3, #7
 80015e4:	d9de      	bls.n	80015a4 <ssd1306_UpdateScreen+0xc>
	}
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200002dc 	.word	0x200002dc
 80015f4:	20000264 	.word	0x20000264

080015f8 <ssd1306_DrawPixel>:
- x: x coordinate 0-127
- y: y coordinate 0-31
- color: Black/White
*/
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	460b      	mov	r3, r1
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	4613      	mov	r3, r2
 8001608:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db48      	blt.n	80016a4 <ssd1306_DrawPixel+0xac>
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	2b1f      	cmp	r3, #31
 8001616:	d845      	bhi.n	80016a4 <ssd1306_DrawPixel+0xac>
	{
		return;
	}
	
	if (SSD1306.Inverted) 
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <ssd1306_DrawPixel+0xb8>)
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001620:	797b      	ldrb	r3, [r7, #5]
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	717b      	strb	r3, [r7, #5]
	}
	
	if (color == White)
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d11a      	bne.n	800166a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	b2d8      	uxtb	r0, r3
 800163c:	4603      	mov	r3, r0
 800163e:	01db      	lsls	r3, r3, #7
 8001640:	4413      	add	r3, r2
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <ssd1306_DrawPixel+0xbc>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	b25a      	sxtb	r2, r3
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b259      	sxtb	r1, r3
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	4603      	mov	r3, r0
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	4413      	add	r3, r2
 8001662:	b2c9      	uxtb	r1, r1
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <ssd1306_DrawPixel+0xbc>)
 8001666:	54d1      	strb	r1, [r2, r3]
 8001668:	e01d      	b.n	80016a6 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	b2d8      	uxtb	r0, r3
 8001672:	4603      	mov	r3, r0
 8001674:	01db      	lsls	r3, r3, #7
 8001676:	4413      	add	r3, r2
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <ssd1306_DrawPixel+0xbc>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	b25a      	sxtb	r2, r3
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	b25b      	sxtb	r3, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4013      	ands	r3, r2
 8001692:	b259      	sxtb	r1, r3
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	4603      	mov	r3, r0
 8001698:	01db      	lsls	r3, r3, #7
 800169a:	4413      	add	r3, r2
 800169c:	b2c9      	uxtb	r1, r1
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <ssd1306_DrawPixel+0xbc>)
 80016a0:	54d1      	strb	r1, [r2, r3]
 80016a2:	e000      	b.n	80016a6 <ssd1306_DrawPixel+0xae>
		return;
 80016a4:	bf00      	nop
	}
}
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	200004dc 	.word	0x200004dc
 80016b4:	200002dc 	.word	0x200002dc

080016b8 <ssd1306_WriteChar>:
- ch: character to be displayed
- Font: font selection Font_7x10/Font_11x18/Font_16x26
- color: Black/White
*/
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	1d38      	adds	r0, r7, #4
 80016c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80016c6:	461a      	mov	r2, r3
 80016c8:	4623      	mov	r3, r4
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	4613      	mov	r3, r2
 80016ce:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	793b      	ldrb	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	2b7f      	cmp	r3, #127	; 0x7f
 80016dc:	dc06      	bgt.n	80016ec <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 80016e0:	885b      	ldrh	r3, [r3, #2]
 80016e2:	461a      	mov	r2, r3
 80016e4:	797b      	ldrb	r3, [r7, #5]
 80016e6:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80016e8:	2b1f      	cmp	r3, #31
 80016ea:	dd01      	ble.n	80016f0 <ssd1306_WriteChar+0x38>
	{

		return 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e05d      	b.n	80017ac <ssd1306_WriteChar+0xf4>
	}
	

	for (i = 0; i < Font.FontHeight; i++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	e04c      	b.n	8001790 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3b20      	subs	r3, #32
 80016fc:	7979      	ldrb	r1, [r7, #5]
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4619      	mov	r1, r3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	e034      	b.n	8001780 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d012      	beq.n	800174c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2d8      	uxtb	r0, r3
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 8001736:	885b      	ldrh	r3, [r3, #2]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4413      	add	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	7bba      	ldrb	r2, [r7, #14]
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff ff57 	bl	80015f8 <ssd1306_DrawPixel>
 800174a:	e016      	b.n	800177a <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b2d8      	uxtb	r0, r3
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4413      	add	r3, r2
 8001766:	b2d9      	uxtb	r1, r3
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	f7ff ff3f 	bl	80015f8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	3301      	adds	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	793b      	ldrb	r3, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4293      	cmp	r3, r2
 8001788:	d3c5      	bcc.n	8001716 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3301      	adds	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	797b      	ldrb	r3, [r7, #5]
 8001792:	461a      	mov	r2, r3
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	4293      	cmp	r3, r2
 8001798:	d3ad      	bcc.n	80016f6 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	

	SSD1306.CurrentX += Font.FontWidth;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	793b      	ldrb	r3, [r7, #4]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <ssd1306_WriteChar+0xfc>)
 80017a8:	801a      	strh	r2, [r3, #0]
	
	return ch;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3724      	adds	r7, #36	; 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	200004dc 	.word	0x200004dc

080017b8 <ssd1306_WriteString>:
- str: pointer to string
- Font: font selection Font_7x10/Font_11x18/Font_16x26
- color: Black/White
*/
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	1d38      	adds	r0, r7, #4
 80017c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80017c6:	70fb      	strb	r3, [r7, #3]

	while (*str) 
 80017c8:	e012      	b.n	80017f0 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	7818      	ldrb	r0, [r3, #0]
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	1d3a      	adds	r2, r7, #4
 80017d2:	ca06      	ldmia	r2, {r1, r2}
 80017d4:	f7ff ff70 	bl	80016b8 <ssd1306_WriteChar>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d002      	beq.n	80017ea <ssd1306_WriteString+0x32>
		{
			
			return *str;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	e008      	b.n	80017fc <ssd1306_WriteString+0x44>
		}
		
		str++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
	while (*str) 
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e8      	bne.n	80017ca <ssd1306_WriteString+0x12>
	}
	
	return *str;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	781b      	ldrb	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <ssd1306_SetCursor>:


//Set cursor coordinate
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	460a      	mov	r2, r1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <ssd1306_SetCursor+0x2c>)
 800181a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <ssd1306_SetCursor+0x2c>)
 8001822:	805a      	strh	r2, [r3, #2]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	200004dc 	.word	0x200004dc

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_MspInit+0x4c>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x4c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_I2C_MspInit+0xe8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12c      	bne.n	8001900 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_I2C_MspInit+0xec>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a30      	ldr	r2, [pc, #192]	; (8001970 <HAL_I2C_MspInit+0xec>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_I2C_MspInit+0xec>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c2:	23c0      	movs	r3, #192	; 0xc0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c6:	2312      	movs	r3, #18
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d2:	2304      	movs	r3, #4
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4825      	ldr	r0, [pc, #148]	; (8001974 <HAL_I2C_MspInit+0xf0>)
 80018de:	f000 faf9 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_I2C_MspInit+0xec>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <HAL_I2C_MspInit+0xec>)
 80018ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_I2C_MspInit+0xec>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018fe:	e031      	b.n	8001964 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_I2C_MspInit+0xf4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12c      	bne.n	8001964 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_I2C_MspInit+0xec>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_I2C_MspInit+0xec>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_I2C_MspInit+0xec>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001926:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001938:	2304      	movs	r3, #4
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <HAL_I2C_MspInit+0xf0>)
 8001944:	f000 fac6 	bl	8001ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_I2C_MspInit+0xec>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_I2C_MspInit+0xec>)
 8001952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_I2C_MspInit+0xec>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40005400 	.word	0x40005400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400
 8001978:	40005800 	.word	0x40005800

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <NMI_Handler+0x4>

08001982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler+0x4>

0800198e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler+0x4>

0800199a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c8:	f000 f95a 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
	return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_kill>:

int _kill(int pid, int sig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ea:	f002 f849 	bl	8003a80 <__errno>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2216      	movs	r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
	return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_exit>:

void _exit (int status)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe7 	bl	80019e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a12:	e7fe      	b.n	8001a12 <_exit+0x12>

08001a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e00a      	b.n	8001a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a26:	f3af 8000 	nop.w
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	b2ca      	uxtb	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbf0      	blt.n	8001a26 <_read+0x12>
	}

return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e009      	b.n	8001a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf1      	blt.n	8001a60 <_write+0x12>
	}
	return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_close>:

int _close(int file)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aae:	605a      	str	r2, [r3, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_isatty>:

int _isatty(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f001 ffae 	bl	8003a80 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20020000 	.word	0x20020000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	200004e4 	.word	0x200004e4
 8001b58:	20000500 	.word	0x20000500

08001b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <SystemInit+0x28>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <SystemInit+0x28>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SystemInit+0x28>)
 8001b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b76:	609a      	str	r2, [r3, #8]
#endif
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b8e:	e003      	b.n	8001b98 <LoopCopyDataInit>

08001b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b96:	3104      	adds	r1, #4

08001b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba0:	d3f6      	bcc.n	8001b90 <CopyDataInit>
  ldr  r2, =_sbss
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba4:	e002      	b.n	8001bac <LoopFillZerobss>

08001ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba8:	f842 3b04 	str.w	r3, [r2], #4

08001bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb0:	d3f9      	bcc.n	8001ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb2:	f7ff ffd3 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f001 ff69 	bl	8003a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7ff fb03 	bl	80011c4 <main>
  bx  lr    
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bc4:	0800903c 	.word	0x0800903c
  ldr  r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bcc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001bd0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001bd4:	200004fc 	.word	0x200004fc

08001bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_Init+0x40>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_Init+0x40>)
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x40>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f931 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fe10 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f93b 	bl	8001eba <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f911 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000010 	.word	0x20000010
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	200004e8 	.word	0x200004e8

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200004e8 	.word	0x200004e8

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000010 	.word	0x20000010

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff47 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff5c 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff8e 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5d 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffb0 	bl	8001e28 <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e16b      	b.n	80021c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 815a 	bne.w	80021c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d00b      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f22:	2b11      	cmp	r3, #17
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d130      	bne.n	8001f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0201 	and.w	r2, r3, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0xfc>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80b4 	beq.w	80021c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a5f      	ldr	r2, [pc, #380]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a5b      	ldr	r2, [pc, #364]	; (80021e4 <HAL_GPIO_Init+0x310>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x314>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x318>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x31c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x320>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x324>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x328>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_GPIO_Init+0x330>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x20a>
 80020da:	2307      	movs	r3, #7
 80020dc:	e00e      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00c      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00a      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e6:	2305      	movs	r3, #5
 80020e8:	e008      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ea:	2304      	movs	r3, #4
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020fa:	2300      	movs	r3, #0
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210c:	4935      	ldr	r1, [pc, #212]	; (80021e4 <HAL_GPIO_Init+0x310>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_GPIO_Init+0x334>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_GPIO_Init+0x334>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_GPIO_Init+0x334>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_GPIO_Init+0x334>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	f67f ae90 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40021400 	.word	0x40021400
 8002200:	40021800 	.word	0x40021800
 8002204:	40021c00 	.word	0x40021c00
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e12b      	b.n	8002476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fb26 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002270:	f001 fbf2 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a81      	ldr	r2, [pc, #516]	; (8002480 <HAL_I2C_Init+0x274>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d807      	bhi.n	8002290 <HAL_I2C_Init+0x84>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a80      	ldr	r2, [pc, #512]	; (8002484 <HAL_I2C_Init+0x278>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e006      	b.n	800229e <HAL_I2C_Init+0x92>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a7d      	ldr	r2, [pc, #500]	; (8002488 <HAL_I2C_Init+0x27c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e7      	b.n	8002476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a78      	ldr	r2, [pc, #480]	; (800248c <HAL_I2C_Init+0x280>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0c9b      	lsrs	r3, r3, #18
 80022b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	; (8002480 <HAL_I2C_Init+0x274>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d802      	bhi.n	80022e0 <HAL_I2C_Init+0xd4>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	e009      	b.n	80022f4 <HAL_I2C_Init+0xe8>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	4a69      	ldr	r2, [pc, #420]	; (8002490 <HAL_I2C_Init+0x284>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	3301      	adds	r3, #1
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	495c      	ldr	r1, [pc, #368]	; (8002480 <HAL_I2C_Init+0x274>)
 8002310:	428b      	cmp	r3, r1
 8002312:	d819      	bhi.n	8002348 <HAL_I2C_Init+0x13c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e59      	subs	r1, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002328:	400b      	ands	r3, r1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_I2C_Init+0x138>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1e59      	subs	r1, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002342:	e051      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 8002344:	2304      	movs	r3, #4
 8002346:	e04f      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d111      	bne.n	8002374 <HAL_I2C_Init+0x168>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e012      	b.n	800239a <HAL_I2C_Init+0x18e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x196>
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10e      	bne.n	80023c8 <HAL_I2C_Init+0x1bc>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e58      	subs	r0, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	440b      	add	r3, r1
 80023b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6809      	ldr	r1, [r1, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6911      	ldr	r1, [r2, #16]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68d2      	ldr	r2, [r2, #12]
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	430b      	orrs	r3, r1
 800242a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	000186a0 	.word	0x000186a0
 8002484:	001e847f 	.word	0x001e847f
 8002488:	003d08ff 	.word	0x003d08ff
 800248c:	431bde83 	.word	0x431bde83
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ae:	f7ff fbfb 	bl	8001ca8 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	f040 80d9 	bne.w	8002674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2319      	movs	r3, #25
 80024c8:	2201      	movs	r2, #1
 80024ca:	496d      	ldr	r1, [pc, #436]	; (8002680 <HAL_I2C_Mem_Write+0x1ec>)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fc7f 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Write+0x56>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0c5      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d007      	beq.n	8002510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	; 0x21
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_I2C_Mem_Write+0x1f0>)
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	88f8      	ldrh	r0, [r7, #6]
 8002554:	893a      	ldrh	r2, [r7, #8]
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4603      	mov	r3, r0
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fab6 	bl	8002ad4 <I2C_RequestMemoryWrite>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d052      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e081      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fd00 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Mem_Write+0x180>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1aa      	bne.n	8002572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fcec 	bl	8002ffe <I2C_WaitOnBTFFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e016      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7ff fb01 	bl	8001ca8 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 8208 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2319      	movs	r3, #25
 80026bc:	2201      	movs	r2, #1
 80026be:	497b      	ldr	r1, [pc, #492]	; (80028ac <HAL_I2C_Mem_Read+0x224>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fb85 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	e1fb      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x56>
 80026da:	2302      	movs	r3, #2
 80026dc:	e1f4      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d007      	beq.n	8002704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2222      	movs	r2, #34	; 0x22
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_I2C_Mem_Read+0x228>)
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002746:	88f8      	ldrh	r0, [r7, #6]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa52 	bl	8002c00 <I2C_RequestMemoryRead>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1b0      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e184      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11b      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e164      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d11b      	bne.n	8002816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	e144      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800282c:	e138      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	f200 80f1 	bhi.w	8002a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d123      	bne.n	8002888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fc1b 	bl	8003080 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e139      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002886:	e10b      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d14e      	bne.n	800292e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	2200      	movs	r2, #0
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa98 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e10e      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292c:	e0b8      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	4966      	ldr	r1, [pc, #408]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa49 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0bf      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2200      	movs	r2, #0
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa1b 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e091      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a18:	e042      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fb2e 	bl	8003080 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e04c      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d118      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f aec2 	bne.w	800282e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	00010004 	.word	0x00010004

08002ad4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f960 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b24:	d103      	bne.n	8002b2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e05f      	b.n	8002bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	492d      	ldr	r1, [pc, #180]	; (8002bfc <I2C_RequestMemoryWrite+0x128>)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f998 	bl	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e04c      	b.n	8002bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa02 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d107      	bne.n	8002b96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e02b      	b.n	8002bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba0:	893b      	ldrh	r3, [r7, #8]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	e021      	b.n	8002bf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	6a39      	ldr	r1, [r7, #32]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f9dc 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d107      	bne.n	8002be2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e005      	b.n	8002bf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	00010002 	.word	0x00010002

08002c00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f8c2 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c60:	d103      	bne.n	8002c6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0aa      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	6a3a      	ldr	r2, [r7, #32]
 8002c82:	4952      	ldr	r1, [pc, #328]	; (8002dcc <I2C_RequestMemoryRead+0x1cc>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f8fa 	bl	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e097      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	6a39      	ldr	r1, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f964 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d107      	bne.n	8002cd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e076      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cdc:	893b      	ldrh	r3, [r7, #8]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]
 8002ce6:	e021      	b.n	8002d2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f93e 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d107      	bne.n	8002d1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e050      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d22:	893b      	ldrh	r3, [r7, #8]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2e:	6a39      	ldr	r1, [r7, #32]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f923 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d107      	bne.n	8002d54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e035      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f82b 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8e:	d103      	bne.n	8002d98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e013      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	6a3a      	ldr	r2, [r7, #32]
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <I2C_RequestMemoryRead+0x1cc>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f863 	bl	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	00010002 	.word	0x00010002

08002dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de0:	e025      	b.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d021      	beq.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe ff5d 	bl	8001ca8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e023      	b.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10d      	bne.n	8002e54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	e00c      	b.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d0b6      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8c:	e051      	b.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9c:	d123      	bne.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0204 	orr.w	r2, r3, #4
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e046      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d021      	beq.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe fedb 	bl	8001ca8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e020      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10c      	bne.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e00b      	b.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d18d      	bne.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f88:	e02d      	b.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f8ce 	bl	800312c <I2C_IsAcknowledgeFailed>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02d      	b.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d021      	beq.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe fe81 	bl	8001ca8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d116      	bne.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e007      	b.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d1ca      	bne.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300a:	e02d      	b.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f88d 	bl	800312c <I2C_IsAcknowledgeFailed>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e02d      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d021      	beq.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fe fe40 	bl	8001ca8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d116      	bne.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d1ca      	bne.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800308c:	e042      	b.n	8003114 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b10      	cmp	r3, #16
 800309a:	d119      	bne.n	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0210 	mvn.w	r2, #16
 80030a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e029      	b.n	8003124 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d0:	f7fe fdea 	bl	8001ca8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e007      	b.n	8003124 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	d1b5      	bne.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d11b      	bne.n	800317c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800314c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0204 	orr.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e25e      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d075      	beq.n	8003296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4b7e      	ldr	r3, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05b      	beq.n	8003294 <HAL_RCC_OscConfig+0x108>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d157      	bne.n	8003294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e239      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x74>
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6f      	ldr	r2, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a68      	ldr	r2, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe fd30 	bl	8001ca8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe fd2c 	bl	8001ca8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1fe      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xc0>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fd1c 	bl	8001ca8 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fd18 	bl	8001ca8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ea      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1be      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fe fcd1 	bl	8001ca8 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe fccd 	bl	8001ca8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e19f      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fcb0 	bl	8001ca8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe fcac 	bl	8001ca8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e17e      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe fc90 	bl	8001ca8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe fc8c 	bl	8001ca8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e15e      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x200>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7fe fc79 	bl	8001ca8 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7fe fc75 	bl	8001ca8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e147      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7c      	ldr	r2, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a73      	ldr	r2, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fe fc35 	bl	8001ca8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe fc31 	bl	8001ca8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e103      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x2ea>
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x30c>
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5b      	ldr	r2, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a57      	ldr	r2, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fbf6 	bl	8001ca8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fbf2 	bl	8001ca8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0c2      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fbe0 	bl	8001ca8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fbdc 	bl	8001ca8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0ac      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8098 	beq.w	800365a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d05c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d141      	bne.n	80035c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe fbb0 	bl	8001ca8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe fbac 	bl	8001ca8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e07e      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	491b      	ldr	r1, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fb85 	bl	8001ca8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe fb81 	bl	8001ca8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e053      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x416>
 80035c0:	e04b      	b.n	800365a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fb6e 	bl	8001ca8 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fb6a 	bl	8001ca8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e03c      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
 80035ee:	e034      	b.n	800365a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e02f      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <HAL_RCC_OscConfig+0x4d8>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	429a      	cmp	r2, r3
 800361a:	d11c      	bne.n	8003656 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d115      	bne.n	8003656 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003636:	4293      	cmp	r3, r2
 8003638:	d10d      	bne.n	8003656 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0cc      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b68      	ldr	r3, [pc, #416]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d90c      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0b8      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036bc:	4b59      	ldr	r3, [pc, #356]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e0:	4b50      	ldr	r3, [pc, #320]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	494d      	ldr	r1, [pc, #308]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d044      	beq.n	8003788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d003      	beq.n	8003726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003722:	2b03      	cmp	r3, #3
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e067      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4934      	ldr	r1, [pc, #208]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003758:	f7fe faa6 	bl	8001ca8 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fe faa2 	bl	8001ca8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e04f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d20c      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e032      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4916      	ldr	r1, [pc, #88]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ee:	f000 f821 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037f2:	4602      	mov	r2, r0
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	490a      	ldr	r1, [pc, #40]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	5ccb      	ldrb	r3, [r1, r3]
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fa06 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023c00 	.word	0x40023c00
 8003824:	40023800 	.word	0x40023800
 8003828:	08008b6c 	.word	0x08008b6c
 800382c:	20000008 	.word	0x20000008
 8003830:	2000000c 	.word	0x2000000c

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003838:	b094      	sub	sp, #80	; 0x50
 800383a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	647b      	str	r3, [r7, #68]	; 0x44
 8003840:	2300      	movs	r3, #0
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	2300      	movs	r3, #0
 8003846:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800384c:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d00d      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x40>
 8003858:	2b08      	cmp	r3, #8
 800385a:	f200 80e1 	bhi.w	8003a20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x34>
 8003862:	2b04      	cmp	r3, #4
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x3a>
 8003866:	e0db      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b73      	ldr	r3, [pc, #460]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x204>)
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800386c:	e0db      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800386e:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003872:	e0d8      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387e:	4b6d      	ldr	r3, [pc, #436]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d063      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	2200      	movs	r2, #0
 8003892:	63bb      	str	r3, [r7, #56]	; 0x38
 8003894:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
 800389e:	2300      	movs	r3, #0
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
 80038a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	f04f 0000 	mov.w	r0, #0
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	0159      	lsls	r1, r3, #5
 80038b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b8:	0150      	lsls	r0, r2, #5
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4621      	mov	r1, r4
 80038c0:	1a51      	subs	r1, r2, r1
 80038c2:	6139      	str	r1, [r7, #16]
 80038c4:	4629      	mov	r1, r5
 80038c6:	eb63 0301 	sbc.w	r3, r3, r1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d8:	4659      	mov	r1, fp
 80038da:	018b      	lsls	r3, r1, #6
 80038dc:	4651      	mov	r1, sl
 80038de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e2:	4651      	mov	r1, sl
 80038e4:	018a      	lsls	r2, r1, #6
 80038e6:	4651      	mov	r1, sl
 80038e8:	ebb2 0801 	subs.w	r8, r2, r1
 80038ec:	4659      	mov	r1, fp
 80038ee:	eb63 0901 	sbc.w	r9, r3, r1
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003906:	4690      	mov	r8, r2
 8003908:	4699      	mov	r9, r3
 800390a:	4623      	mov	r3, r4
 800390c:	eb18 0303 	adds.w	r3, r8, r3
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	462b      	mov	r3, r5
 8003914:	eb49 0303 	adc.w	r3, r9, r3
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003926:	4629      	mov	r1, r5
 8003928:	024b      	lsls	r3, r1, #9
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003930:	4621      	mov	r1, r4
 8003932:	024a      	lsls	r2, r1, #9
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393a:	2200      	movs	r2, #0
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003944:	f7fd f9a0 	bl	8000c88 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003950:	e058      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	2200      	movs	r2, #0
 800395a:	4618      	mov	r0, r3
 800395c:	4611      	mov	r1, r2
 800395e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800396c:	4642      	mov	r2, r8
 800396e:	464b      	mov	r3, r9
 8003970:	f04f 0000 	mov.w	r0, #0
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	0159      	lsls	r1, r3, #5
 800397a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397e:	0150      	lsls	r0, r2, #5
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4641      	mov	r1, r8
 8003986:	ebb2 0a01 	subs.w	sl, r2, r1
 800398a:	4649      	mov	r1, r9
 800398c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800399c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a4:	ebb2 040a 	subs.w	r4, r2, sl
 80039a8:	eb63 050b 	sbc.w	r5, r3, fp
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	00eb      	lsls	r3, r5, #3
 80039b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ba:	00e2      	lsls	r2, r4, #3
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	18e3      	adds	r3, r4, r3
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	464b      	mov	r3, r9
 80039c8:	eb45 0303 	adc.w	r3, r5, r3
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039da:	4629      	mov	r1, r5
 80039dc:	028b      	lsls	r3, r1, #10
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e4:	4621      	mov	r1, r4
 80039e6:	028a      	lsls	r2, r1, #10
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	61fa      	str	r2, [r7, #28]
 80039f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f8:	f7fd f946 	bl	8000c88 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3750      	adds	r7, #80	; 0x50
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	007a1200 	.word	0x007a1200

08003a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000008 	.word	0x20000008

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a5c:	f7ff fff0 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0a9b      	lsrs	r3, r3, #10
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08008b7c 	.word	0x08008b7c

08003a80 <__errno>:
 8003a80:	4b01      	ldr	r3, [pc, #4]	; (8003a88 <__errno+0x8>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000014 	.word	0x20000014

08003a8c <__libc_init_array>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ac4 <__libc_init_array+0x38>)
 8003a90:	4c0d      	ldr	r4, [pc, #52]	; (8003ac8 <__libc_init_array+0x3c>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	2600      	movs	r6, #0
 8003a98:	42a6      	cmp	r6, r4
 8003a9a:	d109      	bne.n	8003ab0 <__libc_init_array+0x24>
 8003a9c:	4d0b      	ldr	r5, [pc, #44]	; (8003acc <__libc_init_array+0x40>)
 8003a9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ad0 <__libc_init_array+0x44>)
 8003aa0:	f004 fc92 	bl	80083c8 <_init>
 8003aa4:	1b64      	subs	r4, r4, r5
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	2600      	movs	r6, #0
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d105      	bne.n	8003aba <__libc_init_array+0x2e>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab4:	4798      	blx	r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7ee      	b.n	8003a98 <__libc_init_array+0xc>
 8003aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abe:	4798      	blx	r3
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7f2      	b.n	8003aaa <__libc_init_array+0x1e>
 8003ac4:	08009034 	.word	0x08009034
 8003ac8:	08009034 	.word	0x08009034
 8003acc:	08009034 	.word	0x08009034
 8003ad0:	08009038 	.word	0x08009038

08003ad4 <memset>:
 8003ad4:	4402      	add	r2, r0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <memset+0xa>
 8003adc:	4770      	bx	lr
 8003ade:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae2:	e7f9      	b.n	8003ad8 <memset+0x4>

08003ae4 <__cvt>:
 8003ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	ec55 4b10 	vmov	r4, r5, d0
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	460e      	mov	r6, r1
 8003af0:	4619      	mov	r1, r3
 8003af2:	462b      	mov	r3, r5
 8003af4:	bfbb      	ittet	lt
 8003af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003afa:	461d      	movlt	r5, r3
 8003afc:	2300      	movge	r3, #0
 8003afe:	232d      	movlt	r3, #45	; 0x2d
 8003b00:	700b      	strb	r3, [r1, #0]
 8003b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b08:	4691      	mov	r9, r2
 8003b0a:	f023 0820 	bic.w	r8, r3, #32
 8003b0e:	bfbc      	itt	lt
 8003b10:	4622      	movlt	r2, r4
 8003b12:	4614      	movlt	r4, r2
 8003b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b18:	d005      	beq.n	8003b26 <__cvt+0x42>
 8003b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b1e:	d100      	bne.n	8003b22 <__cvt+0x3e>
 8003b20:	3601      	adds	r6, #1
 8003b22:	2102      	movs	r1, #2
 8003b24:	e000      	b.n	8003b28 <__cvt+0x44>
 8003b26:	2103      	movs	r1, #3
 8003b28:	ab03      	add	r3, sp, #12
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	ab02      	add	r3, sp, #8
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	ec45 4b10 	vmov	d0, r4, r5
 8003b34:	4653      	mov	r3, sl
 8003b36:	4632      	mov	r2, r6
 8003b38:	f001 fdae 	bl	8005698 <_dtoa_r>
 8003b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b40:	4607      	mov	r7, r0
 8003b42:	d102      	bne.n	8003b4a <__cvt+0x66>
 8003b44:	f019 0f01 	tst.w	r9, #1
 8003b48:	d022      	beq.n	8003b90 <__cvt+0xac>
 8003b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b4e:	eb07 0906 	add.w	r9, r7, r6
 8003b52:	d110      	bne.n	8003b76 <__cvt+0x92>
 8003b54:	783b      	ldrb	r3, [r7, #0]
 8003b56:	2b30      	cmp	r3, #48	; 0x30
 8003b58:	d10a      	bne.n	8003b70 <__cvt+0x8c>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7fc ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b66:	b918      	cbnz	r0, 8003b70 <__cvt+0x8c>
 8003b68:	f1c6 0601 	rsb	r6, r6, #1
 8003b6c:	f8ca 6000 	str.w	r6, [sl]
 8003b70:	f8da 3000 	ldr.w	r3, [sl]
 8003b74:	4499      	add	r9, r3
 8003b76:	2200      	movs	r2, #0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b82:	b108      	cbz	r0, 8003b88 <__cvt+0xa4>
 8003b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b88:	2230      	movs	r2, #48	; 0x30
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	454b      	cmp	r3, r9
 8003b8e:	d307      	bcc.n	8003ba0 <__cvt+0xbc>
 8003b90:	9b03      	ldr	r3, [sp, #12]
 8003b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b94:	1bdb      	subs	r3, r3, r7
 8003b96:	4638      	mov	r0, r7
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	b004      	add	sp, #16
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	9103      	str	r1, [sp, #12]
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e7f0      	b.n	8003b8a <__cvt+0xa6>

08003ba8 <__exponent>:
 8003ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003baa:	4603      	mov	r3, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	bfb8      	it	lt
 8003bb0:	4249      	neglt	r1, r1
 8003bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8003bb6:	bfb4      	ite	lt
 8003bb8:	222d      	movlt	r2, #45	; 0x2d
 8003bba:	222b      	movge	r2, #43	; 0x2b
 8003bbc:	2909      	cmp	r1, #9
 8003bbe:	7042      	strb	r2, [r0, #1]
 8003bc0:	dd2a      	ble.n	8003c18 <__exponent+0x70>
 8003bc2:	f10d 0407 	add.w	r4, sp, #7
 8003bc6:	46a4      	mov	ip, r4
 8003bc8:	270a      	movs	r7, #10
 8003bca:	46a6      	mov	lr, r4
 8003bcc:	460a      	mov	r2, r1
 8003bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8003bd6:	3530      	adds	r5, #48	; 0x30
 8003bd8:	2a63      	cmp	r2, #99	; 0x63
 8003bda:	f104 34ff 	add.w	r4, r4, #4294967295
 8003bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003be2:	4631      	mov	r1, r6
 8003be4:	dcf1      	bgt.n	8003bca <__exponent+0x22>
 8003be6:	3130      	adds	r1, #48	; 0x30
 8003be8:	f1ae 0502 	sub.w	r5, lr, #2
 8003bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003bf0:	1c44      	adds	r4, r0, #1
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4561      	cmp	r1, ip
 8003bf6:	d30a      	bcc.n	8003c0e <__exponent+0x66>
 8003bf8:	f10d 0209 	add.w	r2, sp, #9
 8003bfc:	eba2 020e 	sub.w	r2, r2, lr
 8003c00:	4565      	cmp	r5, ip
 8003c02:	bf88      	it	hi
 8003c04:	2200      	movhi	r2, #0
 8003c06:	4413      	add	r3, r2
 8003c08:	1a18      	subs	r0, r3, r0
 8003c0a:	b003      	add	sp, #12
 8003c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c16:	e7ed      	b.n	8003bf4 <__exponent+0x4c>
 8003c18:	2330      	movs	r3, #48	; 0x30
 8003c1a:	3130      	adds	r1, #48	; 0x30
 8003c1c:	7083      	strb	r3, [r0, #2]
 8003c1e:	70c1      	strb	r1, [r0, #3]
 8003c20:	1d03      	adds	r3, r0, #4
 8003c22:	e7f1      	b.n	8003c08 <__exponent+0x60>

08003c24 <_printf_float>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	ed2d 8b02 	vpush	{d8}
 8003c2c:	b08d      	sub	sp, #52	; 0x34
 8003c2e:	460c      	mov	r4, r1
 8003c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c34:	4616      	mov	r6, r2
 8003c36:	461f      	mov	r7, r3
 8003c38:	4605      	mov	r5, r0
 8003c3a:	f002 fe8b 	bl	8006954 <_localeconv_r>
 8003c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8003c42:	4650      	mov	r0, sl
 8003c44:	f7fc fac4 	bl	80001d0 <strlen>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	9305      	str	r3, [sp, #20]
 8003c50:	f8d8 3000 	ldr.w	r3, [r8]
 8003c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c58:	3307      	adds	r3, #7
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	f103 0208 	add.w	r2, r3, #8
 8003c62:	f8c8 2000 	str.w	r2, [r8]
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c76:	9307      	str	r3, [sp, #28]
 8003c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c7c:	ee08 0a10 	vmov	s16, r0
 8003c80:	4b9f      	ldr	r3, [pc, #636]	; (8003f00 <_printf_float+0x2dc>)
 8003c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c86:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8a:	f7fc ff4f 	bl	8000b2c <__aeabi_dcmpun>
 8003c8e:	bb88      	cbnz	r0, 8003cf4 <_printf_float+0xd0>
 8003c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c94:	4b9a      	ldr	r3, [pc, #616]	; (8003f00 <_printf_float+0x2dc>)
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	f7fc ff29 	bl	8000af0 <__aeabi_dcmple>
 8003c9e:	bb48      	cbnz	r0, 8003cf4 <_printf_float+0xd0>
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	f7fc ff18 	bl	8000adc <__aeabi_dcmplt>
 8003cac:	b110      	cbz	r0, 8003cb4 <_printf_float+0x90>
 8003cae:	232d      	movs	r3, #45	; 0x2d
 8003cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb4:	4b93      	ldr	r3, [pc, #588]	; (8003f04 <_printf_float+0x2e0>)
 8003cb6:	4894      	ldr	r0, [pc, #592]	; (8003f08 <_printf_float+0x2e4>)
 8003cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003cbc:	bf94      	ite	ls
 8003cbe:	4698      	movls	r8, r3
 8003cc0:	4680      	movhi	r8, r0
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	9b05      	ldr	r3, [sp, #20]
 8003cc8:	f023 0204 	bic.w	r2, r3, #4
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	f04f 0900 	mov.w	r9, #0
 8003cd2:	9700      	str	r7, [sp, #0]
 8003cd4:	4633      	mov	r3, r6
 8003cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 f9d8 	bl	8004090 <_printf_common>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	f040 8090 	bne.w	8003e06 <_printf_float+0x1e2>
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	b00d      	add	sp, #52	; 0x34
 8003cec:	ecbd 8b02 	vpop	{d8}
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	f7fc ff16 	bl	8000b2c <__aeabi_dcmpun>
 8003d00:	b140      	cbz	r0, 8003d14 <_printf_float+0xf0>
 8003d02:	464b      	mov	r3, r9
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfbc      	itt	lt
 8003d08:	232d      	movlt	r3, #45	; 0x2d
 8003d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d0e:	487f      	ldr	r0, [pc, #508]	; (8003f0c <_printf_float+0x2e8>)
 8003d10:	4b7f      	ldr	r3, [pc, #508]	; (8003f10 <_printf_float+0x2ec>)
 8003d12:	e7d1      	b.n	8003cb8 <_printf_float+0x94>
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d1a:	9206      	str	r2, [sp, #24]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	d13f      	bne.n	8003da0 <_printf_float+0x17c>
 8003d20:	2306      	movs	r3, #6
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	9b05      	ldr	r3, [sp, #20]
 8003d26:	6861      	ldr	r1, [r4, #4]
 8003d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	ab0a      	add	r3, sp, #40	; 0x28
 8003d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d36:	ab09      	add	r3, sp, #36	; 0x24
 8003d38:	ec49 8b10 	vmov	d0, r8, r9
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d44:	4628      	mov	r0, r5
 8003d46:	f7ff fecd 	bl	8003ae4 <__cvt>
 8003d4a:	9b06      	ldr	r3, [sp, #24]
 8003d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d4e:	2b47      	cmp	r3, #71	; 0x47
 8003d50:	4680      	mov	r8, r0
 8003d52:	d108      	bne.n	8003d66 <_printf_float+0x142>
 8003d54:	1cc8      	adds	r0, r1, #3
 8003d56:	db02      	blt.n	8003d5e <_printf_float+0x13a>
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	4299      	cmp	r1, r3
 8003d5c:	dd41      	ble.n	8003de2 <_printf_float+0x1be>
 8003d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d62:	fa5f fb8b 	uxtb.w	fp, fp
 8003d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d6a:	d820      	bhi.n	8003dae <_printf_float+0x18a>
 8003d6c:	3901      	subs	r1, #1
 8003d6e:	465a      	mov	r2, fp
 8003d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d74:	9109      	str	r1, [sp, #36]	; 0x24
 8003d76:	f7ff ff17 	bl	8003ba8 <__exponent>
 8003d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d7c:	1813      	adds	r3, r2, r0
 8003d7e:	2a01      	cmp	r2, #1
 8003d80:	4681      	mov	r9, r0
 8003d82:	6123      	str	r3, [r4, #16]
 8003d84:	dc02      	bgt.n	8003d8c <_printf_float+0x168>
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	07d2      	lsls	r2, r2, #31
 8003d8a:	d501      	bpl.n	8003d90 <_printf_float+0x16c>
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d09c      	beq.n	8003cd2 <_printf_float+0xae>
 8003d98:	232d      	movs	r3, #45	; 0x2d
 8003d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9e:	e798      	b.n	8003cd2 <_printf_float+0xae>
 8003da0:	9a06      	ldr	r2, [sp, #24]
 8003da2:	2a47      	cmp	r2, #71	; 0x47
 8003da4:	d1be      	bne.n	8003d24 <_printf_float+0x100>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1bc      	bne.n	8003d24 <_printf_float+0x100>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e7b9      	b.n	8003d22 <_printf_float+0xfe>
 8003dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003db2:	d118      	bne.n	8003de6 <_printf_float+0x1c2>
 8003db4:	2900      	cmp	r1, #0
 8003db6:	6863      	ldr	r3, [r4, #4]
 8003db8:	dd0b      	ble.n	8003dd2 <_printf_float+0x1ae>
 8003dba:	6121      	str	r1, [r4, #16]
 8003dbc:	b913      	cbnz	r3, 8003dc4 <_printf_float+0x1a0>
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	07d0      	lsls	r0, r2, #31
 8003dc2:	d502      	bpl.n	8003dca <_printf_float+0x1a6>
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	6123      	str	r3, [r4, #16]
 8003dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dcc:	f04f 0900 	mov.w	r9, #0
 8003dd0:	e7de      	b.n	8003d90 <_printf_float+0x16c>
 8003dd2:	b913      	cbnz	r3, 8003dda <_printf_float+0x1b6>
 8003dd4:	6822      	ldr	r2, [r4, #0]
 8003dd6:	07d2      	lsls	r2, r2, #31
 8003dd8:	d501      	bpl.n	8003dde <_printf_float+0x1ba>
 8003dda:	3302      	adds	r3, #2
 8003ddc:	e7f4      	b.n	8003dc8 <_printf_float+0x1a4>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e7f2      	b.n	8003dc8 <_printf_float+0x1a4>
 8003de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de8:	4299      	cmp	r1, r3
 8003dea:	db05      	blt.n	8003df8 <_printf_float+0x1d4>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	6121      	str	r1, [r4, #16]
 8003df0:	07d8      	lsls	r0, r3, #31
 8003df2:	d5ea      	bpl.n	8003dca <_printf_float+0x1a6>
 8003df4:	1c4b      	adds	r3, r1, #1
 8003df6:	e7e7      	b.n	8003dc8 <_printf_float+0x1a4>
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	bfd4      	ite	le
 8003dfc:	f1c1 0202 	rsble	r2, r1, #2
 8003e00:	2201      	movgt	r2, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	e7e0      	b.n	8003dc8 <_printf_float+0x1a4>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	055a      	lsls	r2, r3, #21
 8003e0a:	d407      	bmi.n	8003e1c <_printf_float+0x1f8>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	4642      	mov	r2, r8
 8003e10:	4631      	mov	r1, r6
 8003e12:	4628      	mov	r0, r5
 8003e14:	47b8      	blx	r7
 8003e16:	3001      	adds	r0, #1
 8003e18:	d12c      	bne.n	8003e74 <_printf_float+0x250>
 8003e1a:	e764      	b.n	8003ce6 <_printf_float+0xc2>
 8003e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e20:	f240 80e0 	bls.w	8003fe4 <_printf_float+0x3c0>
 8003e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f7fc fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d034      	beq.n	8003e9e <_printf_float+0x27a>
 8003e34:	4a37      	ldr	r2, [pc, #220]	; (8003f14 <_printf_float+0x2f0>)
 8003e36:	2301      	movs	r3, #1
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f43f af51 	beq.w	8003ce6 <_printf_float+0xc2>
 8003e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	db02      	blt.n	8003e52 <_printf_float+0x22e>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	07d8      	lsls	r0, r3, #31
 8003e50:	d510      	bpl.n	8003e74 <_printf_float+0x250>
 8003e52:	ee18 3a10 	vmov	r3, s16
 8003e56:	4652      	mov	r2, sl
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f af41 	beq.w	8003ce6 <_printf_float+0xc2>
 8003e64:	f04f 0800 	mov.w	r8, #0
 8003e68:	f104 091a 	add.w	r9, r4, #26
 8003e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4543      	cmp	r3, r8
 8003e72:	dc09      	bgt.n	8003e88 <_printf_float+0x264>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	f100 8105 	bmi.w	8004086 <_printf_float+0x462>
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e80:	4298      	cmp	r0, r3
 8003e82:	bfb8      	it	lt
 8003e84:	4618      	movlt	r0, r3
 8003e86:	e730      	b.n	8003cea <_printf_float+0xc6>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	464a      	mov	r2, r9
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f af27 	beq.w	8003ce6 <_printf_float+0xc2>
 8003e98:	f108 0801 	add.w	r8, r8, #1
 8003e9c:	e7e6      	b.n	8003e6c <_printf_float+0x248>
 8003e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dc39      	bgt.n	8003f18 <_printf_float+0x2f4>
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <_printf_float+0x2f0>)
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f43f af19 	beq.w	8003ce6 <_printf_float+0xc2>
 8003eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	d102      	bne.n	8003ec2 <_printf_float+0x29e>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07d9      	lsls	r1, r3, #31
 8003ec0:	d5d8      	bpl.n	8003e74 <_printf_float+0x250>
 8003ec2:	ee18 3a10 	vmov	r3, s16
 8003ec6:	4652      	mov	r2, sl
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b8      	blx	r7
 8003ece:	3001      	adds	r0, #1
 8003ed0:	f43f af09 	beq.w	8003ce6 <_printf_float+0xc2>
 8003ed4:	f04f 0900 	mov.w	r9, #0
 8003ed8:	f104 0a1a 	add.w	sl, r4, #26
 8003edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ede:	425b      	negs	r3, r3
 8003ee0:	454b      	cmp	r3, r9
 8003ee2:	dc01      	bgt.n	8003ee8 <_printf_float+0x2c4>
 8003ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee6:	e792      	b.n	8003e0e <_printf_float+0x1ea>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4652      	mov	r2, sl
 8003eec:	4631      	mov	r1, r6
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f43f aef7 	beq.w	8003ce6 <_printf_float+0xc2>
 8003ef8:	f109 0901 	add.w	r9, r9, #1
 8003efc:	e7ee      	b.n	8003edc <_printf_float+0x2b8>
 8003efe:	bf00      	nop
 8003f00:	7fefffff 	.word	0x7fefffff
 8003f04:	08008b88 	.word	0x08008b88
 8003f08:	08008b8c 	.word	0x08008b8c
 8003f0c:	08008b94 	.word	0x08008b94
 8003f10:	08008b90 	.word	0x08008b90
 8003f14:	08008b98 	.word	0x08008b98
 8003f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bfa8      	it	ge
 8003f20:	461a      	movge	r2, r3
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	4691      	mov	r9, r2
 8003f26:	dc37      	bgt.n	8003f98 <_printf_float+0x374>
 8003f28:	f04f 0b00 	mov.w	fp, #0
 8003f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f30:	f104 021a 	add.w	r2, r4, #26
 8003f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f36:	9305      	str	r3, [sp, #20]
 8003f38:	eba3 0309 	sub.w	r3, r3, r9
 8003f3c:	455b      	cmp	r3, fp
 8003f3e:	dc33      	bgt.n	8003fa8 <_printf_float+0x384>
 8003f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f44:	429a      	cmp	r2, r3
 8003f46:	db3b      	blt.n	8003fc0 <_printf_float+0x39c>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07da      	lsls	r2, r3, #31
 8003f4c:	d438      	bmi.n	8003fc0 <_printf_float+0x39c>
 8003f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f50:	9a05      	ldr	r2, [sp, #20]
 8003f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f54:	1a9a      	subs	r2, r3, r2
 8003f56:	eba3 0901 	sub.w	r9, r3, r1
 8003f5a:	4591      	cmp	r9, r2
 8003f5c:	bfa8      	it	ge
 8003f5e:	4691      	movge	r9, r2
 8003f60:	f1b9 0f00 	cmp.w	r9, #0
 8003f64:	dc35      	bgt.n	8003fd2 <_printf_float+0x3ae>
 8003f66:	f04f 0800 	mov.w	r8, #0
 8003f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f6e:	f104 0a1a 	add.w	sl, r4, #26
 8003f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	eba3 0309 	sub.w	r3, r3, r9
 8003f7c:	4543      	cmp	r3, r8
 8003f7e:	f77f af79 	ble.w	8003e74 <_printf_float+0x250>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4652      	mov	r2, sl
 8003f86:	4631      	mov	r1, r6
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b8      	blx	r7
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	f43f aeaa 	beq.w	8003ce6 <_printf_float+0xc2>
 8003f92:	f108 0801 	add.w	r8, r8, #1
 8003f96:	e7ec      	b.n	8003f72 <_printf_float+0x34e>
 8003f98:	4613      	mov	r3, r2
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d1c0      	bne.n	8003f28 <_printf_float+0x304>
 8003fa6:	e69e      	b.n	8003ce6 <_printf_float+0xc2>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4631      	mov	r1, r6
 8003fac:	4628      	mov	r0, r5
 8003fae:	9205      	str	r2, [sp, #20]
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f ae97 	beq.w	8003ce6 <_printf_float+0xc2>
 8003fb8:	9a05      	ldr	r2, [sp, #20]
 8003fba:	f10b 0b01 	add.w	fp, fp, #1
 8003fbe:	e7b9      	b.n	8003f34 <_printf_float+0x310>
 8003fc0:	ee18 3a10 	vmov	r3, s16
 8003fc4:	4652      	mov	r2, sl
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b8      	blx	r7
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d1be      	bne.n	8003f4e <_printf_float+0x32a>
 8003fd0:	e689      	b.n	8003ce6 <_printf_float+0xc2>
 8003fd2:	9a05      	ldr	r2, [sp, #20]
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	4442      	add	r2, r8
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4628      	mov	r0, r5
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d1c1      	bne.n	8003f66 <_printf_float+0x342>
 8003fe2:	e680      	b.n	8003ce6 <_printf_float+0xc2>
 8003fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fe6:	2a01      	cmp	r2, #1
 8003fe8:	dc01      	bgt.n	8003fee <_printf_float+0x3ca>
 8003fea:	07db      	lsls	r3, r3, #31
 8003fec:	d538      	bpl.n	8004060 <_printf_float+0x43c>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f43f ae74 	beq.w	8003ce6 <_printf_float+0xc2>
 8003ffe:	ee18 3a10 	vmov	r3, s16
 8004002:	4652      	mov	r2, sl
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	f43f ae6b 	beq.w	8003ce6 <_printf_float+0xc2>
 8004010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004014:	2200      	movs	r2, #0
 8004016:	2300      	movs	r3, #0
 8004018:	f7fc fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800401c:	b9d8      	cbnz	r0, 8004056 <_printf_float+0x432>
 800401e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004020:	f108 0201 	add.w	r2, r8, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	d10e      	bne.n	800404e <_printf_float+0x42a>
 8004030:	e659      	b.n	8003ce6 <_printf_float+0xc2>
 8004032:	2301      	movs	r3, #1
 8004034:	4652      	mov	r2, sl
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	47b8      	blx	r7
 800403c:	3001      	adds	r0, #1
 800403e:	f43f ae52 	beq.w	8003ce6 <_printf_float+0xc2>
 8004042:	f108 0801 	add.w	r8, r8, #1
 8004046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	4543      	cmp	r3, r8
 800404c:	dcf1      	bgt.n	8004032 <_printf_float+0x40e>
 800404e:	464b      	mov	r3, r9
 8004050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004054:	e6dc      	b.n	8003e10 <_printf_float+0x1ec>
 8004056:	f04f 0800 	mov.w	r8, #0
 800405a:	f104 0a1a 	add.w	sl, r4, #26
 800405e:	e7f2      	b.n	8004046 <_printf_float+0x422>
 8004060:	2301      	movs	r3, #1
 8004062:	4642      	mov	r2, r8
 8004064:	e7df      	b.n	8004026 <_printf_float+0x402>
 8004066:	2301      	movs	r3, #1
 8004068:	464a      	mov	r2, r9
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	f43f ae38 	beq.w	8003ce6 <_printf_float+0xc2>
 8004076:	f108 0801 	add.w	r8, r8, #1
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800407e:	1a5b      	subs	r3, r3, r1
 8004080:	4543      	cmp	r3, r8
 8004082:	dcf0      	bgt.n	8004066 <_printf_float+0x442>
 8004084:	e6fa      	b.n	8003e7c <_printf_float+0x258>
 8004086:	f04f 0800 	mov.w	r8, #0
 800408a:	f104 0919 	add.w	r9, r4, #25
 800408e:	e7f4      	b.n	800407a <_printf_float+0x456>

08004090 <_printf_common>:
 8004090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4616      	mov	r6, r2
 8004096:	4699      	mov	r9, r3
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	690b      	ldr	r3, [r1, #16]
 800409c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bfb8      	it	lt
 80040a4:	4613      	movlt	r3, r2
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ac:	4607      	mov	r7, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	b10a      	cbz	r2, 80040b6 <_printf_common+0x26>
 80040b2:	3301      	adds	r3, #1
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	0699      	lsls	r1, r3, #26
 80040ba:	bf42      	ittt	mi
 80040bc:	6833      	ldrmi	r3, [r6, #0]
 80040be:	3302      	addmi	r3, #2
 80040c0:	6033      	strmi	r3, [r6, #0]
 80040c2:	6825      	ldr	r5, [r4, #0]
 80040c4:	f015 0506 	ands.w	r5, r5, #6
 80040c8:	d106      	bne.n	80040d8 <_printf_common+0x48>
 80040ca:	f104 0a19 	add.w	sl, r4, #25
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	6832      	ldr	r2, [r6, #0]
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	dc26      	bgt.n	8004126 <_printf_common+0x96>
 80040d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040dc:	1e13      	subs	r3, r2, #0
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	bf18      	it	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	0692      	lsls	r2, r2, #26
 80040e6:	d42b      	bmi.n	8004140 <_printf_common+0xb0>
 80040e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ec:	4649      	mov	r1, r9
 80040ee:	4638      	mov	r0, r7
 80040f0:	47c0      	blx	r8
 80040f2:	3001      	adds	r0, #1
 80040f4:	d01e      	beq.n	8004134 <_printf_common+0xa4>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	68e5      	ldr	r5, [r4, #12]
 80040fa:	6832      	ldr	r2, [r6, #0]
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	2b04      	cmp	r3, #4
 8004102:	bf08      	it	eq
 8004104:	1aad      	subeq	r5, r5, r2
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	bf0c      	ite	eq
 800410c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004110:	2500      	movne	r5, #0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfc4      	itt	gt
 8004116:	1a9b      	subgt	r3, r3, r2
 8004118:	18ed      	addgt	r5, r5, r3
 800411a:	2600      	movs	r6, #0
 800411c:	341a      	adds	r4, #26
 800411e:	42b5      	cmp	r5, r6
 8004120:	d11a      	bne.n	8004158 <_printf_common+0xc8>
 8004122:	2000      	movs	r0, #0
 8004124:	e008      	b.n	8004138 <_printf_common+0xa8>
 8004126:	2301      	movs	r3, #1
 8004128:	4652      	mov	r2, sl
 800412a:	4649      	mov	r1, r9
 800412c:	4638      	mov	r0, r7
 800412e:	47c0      	blx	r8
 8004130:	3001      	adds	r0, #1
 8004132:	d103      	bne.n	800413c <_printf_common+0xac>
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	3501      	adds	r5, #1
 800413e:	e7c6      	b.n	80040ce <_printf_common+0x3e>
 8004140:	18e1      	adds	r1, r4, r3
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	2030      	movs	r0, #48	; 0x30
 8004146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414a:	4422      	add	r2, r4
 800414c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004154:	3302      	adds	r3, #2
 8004156:	e7c7      	b.n	80040e8 <_printf_common+0x58>
 8004158:	2301      	movs	r3, #1
 800415a:	4622      	mov	r2, r4
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d0e6      	beq.n	8004134 <_printf_common+0xa4>
 8004166:	3601      	adds	r6, #1
 8004168:	e7d9      	b.n	800411e <_printf_common+0x8e>
	...

0800416c <_printf_i>:
 800416c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	7e0f      	ldrb	r7, [r1, #24]
 8004172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004174:	2f78      	cmp	r7, #120	; 0x78
 8004176:	4691      	mov	r9, r2
 8004178:	4680      	mov	r8, r0
 800417a:	460c      	mov	r4, r1
 800417c:	469a      	mov	sl, r3
 800417e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004182:	d807      	bhi.n	8004194 <_printf_i+0x28>
 8004184:	2f62      	cmp	r7, #98	; 0x62
 8004186:	d80a      	bhi.n	800419e <_printf_i+0x32>
 8004188:	2f00      	cmp	r7, #0
 800418a:	f000 80d8 	beq.w	800433e <_printf_i+0x1d2>
 800418e:	2f58      	cmp	r7, #88	; 0x58
 8004190:	f000 80a3 	beq.w	80042da <_printf_i+0x16e>
 8004194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800419c:	e03a      	b.n	8004214 <_printf_i+0xa8>
 800419e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041a2:	2b15      	cmp	r3, #21
 80041a4:	d8f6      	bhi.n	8004194 <_printf_i+0x28>
 80041a6:	a101      	add	r1, pc, #4	; (adr r1, 80041ac <_printf_i+0x40>)
 80041a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041ac:	08004205 	.word	0x08004205
 80041b0:	08004219 	.word	0x08004219
 80041b4:	08004195 	.word	0x08004195
 80041b8:	08004195 	.word	0x08004195
 80041bc:	08004195 	.word	0x08004195
 80041c0:	08004195 	.word	0x08004195
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004195 	.word	0x08004195
 80041cc:	08004195 	.word	0x08004195
 80041d0:	08004195 	.word	0x08004195
 80041d4:	08004195 	.word	0x08004195
 80041d8:	08004325 	.word	0x08004325
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004307 	.word	0x08004307
 80041e4:	08004195 	.word	0x08004195
 80041e8:	08004195 	.word	0x08004195
 80041ec:	08004347 	.word	0x08004347
 80041f0:	08004195 	.word	0x08004195
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004195 	.word	0x08004195
 80041fc:	08004195 	.word	0x08004195
 8004200:	0800430f 	.word	0x0800430f
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	602a      	str	r2, [r5, #0]
 800420c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004214:	2301      	movs	r3, #1
 8004216:	e0a3      	b.n	8004360 <_printf_i+0x1f4>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	6829      	ldr	r1, [r5, #0]
 800421c:	0606      	lsls	r6, r0, #24
 800421e:	f101 0304 	add.w	r3, r1, #4
 8004222:	d50a      	bpl.n	800423a <_printf_i+0xce>
 8004224:	680e      	ldr	r6, [r1, #0]
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	2e00      	cmp	r6, #0
 800422a:	da03      	bge.n	8004234 <_printf_i+0xc8>
 800422c:	232d      	movs	r3, #45	; 0x2d
 800422e:	4276      	negs	r6, r6
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	485e      	ldr	r0, [pc, #376]	; (80043b0 <_printf_i+0x244>)
 8004236:	230a      	movs	r3, #10
 8004238:	e019      	b.n	800426e <_printf_i+0x102>
 800423a:	680e      	ldr	r6, [r1, #0]
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004242:	bf18      	it	ne
 8004244:	b236      	sxthne	r6, r6
 8004246:	e7ef      	b.n	8004228 <_printf_i+0xbc>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1d19      	adds	r1, r3, #4
 800424e:	6029      	str	r1, [r5, #0]
 8004250:	0601      	lsls	r1, r0, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xec>
 8004254:	681e      	ldr	r6, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0xf2>
 8004258:	0646      	lsls	r6, r0, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xe8>
 800425c:	881e      	ldrh	r6, [r3, #0]
 800425e:	4854      	ldr	r0, [pc, #336]	; (80043b0 <_printf_i+0x244>)
 8004260:	2f6f      	cmp	r7, #111	; 0x6f
 8004262:	bf0c      	ite	eq
 8004264:	2308      	moveq	r3, #8
 8004266:	230a      	movne	r3, #10
 8004268:	2100      	movs	r1, #0
 800426a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426e:	6865      	ldr	r5, [r4, #4]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	2d00      	cmp	r5, #0
 8004274:	bfa2      	ittt	ge
 8004276:	6821      	ldrge	r1, [r4, #0]
 8004278:	f021 0104 	bicge.w	r1, r1, #4
 800427c:	6021      	strge	r1, [r4, #0]
 800427e:	b90e      	cbnz	r6, 8004284 <_printf_i+0x118>
 8004280:	2d00      	cmp	r5, #0
 8004282:	d04d      	beq.n	8004320 <_printf_i+0x1b4>
 8004284:	4615      	mov	r5, r2
 8004286:	fbb6 f1f3 	udiv	r1, r6, r3
 800428a:	fb03 6711 	mls	r7, r3, r1, r6
 800428e:	5dc7      	ldrb	r7, [r0, r7]
 8004290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004294:	4637      	mov	r7, r6
 8004296:	42bb      	cmp	r3, r7
 8004298:	460e      	mov	r6, r1
 800429a:	d9f4      	bls.n	8004286 <_printf_i+0x11a>
 800429c:	2b08      	cmp	r3, #8
 800429e:	d10b      	bne.n	80042b8 <_printf_i+0x14c>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	07de      	lsls	r6, r3, #31
 80042a4:	d508      	bpl.n	80042b8 <_printf_i+0x14c>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6861      	ldr	r1, [r4, #4]
 80042aa:	4299      	cmp	r1, r3
 80042ac:	bfde      	ittt	le
 80042ae:	2330      	movle	r3, #48	; 0x30
 80042b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042b8:	1b52      	subs	r2, r2, r5
 80042ba:	6122      	str	r2, [r4, #16]
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	464b      	mov	r3, r9
 80042c2:	aa03      	add	r2, sp, #12
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff fee2 	bl	8004090 <_printf_common>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d14c      	bne.n	800436a <_printf_i+0x1fe>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	4835      	ldr	r0, [pc, #212]	; (80043b0 <_printf_i+0x244>)
 80042dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042e0:	6829      	ldr	r1, [r5, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e8:	6029      	str	r1, [r5, #0]
 80042ea:	061d      	lsls	r5, r3, #24
 80042ec:	d514      	bpl.n	8004318 <_printf_i+0x1ac>
 80042ee:	07df      	lsls	r7, r3, #31
 80042f0:	bf44      	itt	mi
 80042f2:	f043 0320 	orrmi.w	r3, r3, #32
 80042f6:	6023      	strmi	r3, [r4, #0]
 80042f8:	b91e      	cbnz	r6, 8004302 <_printf_i+0x196>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	f023 0320 	bic.w	r3, r3, #32
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	2310      	movs	r3, #16
 8004304:	e7b0      	b.n	8004268 <_printf_i+0xfc>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2378      	movs	r3, #120	; 0x78
 8004310:	4828      	ldr	r0, [pc, #160]	; (80043b4 <_printf_i+0x248>)
 8004312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004316:	e7e3      	b.n	80042e0 <_printf_i+0x174>
 8004318:	0659      	lsls	r1, r3, #25
 800431a:	bf48      	it	mi
 800431c:	b2b6      	uxthmi	r6, r6
 800431e:	e7e6      	b.n	80042ee <_printf_i+0x182>
 8004320:	4615      	mov	r5, r2
 8004322:	e7bb      	b.n	800429c <_printf_i+0x130>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	6826      	ldr	r6, [r4, #0]
 8004328:	6961      	ldr	r1, [r4, #20]
 800432a:	1d18      	adds	r0, r3, #4
 800432c:	6028      	str	r0, [r5, #0]
 800432e:	0635      	lsls	r5, r6, #24
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	d501      	bpl.n	8004338 <_printf_i+0x1cc>
 8004334:	6019      	str	r1, [r3, #0]
 8004336:	e002      	b.n	800433e <_printf_i+0x1d2>
 8004338:	0670      	lsls	r0, r6, #25
 800433a:	d5fb      	bpl.n	8004334 <_printf_i+0x1c8>
 800433c:	8019      	strh	r1, [r3, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	4615      	mov	r5, r2
 8004344:	e7ba      	b.n	80042bc <_printf_i+0x150>
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	1d1a      	adds	r2, r3, #4
 800434a:	602a      	str	r2, [r5, #0]
 800434c:	681d      	ldr	r5, [r3, #0]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	2100      	movs	r1, #0
 8004352:	4628      	mov	r0, r5
 8004354:	f7fb ff44 	bl	80001e0 <memchr>
 8004358:	b108      	cbz	r0, 800435e <_printf_i+0x1f2>
 800435a:	1b40      	subs	r0, r0, r5
 800435c:	6060      	str	r0, [r4, #4]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	2300      	movs	r3, #0
 8004364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004368:	e7a8      	b.n	80042bc <_printf_i+0x150>
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	462a      	mov	r2, r5
 800436e:	4649      	mov	r1, r9
 8004370:	4640      	mov	r0, r8
 8004372:	47d0      	blx	sl
 8004374:	3001      	adds	r0, #1
 8004376:	d0ab      	beq.n	80042d0 <_printf_i+0x164>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079b      	lsls	r3, r3, #30
 800437c:	d413      	bmi.n	80043a6 <_printf_i+0x23a>
 800437e:	68e0      	ldr	r0, [r4, #12]
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	4298      	cmp	r0, r3
 8004384:	bfb8      	it	lt
 8004386:	4618      	movlt	r0, r3
 8004388:	e7a4      	b.n	80042d4 <_printf_i+0x168>
 800438a:	2301      	movs	r3, #1
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d09b      	beq.n	80042d0 <_printf_i+0x164>
 8004398:	3501      	adds	r5, #1
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	9903      	ldr	r1, [sp, #12]
 800439e:	1a5b      	subs	r3, r3, r1
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dcf2      	bgt.n	800438a <_printf_i+0x21e>
 80043a4:	e7eb      	b.n	800437e <_printf_i+0x212>
 80043a6:	2500      	movs	r5, #0
 80043a8:	f104 0619 	add.w	r6, r4, #25
 80043ac:	e7f5      	b.n	800439a <_printf_i+0x22e>
 80043ae:	bf00      	nop
 80043b0:	08008b9a 	.word	0x08008b9a
 80043b4:	08008bab 	.word	0x08008bab

080043b8 <_scanf_float>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	b087      	sub	sp, #28
 80043be:	4617      	mov	r7, r2
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	688b      	ldr	r3, [r1, #8]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043ca:	bf83      	ittte	hi
 80043cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043d0:	195b      	addhi	r3, r3, r5
 80043d2:	9302      	strhi	r3, [sp, #8]
 80043d4:	2300      	movls	r3, #0
 80043d6:	bf86      	itte	hi
 80043d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043dc:	608b      	strhi	r3, [r1, #8]
 80043de:	9302      	strls	r3, [sp, #8]
 80043e0:	680b      	ldr	r3, [r1, #0]
 80043e2:	468b      	mov	fp, r1
 80043e4:	2500      	movs	r5, #0
 80043e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80043ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80043ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043f2:	4680      	mov	r8, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	465e      	mov	r6, fp
 80043f8:	46aa      	mov	sl, r5
 80043fa:	46a9      	mov	r9, r5
 80043fc:	9501      	str	r5, [sp, #4]
 80043fe:	68a2      	ldr	r2, [r4, #8]
 8004400:	b152      	cbz	r2, 8004418 <_scanf_float+0x60>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b4e      	cmp	r3, #78	; 0x4e
 8004408:	d864      	bhi.n	80044d4 <_scanf_float+0x11c>
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d83c      	bhi.n	8004488 <_scanf_float+0xd0>
 800440e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004412:	b2c8      	uxtb	r0, r1
 8004414:	280e      	cmp	r0, #14
 8004416:	d93a      	bls.n	800448e <_scanf_float+0xd6>
 8004418:	f1b9 0f00 	cmp.w	r9, #0
 800441c:	d003      	beq.n	8004426 <_scanf_float+0x6e>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800442a:	f1ba 0f01 	cmp.w	sl, #1
 800442e:	f200 8113 	bhi.w	8004658 <_scanf_float+0x2a0>
 8004432:	455e      	cmp	r6, fp
 8004434:	f200 8105 	bhi.w	8004642 <_scanf_float+0x28a>
 8004438:	2501      	movs	r5, #1
 800443a:	4628      	mov	r0, r5
 800443c:	b007      	add	sp, #28
 800443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004442:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004446:	2a0d      	cmp	r2, #13
 8004448:	d8e6      	bhi.n	8004418 <_scanf_float+0x60>
 800444a:	a101      	add	r1, pc, #4	; (adr r1, 8004450 <_scanf_float+0x98>)
 800444c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004450:	0800458f 	.word	0x0800458f
 8004454:	08004419 	.word	0x08004419
 8004458:	08004419 	.word	0x08004419
 800445c:	08004419 	.word	0x08004419
 8004460:	080045ef 	.word	0x080045ef
 8004464:	080045c7 	.word	0x080045c7
 8004468:	08004419 	.word	0x08004419
 800446c:	08004419 	.word	0x08004419
 8004470:	0800459d 	.word	0x0800459d
 8004474:	08004419 	.word	0x08004419
 8004478:	08004419 	.word	0x08004419
 800447c:	08004419 	.word	0x08004419
 8004480:	08004419 	.word	0x08004419
 8004484:	08004555 	.word	0x08004555
 8004488:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800448c:	e7db      	b.n	8004446 <_scanf_float+0x8e>
 800448e:	290e      	cmp	r1, #14
 8004490:	d8c2      	bhi.n	8004418 <_scanf_float+0x60>
 8004492:	a001      	add	r0, pc, #4	; (adr r0, 8004498 <_scanf_float+0xe0>)
 8004494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004498:	08004547 	.word	0x08004547
 800449c:	08004419 	.word	0x08004419
 80044a0:	08004547 	.word	0x08004547
 80044a4:	080045db 	.word	0x080045db
 80044a8:	08004419 	.word	0x08004419
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	08004531 	.word	0x08004531
 80044b4:	08004531 	.word	0x08004531
 80044b8:	08004531 	.word	0x08004531
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	08004531 	.word	0x08004531
 80044c8:	08004531 	.word	0x08004531
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	2b6e      	cmp	r3, #110	; 0x6e
 80044d6:	d809      	bhi.n	80044ec <_scanf_float+0x134>
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	d8b2      	bhi.n	8004442 <_scanf_float+0x8a>
 80044dc:	2b54      	cmp	r3, #84	; 0x54
 80044de:	d077      	beq.n	80045d0 <_scanf_float+0x218>
 80044e0:	2b59      	cmp	r3, #89	; 0x59
 80044e2:	d199      	bne.n	8004418 <_scanf_float+0x60>
 80044e4:	2d07      	cmp	r5, #7
 80044e6:	d197      	bne.n	8004418 <_scanf_float+0x60>
 80044e8:	2508      	movs	r5, #8
 80044ea:	e029      	b.n	8004540 <_scanf_float+0x188>
 80044ec:	2b74      	cmp	r3, #116	; 0x74
 80044ee:	d06f      	beq.n	80045d0 <_scanf_float+0x218>
 80044f0:	2b79      	cmp	r3, #121	; 0x79
 80044f2:	e7f6      	b.n	80044e2 <_scanf_float+0x12a>
 80044f4:	6821      	ldr	r1, [r4, #0]
 80044f6:	05c8      	lsls	r0, r1, #23
 80044f8:	d51a      	bpl.n	8004530 <_scanf_float+0x178>
 80044fa:	9b02      	ldr	r3, [sp, #8]
 80044fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004500:	6021      	str	r1, [r4, #0]
 8004502:	f109 0901 	add.w	r9, r9, #1
 8004506:	b11b      	cbz	r3, 8004510 <_scanf_float+0x158>
 8004508:	3b01      	subs	r3, #1
 800450a:	3201      	adds	r2, #1
 800450c:	9302      	str	r3, [sp, #8]
 800450e:	60a2      	str	r2, [r4, #8]
 8004510:	68a3      	ldr	r3, [r4, #8]
 8004512:	3b01      	subs	r3, #1
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	3301      	adds	r3, #1
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	f340 8084 	ble.w	8004630 <_scanf_float+0x278>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	e766      	b.n	80043fe <_scanf_float+0x46>
 8004530:	eb1a 0f05 	cmn.w	sl, r5
 8004534:	f47f af70 	bne.w	8004418 <_scanf_float+0x60>
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	f806 3b01 	strb.w	r3, [r6], #1
 8004544:	e7e4      	b.n	8004510 <_scanf_float+0x158>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	0610      	lsls	r0, r2, #24
 800454a:	f57f af65 	bpl.w	8004418 <_scanf_float+0x60>
 800454e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004552:	e7f4      	b.n	800453e <_scanf_float+0x186>
 8004554:	f1ba 0f00 	cmp.w	sl, #0
 8004558:	d10e      	bne.n	8004578 <_scanf_float+0x1c0>
 800455a:	f1b9 0f00 	cmp.w	r9, #0
 800455e:	d10e      	bne.n	800457e <_scanf_float+0x1c6>
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004566:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800456a:	d108      	bne.n	800457e <_scanf_float+0x1c6>
 800456c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004570:	6022      	str	r2, [r4, #0]
 8004572:	f04f 0a01 	mov.w	sl, #1
 8004576:	e7e3      	b.n	8004540 <_scanf_float+0x188>
 8004578:	f1ba 0f02 	cmp.w	sl, #2
 800457c:	d055      	beq.n	800462a <_scanf_float+0x272>
 800457e:	2d01      	cmp	r5, #1
 8004580:	d002      	beq.n	8004588 <_scanf_float+0x1d0>
 8004582:	2d04      	cmp	r5, #4
 8004584:	f47f af48 	bne.w	8004418 <_scanf_float+0x60>
 8004588:	3501      	adds	r5, #1
 800458a:	b2ed      	uxtb	r5, r5
 800458c:	e7d8      	b.n	8004540 <_scanf_float+0x188>
 800458e:	f1ba 0f01 	cmp.w	sl, #1
 8004592:	f47f af41 	bne.w	8004418 <_scanf_float+0x60>
 8004596:	f04f 0a02 	mov.w	sl, #2
 800459a:	e7d1      	b.n	8004540 <_scanf_float+0x188>
 800459c:	b97d      	cbnz	r5, 80045be <_scanf_float+0x206>
 800459e:	f1b9 0f00 	cmp.w	r9, #0
 80045a2:	f47f af3c 	bne.w	800441e <_scanf_float+0x66>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80045ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045b0:	f47f af39 	bne.w	8004426 <_scanf_float+0x6e>
 80045b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	2501      	movs	r5, #1
 80045bc:	e7c0      	b.n	8004540 <_scanf_float+0x188>
 80045be:	2d03      	cmp	r5, #3
 80045c0:	d0e2      	beq.n	8004588 <_scanf_float+0x1d0>
 80045c2:	2d05      	cmp	r5, #5
 80045c4:	e7de      	b.n	8004584 <_scanf_float+0x1cc>
 80045c6:	2d02      	cmp	r5, #2
 80045c8:	f47f af26 	bne.w	8004418 <_scanf_float+0x60>
 80045cc:	2503      	movs	r5, #3
 80045ce:	e7b7      	b.n	8004540 <_scanf_float+0x188>
 80045d0:	2d06      	cmp	r5, #6
 80045d2:	f47f af21 	bne.w	8004418 <_scanf_float+0x60>
 80045d6:	2507      	movs	r5, #7
 80045d8:	e7b2      	b.n	8004540 <_scanf_float+0x188>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	0591      	lsls	r1, r2, #22
 80045de:	f57f af1b 	bpl.w	8004418 <_scanf_float+0x60>
 80045e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80045ec:	e7a8      	b.n	8004540 <_scanf_float+0x188>
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80045f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045f8:	d006      	beq.n	8004608 <_scanf_float+0x250>
 80045fa:	0550      	lsls	r0, r2, #21
 80045fc:	f57f af0c 	bpl.w	8004418 <_scanf_float+0x60>
 8004600:	f1b9 0f00 	cmp.w	r9, #0
 8004604:	f43f af0f 	beq.w	8004426 <_scanf_float+0x6e>
 8004608:	0591      	lsls	r1, r2, #22
 800460a:	bf58      	it	pl
 800460c:	9901      	ldrpl	r1, [sp, #4]
 800460e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004612:	bf58      	it	pl
 8004614:	eba9 0101 	subpl.w	r1, r9, r1
 8004618:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800461c:	bf58      	it	pl
 800461e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	f04f 0900 	mov.w	r9, #0
 8004628:	e78a      	b.n	8004540 <_scanf_float+0x188>
 800462a:	f04f 0a03 	mov.w	sl, #3
 800462e:	e787      	b.n	8004540 <_scanf_float+0x188>
 8004630:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004634:	4639      	mov	r1, r7
 8004636:	4640      	mov	r0, r8
 8004638:	4798      	blx	r3
 800463a:	2800      	cmp	r0, #0
 800463c:	f43f aedf 	beq.w	80043fe <_scanf_float+0x46>
 8004640:	e6ea      	b.n	8004418 <_scanf_float+0x60>
 8004642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800464a:	463a      	mov	r2, r7
 800464c:	4640      	mov	r0, r8
 800464e:	4798      	blx	r3
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	3b01      	subs	r3, #1
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	e6ec      	b.n	8004432 <_scanf_float+0x7a>
 8004658:	1e6b      	subs	r3, r5, #1
 800465a:	2b06      	cmp	r3, #6
 800465c:	d825      	bhi.n	80046aa <_scanf_float+0x2f2>
 800465e:	2d02      	cmp	r5, #2
 8004660:	d836      	bhi.n	80046d0 <_scanf_float+0x318>
 8004662:	455e      	cmp	r6, fp
 8004664:	f67f aee8 	bls.w	8004438 <_scanf_float+0x80>
 8004668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800466c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004670:	463a      	mov	r2, r7
 8004672:	4640      	mov	r0, r8
 8004674:	4798      	blx	r3
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	3b01      	subs	r3, #1
 800467a:	6123      	str	r3, [r4, #16]
 800467c:	e7f1      	b.n	8004662 <_scanf_float+0x2aa>
 800467e:	9802      	ldr	r0, [sp, #8]
 8004680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004684:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004688:	9002      	str	r0, [sp, #8]
 800468a:	463a      	mov	r2, r7
 800468c:	4640      	mov	r0, r8
 800468e:	4798      	blx	r3
 8004690:	6923      	ldr	r3, [r4, #16]
 8004692:	3b01      	subs	r3, #1
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800469a:	fa5f fa8a 	uxtb.w	sl, sl
 800469e:	f1ba 0f02 	cmp.w	sl, #2
 80046a2:	d1ec      	bne.n	800467e <_scanf_float+0x2c6>
 80046a4:	3d03      	subs	r5, #3
 80046a6:	b2ed      	uxtb	r5, r5
 80046a8:	1b76      	subs	r6, r6, r5
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	05da      	lsls	r2, r3, #23
 80046ae:	d52f      	bpl.n	8004710 <_scanf_float+0x358>
 80046b0:	055b      	lsls	r3, r3, #21
 80046b2:	d510      	bpl.n	80046d6 <_scanf_float+0x31e>
 80046b4:	455e      	cmp	r6, fp
 80046b6:	f67f aebf 	bls.w	8004438 <_scanf_float+0x80>
 80046ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046c2:	463a      	mov	r2, r7
 80046c4:	4640      	mov	r0, r8
 80046c6:	4798      	blx	r3
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	e7f1      	b.n	80046b4 <_scanf_float+0x2fc>
 80046d0:	46aa      	mov	sl, r5
 80046d2:	9602      	str	r6, [sp, #8]
 80046d4:	e7df      	b.n	8004696 <_scanf_float+0x2de>
 80046d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	2965      	cmp	r1, #101	; 0x65
 80046de:	f103 33ff 	add.w	r3, r3, #4294967295
 80046e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	d00c      	beq.n	8004704 <_scanf_float+0x34c>
 80046ea:	2945      	cmp	r1, #69	; 0x45
 80046ec:	d00a      	beq.n	8004704 <_scanf_float+0x34c>
 80046ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046f2:	463a      	mov	r2, r7
 80046f4:	4640      	mov	r0, r8
 80046f6:	4798      	blx	r3
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046fe:	3b01      	subs	r3, #1
 8004700:	1eb5      	subs	r5, r6, #2
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004708:	463a      	mov	r2, r7
 800470a:	4640      	mov	r0, r8
 800470c:	4798      	blx	r3
 800470e:	462e      	mov	r6, r5
 8004710:	6825      	ldr	r5, [r4, #0]
 8004712:	f015 0510 	ands.w	r5, r5, #16
 8004716:	d159      	bne.n	80047cc <_scanf_float+0x414>
 8004718:	7035      	strb	r5, [r6, #0]
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d11b      	bne.n	800475e <_scanf_float+0x3a6>
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	454b      	cmp	r3, r9
 800472a:	eba3 0209 	sub.w	r2, r3, r9
 800472e:	d123      	bne.n	8004778 <_scanf_float+0x3c0>
 8004730:	2200      	movs	r2, #0
 8004732:	4659      	mov	r1, fp
 8004734:	4640      	mov	r0, r8
 8004736:	f000 fe99 	bl	800546c <_strtod_r>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	f012 0f02 	tst.w	r2, #2
 8004742:	ec57 6b10 	vmov	r6, r7, d0
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	d021      	beq.n	800478e <_scanf_float+0x3d6>
 800474a:	9903      	ldr	r1, [sp, #12]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	600a      	str	r2, [r1, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	e9c3 6700 	strd	r6, r7, [r3]
 8004756:	68e3      	ldr	r3, [r4, #12]
 8004758:	3301      	adds	r3, #1
 800475a:	60e3      	str	r3, [r4, #12]
 800475c:	e66d      	b.n	800443a <_scanf_float+0x82>
 800475e:	9b04      	ldr	r3, [sp, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0e5      	beq.n	8004730 <_scanf_float+0x378>
 8004764:	9905      	ldr	r1, [sp, #20]
 8004766:	230a      	movs	r3, #10
 8004768:	462a      	mov	r2, r5
 800476a:	3101      	adds	r1, #1
 800476c:	4640      	mov	r0, r8
 800476e:	f000 ff05 	bl	800557c <_strtol_r>
 8004772:	9b04      	ldr	r3, [sp, #16]
 8004774:	9e05      	ldr	r6, [sp, #20]
 8004776:	1ac2      	subs	r2, r0, r3
 8004778:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800477c:	429e      	cmp	r6, r3
 800477e:	bf28      	it	cs
 8004780:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004784:	4912      	ldr	r1, [pc, #72]	; (80047d0 <_scanf_float+0x418>)
 8004786:	4630      	mov	r0, r6
 8004788:	f000 f82c 	bl	80047e4 <siprintf>
 800478c:	e7d0      	b.n	8004730 <_scanf_float+0x378>
 800478e:	9903      	ldr	r1, [sp, #12]
 8004790:	f012 0f04 	tst.w	r2, #4
 8004794:	f103 0204 	add.w	r2, r3, #4
 8004798:	600a      	str	r2, [r1, #0]
 800479a:	d1d9      	bne.n	8004750 <_scanf_float+0x398>
 800479c:	f8d3 8000 	ldr.w	r8, [r3]
 80047a0:	ee10 2a10 	vmov	r2, s0
 80047a4:	ee10 0a10 	vmov	r0, s0
 80047a8:	463b      	mov	r3, r7
 80047aa:	4639      	mov	r1, r7
 80047ac:	f7fc f9be 	bl	8000b2c <__aeabi_dcmpun>
 80047b0:	b128      	cbz	r0, 80047be <_scanf_float+0x406>
 80047b2:	4808      	ldr	r0, [pc, #32]	; (80047d4 <_scanf_float+0x41c>)
 80047b4:	f000 f810 	bl	80047d8 <nanf>
 80047b8:	ed88 0a00 	vstr	s0, [r8]
 80047bc:	e7cb      	b.n	8004756 <_scanf_float+0x39e>
 80047be:	4630      	mov	r0, r6
 80047c0:	4639      	mov	r1, r7
 80047c2:	f7fc fa11 	bl	8000be8 <__aeabi_d2f>
 80047c6:	f8c8 0000 	str.w	r0, [r8]
 80047ca:	e7c4      	b.n	8004756 <_scanf_float+0x39e>
 80047cc:	2500      	movs	r5, #0
 80047ce:	e634      	b.n	800443a <_scanf_float+0x82>
 80047d0:	08008bbc 	.word	0x08008bbc
 80047d4:	08008fc8 	.word	0x08008fc8

080047d8 <nanf>:
 80047d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80047e0 <nanf+0x8>
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	7fc00000 	.word	0x7fc00000

080047e4 <siprintf>:
 80047e4:	b40e      	push	{r1, r2, r3}
 80047e6:	b500      	push	{lr}
 80047e8:	b09c      	sub	sp, #112	; 0x70
 80047ea:	ab1d      	add	r3, sp, #116	; 0x74
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	9006      	str	r0, [sp, #24]
 80047f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047f4:	4809      	ldr	r0, [pc, #36]	; (800481c <siprintf+0x38>)
 80047f6:	9107      	str	r1, [sp, #28]
 80047f8:	9104      	str	r1, [sp, #16]
 80047fa:	4909      	ldr	r1, [pc, #36]	; (8004820 <siprintf+0x3c>)
 80047fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	a902      	add	r1, sp, #8
 8004808:	f002 fee4 	bl	80075d4 <_svfiprintf_r>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	b01c      	add	sp, #112	; 0x70
 8004814:	f85d eb04 	ldr.w	lr, [sp], #4
 8004818:	b003      	add	sp, #12
 800481a:	4770      	bx	lr
 800481c:	20000014 	.word	0x20000014
 8004820:	ffff0208 	.word	0xffff0208

08004824 <sulp>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	4604      	mov	r4, r0
 8004828:	460d      	mov	r5, r1
 800482a:	ec45 4b10 	vmov	d0, r4, r5
 800482e:	4616      	mov	r6, r2
 8004830:	f002 fc2e 	bl	8007090 <__ulp>
 8004834:	ec51 0b10 	vmov	r0, r1, d0
 8004838:	b17e      	cbz	r6, 800485a <sulp+0x36>
 800483a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800483e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004842:	2b00      	cmp	r3, #0
 8004844:	dd09      	ble.n	800485a <sulp+0x36>
 8004846:	051b      	lsls	r3, r3, #20
 8004848:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800484c:	2400      	movs	r4, #0
 800484e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004852:	4622      	mov	r2, r4
 8004854:	462b      	mov	r3, r5
 8004856:	f7fb fecf 	bl	80005f8 <__aeabi_dmul>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	0000      	movs	r0, r0
	...

08004860 <_strtod_l>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	ed2d 8b02 	vpush	{d8}
 8004868:	b09d      	sub	sp, #116	; 0x74
 800486a:	461f      	mov	r7, r3
 800486c:	2300      	movs	r3, #0
 800486e:	9318      	str	r3, [sp, #96]	; 0x60
 8004870:	4ba2      	ldr	r3, [pc, #648]	; (8004afc <_strtod_l+0x29c>)
 8004872:	9213      	str	r2, [sp, #76]	; 0x4c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	9305      	str	r3, [sp, #20]
 8004878:	4604      	mov	r4, r0
 800487a:	4618      	mov	r0, r3
 800487c:	4688      	mov	r8, r1
 800487e:	f7fb fca7 	bl	80001d0 <strlen>
 8004882:	f04f 0a00 	mov.w	sl, #0
 8004886:	4605      	mov	r5, r0
 8004888:	f04f 0b00 	mov.w	fp, #0
 800488c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	2a2b      	cmp	r2, #43	; 0x2b
 8004896:	d04e      	beq.n	8004936 <_strtod_l+0xd6>
 8004898:	d83b      	bhi.n	8004912 <_strtod_l+0xb2>
 800489a:	2a0d      	cmp	r2, #13
 800489c:	d834      	bhi.n	8004908 <_strtod_l+0xa8>
 800489e:	2a08      	cmp	r2, #8
 80048a0:	d834      	bhi.n	800490c <_strtod_l+0xac>
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	d03e      	beq.n	8004924 <_strtod_l+0xc4>
 80048a6:	2300      	movs	r3, #0
 80048a8:	930a      	str	r3, [sp, #40]	; 0x28
 80048aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80048ac:	7833      	ldrb	r3, [r6, #0]
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	f040 80b0 	bne.w	8004a14 <_strtod_l+0x1b4>
 80048b4:	7873      	ldrb	r3, [r6, #1]
 80048b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80048ba:	2b58      	cmp	r3, #88	; 0x58
 80048bc:	d168      	bne.n	8004990 <_strtod_l+0x130>
 80048be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	ab18      	add	r3, sp, #96	; 0x60
 80048c4:	9702      	str	r7, [sp, #8]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4a8d      	ldr	r2, [pc, #564]	; (8004b00 <_strtod_l+0x2a0>)
 80048ca:	ab19      	add	r3, sp, #100	; 0x64
 80048cc:	a917      	add	r1, sp, #92	; 0x5c
 80048ce:	4620      	mov	r0, r4
 80048d0:	f001 fd38 	bl	8006344 <__gethex>
 80048d4:	f010 0707 	ands.w	r7, r0, #7
 80048d8:	4605      	mov	r5, r0
 80048da:	d005      	beq.n	80048e8 <_strtod_l+0x88>
 80048dc:	2f06      	cmp	r7, #6
 80048de:	d12c      	bne.n	800493a <_strtod_l+0xda>
 80048e0:	3601      	adds	r6, #1
 80048e2:	2300      	movs	r3, #0
 80048e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80048e6:	930a      	str	r3, [sp, #40]	; 0x28
 80048e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8590 	bne.w	8005410 <_strtod_l+0xbb0>
 80048f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f2:	b1eb      	cbz	r3, 8004930 <_strtod_l+0xd0>
 80048f4:	4652      	mov	r2, sl
 80048f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80048fa:	ec43 2b10 	vmov	d0, r2, r3
 80048fe:	b01d      	add	sp, #116	; 0x74
 8004900:	ecbd 8b02 	vpop	{d8}
 8004904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004908:	2a20      	cmp	r2, #32
 800490a:	d1cc      	bne.n	80048a6 <_strtod_l+0x46>
 800490c:	3301      	adds	r3, #1
 800490e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004910:	e7be      	b.n	8004890 <_strtod_l+0x30>
 8004912:	2a2d      	cmp	r2, #45	; 0x2d
 8004914:	d1c7      	bne.n	80048a6 <_strtod_l+0x46>
 8004916:	2201      	movs	r2, #1
 8004918:	920a      	str	r2, [sp, #40]	; 0x28
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	9217      	str	r2, [sp, #92]	; 0x5c
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c2      	bne.n	80048aa <_strtod_l+0x4a>
 8004924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004926:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 856e 	bne.w	800540c <_strtod_l+0xbac>
 8004930:	4652      	mov	r2, sl
 8004932:	465b      	mov	r3, fp
 8004934:	e7e1      	b.n	80048fa <_strtod_l+0x9a>
 8004936:	2200      	movs	r2, #0
 8004938:	e7ee      	b.n	8004918 <_strtod_l+0xb8>
 800493a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800493c:	b13a      	cbz	r2, 800494e <_strtod_l+0xee>
 800493e:	2135      	movs	r1, #53	; 0x35
 8004940:	a81a      	add	r0, sp, #104	; 0x68
 8004942:	f002 fcb0 	bl	80072a6 <__copybits>
 8004946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004948:	4620      	mov	r0, r4
 800494a:	f002 f86f 	bl	8006a2c <_Bfree>
 800494e:	3f01      	subs	r7, #1
 8004950:	2f04      	cmp	r7, #4
 8004952:	d806      	bhi.n	8004962 <_strtod_l+0x102>
 8004954:	e8df f007 	tbb	[pc, r7]
 8004958:	1714030a 	.word	0x1714030a
 800495c:	0a          	.byte	0x0a
 800495d:	00          	.byte	0x00
 800495e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004962:	0728      	lsls	r0, r5, #28
 8004964:	d5c0      	bpl.n	80048e8 <_strtod_l+0x88>
 8004966:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800496a:	e7bd      	b.n	80048e8 <_strtod_l+0x88>
 800496c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004970:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004972:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004976:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800497a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800497e:	e7f0      	b.n	8004962 <_strtod_l+0x102>
 8004980:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004b04 <_strtod_l+0x2a4>
 8004984:	e7ed      	b.n	8004962 <_strtod_l+0x102>
 8004986:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800498a:	f04f 3aff 	mov.w	sl, #4294967295
 800498e:	e7e8      	b.n	8004962 <_strtod_l+0x102>
 8004990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	9217      	str	r2, [sp, #92]	; 0x5c
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b30      	cmp	r3, #48	; 0x30
 800499a:	d0f9      	beq.n	8004990 <_strtod_l+0x130>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0a3      	beq.n	80048e8 <_strtod_l+0x88>
 80049a0:	2301      	movs	r3, #1
 80049a2:	f04f 0900 	mov.w	r9, #0
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049aa:	9308      	str	r3, [sp, #32]
 80049ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80049b0:	464f      	mov	r7, r9
 80049b2:	220a      	movs	r2, #10
 80049b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80049b6:	7806      	ldrb	r6, [r0, #0]
 80049b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80049bc:	b2d9      	uxtb	r1, r3
 80049be:	2909      	cmp	r1, #9
 80049c0:	d92a      	bls.n	8004a18 <_strtod_l+0x1b8>
 80049c2:	9905      	ldr	r1, [sp, #20]
 80049c4:	462a      	mov	r2, r5
 80049c6:	f002 ff1f 	bl	8007808 <strncmp>
 80049ca:	b398      	cbz	r0, 8004a34 <_strtod_l+0x1d4>
 80049cc:	2000      	movs	r0, #0
 80049ce:	4632      	mov	r2, r6
 80049d0:	463d      	mov	r5, r7
 80049d2:	9005      	str	r0, [sp, #20]
 80049d4:	4603      	mov	r3, r0
 80049d6:	2a65      	cmp	r2, #101	; 0x65
 80049d8:	d001      	beq.n	80049de <_strtod_l+0x17e>
 80049da:	2a45      	cmp	r2, #69	; 0x45
 80049dc:	d118      	bne.n	8004a10 <_strtod_l+0x1b0>
 80049de:	b91d      	cbnz	r5, 80049e8 <_strtod_l+0x188>
 80049e0:	9a04      	ldr	r2, [sp, #16]
 80049e2:	4302      	orrs	r2, r0
 80049e4:	d09e      	beq.n	8004924 <_strtod_l+0xc4>
 80049e6:	2500      	movs	r5, #0
 80049e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80049ec:	f108 0201 	add.w	r2, r8, #1
 80049f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80049f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80049f6:	2a2b      	cmp	r2, #43	; 0x2b
 80049f8:	d075      	beq.n	8004ae6 <_strtod_l+0x286>
 80049fa:	2a2d      	cmp	r2, #45	; 0x2d
 80049fc:	d07b      	beq.n	8004af6 <_strtod_l+0x296>
 80049fe:	f04f 0c00 	mov.w	ip, #0
 8004a02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004a06:	2909      	cmp	r1, #9
 8004a08:	f240 8082 	bls.w	8004b10 <_strtod_l+0x2b0>
 8004a0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004a10:	2600      	movs	r6, #0
 8004a12:	e09d      	b.n	8004b50 <_strtod_l+0x2f0>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e7c4      	b.n	80049a2 <_strtod_l+0x142>
 8004a18:	2f08      	cmp	r7, #8
 8004a1a:	bfd8      	it	le
 8004a1c:	9907      	ldrle	r1, [sp, #28]
 8004a1e:	f100 0001 	add.w	r0, r0, #1
 8004a22:	bfda      	itte	le
 8004a24:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a28:	9307      	strle	r3, [sp, #28]
 8004a2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004a2e:	3701      	adds	r7, #1
 8004a30:	9017      	str	r0, [sp, #92]	; 0x5c
 8004a32:	e7bf      	b.n	80049b4 <_strtod_l+0x154>
 8004a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a36:	195a      	adds	r2, r3, r5
 8004a38:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a3a:	5d5a      	ldrb	r2, [r3, r5]
 8004a3c:	2f00      	cmp	r7, #0
 8004a3e:	d037      	beq.n	8004ab0 <_strtod_l+0x250>
 8004a40:	9005      	str	r0, [sp, #20]
 8004a42:	463d      	mov	r5, r7
 8004a44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d912      	bls.n	8004a72 <_strtod_l+0x212>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e7c2      	b.n	80049d6 <_strtod_l+0x176>
 8004a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a56:	785a      	ldrb	r2, [r3, #1]
 8004a58:	3001      	adds	r0, #1
 8004a5a:	2a30      	cmp	r2, #48	; 0x30
 8004a5c:	d0f8      	beq.n	8004a50 <_strtod_l+0x1f0>
 8004a5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	f200 84d9 	bhi.w	800541a <_strtod_l+0xbba>
 8004a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a6a:	9005      	str	r0, [sp, #20]
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	9308      	str	r3, [sp, #32]
 8004a70:	4605      	mov	r5, r0
 8004a72:	3a30      	subs	r2, #48	; 0x30
 8004a74:	f100 0301 	add.w	r3, r0, #1
 8004a78:	d014      	beq.n	8004aa4 <_strtod_l+0x244>
 8004a7a:	9905      	ldr	r1, [sp, #20]
 8004a7c:	4419      	add	r1, r3
 8004a7e:	9105      	str	r1, [sp, #20]
 8004a80:	462b      	mov	r3, r5
 8004a82:	eb00 0e05 	add.w	lr, r0, r5
 8004a86:	210a      	movs	r1, #10
 8004a88:	4573      	cmp	r3, lr
 8004a8a:	d113      	bne.n	8004ab4 <_strtod_l+0x254>
 8004a8c:	182b      	adds	r3, r5, r0
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	f105 0501 	add.w	r5, r5, #1
 8004a94:	4405      	add	r5, r0
 8004a96:	dc1c      	bgt.n	8004ad2 <_strtod_l+0x272>
 8004a98:	9907      	ldr	r1, [sp, #28]
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	fb03 2301 	mla	r3, r3, r1, r2
 8004aa0:	9307      	str	r3, [sp, #28]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004aa6:	1c51      	adds	r1, r2, #1
 8004aa8:	9117      	str	r1, [sp, #92]	; 0x5c
 8004aaa:	7852      	ldrb	r2, [r2, #1]
 8004aac:	4618      	mov	r0, r3
 8004aae:	e7c9      	b.n	8004a44 <_strtod_l+0x1e4>
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	e7d2      	b.n	8004a5a <_strtod_l+0x1fa>
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	dc04      	bgt.n	8004ac2 <_strtod_l+0x262>
 8004ab8:	9e07      	ldr	r6, [sp, #28]
 8004aba:	434e      	muls	r6, r1
 8004abc:	9607      	str	r6, [sp, #28]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	e7e2      	b.n	8004a88 <_strtod_l+0x228>
 8004ac2:	f103 0c01 	add.w	ip, r3, #1
 8004ac6:	f1bc 0f10 	cmp.w	ip, #16
 8004aca:	bfd8      	it	le
 8004acc:	fb01 f909 	mulle.w	r9, r1, r9
 8004ad0:	e7f5      	b.n	8004abe <_strtod_l+0x25e>
 8004ad2:	2d10      	cmp	r5, #16
 8004ad4:	bfdc      	itt	le
 8004ad6:	230a      	movle	r3, #10
 8004ad8:	fb03 2909 	mlale	r9, r3, r9, r2
 8004adc:	e7e1      	b.n	8004aa2 <_strtod_l+0x242>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9305      	str	r3, [sp, #20]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e77c      	b.n	80049e0 <_strtod_l+0x180>
 8004ae6:	f04f 0c00 	mov.w	ip, #0
 8004aea:	f108 0202 	add.w	r2, r8, #2
 8004aee:	9217      	str	r2, [sp, #92]	; 0x5c
 8004af0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004af4:	e785      	b.n	8004a02 <_strtod_l+0x1a2>
 8004af6:	f04f 0c01 	mov.w	ip, #1
 8004afa:	e7f6      	b.n	8004aea <_strtod_l+0x28a>
 8004afc:	08008e10 	.word	0x08008e10
 8004b00:	08008bc4 	.word	0x08008bc4
 8004b04:	7ff00000 	.word	0x7ff00000
 8004b08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b0a:	1c51      	adds	r1, r2, #1
 8004b0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8004b0e:	7852      	ldrb	r2, [r2, #1]
 8004b10:	2a30      	cmp	r2, #48	; 0x30
 8004b12:	d0f9      	beq.n	8004b08 <_strtod_l+0x2a8>
 8004b14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004b18:	2908      	cmp	r1, #8
 8004b1a:	f63f af79 	bhi.w	8004a10 <_strtod_l+0x1b0>
 8004b1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004b22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b24:	9206      	str	r2, [sp, #24]
 8004b26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b28:	1c51      	adds	r1, r2, #1
 8004b2a:	9117      	str	r1, [sp, #92]	; 0x5c
 8004b2c:	7852      	ldrb	r2, [r2, #1]
 8004b2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004b32:	2e09      	cmp	r6, #9
 8004b34:	d937      	bls.n	8004ba6 <_strtod_l+0x346>
 8004b36:	9e06      	ldr	r6, [sp, #24]
 8004b38:	1b89      	subs	r1, r1, r6
 8004b3a:	2908      	cmp	r1, #8
 8004b3c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004b40:	dc02      	bgt.n	8004b48 <_strtod_l+0x2e8>
 8004b42:	4576      	cmp	r6, lr
 8004b44:	bfa8      	it	ge
 8004b46:	4676      	movge	r6, lr
 8004b48:	f1bc 0f00 	cmp.w	ip, #0
 8004b4c:	d000      	beq.n	8004b50 <_strtod_l+0x2f0>
 8004b4e:	4276      	negs	r6, r6
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	d14d      	bne.n	8004bf0 <_strtod_l+0x390>
 8004b54:	9904      	ldr	r1, [sp, #16]
 8004b56:	4301      	orrs	r1, r0
 8004b58:	f47f aec6 	bne.w	80048e8 <_strtod_l+0x88>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f aee1 	bne.w	8004924 <_strtod_l+0xc4>
 8004b62:	2a69      	cmp	r2, #105	; 0x69
 8004b64:	d027      	beq.n	8004bb6 <_strtod_l+0x356>
 8004b66:	dc24      	bgt.n	8004bb2 <_strtod_l+0x352>
 8004b68:	2a49      	cmp	r2, #73	; 0x49
 8004b6a:	d024      	beq.n	8004bb6 <_strtod_l+0x356>
 8004b6c:	2a4e      	cmp	r2, #78	; 0x4e
 8004b6e:	f47f aed9 	bne.w	8004924 <_strtod_l+0xc4>
 8004b72:	499f      	ldr	r1, [pc, #636]	; (8004df0 <_strtod_l+0x590>)
 8004b74:	a817      	add	r0, sp, #92	; 0x5c
 8004b76:	f001 fe3d 	bl	80067f4 <__match>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	f43f aed2 	beq.w	8004924 <_strtod_l+0xc4>
 8004b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b28      	cmp	r3, #40	; 0x28
 8004b86:	d12d      	bne.n	8004be4 <_strtod_l+0x384>
 8004b88:	499a      	ldr	r1, [pc, #616]	; (8004df4 <_strtod_l+0x594>)
 8004b8a:	aa1a      	add	r2, sp, #104	; 0x68
 8004b8c:	a817      	add	r0, sp, #92	; 0x5c
 8004b8e:	f001 fe45 	bl	800681c <__hexnan>
 8004b92:	2805      	cmp	r0, #5
 8004b94:	d126      	bne.n	8004be4 <_strtod_l+0x384>
 8004b96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004b9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004ba0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004ba4:	e6a0      	b.n	80048e8 <_strtod_l+0x88>
 8004ba6:	210a      	movs	r1, #10
 8004ba8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004bac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004bb0:	e7b9      	b.n	8004b26 <_strtod_l+0x2c6>
 8004bb2:	2a6e      	cmp	r2, #110	; 0x6e
 8004bb4:	e7db      	b.n	8004b6e <_strtod_l+0x30e>
 8004bb6:	4990      	ldr	r1, [pc, #576]	; (8004df8 <_strtod_l+0x598>)
 8004bb8:	a817      	add	r0, sp, #92	; 0x5c
 8004bba:	f001 fe1b 	bl	80067f4 <__match>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f43f aeb0 	beq.w	8004924 <_strtod_l+0xc4>
 8004bc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bc6:	498d      	ldr	r1, [pc, #564]	; (8004dfc <_strtod_l+0x59c>)
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	a817      	add	r0, sp, #92	; 0x5c
 8004bcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8004bce:	f001 fe11 	bl	80067f4 <__match>
 8004bd2:	b910      	cbnz	r0, 8004bda <_strtod_l+0x37a>
 8004bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8004bda:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004e0c <_strtod_l+0x5ac>
 8004bde:	f04f 0a00 	mov.w	sl, #0
 8004be2:	e681      	b.n	80048e8 <_strtod_l+0x88>
 8004be4:	4886      	ldr	r0, [pc, #536]	; (8004e00 <_strtod_l+0x5a0>)
 8004be6:	f002 fdf7 	bl	80077d8 <nan>
 8004bea:	ec5b ab10 	vmov	sl, fp, d0
 8004bee:	e67b      	b.n	80048e8 <_strtod_l+0x88>
 8004bf0:	9b05      	ldr	r3, [sp, #20]
 8004bf2:	9807      	ldr	r0, [sp, #28]
 8004bf4:	1af3      	subs	r3, r6, r3
 8004bf6:	2f00      	cmp	r7, #0
 8004bf8:	bf08      	it	eq
 8004bfa:	462f      	moveq	r7, r5
 8004bfc:	2d10      	cmp	r5, #16
 8004bfe:	9306      	str	r3, [sp, #24]
 8004c00:	46a8      	mov	r8, r5
 8004c02:	bfa8      	it	ge
 8004c04:	f04f 0810 	movge.w	r8, #16
 8004c08:	f7fb fc7c 	bl	8000504 <__aeabi_ui2d>
 8004c0c:	2d09      	cmp	r5, #9
 8004c0e:	4682      	mov	sl, r0
 8004c10:	468b      	mov	fp, r1
 8004c12:	dd13      	ble.n	8004c3c <_strtod_l+0x3dc>
 8004c14:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <_strtod_l+0x5a4>)
 8004c16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004c1e:	f7fb fceb 	bl	80005f8 <__aeabi_dmul>
 8004c22:	4682      	mov	sl, r0
 8004c24:	4648      	mov	r0, r9
 8004c26:	468b      	mov	fp, r1
 8004c28:	f7fb fc6c 	bl	8000504 <__aeabi_ui2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4650      	mov	r0, sl
 8004c32:	4659      	mov	r1, fp
 8004c34:	f7fb fb2a 	bl	800028c <__adddf3>
 8004c38:	4682      	mov	sl, r0
 8004c3a:	468b      	mov	fp, r1
 8004c3c:	2d0f      	cmp	r5, #15
 8004c3e:	dc38      	bgt.n	8004cb2 <_strtod_l+0x452>
 8004c40:	9b06      	ldr	r3, [sp, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f43f ae50 	beq.w	80048e8 <_strtod_l+0x88>
 8004c48:	dd24      	ble.n	8004c94 <_strtod_l+0x434>
 8004c4a:	2b16      	cmp	r3, #22
 8004c4c:	dc0b      	bgt.n	8004c66 <_strtod_l+0x406>
 8004c4e:	496d      	ldr	r1, [pc, #436]	; (8004e04 <_strtod_l+0x5a4>)
 8004c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c58:	4652      	mov	r2, sl
 8004c5a:	465b      	mov	r3, fp
 8004c5c:	f7fb fccc 	bl	80005f8 <__aeabi_dmul>
 8004c60:	4682      	mov	sl, r0
 8004c62:	468b      	mov	fp, r1
 8004c64:	e640      	b.n	80048e8 <_strtod_l+0x88>
 8004c66:	9a06      	ldr	r2, [sp, #24]
 8004c68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	db20      	blt.n	8004cb2 <_strtod_l+0x452>
 8004c70:	4c64      	ldr	r4, [pc, #400]	; (8004e04 <_strtod_l+0x5a4>)
 8004c72:	f1c5 050f 	rsb	r5, r5, #15
 8004c76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	465b      	mov	r3, fp
 8004c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c82:	f7fb fcb9 	bl	80005f8 <__aeabi_dmul>
 8004c86:	9b06      	ldr	r3, [sp, #24]
 8004c88:	1b5d      	subs	r5, r3, r5
 8004c8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c92:	e7e3      	b.n	8004c5c <_strtod_l+0x3fc>
 8004c94:	9b06      	ldr	r3, [sp, #24]
 8004c96:	3316      	adds	r3, #22
 8004c98:	db0b      	blt.n	8004cb2 <_strtod_l+0x452>
 8004c9a:	9b05      	ldr	r3, [sp, #20]
 8004c9c:	1b9e      	subs	r6, r3, r6
 8004c9e:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <_strtod_l+0x5a4>)
 8004ca0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ca8:	4650      	mov	r0, sl
 8004caa:	4659      	mov	r1, fp
 8004cac:	f7fb fdce 	bl	800084c <__aeabi_ddiv>
 8004cb0:	e7d6      	b.n	8004c60 <_strtod_l+0x400>
 8004cb2:	9b06      	ldr	r3, [sp, #24]
 8004cb4:	eba5 0808 	sub.w	r8, r5, r8
 8004cb8:	4498      	add	r8, r3
 8004cba:	f1b8 0f00 	cmp.w	r8, #0
 8004cbe:	dd74      	ble.n	8004daa <_strtod_l+0x54a>
 8004cc0:	f018 030f 	ands.w	r3, r8, #15
 8004cc4:	d00a      	beq.n	8004cdc <_strtod_l+0x47c>
 8004cc6:	494f      	ldr	r1, [pc, #316]	; (8004e04 <_strtod_l+0x5a4>)
 8004cc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ccc:	4652      	mov	r2, sl
 8004cce:	465b      	mov	r3, fp
 8004cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd4:	f7fb fc90 	bl	80005f8 <__aeabi_dmul>
 8004cd8:	4682      	mov	sl, r0
 8004cda:	468b      	mov	fp, r1
 8004cdc:	f038 080f 	bics.w	r8, r8, #15
 8004ce0:	d04f      	beq.n	8004d82 <_strtod_l+0x522>
 8004ce2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004ce6:	dd22      	ble.n	8004d2e <_strtod_l+0x4ce>
 8004ce8:	2500      	movs	r5, #0
 8004cea:	462e      	mov	r6, r5
 8004cec:	9507      	str	r5, [sp, #28]
 8004cee:	9505      	str	r5, [sp, #20]
 8004cf0:	2322      	movs	r3, #34	; 0x22
 8004cf2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004e0c <_strtod_l+0x5ac>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	f04f 0a00 	mov.w	sl, #0
 8004cfc:	9b07      	ldr	r3, [sp, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f43f adf2 	beq.w	80048e8 <_strtod_l+0x88>
 8004d04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d06:	4620      	mov	r0, r4
 8004d08:	f001 fe90 	bl	8006a2c <_Bfree>
 8004d0c:	9905      	ldr	r1, [sp, #20]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f001 fe8c 	bl	8006a2c <_Bfree>
 8004d14:	4631      	mov	r1, r6
 8004d16:	4620      	mov	r0, r4
 8004d18:	f001 fe88 	bl	8006a2c <_Bfree>
 8004d1c:	9907      	ldr	r1, [sp, #28]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f001 fe84 	bl	8006a2c <_Bfree>
 8004d24:	4629      	mov	r1, r5
 8004d26:	4620      	mov	r0, r4
 8004d28:	f001 fe80 	bl	8006a2c <_Bfree>
 8004d2c:	e5dc      	b.n	80048e8 <_strtod_l+0x88>
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <_strtod_l+0x5a8>)
 8004d30:	9304      	str	r3, [sp, #16]
 8004d32:	2300      	movs	r3, #0
 8004d34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004d38:	4650      	mov	r0, sl
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	4699      	mov	r9, r3
 8004d3e:	f1b8 0f01 	cmp.w	r8, #1
 8004d42:	dc21      	bgt.n	8004d88 <_strtod_l+0x528>
 8004d44:	b10b      	cbz	r3, 8004d4a <_strtod_l+0x4ea>
 8004d46:	4682      	mov	sl, r0
 8004d48:	468b      	mov	fp, r1
 8004d4a:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <_strtod_l+0x5a8>)
 8004d4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004d50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004d54:	4652      	mov	r2, sl
 8004d56:	465b      	mov	r3, fp
 8004d58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004d5c:	f7fb fc4c 	bl	80005f8 <__aeabi_dmul>
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <_strtod_l+0x5ac>)
 8004d62:	460a      	mov	r2, r1
 8004d64:	400b      	ands	r3, r1
 8004d66:	492a      	ldr	r1, [pc, #168]	; (8004e10 <_strtod_l+0x5b0>)
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	4682      	mov	sl, r0
 8004d6c:	d8bc      	bhi.n	8004ce8 <_strtod_l+0x488>
 8004d6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004d72:	428b      	cmp	r3, r1
 8004d74:	bf86      	itte	hi
 8004d76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004e14 <_strtod_l+0x5b4>
 8004d7a:	f04f 3aff 	movhi.w	sl, #4294967295
 8004d7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004d82:	2300      	movs	r3, #0
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	e084      	b.n	8004e92 <_strtod_l+0x632>
 8004d88:	f018 0f01 	tst.w	r8, #1
 8004d8c:	d005      	beq.n	8004d9a <_strtod_l+0x53a>
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f7fb fc30 	bl	80005f8 <__aeabi_dmul>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	3208      	adds	r2, #8
 8004d9e:	f109 0901 	add.w	r9, r9, #1
 8004da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004da6:	9204      	str	r2, [sp, #16]
 8004da8:	e7c9      	b.n	8004d3e <_strtod_l+0x4de>
 8004daa:	d0ea      	beq.n	8004d82 <_strtod_l+0x522>
 8004dac:	f1c8 0800 	rsb	r8, r8, #0
 8004db0:	f018 020f 	ands.w	r2, r8, #15
 8004db4:	d00a      	beq.n	8004dcc <_strtod_l+0x56c>
 8004db6:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <_strtod_l+0x5a4>)
 8004db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb fd42 	bl	800084c <__aeabi_ddiv>
 8004dc8:	4682      	mov	sl, r0
 8004dca:	468b      	mov	fp, r1
 8004dcc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004dd0:	d0d7      	beq.n	8004d82 <_strtod_l+0x522>
 8004dd2:	f1b8 0f1f 	cmp.w	r8, #31
 8004dd6:	dd1f      	ble.n	8004e18 <_strtod_l+0x5b8>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	462e      	mov	r6, r5
 8004ddc:	9507      	str	r5, [sp, #28]
 8004dde:	9505      	str	r5, [sp, #20]
 8004de0:	2322      	movs	r3, #34	; 0x22
 8004de2:	f04f 0a00 	mov.w	sl, #0
 8004de6:	f04f 0b00 	mov.w	fp, #0
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	e786      	b.n	8004cfc <_strtod_l+0x49c>
 8004dee:	bf00      	nop
 8004df0:	08008b95 	.word	0x08008b95
 8004df4:	08008bd8 	.word	0x08008bd8
 8004df8:	08008b8d 	.word	0x08008b8d
 8004dfc:	08008d1c 	.word	0x08008d1c
 8004e00:	08008fc8 	.word	0x08008fc8
 8004e04:	08008ea8 	.word	0x08008ea8
 8004e08:	08008e80 	.word	0x08008e80
 8004e0c:	7ff00000 	.word	0x7ff00000
 8004e10:	7ca00000 	.word	0x7ca00000
 8004e14:	7fefffff 	.word	0x7fefffff
 8004e18:	f018 0310 	ands.w	r3, r8, #16
 8004e1c:	bf18      	it	ne
 8004e1e:	236a      	movne	r3, #106	; 0x6a
 8004e20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80051d0 <_strtod_l+0x970>
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	4650      	mov	r0, sl
 8004e28:	4659      	mov	r1, fp
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f018 0f01 	tst.w	r8, #1
 8004e30:	d004      	beq.n	8004e3c <_strtod_l+0x5dc>
 8004e32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004e36:	f7fb fbdf 	bl	80005f8 <__aeabi_dmul>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004e40:	f109 0908 	add.w	r9, r9, #8
 8004e44:	d1f2      	bne.n	8004e2c <_strtod_l+0x5cc>
 8004e46:	b10b      	cbz	r3, 8004e4c <_strtod_l+0x5ec>
 8004e48:	4682      	mov	sl, r0
 8004e4a:	468b      	mov	fp, r1
 8004e4c:	9b04      	ldr	r3, [sp, #16]
 8004e4e:	b1c3      	cbz	r3, 8004e82 <_strtod_l+0x622>
 8004e50:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004e54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	dd11      	ble.n	8004e82 <_strtod_l+0x622>
 8004e5e:	2b1f      	cmp	r3, #31
 8004e60:	f340 8124 	ble.w	80050ac <_strtod_l+0x84c>
 8004e64:	2b34      	cmp	r3, #52	; 0x34
 8004e66:	bfde      	ittt	le
 8004e68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004e6c:	f04f 33ff 	movle.w	r3, #4294967295
 8004e70:	fa03 f202 	lslle.w	r2, r3, r2
 8004e74:	f04f 0a00 	mov.w	sl, #0
 8004e78:	bfcc      	ite	gt
 8004e7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004e7e:	ea02 0b01 	andle.w	fp, r2, r1
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4650      	mov	r0, sl
 8004e88:	4659      	mov	r1, fp
 8004e8a:	f7fb fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d1a2      	bne.n	8004dd8 <_strtod_l+0x578>
 8004e92:	9b07      	ldr	r3, [sp, #28]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	9908      	ldr	r1, [sp, #32]
 8004e98:	462b      	mov	r3, r5
 8004e9a:	463a      	mov	r2, r7
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f001 fe2d 	bl	8006afc <__s2b>
 8004ea2:	9007      	str	r0, [sp, #28]
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f43f af1f 	beq.w	8004ce8 <_strtod_l+0x488>
 8004eaa:	9b05      	ldr	r3, [sp, #20]
 8004eac:	1b9e      	subs	r6, r3, r6
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bfb4      	ite	lt
 8004eb4:	4633      	movlt	r3, r6
 8004eb6:	2300      	movge	r3, #0
 8004eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8004eba:	9b06      	ldr	r3, [sp, #24]
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ec2:	9312      	str	r3, [sp, #72]	; 0x48
 8004ec4:	462e      	mov	r6, r5
 8004ec6:	9b07      	ldr	r3, [sp, #28]
 8004ec8:	4620      	mov	r0, r4
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	f001 fd6e 	bl	80069ac <_Balloc>
 8004ed0:	9005      	str	r0, [sp, #20]
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f43f af0c 	beq.w	8004cf0 <_strtod_l+0x490>
 8004ed8:	9b07      	ldr	r3, [sp, #28]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	3202      	adds	r2, #2
 8004ede:	f103 010c 	add.w	r1, r3, #12
 8004ee2:	0092      	lsls	r2, r2, #2
 8004ee4:	300c      	adds	r0, #12
 8004ee6:	f001 fd53 	bl	8006990 <memcpy>
 8004eea:	ec4b ab10 	vmov	d0, sl, fp
 8004eee:	aa1a      	add	r2, sp, #104	; 0x68
 8004ef0:	a919      	add	r1, sp, #100	; 0x64
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f002 f948 	bl	8007188 <__d2b>
 8004ef8:	ec4b ab18 	vmov	d8, sl, fp
 8004efc:	9018      	str	r0, [sp, #96]	; 0x60
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f43f aef6 	beq.w	8004cf0 <_strtod_l+0x490>
 8004f04:	2101      	movs	r1, #1
 8004f06:	4620      	mov	r0, r4
 8004f08:	f001 fe92 	bl	8006c30 <__i2b>
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f43f aeee 	beq.w	8004cf0 <_strtod_l+0x490>
 8004f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f16:	9904      	ldr	r1, [sp, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfab      	itete	ge
 8004f1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004f1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004f20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004f22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004f26:	bfac      	ite	ge
 8004f28:	eb03 0902 	addge.w	r9, r3, r2
 8004f2c:	1ad7      	sublt	r7, r2, r3
 8004f2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f30:	eba3 0801 	sub.w	r8, r3, r1
 8004f34:	4490      	add	r8, r2
 8004f36:	4ba1      	ldr	r3, [pc, #644]	; (80051bc <_strtod_l+0x95c>)
 8004f38:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f3c:	4598      	cmp	r8, r3
 8004f3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004f42:	f280 80c7 	bge.w	80050d4 <_strtod_l+0x874>
 8004f46:	eba3 0308 	sub.w	r3, r3, r8
 8004f4a:	2b1f      	cmp	r3, #31
 8004f4c:	eba2 0203 	sub.w	r2, r2, r3
 8004f50:	f04f 0101 	mov.w	r1, #1
 8004f54:	f300 80b1 	bgt.w	80050ba <_strtod_l+0x85a>
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9308      	str	r3, [sp, #32]
 8004f62:	eb09 0802 	add.w	r8, r9, r2
 8004f66:	9b04      	ldr	r3, [sp, #16]
 8004f68:	45c1      	cmp	r9, r8
 8004f6a:	4417      	add	r7, r2
 8004f6c:	441f      	add	r7, r3
 8004f6e:	464b      	mov	r3, r9
 8004f70:	bfa8      	it	ge
 8004f72:	4643      	movge	r3, r8
 8004f74:	42bb      	cmp	r3, r7
 8004f76:	bfa8      	it	ge
 8004f78:	463b      	movge	r3, r7
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfc2      	ittt	gt
 8004f7e:	eba8 0803 	subgt.w	r8, r8, r3
 8004f82:	1aff      	subgt	r7, r7, r3
 8004f84:	eba9 0903 	subgt.w	r9, r9, r3
 8004f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	dd17      	ble.n	8004fbe <_strtod_l+0x75e>
 8004f8e:	4631      	mov	r1, r6
 8004f90:	461a      	mov	r2, r3
 8004f92:	4620      	mov	r0, r4
 8004f94:	f001 ff0c 	bl	8006db0 <__pow5mult>
 8004f98:	4606      	mov	r6, r0
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f43f aea8 	beq.w	8004cf0 <_strtod_l+0x490>
 8004fa0:	4601      	mov	r1, r0
 8004fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f001 fe59 	bl	8006c5c <__multiply>
 8004faa:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f43f ae9f 	beq.w	8004cf0 <_strtod_l+0x490>
 8004fb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f001 fd39 	bl	8006a2c <_Bfree>
 8004fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fbc:	9318      	str	r3, [sp, #96]	; 0x60
 8004fbe:	f1b8 0f00 	cmp.w	r8, #0
 8004fc2:	f300 808c 	bgt.w	80050de <_strtod_l+0x87e>
 8004fc6:	9b06      	ldr	r3, [sp, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dd08      	ble.n	8004fde <_strtod_l+0x77e>
 8004fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fce:	9905      	ldr	r1, [sp, #20]
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f001 feed 	bl	8006db0 <__pow5mult>
 8004fd6:	9005      	str	r0, [sp, #20]
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	f43f ae89 	beq.w	8004cf0 <_strtod_l+0x490>
 8004fde:	2f00      	cmp	r7, #0
 8004fe0:	dd08      	ble.n	8004ff4 <_strtod_l+0x794>
 8004fe2:	9905      	ldr	r1, [sp, #20]
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f001 ff3c 	bl	8006e64 <__lshift>
 8004fec:	9005      	str	r0, [sp, #20]
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f43f ae7e 	beq.w	8004cf0 <_strtod_l+0x490>
 8004ff4:	f1b9 0f00 	cmp.w	r9, #0
 8004ff8:	dd08      	ble.n	800500c <_strtod_l+0x7ac>
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	464a      	mov	r2, r9
 8004ffe:	4620      	mov	r0, r4
 8005000:	f001 ff30 	bl	8006e64 <__lshift>
 8005004:	4606      	mov	r6, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	f43f ae72 	beq.w	8004cf0 <_strtod_l+0x490>
 800500c:	9a05      	ldr	r2, [sp, #20]
 800500e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005010:	4620      	mov	r0, r4
 8005012:	f001 ffb3 	bl	8006f7c <__mdiff>
 8005016:	4605      	mov	r5, r0
 8005018:	2800      	cmp	r0, #0
 800501a:	f43f ae69 	beq.w	8004cf0 <_strtod_l+0x490>
 800501e:	68c3      	ldr	r3, [r0, #12]
 8005020:	930b      	str	r3, [sp, #44]	; 0x2c
 8005022:	2300      	movs	r3, #0
 8005024:	60c3      	str	r3, [r0, #12]
 8005026:	4631      	mov	r1, r6
 8005028:	f001 ff8c 	bl	8006f44 <__mcmp>
 800502c:	2800      	cmp	r0, #0
 800502e:	da60      	bge.n	80050f2 <_strtod_l+0x892>
 8005030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005032:	ea53 030a 	orrs.w	r3, r3, sl
 8005036:	f040 8082 	bne.w	800513e <_strtod_l+0x8de>
 800503a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800503e:	2b00      	cmp	r3, #0
 8005040:	d17d      	bne.n	800513e <_strtod_l+0x8de>
 8005042:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005046:	0d1b      	lsrs	r3, r3, #20
 8005048:	051b      	lsls	r3, r3, #20
 800504a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800504e:	d976      	bls.n	800513e <_strtod_l+0x8de>
 8005050:	696b      	ldr	r3, [r5, #20]
 8005052:	b913      	cbnz	r3, 800505a <_strtod_l+0x7fa>
 8005054:	692b      	ldr	r3, [r5, #16]
 8005056:	2b01      	cmp	r3, #1
 8005058:	dd71      	ble.n	800513e <_strtod_l+0x8de>
 800505a:	4629      	mov	r1, r5
 800505c:	2201      	movs	r2, #1
 800505e:	4620      	mov	r0, r4
 8005060:	f001 ff00 	bl	8006e64 <__lshift>
 8005064:	4631      	mov	r1, r6
 8005066:	4605      	mov	r5, r0
 8005068:	f001 ff6c 	bl	8006f44 <__mcmp>
 800506c:	2800      	cmp	r0, #0
 800506e:	dd66      	ble.n	800513e <_strtod_l+0x8de>
 8005070:	9904      	ldr	r1, [sp, #16]
 8005072:	4a53      	ldr	r2, [pc, #332]	; (80051c0 <_strtod_l+0x960>)
 8005074:	465b      	mov	r3, fp
 8005076:	2900      	cmp	r1, #0
 8005078:	f000 8081 	beq.w	800517e <_strtod_l+0x91e>
 800507c:	ea02 010b 	and.w	r1, r2, fp
 8005080:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005084:	dc7b      	bgt.n	800517e <_strtod_l+0x91e>
 8005086:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800508a:	f77f aea9 	ble.w	8004de0 <_strtod_l+0x580>
 800508e:	4b4d      	ldr	r3, [pc, #308]	; (80051c4 <_strtod_l+0x964>)
 8005090:	4650      	mov	r0, sl
 8005092:	4659      	mov	r1, fp
 8005094:	2200      	movs	r2, #0
 8005096:	f7fb faaf 	bl	80005f8 <__aeabi_dmul>
 800509a:	460b      	mov	r3, r1
 800509c:	4303      	orrs	r3, r0
 800509e:	bf08      	it	eq
 80050a0:	2322      	moveq	r3, #34	; 0x22
 80050a2:	4682      	mov	sl, r0
 80050a4:	468b      	mov	fp, r1
 80050a6:	bf08      	it	eq
 80050a8:	6023      	streq	r3, [r4, #0]
 80050aa:	e62b      	b.n	8004d04 <_strtod_l+0x4a4>
 80050ac:	f04f 32ff 	mov.w	r2, #4294967295
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	ea03 0a0a 	and.w	sl, r3, sl
 80050b8:	e6e3      	b.n	8004e82 <_strtod_l+0x622>
 80050ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80050be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80050c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80050c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80050ca:	fa01 f308 	lsl.w	r3, r1, r8
 80050ce:	9308      	str	r3, [sp, #32]
 80050d0:	910d      	str	r1, [sp, #52]	; 0x34
 80050d2:	e746      	b.n	8004f62 <_strtod_l+0x702>
 80050d4:	2300      	movs	r3, #0
 80050d6:	9308      	str	r3, [sp, #32]
 80050d8:	2301      	movs	r3, #1
 80050da:	930d      	str	r3, [sp, #52]	; 0x34
 80050dc:	e741      	b.n	8004f62 <_strtod_l+0x702>
 80050de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050e0:	4642      	mov	r2, r8
 80050e2:	4620      	mov	r0, r4
 80050e4:	f001 febe 	bl	8006e64 <__lshift>
 80050e8:	9018      	str	r0, [sp, #96]	; 0x60
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f47f af6b 	bne.w	8004fc6 <_strtod_l+0x766>
 80050f0:	e5fe      	b.n	8004cf0 <_strtod_l+0x490>
 80050f2:	465f      	mov	r7, fp
 80050f4:	d16e      	bne.n	80051d4 <_strtod_l+0x974>
 80050f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050fc:	b342      	cbz	r2, 8005150 <_strtod_l+0x8f0>
 80050fe:	4a32      	ldr	r2, [pc, #200]	; (80051c8 <_strtod_l+0x968>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d128      	bne.n	8005156 <_strtod_l+0x8f6>
 8005104:	9b04      	ldr	r3, [sp, #16]
 8005106:	4651      	mov	r1, sl
 8005108:	b1eb      	cbz	r3, 8005146 <_strtod_l+0x8e6>
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <_strtod_l+0x960>)
 800510c:	403b      	ands	r3, r7
 800510e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005112:	f04f 32ff 	mov.w	r2, #4294967295
 8005116:	d819      	bhi.n	800514c <_strtod_l+0x8ec>
 8005118:	0d1b      	lsrs	r3, r3, #20
 800511a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	4299      	cmp	r1, r3
 8005124:	d117      	bne.n	8005156 <_strtod_l+0x8f6>
 8005126:	4b29      	ldr	r3, [pc, #164]	; (80051cc <_strtod_l+0x96c>)
 8005128:	429f      	cmp	r7, r3
 800512a:	d102      	bne.n	8005132 <_strtod_l+0x8d2>
 800512c:	3101      	adds	r1, #1
 800512e:	f43f addf 	beq.w	8004cf0 <_strtod_l+0x490>
 8005132:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <_strtod_l+0x960>)
 8005134:	403b      	ands	r3, r7
 8005136:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800513a:	f04f 0a00 	mov.w	sl, #0
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1a4      	bne.n	800508e <_strtod_l+0x82e>
 8005144:	e5de      	b.n	8004d04 <_strtod_l+0x4a4>
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e7ea      	b.n	8005122 <_strtod_l+0x8c2>
 800514c:	4613      	mov	r3, r2
 800514e:	e7e8      	b.n	8005122 <_strtod_l+0x8c2>
 8005150:	ea53 030a 	orrs.w	r3, r3, sl
 8005154:	d08c      	beq.n	8005070 <_strtod_l+0x810>
 8005156:	9b08      	ldr	r3, [sp, #32]
 8005158:	b1db      	cbz	r3, 8005192 <_strtod_l+0x932>
 800515a:	423b      	tst	r3, r7
 800515c:	d0ef      	beq.n	800513e <_strtod_l+0x8de>
 800515e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005160:	9a04      	ldr	r2, [sp, #16]
 8005162:	4650      	mov	r0, sl
 8005164:	4659      	mov	r1, fp
 8005166:	b1c3      	cbz	r3, 800519a <_strtod_l+0x93a>
 8005168:	f7ff fb5c 	bl	8004824 <sulp>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	ec51 0b18 	vmov	r0, r1, d8
 8005174:	f7fb f88a 	bl	800028c <__adddf3>
 8005178:	4682      	mov	sl, r0
 800517a:	468b      	mov	fp, r1
 800517c:	e7df      	b.n	800513e <_strtod_l+0x8de>
 800517e:	4013      	ands	r3, r2
 8005180:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005184:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005188:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800518c:	f04f 3aff 	mov.w	sl, #4294967295
 8005190:	e7d5      	b.n	800513e <_strtod_l+0x8de>
 8005192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005194:	ea13 0f0a 	tst.w	r3, sl
 8005198:	e7e0      	b.n	800515c <_strtod_l+0x8fc>
 800519a:	f7ff fb43 	bl	8004824 <sulp>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	ec51 0b18 	vmov	r0, r1, d8
 80051a6:	f7fb f86f 	bl	8000288 <__aeabi_dsub>
 80051aa:	2200      	movs	r2, #0
 80051ac:	2300      	movs	r3, #0
 80051ae:	4682      	mov	sl, r0
 80051b0:	468b      	mov	fp, r1
 80051b2:	f7fb fc89 	bl	8000ac8 <__aeabi_dcmpeq>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d0c1      	beq.n	800513e <_strtod_l+0x8de>
 80051ba:	e611      	b.n	8004de0 <_strtod_l+0x580>
 80051bc:	fffffc02 	.word	0xfffffc02
 80051c0:	7ff00000 	.word	0x7ff00000
 80051c4:	39500000 	.word	0x39500000
 80051c8:	000fffff 	.word	0x000fffff
 80051cc:	7fefffff 	.word	0x7fefffff
 80051d0:	08008bf0 	.word	0x08008bf0
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	f002 f832 	bl	8007240 <__ratio>
 80051dc:	ec59 8b10 	vmov	r8, r9, d0
 80051e0:	ee10 0a10 	vmov	r0, s0
 80051e4:	2200      	movs	r2, #0
 80051e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb fc80 	bl	8000af0 <__aeabi_dcmple>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d07a      	beq.n	80052ea <_strtod_l+0xa8a>
 80051f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04a      	beq.n	8005290 <_strtod_l+0xa30>
 80051fa:	4b95      	ldr	r3, [pc, #596]	; (8005450 <_strtod_l+0xbf0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005202:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005450 <_strtod_l+0xbf0>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	4b92      	ldr	r3, [pc, #584]	; (8005454 <_strtod_l+0xbf4>)
 800520c:	403b      	ands	r3, r7
 800520e:	930d      	str	r3, [sp, #52]	; 0x34
 8005210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005212:	4b91      	ldr	r3, [pc, #580]	; (8005458 <_strtod_l+0xbf8>)
 8005214:	429a      	cmp	r2, r3
 8005216:	f040 80b0 	bne.w	800537a <_strtod_l+0xb1a>
 800521a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800521e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005222:	ec4b ab10 	vmov	d0, sl, fp
 8005226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800522a:	f001 ff31 	bl	8007090 <__ulp>
 800522e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005232:	ec53 2b10 	vmov	r2, r3, d0
 8005236:	f7fb f9df 	bl	80005f8 <__aeabi_dmul>
 800523a:	4652      	mov	r2, sl
 800523c:	465b      	mov	r3, fp
 800523e:	f7fb f825 	bl	800028c <__adddf3>
 8005242:	460b      	mov	r3, r1
 8005244:	4983      	ldr	r1, [pc, #524]	; (8005454 <_strtod_l+0xbf4>)
 8005246:	4a85      	ldr	r2, [pc, #532]	; (800545c <_strtod_l+0xbfc>)
 8005248:	4019      	ands	r1, r3
 800524a:	4291      	cmp	r1, r2
 800524c:	4682      	mov	sl, r0
 800524e:	d960      	bls.n	8005312 <_strtod_l+0xab2>
 8005250:	ee18 3a90 	vmov	r3, s17
 8005254:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005258:	4293      	cmp	r3, r2
 800525a:	d104      	bne.n	8005266 <_strtod_l+0xa06>
 800525c:	ee18 3a10 	vmov	r3, s16
 8005260:	3301      	adds	r3, #1
 8005262:	f43f ad45 	beq.w	8004cf0 <_strtod_l+0x490>
 8005266:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005468 <_strtod_l+0xc08>
 800526a:	f04f 3aff 	mov.w	sl, #4294967295
 800526e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005270:	4620      	mov	r0, r4
 8005272:	f001 fbdb 	bl	8006a2c <_Bfree>
 8005276:	9905      	ldr	r1, [sp, #20]
 8005278:	4620      	mov	r0, r4
 800527a:	f001 fbd7 	bl	8006a2c <_Bfree>
 800527e:	4631      	mov	r1, r6
 8005280:	4620      	mov	r0, r4
 8005282:	f001 fbd3 	bl	8006a2c <_Bfree>
 8005286:	4629      	mov	r1, r5
 8005288:	4620      	mov	r0, r4
 800528a:	f001 fbcf 	bl	8006a2c <_Bfree>
 800528e:	e61a      	b.n	8004ec6 <_strtod_l+0x666>
 8005290:	f1ba 0f00 	cmp.w	sl, #0
 8005294:	d11b      	bne.n	80052ce <_strtod_l+0xa6e>
 8005296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800529a:	b9f3      	cbnz	r3, 80052da <_strtod_l+0xa7a>
 800529c:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <_strtod_l+0xbf0>)
 800529e:	2200      	movs	r2, #0
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb fc1a 	bl	8000adc <__aeabi_dcmplt>
 80052a8:	b9d0      	cbnz	r0, 80052e0 <_strtod_l+0xa80>
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <_strtod_l+0xc00>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	f7fb f9a1 	bl	80005f8 <__aeabi_dmul>
 80052b6:	4680      	mov	r8, r0
 80052b8:	4689      	mov	r9, r1
 80052ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80052be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80052c2:	9315      	str	r3, [sp, #84]	; 0x54
 80052c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80052c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052cc:	e79d      	b.n	800520a <_strtod_l+0x9aa>
 80052ce:	f1ba 0f01 	cmp.w	sl, #1
 80052d2:	d102      	bne.n	80052da <_strtod_l+0xa7a>
 80052d4:	2f00      	cmp	r7, #0
 80052d6:	f43f ad83 	beq.w	8004de0 <_strtod_l+0x580>
 80052da:	4b62      	ldr	r3, [pc, #392]	; (8005464 <_strtod_l+0xc04>)
 80052dc:	2200      	movs	r2, #0
 80052de:	e78e      	b.n	80051fe <_strtod_l+0x99e>
 80052e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005460 <_strtod_l+0xc00>
 80052e4:	f04f 0800 	mov.w	r8, #0
 80052e8:	e7e7      	b.n	80052ba <_strtod_l+0xa5a>
 80052ea:	4b5d      	ldr	r3, [pc, #372]	; (8005460 <_strtod_l+0xc00>)
 80052ec:	4640      	mov	r0, r8
 80052ee:	4649      	mov	r1, r9
 80052f0:	2200      	movs	r2, #0
 80052f2:	f7fb f981 	bl	80005f8 <__aeabi_dmul>
 80052f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f8:	4680      	mov	r8, r0
 80052fa:	4689      	mov	r9, r1
 80052fc:	b933      	cbnz	r3, 800530c <_strtod_l+0xaac>
 80052fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005302:	900e      	str	r0, [sp, #56]	; 0x38
 8005304:	930f      	str	r3, [sp, #60]	; 0x3c
 8005306:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800530a:	e7dd      	b.n	80052c8 <_strtod_l+0xa68>
 800530c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005310:	e7f9      	b.n	8005306 <_strtod_l+0xaa6>
 8005312:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005316:	9b04      	ldr	r3, [sp, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1a8      	bne.n	800526e <_strtod_l+0xa0e>
 800531c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005322:	0d1b      	lsrs	r3, r3, #20
 8005324:	051b      	lsls	r3, r3, #20
 8005326:	429a      	cmp	r2, r3
 8005328:	d1a1      	bne.n	800526e <_strtod_l+0xa0e>
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fb fcc3 	bl	8000cb8 <__aeabi_d2lz>
 8005332:	f7fb f933 	bl	800059c <__aeabi_l2d>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005348:	ea43 030a 	orr.w	r3, r3, sl
 800534c:	4313      	orrs	r3, r2
 800534e:	4680      	mov	r8, r0
 8005350:	4689      	mov	r9, r1
 8005352:	d055      	beq.n	8005400 <_strtod_l+0xba0>
 8005354:	a336      	add	r3, pc, #216	; (adr r3, 8005430 <_strtod_l+0xbd0>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f7fb fbbf 	bl	8000adc <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	f47f acd0 	bne.w	8004d04 <_strtod_l+0x4a4>
 8005364:	a334      	add	r3, pc, #208	; (adr r3, 8005438 <_strtod_l+0xbd8>)
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fb fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 8005372:	2800      	cmp	r0, #0
 8005374:	f43f af7b 	beq.w	800526e <_strtod_l+0xa0e>
 8005378:	e4c4      	b.n	8004d04 <_strtod_l+0x4a4>
 800537a:	9b04      	ldr	r3, [sp, #16]
 800537c:	b333      	cbz	r3, 80053cc <_strtod_l+0xb6c>
 800537e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005380:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005384:	d822      	bhi.n	80053cc <_strtod_l+0xb6c>
 8005386:	a32e      	add	r3, pc, #184	; (adr r3, 8005440 <_strtod_l+0xbe0>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	4640      	mov	r0, r8
 800538e:	4649      	mov	r1, r9
 8005390:	f7fb fbae 	bl	8000af0 <__aeabi_dcmple>
 8005394:	b1a0      	cbz	r0, 80053c0 <_strtod_l+0xb60>
 8005396:	4649      	mov	r1, r9
 8005398:	4640      	mov	r0, r8
 800539a:	f7fb fc05 	bl	8000ba8 <__aeabi_d2uiz>
 800539e:	2801      	cmp	r0, #1
 80053a0:	bf38      	it	cc
 80053a2:	2001      	movcc	r0, #1
 80053a4:	f7fb f8ae 	bl	8000504 <__aeabi_ui2d>
 80053a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053aa:	4680      	mov	r8, r0
 80053ac:	4689      	mov	r9, r1
 80053ae:	bb23      	cbnz	r3, 80053fa <_strtod_l+0xb9a>
 80053b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053b4:	9010      	str	r0, [sp, #64]	; 0x40
 80053b6:	9311      	str	r3, [sp, #68]	; 0x44
 80053b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	9309      	str	r3, [sp, #36]	; 0x24
 80053cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053d0:	eeb0 0a48 	vmov.f32	s0, s16
 80053d4:	eef0 0a68 	vmov.f32	s1, s17
 80053d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053dc:	f001 fe58 	bl	8007090 <__ulp>
 80053e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053e4:	ec53 2b10 	vmov	r2, r3, d0
 80053e8:	f7fb f906 	bl	80005f8 <__aeabi_dmul>
 80053ec:	ec53 2b18 	vmov	r2, r3, d8
 80053f0:	f7fa ff4c 	bl	800028c <__adddf3>
 80053f4:	4682      	mov	sl, r0
 80053f6:	468b      	mov	fp, r1
 80053f8:	e78d      	b.n	8005316 <_strtod_l+0xab6>
 80053fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80053fe:	e7db      	b.n	80053b8 <_strtod_l+0xb58>
 8005400:	a311      	add	r3, pc, #68	; (adr r3, 8005448 <_strtod_l+0xbe8>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fb fb69 	bl	8000adc <__aeabi_dcmplt>
 800540a:	e7b2      	b.n	8005372 <_strtod_l+0xb12>
 800540c:	2300      	movs	r3, #0
 800540e:	930a      	str	r3, [sp, #40]	; 0x28
 8005410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005412:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	f7ff ba6b 	b.w	80048f0 <_strtod_l+0x90>
 800541a:	2a65      	cmp	r2, #101	; 0x65
 800541c:	f43f ab5f 	beq.w	8004ade <_strtod_l+0x27e>
 8005420:	2a45      	cmp	r2, #69	; 0x45
 8005422:	f43f ab5c 	beq.w	8004ade <_strtod_l+0x27e>
 8005426:	2301      	movs	r3, #1
 8005428:	f7ff bb94 	b.w	8004b54 <_strtod_l+0x2f4>
 800542c:	f3af 8000 	nop.w
 8005430:	94a03595 	.word	0x94a03595
 8005434:	3fdfffff 	.word	0x3fdfffff
 8005438:	35afe535 	.word	0x35afe535
 800543c:	3fe00000 	.word	0x3fe00000
 8005440:	ffc00000 	.word	0xffc00000
 8005444:	41dfffff 	.word	0x41dfffff
 8005448:	94a03595 	.word	0x94a03595
 800544c:	3fcfffff 	.word	0x3fcfffff
 8005450:	3ff00000 	.word	0x3ff00000
 8005454:	7ff00000 	.word	0x7ff00000
 8005458:	7fe00000 	.word	0x7fe00000
 800545c:	7c9fffff 	.word	0x7c9fffff
 8005460:	3fe00000 	.word	0x3fe00000
 8005464:	bff00000 	.word	0xbff00000
 8005468:	7fefffff 	.word	0x7fefffff

0800546c <_strtod_r>:
 800546c:	4b01      	ldr	r3, [pc, #4]	; (8005474 <_strtod_r+0x8>)
 800546e:	f7ff b9f7 	b.w	8004860 <_strtod_l>
 8005472:	bf00      	nop
 8005474:	2000007c 	.word	0x2000007c

08005478 <_strtol_l.constprop.0>:
 8005478:	2b01      	cmp	r3, #1
 800547a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547e:	d001      	beq.n	8005484 <_strtol_l.constprop.0+0xc>
 8005480:	2b24      	cmp	r3, #36	; 0x24
 8005482:	d906      	bls.n	8005492 <_strtol_l.constprop.0+0x1a>
 8005484:	f7fe fafc 	bl	8003a80 <__errno>
 8005488:	2316      	movs	r3, #22
 800548a:	6003      	str	r3, [r0, #0]
 800548c:	2000      	movs	r0, #0
 800548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005492:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005578 <_strtol_l.constprop.0+0x100>
 8005496:	460d      	mov	r5, r1
 8005498:	462e      	mov	r6, r5
 800549a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800549e:	f814 700c 	ldrb.w	r7, [r4, ip]
 80054a2:	f017 0708 	ands.w	r7, r7, #8
 80054a6:	d1f7      	bne.n	8005498 <_strtol_l.constprop.0+0x20>
 80054a8:	2c2d      	cmp	r4, #45	; 0x2d
 80054aa:	d132      	bne.n	8005512 <_strtol_l.constprop.0+0x9a>
 80054ac:	782c      	ldrb	r4, [r5, #0]
 80054ae:	2701      	movs	r7, #1
 80054b0:	1cb5      	adds	r5, r6, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d05b      	beq.n	800556e <_strtol_l.constprop.0+0xf6>
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d109      	bne.n	80054ce <_strtol_l.constprop.0+0x56>
 80054ba:	2c30      	cmp	r4, #48	; 0x30
 80054bc:	d107      	bne.n	80054ce <_strtol_l.constprop.0+0x56>
 80054be:	782c      	ldrb	r4, [r5, #0]
 80054c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80054c4:	2c58      	cmp	r4, #88	; 0x58
 80054c6:	d14d      	bne.n	8005564 <_strtol_l.constprop.0+0xec>
 80054c8:	786c      	ldrb	r4, [r5, #1]
 80054ca:	2310      	movs	r3, #16
 80054cc:	3502      	adds	r5, #2
 80054ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80054d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80054d6:	f04f 0c00 	mov.w	ip, #0
 80054da:	fbb8 f9f3 	udiv	r9, r8, r3
 80054de:	4666      	mov	r6, ip
 80054e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80054e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80054e8:	f1be 0f09 	cmp.w	lr, #9
 80054ec:	d816      	bhi.n	800551c <_strtol_l.constprop.0+0xa4>
 80054ee:	4674      	mov	r4, lr
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	dd24      	ble.n	800553e <_strtol_l.constprop.0+0xc6>
 80054f4:	f1bc 0f00 	cmp.w	ip, #0
 80054f8:	db1e      	blt.n	8005538 <_strtol_l.constprop.0+0xc0>
 80054fa:	45b1      	cmp	r9, r6
 80054fc:	d31c      	bcc.n	8005538 <_strtol_l.constprop.0+0xc0>
 80054fe:	d101      	bne.n	8005504 <_strtol_l.constprop.0+0x8c>
 8005500:	45a2      	cmp	sl, r4
 8005502:	db19      	blt.n	8005538 <_strtol_l.constprop.0+0xc0>
 8005504:	fb06 4603 	mla	r6, r6, r3, r4
 8005508:	f04f 0c01 	mov.w	ip, #1
 800550c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005510:	e7e8      	b.n	80054e4 <_strtol_l.constprop.0+0x6c>
 8005512:	2c2b      	cmp	r4, #43	; 0x2b
 8005514:	bf04      	itt	eq
 8005516:	782c      	ldrbeq	r4, [r5, #0]
 8005518:	1cb5      	addeq	r5, r6, #2
 800551a:	e7ca      	b.n	80054b2 <_strtol_l.constprop.0+0x3a>
 800551c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005520:	f1be 0f19 	cmp.w	lr, #25
 8005524:	d801      	bhi.n	800552a <_strtol_l.constprop.0+0xb2>
 8005526:	3c37      	subs	r4, #55	; 0x37
 8005528:	e7e2      	b.n	80054f0 <_strtol_l.constprop.0+0x78>
 800552a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800552e:	f1be 0f19 	cmp.w	lr, #25
 8005532:	d804      	bhi.n	800553e <_strtol_l.constprop.0+0xc6>
 8005534:	3c57      	subs	r4, #87	; 0x57
 8005536:	e7db      	b.n	80054f0 <_strtol_l.constprop.0+0x78>
 8005538:	f04f 3cff 	mov.w	ip, #4294967295
 800553c:	e7e6      	b.n	800550c <_strtol_l.constprop.0+0x94>
 800553e:	f1bc 0f00 	cmp.w	ip, #0
 8005542:	da05      	bge.n	8005550 <_strtol_l.constprop.0+0xd8>
 8005544:	2322      	movs	r3, #34	; 0x22
 8005546:	6003      	str	r3, [r0, #0]
 8005548:	4646      	mov	r6, r8
 800554a:	b942      	cbnz	r2, 800555e <_strtol_l.constprop.0+0xe6>
 800554c:	4630      	mov	r0, r6
 800554e:	e79e      	b.n	800548e <_strtol_l.constprop.0+0x16>
 8005550:	b107      	cbz	r7, 8005554 <_strtol_l.constprop.0+0xdc>
 8005552:	4276      	negs	r6, r6
 8005554:	2a00      	cmp	r2, #0
 8005556:	d0f9      	beq.n	800554c <_strtol_l.constprop.0+0xd4>
 8005558:	f1bc 0f00 	cmp.w	ip, #0
 800555c:	d000      	beq.n	8005560 <_strtol_l.constprop.0+0xe8>
 800555e:	1e69      	subs	r1, r5, #1
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	e7f3      	b.n	800554c <_strtol_l.constprop.0+0xd4>
 8005564:	2430      	movs	r4, #48	; 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1b1      	bne.n	80054ce <_strtol_l.constprop.0+0x56>
 800556a:	2308      	movs	r3, #8
 800556c:	e7af      	b.n	80054ce <_strtol_l.constprop.0+0x56>
 800556e:	2c30      	cmp	r4, #48	; 0x30
 8005570:	d0a5      	beq.n	80054be <_strtol_l.constprop.0+0x46>
 8005572:	230a      	movs	r3, #10
 8005574:	e7ab      	b.n	80054ce <_strtol_l.constprop.0+0x56>
 8005576:	bf00      	nop
 8005578:	08008c19 	.word	0x08008c19

0800557c <_strtol_r>:
 800557c:	f7ff bf7c 	b.w	8005478 <_strtol_l.constprop.0>

08005580 <quorem>:
 8005580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	6903      	ldr	r3, [r0, #16]
 8005586:	690c      	ldr	r4, [r1, #16]
 8005588:	42a3      	cmp	r3, r4
 800558a:	4607      	mov	r7, r0
 800558c:	f2c0 8081 	blt.w	8005692 <quorem+0x112>
 8005590:	3c01      	subs	r4, #1
 8005592:	f101 0814 	add.w	r8, r1, #20
 8005596:	f100 0514 	add.w	r5, r0, #20
 800559a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055a8:	3301      	adds	r3, #1
 80055aa:	429a      	cmp	r2, r3
 80055ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80055b8:	d331      	bcc.n	800561e <quorem+0x9e>
 80055ba:	f04f 0e00 	mov.w	lr, #0
 80055be:	4640      	mov	r0, r8
 80055c0:	46ac      	mov	ip, r5
 80055c2:	46f2      	mov	sl, lr
 80055c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80055c8:	b293      	uxth	r3, r2
 80055ca:	fb06 e303 	mla	r3, r6, r3, lr
 80055ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ebaa 0303 	sub.w	r3, sl, r3
 80055d8:	f8dc a000 	ldr.w	sl, [ip]
 80055dc:	0c12      	lsrs	r2, r2, #16
 80055de:	fa13 f38a 	uxtah	r3, r3, sl
 80055e2:	fb06 e202 	mla	r2, r6, r2, lr
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	9b00      	ldr	r3, [sp, #0]
 80055ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ee:	b292      	uxth	r2, r2
 80055f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80055fc:	4581      	cmp	r9, r0
 80055fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005602:	f84c 3b04 	str.w	r3, [ip], #4
 8005606:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800560a:	d2db      	bcs.n	80055c4 <quorem+0x44>
 800560c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005610:	b92b      	cbnz	r3, 800561e <quorem+0x9e>
 8005612:	9b01      	ldr	r3, [sp, #4]
 8005614:	3b04      	subs	r3, #4
 8005616:	429d      	cmp	r5, r3
 8005618:	461a      	mov	r2, r3
 800561a:	d32e      	bcc.n	800567a <quorem+0xfa>
 800561c:	613c      	str	r4, [r7, #16]
 800561e:	4638      	mov	r0, r7
 8005620:	f001 fc90 	bl	8006f44 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	db24      	blt.n	8005672 <quorem+0xf2>
 8005628:	3601      	adds	r6, #1
 800562a:	4628      	mov	r0, r5
 800562c:	f04f 0c00 	mov.w	ip, #0
 8005630:	f858 2b04 	ldr.w	r2, [r8], #4
 8005634:	f8d0 e000 	ldr.w	lr, [r0]
 8005638:	b293      	uxth	r3, r2
 800563a:	ebac 0303 	sub.w	r3, ip, r3
 800563e:	0c12      	lsrs	r2, r2, #16
 8005640:	fa13 f38e 	uxtah	r3, r3, lr
 8005644:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005652:	45c1      	cmp	r9, r8
 8005654:	f840 3b04 	str.w	r3, [r0], #4
 8005658:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800565c:	d2e8      	bcs.n	8005630 <quorem+0xb0>
 800565e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005666:	b922      	cbnz	r2, 8005672 <quorem+0xf2>
 8005668:	3b04      	subs	r3, #4
 800566a:	429d      	cmp	r5, r3
 800566c:	461a      	mov	r2, r3
 800566e:	d30a      	bcc.n	8005686 <quorem+0x106>
 8005670:	613c      	str	r4, [r7, #16]
 8005672:	4630      	mov	r0, r6
 8005674:	b003      	add	sp, #12
 8005676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	3b04      	subs	r3, #4
 800567e:	2a00      	cmp	r2, #0
 8005680:	d1cc      	bne.n	800561c <quorem+0x9c>
 8005682:	3c01      	subs	r4, #1
 8005684:	e7c7      	b.n	8005616 <quorem+0x96>
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	3b04      	subs	r3, #4
 800568a:	2a00      	cmp	r2, #0
 800568c:	d1f0      	bne.n	8005670 <quorem+0xf0>
 800568e:	3c01      	subs	r4, #1
 8005690:	e7eb      	b.n	800566a <quorem+0xea>
 8005692:	2000      	movs	r0, #0
 8005694:	e7ee      	b.n	8005674 <quorem+0xf4>
	...

08005698 <_dtoa_r>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	ed2d 8b04 	vpush	{d8-d9}
 80056a0:	ec57 6b10 	vmov	r6, r7, d0
 80056a4:	b093      	sub	sp, #76	; 0x4c
 80056a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056ac:	9106      	str	r1, [sp, #24]
 80056ae:	ee10 aa10 	vmov	sl, s0
 80056b2:	4604      	mov	r4, r0
 80056b4:	9209      	str	r2, [sp, #36]	; 0x24
 80056b6:	930c      	str	r3, [sp, #48]	; 0x30
 80056b8:	46bb      	mov	fp, r7
 80056ba:	b975      	cbnz	r5, 80056da <_dtoa_r+0x42>
 80056bc:	2010      	movs	r0, #16
 80056be:	f001 f94d 	bl	800695c <malloc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6260      	str	r0, [r4, #36]	; 0x24
 80056c6:	b920      	cbnz	r0, 80056d2 <_dtoa_r+0x3a>
 80056c8:	4ba7      	ldr	r3, [pc, #668]	; (8005968 <_dtoa_r+0x2d0>)
 80056ca:	21ea      	movs	r1, #234	; 0xea
 80056cc:	48a7      	ldr	r0, [pc, #668]	; (800596c <_dtoa_r+0x2d4>)
 80056ce:	f002 f8bd 	bl	800784c <__assert_func>
 80056d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056d6:	6005      	str	r5, [r0, #0]
 80056d8:	60c5      	str	r5, [r0, #12]
 80056da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056dc:	6819      	ldr	r1, [r3, #0]
 80056de:	b151      	cbz	r1, 80056f6 <_dtoa_r+0x5e>
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	604a      	str	r2, [r1, #4]
 80056e4:	2301      	movs	r3, #1
 80056e6:	4093      	lsls	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
 80056ea:	4620      	mov	r0, r4
 80056ec:	f001 f99e 	bl	8006a2c <_Bfree>
 80056f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	1e3b      	subs	r3, r7, #0
 80056f8:	bfaa      	itet	ge
 80056fa:	2300      	movge	r3, #0
 80056fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005700:	f8c8 3000 	strge.w	r3, [r8]
 8005704:	4b9a      	ldr	r3, [pc, #616]	; (8005970 <_dtoa_r+0x2d8>)
 8005706:	bfbc      	itt	lt
 8005708:	2201      	movlt	r2, #1
 800570a:	f8c8 2000 	strlt.w	r2, [r8]
 800570e:	ea33 030b 	bics.w	r3, r3, fp
 8005712:	d11b      	bne.n	800574c <_dtoa_r+0xb4>
 8005714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005716:	f242 730f 	movw	r3, #9999	; 0x270f
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005720:	4333      	orrs	r3, r6
 8005722:	f000 8592 	beq.w	800624a <_dtoa_r+0xbb2>
 8005726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005728:	b963      	cbnz	r3, 8005744 <_dtoa_r+0xac>
 800572a:	4b92      	ldr	r3, [pc, #584]	; (8005974 <_dtoa_r+0x2dc>)
 800572c:	e022      	b.n	8005774 <_dtoa_r+0xdc>
 800572e:	4b92      	ldr	r3, [pc, #584]	; (8005978 <_dtoa_r+0x2e0>)
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	3308      	adds	r3, #8
 8005734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	9801      	ldr	r0, [sp, #4]
 800573a:	b013      	add	sp, #76	; 0x4c
 800573c:	ecbd 8b04 	vpop	{d8-d9}
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005744:	4b8b      	ldr	r3, [pc, #556]	; (8005974 <_dtoa_r+0x2dc>)
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	3303      	adds	r3, #3
 800574a:	e7f3      	b.n	8005734 <_dtoa_r+0x9c>
 800574c:	2200      	movs	r2, #0
 800574e:	2300      	movs	r3, #0
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	f7fb f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005758:	ec4b ab19 	vmov	d9, sl, fp
 800575c:	4680      	mov	r8, r0
 800575e:	b158      	cbz	r0, 8005778 <_dtoa_r+0xe0>
 8005760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005762:	2301      	movs	r3, #1
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 856b 	beq.w	8006244 <_dtoa_r+0xbac>
 800576e:	4883      	ldr	r0, [pc, #524]	; (800597c <_dtoa_r+0x2e4>)
 8005770:	6018      	str	r0, [r3, #0]
 8005772:	1e43      	subs	r3, r0, #1
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	e7df      	b.n	8005738 <_dtoa_r+0xa0>
 8005778:	ec4b ab10 	vmov	d0, sl, fp
 800577c:	aa10      	add	r2, sp, #64	; 0x40
 800577e:	a911      	add	r1, sp, #68	; 0x44
 8005780:	4620      	mov	r0, r4
 8005782:	f001 fd01 	bl	8007188 <__d2b>
 8005786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800578a:	ee08 0a10 	vmov	s16, r0
 800578e:	2d00      	cmp	r5, #0
 8005790:	f000 8084 	beq.w	800589c <_dtoa_r+0x204>
 8005794:	ee19 3a90 	vmov	r3, s19
 8005798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057a0:	4656      	mov	r6, sl
 80057a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80057ae:	4b74      	ldr	r3, [pc, #464]	; (8005980 <_dtoa_r+0x2e8>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	4630      	mov	r0, r6
 80057b4:	4639      	mov	r1, r7
 80057b6:	f7fa fd67 	bl	8000288 <__aeabi_dsub>
 80057ba:	a365      	add	r3, pc, #404	; (adr r3, 8005950 <_dtoa_r+0x2b8>)
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f7fa ff1a 	bl	80005f8 <__aeabi_dmul>
 80057c4:	a364      	add	r3, pc, #400	; (adr r3, 8005958 <_dtoa_r+0x2c0>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f7fa fd5f 	bl	800028c <__adddf3>
 80057ce:	4606      	mov	r6, r0
 80057d0:	4628      	mov	r0, r5
 80057d2:	460f      	mov	r7, r1
 80057d4:	f7fa fea6 	bl	8000524 <__aeabi_i2d>
 80057d8:	a361      	add	r3, pc, #388	; (adr r3, 8005960 <_dtoa_r+0x2c8>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa ff0b 	bl	80005f8 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4630      	mov	r0, r6
 80057e8:	4639      	mov	r1, r7
 80057ea:	f7fa fd4f 	bl	800028c <__adddf3>
 80057ee:	4606      	mov	r6, r0
 80057f0:	460f      	mov	r7, r1
 80057f2:	f7fb f9b1 	bl	8000b58 <__aeabi_d2iz>
 80057f6:	2200      	movs	r2, #0
 80057f8:	9000      	str	r0, [sp, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fb f96c 	bl	8000adc <__aeabi_dcmplt>
 8005804:	b150      	cbz	r0, 800581c <_dtoa_r+0x184>
 8005806:	9800      	ldr	r0, [sp, #0]
 8005808:	f7fa fe8c 	bl	8000524 <__aeabi_i2d>
 800580c:	4632      	mov	r2, r6
 800580e:	463b      	mov	r3, r7
 8005810:	f7fb f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005814:	b910      	cbnz	r0, 800581c <_dtoa_r+0x184>
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	9b00      	ldr	r3, [sp, #0]
 800581e:	2b16      	cmp	r3, #22
 8005820:	d85a      	bhi.n	80058d8 <_dtoa_r+0x240>
 8005822:	9a00      	ldr	r2, [sp, #0]
 8005824:	4b57      	ldr	r3, [pc, #348]	; (8005984 <_dtoa_r+0x2ec>)
 8005826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	ec51 0b19 	vmov	r0, r1, d9
 8005832:	f7fb f953 	bl	8000adc <__aeabi_dcmplt>
 8005836:	2800      	cmp	r0, #0
 8005838:	d050      	beq.n	80058dc <_dtoa_r+0x244>
 800583a:	9b00      	ldr	r3, [sp, #0]
 800583c:	3b01      	subs	r3, #1
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	930b      	str	r3, [sp, #44]	; 0x2c
 8005844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005846:	1b5d      	subs	r5, r3, r5
 8005848:	1e6b      	subs	r3, r5, #1
 800584a:	9305      	str	r3, [sp, #20]
 800584c:	bf45      	ittet	mi
 800584e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005852:	9304      	strmi	r3, [sp, #16]
 8005854:	2300      	movpl	r3, #0
 8005856:	2300      	movmi	r3, #0
 8005858:	bf4c      	ite	mi
 800585a:	9305      	strmi	r3, [sp, #20]
 800585c:	9304      	strpl	r3, [sp, #16]
 800585e:	9b00      	ldr	r3, [sp, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	db3d      	blt.n	80058e0 <_dtoa_r+0x248>
 8005864:	9b05      	ldr	r3, [sp, #20]
 8005866:	9a00      	ldr	r2, [sp, #0]
 8005868:	920a      	str	r2, [sp, #40]	; 0x28
 800586a:	4413      	add	r3, r2
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	2300      	movs	r3, #0
 8005870:	9307      	str	r3, [sp, #28]
 8005872:	9b06      	ldr	r3, [sp, #24]
 8005874:	2b09      	cmp	r3, #9
 8005876:	f200 8089 	bhi.w	800598c <_dtoa_r+0x2f4>
 800587a:	2b05      	cmp	r3, #5
 800587c:	bfc4      	itt	gt
 800587e:	3b04      	subgt	r3, #4
 8005880:	9306      	strgt	r3, [sp, #24]
 8005882:	9b06      	ldr	r3, [sp, #24]
 8005884:	f1a3 0302 	sub.w	r3, r3, #2
 8005888:	bfcc      	ite	gt
 800588a:	2500      	movgt	r5, #0
 800588c:	2501      	movle	r5, #1
 800588e:	2b03      	cmp	r3, #3
 8005890:	f200 8087 	bhi.w	80059a2 <_dtoa_r+0x30a>
 8005894:	e8df f003 	tbb	[pc, r3]
 8005898:	59383a2d 	.word	0x59383a2d
 800589c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058a0:	441d      	add	r5, r3
 80058a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	bfc1      	itttt	gt
 80058aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80058b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058ba:	bfda      	itte	le
 80058bc:	f1c3 0320 	rsble	r3, r3, #32
 80058c0:	fa06 f003 	lslle.w	r0, r6, r3
 80058c4:	4318      	orrgt	r0, r3
 80058c6:	f7fa fe1d 	bl	8000504 <__aeabi_ui2d>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4606      	mov	r6, r0
 80058ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058d2:	3d01      	subs	r5, #1
 80058d4:	930e      	str	r3, [sp, #56]	; 0x38
 80058d6:	e76a      	b.n	80057ae <_dtoa_r+0x116>
 80058d8:	2301      	movs	r3, #1
 80058da:	e7b2      	b.n	8005842 <_dtoa_r+0x1aa>
 80058dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80058de:	e7b1      	b.n	8005844 <_dtoa_r+0x1ac>
 80058e0:	9b04      	ldr	r3, [sp, #16]
 80058e2:	9a00      	ldr	r2, [sp, #0]
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	4253      	negs	r3, r2
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	2300      	movs	r3, #0
 80058ee:	930a      	str	r3, [sp, #40]	; 0x28
 80058f0:	e7bf      	b.n	8005872 <_dtoa_r+0x1da>
 80058f2:	2300      	movs	r3, #0
 80058f4:	9308      	str	r3, [sp, #32]
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dc55      	bgt.n	80059a8 <_dtoa_r+0x310>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005902:	461a      	mov	r2, r3
 8005904:	9209      	str	r2, [sp, #36]	; 0x24
 8005906:	e00c      	b.n	8005922 <_dtoa_r+0x28a>
 8005908:	2301      	movs	r3, #1
 800590a:	e7f3      	b.n	80058f4 <_dtoa_r+0x25c>
 800590c:	2300      	movs	r3, #0
 800590e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005910:	9308      	str	r3, [sp, #32]
 8005912:	9b00      	ldr	r3, [sp, #0]
 8005914:	4413      	add	r3, r2
 8005916:	9302      	str	r3, [sp, #8]
 8005918:	3301      	adds	r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	bfb8      	it	lt
 8005920:	2301      	movlt	r3, #1
 8005922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005924:	2200      	movs	r2, #0
 8005926:	6042      	str	r2, [r0, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	f102 0614 	add.w	r6, r2, #20
 800592e:	429e      	cmp	r6, r3
 8005930:	6841      	ldr	r1, [r0, #4]
 8005932:	d93d      	bls.n	80059b0 <_dtoa_r+0x318>
 8005934:	4620      	mov	r0, r4
 8005936:	f001 f839 	bl	80069ac <_Balloc>
 800593a:	9001      	str	r0, [sp, #4]
 800593c:	2800      	cmp	r0, #0
 800593e:	d13b      	bne.n	80059b8 <_dtoa_r+0x320>
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <_dtoa_r+0x2f0>)
 8005942:	4602      	mov	r2, r0
 8005944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005948:	e6c0      	b.n	80056cc <_dtoa_r+0x34>
 800594a:	2301      	movs	r3, #1
 800594c:	e7df      	b.n	800590e <_dtoa_r+0x276>
 800594e:	bf00      	nop
 8005950:	636f4361 	.word	0x636f4361
 8005954:	3fd287a7 	.word	0x3fd287a7
 8005958:	8b60c8b3 	.word	0x8b60c8b3
 800595c:	3fc68a28 	.word	0x3fc68a28
 8005960:	509f79fb 	.word	0x509f79fb
 8005964:	3fd34413 	.word	0x3fd34413
 8005968:	08008d26 	.word	0x08008d26
 800596c:	08008d3d 	.word	0x08008d3d
 8005970:	7ff00000 	.word	0x7ff00000
 8005974:	08008d22 	.word	0x08008d22
 8005978:	08008d19 	.word	0x08008d19
 800597c:	08008b99 	.word	0x08008b99
 8005980:	3ff80000 	.word	0x3ff80000
 8005984:	08008ea8 	.word	0x08008ea8
 8005988:	08008d98 	.word	0x08008d98
 800598c:	2501      	movs	r5, #1
 800598e:	2300      	movs	r3, #0
 8005990:	9306      	str	r3, [sp, #24]
 8005992:	9508      	str	r5, [sp, #32]
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	2312      	movs	r3, #18
 80059a0:	e7b0      	b.n	8005904 <_dtoa_r+0x26c>
 80059a2:	2301      	movs	r3, #1
 80059a4:	9308      	str	r3, [sp, #32]
 80059a6:	e7f5      	b.n	8005994 <_dtoa_r+0x2fc>
 80059a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059ae:	e7b8      	b.n	8005922 <_dtoa_r+0x28a>
 80059b0:	3101      	adds	r1, #1
 80059b2:	6041      	str	r1, [r0, #4]
 80059b4:	0052      	lsls	r2, r2, #1
 80059b6:	e7b8      	b.n	800592a <_dtoa_r+0x292>
 80059b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ba:	9a01      	ldr	r2, [sp, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	2b0e      	cmp	r3, #14
 80059c2:	f200 809d 	bhi.w	8005b00 <_dtoa_r+0x468>
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	f000 809a 	beq.w	8005b00 <_dtoa_r+0x468>
 80059cc:	9b00      	ldr	r3, [sp, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dd32      	ble.n	8005a38 <_dtoa_r+0x3a0>
 80059d2:	4ab7      	ldr	r2, [pc, #732]	; (8005cb0 <_dtoa_r+0x618>)
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059e0:	9b00      	ldr	r3, [sp, #0]
 80059e2:	05d8      	lsls	r0, r3, #23
 80059e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80059e8:	d516      	bpl.n	8005a18 <_dtoa_r+0x380>
 80059ea:	4bb2      	ldr	r3, [pc, #712]	; (8005cb4 <_dtoa_r+0x61c>)
 80059ec:	ec51 0b19 	vmov	r0, r1, d9
 80059f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059f4:	f7fa ff2a 	bl	800084c <__aeabi_ddiv>
 80059f8:	f007 070f 	and.w	r7, r7, #15
 80059fc:	4682      	mov	sl, r0
 80059fe:	468b      	mov	fp, r1
 8005a00:	2503      	movs	r5, #3
 8005a02:	4eac      	ldr	r6, [pc, #688]	; (8005cb4 <_dtoa_r+0x61c>)
 8005a04:	b957      	cbnz	r7, 8005a1c <_dtoa_r+0x384>
 8005a06:	4642      	mov	r2, r8
 8005a08:	464b      	mov	r3, r9
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	f7fa ff1d 	bl	800084c <__aeabi_ddiv>
 8005a12:	4682      	mov	sl, r0
 8005a14:	468b      	mov	fp, r1
 8005a16:	e028      	b.n	8005a6a <_dtoa_r+0x3d2>
 8005a18:	2502      	movs	r5, #2
 8005a1a:	e7f2      	b.n	8005a02 <_dtoa_r+0x36a>
 8005a1c:	07f9      	lsls	r1, r7, #31
 8005a1e:	d508      	bpl.n	8005a32 <_dtoa_r+0x39a>
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a28:	f7fa fde6 	bl	80005f8 <__aeabi_dmul>
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	4680      	mov	r8, r0
 8005a30:	4689      	mov	r9, r1
 8005a32:	107f      	asrs	r7, r7, #1
 8005a34:	3608      	adds	r6, #8
 8005a36:	e7e5      	b.n	8005a04 <_dtoa_r+0x36c>
 8005a38:	f000 809b 	beq.w	8005b72 <_dtoa_r+0x4da>
 8005a3c:	9b00      	ldr	r3, [sp, #0]
 8005a3e:	4f9d      	ldr	r7, [pc, #628]	; (8005cb4 <_dtoa_r+0x61c>)
 8005a40:	425e      	negs	r6, r3
 8005a42:	4b9b      	ldr	r3, [pc, #620]	; (8005cb0 <_dtoa_r+0x618>)
 8005a44:	f006 020f 	and.w	r2, r6, #15
 8005a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	ec51 0b19 	vmov	r0, r1, d9
 8005a54:	f7fa fdd0 	bl	80005f8 <__aeabi_dmul>
 8005a58:	1136      	asrs	r6, r6, #4
 8005a5a:	4682      	mov	sl, r0
 8005a5c:	468b      	mov	fp, r1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2502      	movs	r5, #2
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	d17a      	bne.n	8005b5c <_dtoa_r+0x4c4>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1d3      	bne.n	8005a12 <_dtoa_r+0x37a>
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8082 	beq.w	8005b76 <_dtoa_r+0x4de>
 8005a72:	4b91      	ldr	r3, [pc, #580]	; (8005cb8 <_dtoa_r+0x620>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	4650      	mov	r0, sl
 8005a78:	4659      	mov	r1, fp
 8005a7a:	f7fb f82f 	bl	8000adc <__aeabi_dcmplt>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d079      	beq.n	8005b76 <_dtoa_r+0x4de>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d076      	beq.n	8005b76 <_dtoa_r+0x4de>
 8005a88:	9b02      	ldr	r3, [sp, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dd36      	ble.n	8005afc <_dtoa_r+0x464>
 8005a8e:	9b00      	ldr	r3, [sp, #0]
 8005a90:	4650      	mov	r0, sl
 8005a92:	4659      	mov	r1, fp
 8005a94:	1e5f      	subs	r7, r3, #1
 8005a96:	2200      	movs	r2, #0
 8005a98:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <_dtoa_r+0x624>)
 8005a9a:	f7fa fdad 	bl	80005f8 <__aeabi_dmul>
 8005a9e:	9e02      	ldr	r6, [sp, #8]
 8005aa0:	4682      	mov	sl, r0
 8005aa2:	468b      	mov	fp, r1
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7fa fd3c 	bl	8000524 <__aeabi_i2d>
 8005aac:	4652      	mov	r2, sl
 8005aae:	465b      	mov	r3, fp
 8005ab0:	f7fa fda2 	bl	80005f8 <__aeabi_dmul>
 8005ab4:	4b82      	ldr	r3, [pc, #520]	; (8005cc0 <_dtoa_r+0x628>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f7fa fbe8 	bl	800028c <__adddf3>
 8005abc:	46d0      	mov	r8, sl
 8005abe:	46d9      	mov	r9, fp
 8005ac0:	4682      	mov	sl, r0
 8005ac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	d158      	bne.n	8005b7c <_dtoa_r+0x4e4>
 8005aca:	4b7e      	ldr	r3, [pc, #504]	; (8005cc4 <_dtoa_r+0x62c>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa fbd9 	bl	8000288 <__aeabi_dsub>
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	465b      	mov	r3, fp
 8005ada:	4680      	mov	r8, r0
 8005adc:	4689      	mov	r9, r1
 8005ade:	f7fb f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f040 8295 	bne.w	8006012 <_dtoa_r+0x97a>
 8005ae8:	4652      	mov	r2, sl
 8005aea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005aee:	4640      	mov	r0, r8
 8005af0:	4649      	mov	r1, r9
 8005af2:	f7fa fff3 	bl	8000adc <__aeabi_dcmplt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f040 8289 	bne.w	800600e <_dtoa_r+0x976>
 8005afc:	ec5b ab19 	vmov	sl, fp, d9
 8005b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f2c0 8148 	blt.w	8005d98 <_dtoa_r+0x700>
 8005b08:	9a00      	ldr	r2, [sp, #0]
 8005b0a:	2a0e      	cmp	r2, #14
 8005b0c:	f300 8144 	bgt.w	8005d98 <_dtoa_r+0x700>
 8005b10:	4b67      	ldr	r3, [pc, #412]	; (8005cb0 <_dtoa_r+0x618>)
 8005b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f280 80d5 	bge.w	8005ccc <_dtoa_r+0x634>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f300 80d1 	bgt.w	8005ccc <_dtoa_r+0x634>
 8005b2a:	f040 826f 	bne.w	800600c <_dtoa_r+0x974>
 8005b2e:	4b65      	ldr	r3, [pc, #404]	; (8005cc4 <_dtoa_r+0x62c>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fd5f 	bl	80005f8 <__aeabi_dmul>
 8005b3a:	4652      	mov	r2, sl
 8005b3c:	465b      	mov	r3, fp
 8005b3e:	f7fa ffe1 	bl	8000b04 <__aeabi_dcmpge>
 8005b42:	9e03      	ldr	r6, [sp, #12]
 8005b44:	4637      	mov	r7, r6
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 8245 	bne.w	8005fd6 <_dtoa_r+0x93e>
 8005b4c:	9d01      	ldr	r5, [sp, #4]
 8005b4e:	2331      	movs	r3, #49	; 0x31
 8005b50:	f805 3b01 	strb.w	r3, [r5], #1
 8005b54:	9b00      	ldr	r3, [sp, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	e240      	b.n	8005fde <_dtoa_r+0x946>
 8005b5c:	07f2      	lsls	r2, r6, #31
 8005b5e:	d505      	bpl.n	8005b6c <_dtoa_r+0x4d4>
 8005b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b64:	f7fa fd48 	bl	80005f8 <__aeabi_dmul>
 8005b68:	3501      	adds	r5, #1
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	1076      	asrs	r6, r6, #1
 8005b6e:	3708      	adds	r7, #8
 8005b70:	e777      	b.n	8005a62 <_dtoa_r+0x3ca>
 8005b72:	2502      	movs	r5, #2
 8005b74:	e779      	b.n	8005a6a <_dtoa_r+0x3d2>
 8005b76:	9f00      	ldr	r7, [sp, #0]
 8005b78:	9e03      	ldr	r6, [sp, #12]
 8005b7a:	e794      	b.n	8005aa6 <_dtoa_r+0x40e>
 8005b7c:	9901      	ldr	r1, [sp, #4]
 8005b7e:	4b4c      	ldr	r3, [pc, #304]	; (8005cb0 <_dtoa_r+0x618>)
 8005b80:	4431      	add	r1, r6
 8005b82:	910d      	str	r1, [sp, #52]	; 0x34
 8005b84:	9908      	ldr	r1, [sp, #32]
 8005b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d043      	beq.n	8005c1a <_dtoa_r+0x582>
 8005b92:	494d      	ldr	r1, [pc, #308]	; (8005cc8 <_dtoa_r+0x630>)
 8005b94:	2000      	movs	r0, #0
 8005b96:	f7fa fe59 	bl	800084c <__aeabi_ddiv>
 8005b9a:	4652      	mov	r2, sl
 8005b9c:	465b      	mov	r3, fp
 8005b9e:	f7fa fb73 	bl	8000288 <__aeabi_dsub>
 8005ba2:	9d01      	ldr	r5, [sp, #4]
 8005ba4:	4682      	mov	sl, r0
 8005ba6:	468b      	mov	fp, r1
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7fa ffd4 	bl	8000b58 <__aeabi_d2iz>
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	f7fa fcb7 	bl	8000524 <__aeabi_i2d>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa fb63 	bl	8000288 <__aeabi_dsub>
 8005bc2:	3630      	adds	r6, #48	; 0x30
 8005bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc8:	4652      	mov	r2, sl
 8005bca:	465b      	mov	r3, fp
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	f7fa ff84 	bl	8000adc <__aeabi_dcmplt>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d163      	bne.n	8005ca0 <_dtoa_r+0x608>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4936      	ldr	r1, [pc, #216]	; (8005cb8 <_dtoa_r+0x620>)
 8005bde:	2000      	movs	r0, #0
 8005be0:	f7fa fb52 	bl	8000288 <__aeabi_dsub>
 8005be4:	4652      	mov	r2, sl
 8005be6:	465b      	mov	r3, fp
 8005be8:	f7fa ff78 	bl	8000adc <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f040 80b5 	bne.w	8005d5c <_dtoa_r+0x6c4>
 8005bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	d081      	beq.n	8005afc <_dtoa_r+0x464>
 8005bf8:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <_dtoa_r+0x624>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4650      	mov	r0, sl
 8005bfe:	4659      	mov	r1, fp
 8005c00:	f7fa fcfa 	bl	80005f8 <__aeabi_dmul>
 8005c04:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <_dtoa_r+0x624>)
 8005c06:	4682      	mov	sl, r0
 8005c08:	468b      	mov	fp, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f7fa fcf2 	bl	80005f8 <__aeabi_dmul>
 8005c14:	4680      	mov	r8, r0
 8005c16:	4689      	mov	r9, r1
 8005c18:	e7c6      	b.n	8005ba8 <_dtoa_r+0x510>
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa fceb 	bl	80005f8 <__aeabi_dmul>
 8005c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c24:	9d01      	ldr	r5, [sp, #4]
 8005c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c28:	4682      	mov	sl, r0
 8005c2a:	468b      	mov	fp, r1
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	4640      	mov	r0, r8
 8005c30:	f7fa ff92 	bl	8000b58 <__aeabi_d2iz>
 8005c34:	4606      	mov	r6, r0
 8005c36:	f7fa fc75 	bl	8000524 <__aeabi_i2d>
 8005c3a:	3630      	adds	r6, #48	; 0x30
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa fb20 	bl	8000288 <__aeabi_dsub>
 8005c48:	f805 6b01 	strb.w	r6, [r5], #1
 8005c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c4e:	429d      	cmp	r5, r3
 8005c50:	4680      	mov	r8, r0
 8005c52:	4689      	mov	r9, r1
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	d124      	bne.n	8005ca4 <_dtoa_r+0x60c>
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <_dtoa_r+0x630>)
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	4659      	mov	r1, fp
 8005c60:	f7fa fb14 	bl	800028c <__adddf3>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fa ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d173      	bne.n	8005d5c <_dtoa_r+0x6c4>
 8005c74:	4652      	mov	r2, sl
 8005c76:	465b      	mov	r3, fp
 8005c78:	4913      	ldr	r1, [pc, #76]	; (8005cc8 <_dtoa_r+0x630>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fa fb04 	bl	8000288 <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa ff28 	bl	8000adc <__aeabi_dcmplt>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f43f af35 	beq.w	8005afc <_dtoa_r+0x464>
 8005c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c94:	1e6b      	subs	r3, r5, #1
 8005c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d0f8      	beq.n	8005c92 <_dtoa_r+0x5fa>
 8005ca0:	9700      	str	r7, [sp, #0]
 8005ca2:	e049      	b.n	8005d38 <_dtoa_r+0x6a0>
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <_dtoa_r+0x624>)
 8005ca6:	f7fa fca7 	bl	80005f8 <__aeabi_dmul>
 8005caa:	4680      	mov	r8, r0
 8005cac:	4689      	mov	r9, r1
 8005cae:	e7bd      	b.n	8005c2c <_dtoa_r+0x594>
 8005cb0:	08008ea8 	.word	0x08008ea8
 8005cb4:	08008e80 	.word	0x08008e80
 8005cb8:	3ff00000 	.word	0x3ff00000
 8005cbc:	40240000 	.word	0x40240000
 8005cc0:	401c0000 	.word	0x401c0000
 8005cc4:	40140000 	.word	0x40140000
 8005cc8:	3fe00000 	.word	0x3fe00000
 8005ccc:	9d01      	ldr	r5, [sp, #4]
 8005cce:	4656      	mov	r6, sl
 8005cd0:	465f      	mov	r7, fp
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fdb7 	bl	800084c <__aeabi_ddiv>
 8005cde:	f7fa ff3b 	bl	8000b58 <__aeabi_d2iz>
 8005ce2:	4682      	mov	sl, r0
 8005ce4:	f7fa fc1e 	bl	8000524 <__aeabi_i2d>
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	f7fa fc84 	bl	80005f8 <__aeabi_dmul>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cfc:	f7fa fac4 	bl	8000288 <__aeabi_dsub>
 8005d00:	f805 6b01 	strb.w	r6, [r5], #1
 8005d04:	9e01      	ldr	r6, [sp, #4]
 8005d06:	9f03      	ldr	r7, [sp, #12]
 8005d08:	1bae      	subs	r6, r5, r6
 8005d0a:	42b7      	cmp	r7, r6
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	d135      	bne.n	8005d7e <_dtoa_r+0x6e6>
 8005d12:	f7fa fabb 	bl	800028c <__adddf3>
 8005d16:	4642      	mov	r2, r8
 8005d18:	464b      	mov	r3, r9
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460f      	mov	r7, r1
 8005d1e:	f7fa fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8005d22:	b9d0      	cbnz	r0, 8005d5a <_dtoa_r+0x6c2>
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d30:	b110      	cbz	r0, 8005d38 <_dtoa_r+0x6a0>
 8005d32:	f01a 0f01 	tst.w	sl, #1
 8005d36:	d110      	bne.n	8005d5a <_dtoa_r+0x6c2>
 8005d38:	4620      	mov	r0, r4
 8005d3a:	ee18 1a10 	vmov	r1, s16
 8005d3e:	f000 fe75 	bl	8006a2c <_Bfree>
 8005d42:	2300      	movs	r3, #0
 8005d44:	9800      	ldr	r0, [sp, #0]
 8005d46:	702b      	strb	r3, [r5, #0]
 8005d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	6018      	str	r0, [r3, #0]
 8005d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f43f acf1 	beq.w	8005738 <_dtoa_r+0xa0>
 8005d56:	601d      	str	r5, [r3, #0]
 8005d58:	e4ee      	b.n	8005738 <_dtoa_r+0xa0>
 8005d5a:	9f00      	ldr	r7, [sp, #0]
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	461d      	mov	r5, r3
 8005d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d64:	2a39      	cmp	r2, #57	; 0x39
 8005d66:	d106      	bne.n	8005d76 <_dtoa_r+0x6de>
 8005d68:	9a01      	ldr	r2, [sp, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d1f7      	bne.n	8005d5e <_dtoa_r+0x6c6>
 8005d6e:	9901      	ldr	r1, [sp, #4]
 8005d70:	2230      	movs	r2, #48	; 0x30
 8005d72:	3701      	adds	r7, #1
 8005d74:	700a      	strb	r2, [r1, #0]
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	3201      	adds	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	e790      	b.n	8005ca0 <_dtoa_r+0x608>
 8005d7e:	4ba6      	ldr	r3, [pc, #664]	; (8006018 <_dtoa_r+0x980>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	f7fa fc39 	bl	80005f8 <__aeabi_dmul>
 8005d86:	2200      	movs	r2, #0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	f7fa fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d09d      	beq.n	8005cd2 <_dtoa_r+0x63a>
 8005d96:	e7cf      	b.n	8005d38 <_dtoa_r+0x6a0>
 8005d98:	9a08      	ldr	r2, [sp, #32]
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	f000 80d7 	beq.w	8005f4e <_dtoa_r+0x8b6>
 8005da0:	9a06      	ldr	r2, [sp, #24]
 8005da2:	2a01      	cmp	r2, #1
 8005da4:	f300 80ba 	bgt.w	8005f1c <_dtoa_r+0x884>
 8005da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	f000 80b2 	beq.w	8005f14 <_dtoa_r+0x87c>
 8005db0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005db4:	9e07      	ldr	r6, [sp, #28]
 8005db6:	9d04      	ldr	r5, [sp, #16]
 8005db8:	9a04      	ldr	r2, [sp, #16]
 8005dba:	441a      	add	r2, r3
 8005dbc:	9204      	str	r2, [sp, #16]
 8005dbe:	9a05      	ldr	r2, [sp, #20]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	441a      	add	r2, r3
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	9205      	str	r2, [sp, #20]
 8005dc8:	f000 ff32 	bl	8006c30 <__i2b>
 8005dcc:	4607      	mov	r7, r0
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	dd0c      	ble.n	8005dec <_dtoa_r+0x754>
 8005dd2:	9b05      	ldr	r3, [sp, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd09      	ble.n	8005dec <_dtoa_r+0x754>
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	9a04      	ldr	r2, [sp, #16]
 8005ddc:	bfa8      	it	ge
 8005dde:	462b      	movge	r3, r5
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	9204      	str	r2, [sp, #16]
 8005de4:	9a05      	ldr	r2, [sp, #20]
 8005de6:	1aed      	subs	r5, r5, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	b31b      	cbz	r3, 8005e38 <_dtoa_r+0x7a0>
 8005df0:	9b08      	ldr	r3, [sp, #32]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80af 	beq.w	8005f56 <_dtoa_r+0x8be>
 8005df8:	2e00      	cmp	r6, #0
 8005dfa:	dd13      	ble.n	8005e24 <_dtoa_r+0x78c>
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 ffd5 	bl	8006db0 <__pow5mult>
 8005e06:	ee18 2a10 	vmov	r2, s16
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 ff24 	bl	8006c5c <__multiply>
 8005e14:	ee18 1a10 	vmov	r1, s16
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fe06 	bl	8006a2c <_Bfree>
 8005e20:	ee08 8a10 	vmov	s16, r8
 8005e24:	9b07      	ldr	r3, [sp, #28]
 8005e26:	1b9a      	subs	r2, r3, r6
 8005e28:	d006      	beq.n	8005e38 <_dtoa_r+0x7a0>
 8005e2a:	ee18 1a10 	vmov	r1, s16
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 ffbe 	bl	8006db0 <__pow5mult>
 8005e34:	ee08 0a10 	vmov	s16, r0
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fef8 	bl	8006c30 <__i2b>
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	4606      	mov	r6, r0
 8005e46:	f340 8088 	ble.w	8005f5a <_dtoa_r+0x8c2>
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 ffae 	bl	8006db0 <__pow5mult>
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	4606      	mov	r6, r0
 8005e5a:	f340 8081 	ble.w	8005f60 <_dtoa_r+0x8c8>
 8005e5e:	f04f 0800 	mov.w	r8, #0
 8005e62:	6933      	ldr	r3, [r6, #16]
 8005e64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e68:	6918      	ldr	r0, [r3, #16]
 8005e6a:	f000 fe91 	bl	8006b90 <__hi0bits>
 8005e6e:	f1c0 0020 	rsb	r0, r0, #32
 8005e72:	9b05      	ldr	r3, [sp, #20]
 8005e74:	4418      	add	r0, r3
 8005e76:	f010 001f 	ands.w	r0, r0, #31
 8005e7a:	f000 8092 	beq.w	8005fa2 <_dtoa_r+0x90a>
 8005e7e:	f1c0 0320 	rsb	r3, r0, #32
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	f340 808a 	ble.w	8005f9c <_dtoa_r+0x904>
 8005e88:	f1c0 001c 	rsb	r0, r0, #28
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	4403      	add	r3, r0
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	9b05      	ldr	r3, [sp, #20]
 8005e94:	4403      	add	r3, r0
 8005e96:	4405      	add	r5, r0
 8005e98:	9305      	str	r3, [sp, #20]
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dd07      	ble.n	8005eb0 <_dtoa_r+0x818>
 8005ea0:	ee18 1a10 	vmov	r1, s16
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 ffdc 	bl	8006e64 <__lshift>
 8005eac:	ee08 0a10 	vmov	s16, r0
 8005eb0:	9b05      	ldr	r3, [sp, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dd05      	ble.n	8005ec2 <_dtoa_r+0x82a>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 ffd2 	bl	8006e64 <__lshift>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d06e      	beq.n	8005fa6 <_dtoa_r+0x90e>
 8005ec8:	ee18 0a10 	vmov	r0, s16
 8005ecc:	4631      	mov	r1, r6
 8005ece:	f001 f839 	bl	8006f44 <__mcmp>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	da67      	bge.n	8005fa6 <_dtoa_r+0x90e>
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	ee18 1a10 	vmov	r1, s16
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fdc3 	bl	8006a70 <__multadd>
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	ee08 0a10 	vmov	s16, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 81b1 	beq.w	8006258 <_dtoa_r+0xbc0>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	4639      	mov	r1, r7
 8005efa:	220a      	movs	r2, #10
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fdb7 	bl	8006a70 <__multadd>
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	4607      	mov	r7, r0
 8005f08:	f300 808e 	bgt.w	8006028 <_dtoa_r+0x990>
 8005f0c:	9b06      	ldr	r3, [sp, #24]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	dc51      	bgt.n	8005fb6 <_dtoa_r+0x91e>
 8005f12:	e089      	b.n	8006028 <_dtoa_r+0x990>
 8005f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f1a:	e74b      	b.n	8005db4 <_dtoa_r+0x71c>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	1e5e      	subs	r6, r3, #1
 8005f20:	9b07      	ldr	r3, [sp, #28]
 8005f22:	42b3      	cmp	r3, r6
 8005f24:	bfbf      	itttt	lt
 8005f26:	9b07      	ldrlt	r3, [sp, #28]
 8005f28:	9607      	strlt	r6, [sp, #28]
 8005f2a:	1af2      	sublt	r2, r6, r3
 8005f2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f2e:	bfb6      	itet	lt
 8005f30:	189b      	addlt	r3, r3, r2
 8005f32:	1b9e      	subge	r6, r3, r6
 8005f34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	bfb8      	it	lt
 8005f3a:	2600      	movlt	r6, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfb7      	itett	lt
 8005f40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f48:	1a9d      	sublt	r5, r3, r2
 8005f4a:	2300      	movlt	r3, #0
 8005f4c:	e734      	b.n	8005db8 <_dtoa_r+0x720>
 8005f4e:	9e07      	ldr	r6, [sp, #28]
 8005f50:	9d04      	ldr	r5, [sp, #16]
 8005f52:	9f08      	ldr	r7, [sp, #32]
 8005f54:	e73b      	b.n	8005dce <_dtoa_r+0x736>
 8005f56:	9a07      	ldr	r2, [sp, #28]
 8005f58:	e767      	b.n	8005e2a <_dtoa_r+0x792>
 8005f5a:	9b06      	ldr	r3, [sp, #24]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	dc18      	bgt.n	8005f92 <_dtoa_r+0x8fa>
 8005f60:	f1ba 0f00 	cmp.w	sl, #0
 8005f64:	d115      	bne.n	8005f92 <_dtoa_r+0x8fa>
 8005f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f6a:	b993      	cbnz	r3, 8005f92 <_dtoa_r+0x8fa>
 8005f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f70:	0d1b      	lsrs	r3, r3, #20
 8005f72:	051b      	lsls	r3, r3, #20
 8005f74:	b183      	cbz	r3, 8005f98 <_dtoa_r+0x900>
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	9b05      	ldr	r3, [sp, #20]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	9305      	str	r3, [sp, #20]
 8005f82:	f04f 0801 	mov.w	r8, #1
 8005f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f af6a 	bne.w	8005e62 <_dtoa_r+0x7ca>
 8005f8e:	2001      	movs	r0, #1
 8005f90:	e76f      	b.n	8005e72 <_dtoa_r+0x7da>
 8005f92:	f04f 0800 	mov.w	r8, #0
 8005f96:	e7f6      	b.n	8005f86 <_dtoa_r+0x8ee>
 8005f98:	4698      	mov	r8, r3
 8005f9a:	e7f4      	b.n	8005f86 <_dtoa_r+0x8ee>
 8005f9c:	f43f af7d 	beq.w	8005e9a <_dtoa_r+0x802>
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	301c      	adds	r0, #28
 8005fa4:	e772      	b.n	8005e8c <_dtoa_r+0x7f4>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dc37      	bgt.n	800601c <_dtoa_r+0x984>
 8005fac:	9b06      	ldr	r3, [sp, #24]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	dd34      	ble.n	800601c <_dtoa_r+0x984>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	9302      	str	r3, [sp, #8]
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	b96b      	cbnz	r3, 8005fd6 <_dtoa_r+0x93e>
 8005fba:	4631      	mov	r1, r6
 8005fbc:	2205      	movs	r2, #5
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 fd56 	bl	8006a70 <__multadd>
 8005fc4:	4601      	mov	r1, r0
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	ee18 0a10 	vmov	r0, s16
 8005fcc:	f000 ffba 	bl	8006f44 <__mcmp>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f73f adbb 	bgt.w	8005b4c <_dtoa_r+0x4b4>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd8:	9d01      	ldr	r5, [sp, #4]
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fd21 	bl	8006a2c <_Bfree>
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	f43f aea4 	beq.w	8005d38 <_dtoa_r+0x6a0>
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d005      	beq.n	8006002 <_dtoa_r+0x96a>
 8005ff6:	45b8      	cmp	r8, r7
 8005ff8:	d003      	beq.n	8006002 <_dtoa_r+0x96a>
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 fd15 	bl	8006a2c <_Bfree>
 8006002:	4639      	mov	r1, r7
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fd11 	bl	8006a2c <_Bfree>
 800600a:	e695      	b.n	8005d38 <_dtoa_r+0x6a0>
 800600c:	2600      	movs	r6, #0
 800600e:	4637      	mov	r7, r6
 8006010:	e7e1      	b.n	8005fd6 <_dtoa_r+0x93e>
 8006012:	9700      	str	r7, [sp, #0]
 8006014:	4637      	mov	r7, r6
 8006016:	e599      	b.n	8005b4c <_dtoa_r+0x4b4>
 8006018:	40240000 	.word	0x40240000
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80ca 	beq.w	80061b8 <_dtoa_r+0xb20>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	9302      	str	r3, [sp, #8]
 8006028:	2d00      	cmp	r5, #0
 800602a:	dd05      	ble.n	8006038 <_dtoa_r+0x9a0>
 800602c:	4639      	mov	r1, r7
 800602e:	462a      	mov	r2, r5
 8006030:	4620      	mov	r0, r4
 8006032:	f000 ff17 	bl	8006e64 <__lshift>
 8006036:	4607      	mov	r7, r0
 8006038:	f1b8 0f00 	cmp.w	r8, #0
 800603c:	d05b      	beq.n	80060f6 <_dtoa_r+0xa5e>
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fcb3 	bl	80069ac <_Balloc>
 8006046:	4605      	mov	r5, r0
 8006048:	b928      	cbnz	r0, 8006056 <_dtoa_r+0x9be>
 800604a:	4b87      	ldr	r3, [pc, #540]	; (8006268 <_dtoa_r+0xbd0>)
 800604c:	4602      	mov	r2, r0
 800604e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006052:	f7ff bb3b 	b.w	80056cc <_dtoa_r+0x34>
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	3202      	adds	r2, #2
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	f107 010c 	add.w	r1, r7, #12
 8006060:	300c      	adds	r0, #12
 8006062:	f000 fc95 	bl	8006990 <memcpy>
 8006066:	2201      	movs	r2, #1
 8006068:	4629      	mov	r1, r5
 800606a:	4620      	mov	r0, r4
 800606c:	f000 fefa 	bl	8006e64 <__lshift>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	f103 0901 	add.w	r9, r3, #1
 8006076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800607a:	4413      	add	r3, r2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	f00a 0301 	and.w	r3, sl, #1
 8006082:	46b8      	mov	r8, r7
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	4607      	mov	r7, r0
 8006088:	4631      	mov	r1, r6
 800608a:	ee18 0a10 	vmov	r0, s16
 800608e:	f7ff fa77 	bl	8005580 <quorem>
 8006092:	4641      	mov	r1, r8
 8006094:	9002      	str	r0, [sp, #8]
 8006096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800609a:	ee18 0a10 	vmov	r0, s16
 800609e:	f000 ff51 	bl	8006f44 <__mcmp>
 80060a2:	463a      	mov	r2, r7
 80060a4:	9003      	str	r0, [sp, #12]
 80060a6:	4631      	mov	r1, r6
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 ff67 	bl	8006f7c <__mdiff>
 80060ae:	68c2      	ldr	r2, [r0, #12]
 80060b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80060b4:	4605      	mov	r5, r0
 80060b6:	bb02      	cbnz	r2, 80060fa <_dtoa_r+0xa62>
 80060b8:	4601      	mov	r1, r0
 80060ba:	ee18 0a10 	vmov	r0, s16
 80060be:	f000 ff41 	bl	8006f44 <__mcmp>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4629      	mov	r1, r5
 80060c6:	4620      	mov	r0, r4
 80060c8:	9207      	str	r2, [sp, #28]
 80060ca:	f000 fcaf 	bl	8006a2c <_Bfree>
 80060ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80060d2:	ea43 0102 	orr.w	r1, r3, r2
 80060d6:	9b04      	ldr	r3, [sp, #16]
 80060d8:	430b      	orrs	r3, r1
 80060da:	464d      	mov	r5, r9
 80060dc:	d10f      	bne.n	80060fe <_dtoa_r+0xa66>
 80060de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060e2:	d02a      	beq.n	800613a <_dtoa_r+0xaa2>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dd02      	ble.n	80060f0 <_dtoa_r+0xa58>
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060f0:	f88b a000 	strb.w	sl, [fp]
 80060f4:	e775      	b.n	8005fe2 <_dtoa_r+0x94a>
 80060f6:	4638      	mov	r0, r7
 80060f8:	e7ba      	b.n	8006070 <_dtoa_r+0x9d8>
 80060fa:	2201      	movs	r2, #1
 80060fc:	e7e2      	b.n	80060c4 <_dtoa_r+0xa2c>
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	db04      	blt.n	800610e <_dtoa_r+0xa76>
 8006104:	9906      	ldr	r1, [sp, #24]
 8006106:	430b      	orrs	r3, r1
 8006108:	9904      	ldr	r1, [sp, #16]
 800610a:	430b      	orrs	r3, r1
 800610c:	d122      	bne.n	8006154 <_dtoa_r+0xabc>
 800610e:	2a00      	cmp	r2, #0
 8006110:	ddee      	ble.n	80060f0 <_dtoa_r+0xa58>
 8006112:	ee18 1a10 	vmov	r1, s16
 8006116:	2201      	movs	r2, #1
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fea3 	bl	8006e64 <__lshift>
 800611e:	4631      	mov	r1, r6
 8006120:	ee08 0a10 	vmov	s16, r0
 8006124:	f000 ff0e 	bl	8006f44 <__mcmp>
 8006128:	2800      	cmp	r0, #0
 800612a:	dc03      	bgt.n	8006134 <_dtoa_r+0xa9c>
 800612c:	d1e0      	bne.n	80060f0 <_dtoa_r+0xa58>
 800612e:	f01a 0f01 	tst.w	sl, #1
 8006132:	d0dd      	beq.n	80060f0 <_dtoa_r+0xa58>
 8006134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006138:	d1d7      	bne.n	80060ea <_dtoa_r+0xa52>
 800613a:	2339      	movs	r3, #57	; 0x39
 800613c:	f88b 3000 	strb.w	r3, [fp]
 8006140:	462b      	mov	r3, r5
 8006142:	461d      	mov	r5, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800614a:	2a39      	cmp	r2, #57	; 0x39
 800614c:	d071      	beq.n	8006232 <_dtoa_r+0xb9a>
 800614e:	3201      	adds	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e746      	b.n	8005fe2 <_dtoa_r+0x94a>
 8006154:	2a00      	cmp	r2, #0
 8006156:	dd07      	ble.n	8006168 <_dtoa_r+0xad0>
 8006158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800615c:	d0ed      	beq.n	800613a <_dtoa_r+0xaa2>
 800615e:	f10a 0301 	add.w	r3, sl, #1
 8006162:	f88b 3000 	strb.w	r3, [fp]
 8006166:	e73c      	b.n	8005fe2 <_dtoa_r+0x94a>
 8006168:	9b05      	ldr	r3, [sp, #20]
 800616a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800616e:	4599      	cmp	r9, r3
 8006170:	d047      	beq.n	8006202 <_dtoa_r+0xb6a>
 8006172:	ee18 1a10 	vmov	r1, s16
 8006176:	2300      	movs	r3, #0
 8006178:	220a      	movs	r2, #10
 800617a:	4620      	mov	r0, r4
 800617c:	f000 fc78 	bl	8006a70 <__multadd>
 8006180:	45b8      	cmp	r8, r7
 8006182:	ee08 0a10 	vmov	s16, r0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	f04f 020a 	mov.w	r2, #10
 800618e:	4641      	mov	r1, r8
 8006190:	4620      	mov	r0, r4
 8006192:	d106      	bne.n	80061a2 <_dtoa_r+0xb0a>
 8006194:	f000 fc6c 	bl	8006a70 <__multadd>
 8006198:	4680      	mov	r8, r0
 800619a:	4607      	mov	r7, r0
 800619c:	f109 0901 	add.w	r9, r9, #1
 80061a0:	e772      	b.n	8006088 <_dtoa_r+0x9f0>
 80061a2:	f000 fc65 	bl	8006a70 <__multadd>
 80061a6:	4639      	mov	r1, r7
 80061a8:	4680      	mov	r8, r0
 80061aa:	2300      	movs	r3, #0
 80061ac:	220a      	movs	r2, #10
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fc5e 	bl	8006a70 <__multadd>
 80061b4:	4607      	mov	r7, r0
 80061b6:	e7f1      	b.n	800619c <_dtoa_r+0xb04>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	9302      	str	r3, [sp, #8]
 80061bc:	9d01      	ldr	r5, [sp, #4]
 80061be:	ee18 0a10 	vmov	r0, s16
 80061c2:	4631      	mov	r1, r6
 80061c4:	f7ff f9dc 	bl	8005580 <quorem>
 80061c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	f805 ab01 	strb.w	sl, [r5], #1
 80061d2:	1aea      	subs	r2, r5, r3
 80061d4:	9b02      	ldr	r3, [sp, #8]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	dd09      	ble.n	80061ee <_dtoa_r+0xb56>
 80061da:	ee18 1a10 	vmov	r1, s16
 80061de:	2300      	movs	r3, #0
 80061e0:	220a      	movs	r2, #10
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fc44 	bl	8006a70 <__multadd>
 80061e8:	ee08 0a10 	vmov	s16, r0
 80061ec:	e7e7      	b.n	80061be <_dtoa_r+0xb26>
 80061ee:	9b02      	ldr	r3, [sp, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfc8      	it	gt
 80061f4:	461d      	movgt	r5, r3
 80061f6:	9b01      	ldr	r3, [sp, #4]
 80061f8:	bfd8      	it	le
 80061fa:	2501      	movle	r5, #1
 80061fc:	441d      	add	r5, r3
 80061fe:	f04f 0800 	mov.w	r8, #0
 8006202:	ee18 1a10 	vmov	r1, s16
 8006206:	2201      	movs	r2, #1
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fe2b 	bl	8006e64 <__lshift>
 800620e:	4631      	mov	r1, r6
 8006210:	ee08 0a10 	vmov	s16, r0
 8006214:	f000 fe96 	bl	8006f44 <__mcmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	dc91      	bgt.n	8006140 <_dtoa_r+0xaa8>
 800621c:	d102      	bne.n	8006224 <_dtoa_r+0xb8c>
 800621e:	f01a 0f01 	tst.w	sl, #1
 8006222:	d18d      	bne.n	8006140 <_dtoa_r+0xaa8>
 8006224:	462b      	mov	r3, r5
 8006226:	461d      	mov	r5, r3
 8006228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800622c:	2a30      	cmp	r2, #48	; 0x30
 800622e:	d0fa      	beq.n	8006226 <_dtoa_r+0xb8e>
 8006230:	e6d7      	b.n	8005fe2 <_dtoa_r+0x94a>
 8006232:	9a01      	ldr	r2, [sp, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d184      	bne.n	8006142 <_dtoa_r+0xaaa>
 8006238:	9b00      	ldr	r3, [sp, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2331      	movs	r3, #49	; 0x31
 8006240:	7013      	strb	r3, [r2, #0]
 8006242:	e6ce      	b.n	8005fe2 <_dtoa_r+0x94a>
 8006244:	4b09      	ldr	r3, [pc, #36]	; (800626c <_dtoa_r+0xbd4>)
 8006246:	f7ff ba95 	b.w	8005774 <_dtoa_r+0xdc>
 800624a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624c:	2b00      	cmp	r3, #0
 800624e:	f47f aa6e 	bne.w	800572e <_dtoa_r+0x96>
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <_dtoa_r+0xbd8>)
 8006254:	f7ff ba8e 	b.w	8005774 <_dtoa_r+0xdc>
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	dcae      	bgt.n	80061bc <_dtoa_r+0xb24>
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f73f aea8 	bgt.w	8005fb6 <_dtoa_r+0x91e>
 8006266:	e7a9      	b.n	80061bc <_dtoa_r+0xb24>
 8006268:	08008d98 	.word	0x08008d98
 800626c:	08008b98 	.word	0x08008b98
 8006270:	08008d19 	.word	0x08008d19

08006274 <rshift>:
 8006274:	6903      	ldr	r3, [r0, #16]
 8006276:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800627a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800627e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006282:	f100 0414 	add.w	r4, r0, #20
 8006286:	dd45      	ble.n	8006314 <rshift+0xa0>
 8006288:	f011 011f 	ands.w	r1, r1, #31
 800628c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006290:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006294:	d10c      	bne.n	80062b0 <rshift+0x3c>
 8006296:	f100 0710 	add.w	r7, r0, #16
 800629a:	4629      	mov	r1, r5
 800629c:	42b1      	cmp	r1, r6
 800629e:	d334      	bcc.n	800630a <rshift+0x96>
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	1eea      	subs	r2, r5, #3
 80062a6:	4296      	cmp	r6, r2
 80062a8:	bf38      	it	cc
 80062aa:	2300      	movcc	r3, #0
 80062ac:	4423      	add	r3, r4
 80062ae:	e015      	b.n	80062dc <rshift+0x68>
 80062b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80062b4:	f1c1 0820 	rsb	r8, r1, #32
 80062b8:	40cf      	lsrs	r7, r1
 80062ba:	f105 0e04 	add.w	lr, r5, #4
 80062be:	46a1      	mov	r9, r4
 80062c0:	4576      	cmp	r6, lr
 80062c2:	46f4      	mov	ip, lr
 80062c4:	d815      	bhi.n	80062f2 <rshift+0x7e>
 80062c6:	1a9a      	subs	r2, r3, r2
 80062c8:	0092      	lsls	r2, r2, #2
 80062ca:	3a04      	subs	r2, #4
 80062cc:	3501      	adds	r5, #1
 80062ce:	42ae      	cmp	r6, r5
 80062d0:	bf38      	it	cc
 80062d2:	2200      	movcc	r2, #0
 80062d4:	18a3      	adds	r3, r4, r2
 80062d6:	50a7      	str	r7, [r4, r2]
 80062d8:	b107      	cbz	r7, 80062dc <rshift+0x68>
 80062da:	3304      	adds	r3, #4
 80062dc:	1b1a      	subs	r2, r3, r4
 80062de:	42a3      	cmp	r3, r4
 80062e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80062e4:	bf08      	it	eq
 80062e6:	2300      	moveq	r3, #0
 80062e8:	6102      	str	r2, [r0, #16]
 80062ea:	bf08      	it	eq
 80062ec:	6143      	streq	r3, [r0, #20]
 80062ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062f2:	f8dc c000 	ldr.w	ip, [ip]
 80062f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80062fa:	ea4c 0707 	orr.w	r7, ip, r7
 80062fe:	f849 7b04 	str.w	r7, [r9], #4
 8006302:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006306:	40cf      	lsrs	r7, r1
 8006308:	e7da      	b.n	80062c0 <rshift+0x4c>
 800630a:	f851 cb04 	ldr.w	ip, [r1], #4
 800630e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006312:	e7c3      	b.n	800629c <rshift+0x28>
 8006314:	4623      	mov	r3, r4
 8006316:	e7e1      	b.n	80062dc <rshift+0x68>

08006318 <__hexdig_fun>:
 8006318:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800631c:	2b09      	cmp	r3, #9
 800631e:	d802      	bhi.n	8006326 <__hexdig_fun+0xe>
 8006320:	3820      	subs	r0, #32
 8006322:	b2c0      	uxtb	r0, r0
 8006324:	4770      	bx	lr
 8006326:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800632a:	2b05      	cmp	r3, #5
 800632c:	d801      	bhi.n	8006332 <__hexdig_fun+0x1a>
 800632e:	3847      	subs	r0, #71	; 0x47
 8006330:	e7f7      	b.n	8006322 <__hexdig_fun+0xa>
 8006332:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006336:	2b05      	cmp	r3, #5
 8006338:	d801      	bhi.n	800633e <__hexdig_fun+0x26>
 800633a:	3827      	subs	r0, #39	; 0x27
 800633c:	e7f1      	b.n	8006322 <__hexdig_fun+0xa>
 800633e:	2000      	movs	r0, #0
 8006340:	4770      	bx	lr
	...

08006344 <__gethex>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	ed2d 8b02 	vpush	{d8}
 800634c:	b089      	sub	sp, #36	; 0x24
 800634e:	ee08 0a10 	vmov	s16, r0
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	4bb4      	ldr	r3, [pc, #720]	; (8006628 <__gethex+0x2e4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	4618      	mov	r0, r3
 800635c:	468b      	mov	fp, r1
 800635e:	4690      	mov	r8, r2
 8006360:	f7f9 ff36 	bl	80001d0 <strlen>
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	f8db 2000 	ldr.w	r2, [fp]
 800636a:	4403      	add	r3, r0
 800636c:	4682      	mov	sl, r0
 800636e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006372:	9305      	str	r3, [sp, #20]
 8006374:	1c93      	adds	r3, r2, #2
 8006376:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800637a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800637e:	32fe      	adds	r2, #254	; 0xfe
 8006380:	18d1      	adds	r1, r2, r3
 8006382:	461f      	mov	r7, r3
 8006384:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006388:	9100      	str	r1, [sp, #0]
 800638a:	2830      	cmp	r0, #48	; 0x30
 800638c:	d0f8      	beq.n	8006380 <__gethex+0x3c>
 800638e:	f7ff ffc3 	bl	8006318 <__hexdig_fun>
 8006392:	4604      	mov	r4, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d13a      	bne.n	800640e <__gethex+0xca>
 8006398:	9901      	ldr	r1, [sp, #4]
 800639a:	4652      	mov	r2, sl
 800639c:	4638      	mov	r0, r7
 800639e:	f001 fa33 	bl	8007808 <strncmp>
 80063a2:	4605      	mov	r5, r0
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d168      	bne.n	800647a <__gethex+0x136>
 80063a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80063ac:	eb07 060a 	add.w	r6, r7, sl
 80063b0:	f7ff ffb2 	bl	8006318 <__hexdig_fun>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d062      	beq.n	800647e <__gethex+0x13a>
 80063b8:	4633      	mov	r3, r6
 80063ba:	7818      	ldrb	r0, [r3, #0]
 80063bc:	2830      	cmp	r0, #48	; 0x30
 80063be:	461f      	mov	r7, r3
 80063c0:	f103 0301 	add.w	r3, r3, #1
 80063c4:	d0f9      	beq.n	80063ba <__gethex+0x76>
 80063c6:	f7ff ffa7 	bl	8006318 <__hexdig_fun>
 80063ca:	2301      	movs	r3, #1
 80063cc:	fab0 f480 	clz	r4, r0
 80063d0:	0964      	lsrs	r4, r4, #5
 80063d2:	4635      	mov	r5, r6
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	463a      	mov	r2, r7
 80063d8:	4616      	mov	r6, r2
 80063da:	3201      	adds	r2, #1
 80063dc:	7830      	ldrb	r0, [r6, #0]
 80063de:	f7ff ff9b 	bl	8006318 <__hexdig_fun>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d1f8      	bne.n	80063d8 <__gethex+0x94>
 80063e6:	9901      	ldr	r1, [sp, #4]
 80063e8:	4652      	mov	r2, sl
 80063ea:	4630      	mov	r0, r6
 80063ec:	f001 fa0c 	bl	8007808 <strncmp>
 80063f0:	b980      	cbnz	r0, 8006414 <__gethex+0xd0>
 80063f2:	b94d      	cbnz	r5, 8006408 <__gethex+0xc4>
 80063f4:	eb06 050a 	add.w	r5, r6, sl
 80063f8:	462a      	mov	r2, r5
 80063fa:	4616      	mov	r6, r2
 80063fc:	3201      	adds	r2, #1
 80063fe:	7830      	ldrb	r0, [r6, #0]
 8006400:	f7ff ff8a 	bl	8006318 <__hexdig_fun>
 8006404:	2800      	cmp	r0, #0
 8006406:	d1f8      	bne.n	80063fa <__gethex+0xb6>
 8006408:	1bad      	subs	r5, r5, r6
 800640a:	00ad      	lsls	r5, r5, #2
 800640c:	e004      	b.n	8006418 <__gethex+0xd4>
 800640e:	2400      	movs	r4, #0
 8006410:	4625      	mov	r5, r4
 8006412:	e7e0      	b.n	80063d6 <__gethex+0x92>
 8006414:	2d00      	cmp	r5, #0
 8006416:	d1f7      	bne.n	8006408 <__gethex+0xc4>
 8006418:	7833      	ldrb	r3, [r6, #0]
 800641a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800641e:	2b50      	cmp	r3, #80	; 0x50
 8006420:	d13b      	bne.n	800649a <__gethex+0x156>
 8006422:	7873      	ldrb	r3, [r6, #1]
 8006424:	2b2b      	cmp	r3, #43	; 0x2b
 8006426:	d02c      	beq.n	8006482 <__gethex+0x13e>
 8006428:	2b2d      	cmp	r3, #45	; 0x2d
 800642a:	d02e      	beq.n	800648a <__gethex+0x146>
 800642c:	1c71      	adds	r1, r6, #1
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	7808      	ldrb	r0, [r1, #0]
 8006434:	f7ff ff70 	bl	8006318 <__hexdig_fun>
 8006438:	1e43      	subs	r3, r0, #1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b18      	cmp	r3, #24
 800643e:	d82c      	bhi.n	800649a <__gethex+0x156>
 8006440:	f1a0 0210 	sub.w	r2, r0, #16
 8006444:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006448:	f7ff ff66 	bl	8006318 <__hexdig_fun>
 800644c:	1e43      	subs	r3, r0, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b18      	cmp	r3, #24
 8006452:	d91d      	bls.n	8006490 <__gethex+0x14c>
 8006454:	f1b9 0f00 	cmp.w	r9, #0
 8006458:	d000      	beq.n	800645c <__gethex+0x118>
 800645a:	4252      	negs	r2, r2
 800645c:	4415      	add	r5, r2
 800645e:	f8cb 1000 	str.w	r1, [fp]
 8006462:	b1e4      	cbz	r4, 800649e <__gethex+0x15a>
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2700      	movne	r7, #0
 800646c:	2706      	moveq	r7, #6
 800646e:	4638      	mov	r0, r7
 8006470:	b009      	add	sp, #36	; 0x24
 8006472:	ecbd 8b02 	vpop	{d8}
 8006476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647a:	463e      	mov	r6, r7
 800647c:	4625      	mov	r5, r4
 800647e:	2401      	movs	r4, #1
 8006480:	e7ca      	b.n	8006418 <__gethex+0xd4>
 8006482:	f04f 0900 	mov.w	r9, #0
 8006486:	1cb1      	adds	r1, r6, #2
 8006488:	e7d3      	b.n	8006432 <__gethex+0xee>
 800648a:	f04f 0901 	mov.w	r9, #1
 800648e:	e7fa      	b.n	8006486 <__gethex+0x142>
 8006490:	230a      	movs	r3, #10
 8006492:	fb03 0202 	mla	r2, r3, r2, r0
 8006496:	3a10      	subs	r2, #16
 8006498:	e7d4      	b.n	8006444 <__gethex+0x100>
 800649a:	4631      	mov	r1, r6
 800649c:	e7df      	b.n	800645e <__gethex+0x11a>
 800649e:	1bf3      	subs	r3, r6, r7
 80064a0:	3b01      	subs	r3, #1
 80064a2:	4621      	mov	r1, r4
 80064a4:	2b07      	cmp	r3, #7
 80064a6:	dc0b      	bgt.n	80064c0 <__gethex+0x17c>
 80064a8:	ee18 0a10 	vmov	r0, s16
 80064ac:	f000 fa7e 	bl	80069ac <_Balloc>
 80064b0:	4604      	mov	r4, r0
 80064b2:	b940      	cbnz	r0, 80064c6 <__gethex+0x182>
 80064b4:	4b5d      	ldr	r3, [pc, #372]	; (800662c <__gethex+0x2e8>)
 80064b6:	4602      	mov	r2, r0
 80064b8:	21de      	movs	r1, #222	; 0xde
 80064ba:	485d      	ldr	r0, [pc, #372]	; (8006630 <__gethex+0x2ec>)
 80064bc:	f001 f9c6 	bl	800784c <__assert_func>
 80064c0:	3101      	adds	r1, #1
 80064c2:	105b      	asrs	r3, r3, #1
 80064c4:	e7ee      	b.n	80064a4 <__gethex+0x160>
 80064c6:	f100 0914 	add.w	r9, r0, #20
 80064ca:	f04f 0b00 	mov.w	fp, #0
 80064ce:	f1ca 0301 	rsb	r3, sl, #1
 80064d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80064d6:	f8cd b000 	str.w	fp, [sp]
 80064da:	9306      	str	r3, [sp, #24]
 80064dc:	42b7      	cmp	r7, r6
 80064de:	d340      	bcc.n	8006562 <__gethex+0x21e>
 80064e0:	9802      	ldr	r0, [sp, #8]
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	f840 3b04 	str.w	r3, [r0], #4
 80064e8:	eba0 0009 	sub.w	r0, r0, r9
 80064ec:	1080      	asrs	r0, r0, #2
 80064ee:	0146      	lsls	r6, r0, #5
 80064f0:	6120      	str	r0, [r4, #16]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fb4c 	bl	8006b90 <__hi0bits>
 80064f8:	1a30      	subs	r0, r6, r0
 80064fa:	f8d8 6000 	ldr.w	r6, [r8]
 80064fe:	42b0      	cmp	r0, r6
 8006500:	dd63      	ble.n	80065ca <__gethex+0x286>
 8006502:	1b87      	subs	r7, r0, r6
 8006504:	4639      	mov	r1, r7
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fef0 	bl	80072ec <__any_on>
 800650c:	4682      	mov	sl, r0
 800650e:	b1a8      	cbz	r0, 800653c <__gethex+0x1f8>
 8006510:	1e7b      	subs	r3, r7, #1
 8006512:	1159      	asrs	r1, r3, #5
 8006514:	f003 021f 	and.w	r2, r3, #31
 8006518:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800651c:	f04f 0a01 	mov.w	sl, #1
 8006520:	fa0a f202 	lsl.w	r2, sl, r2
 8006524:	420a      	tst	r2, r1
 8006526:	d009      	beq.n	800653c <__gethex+0x1f8>
 8006528:	4553      	cmp	r3, sl
 800652a:	dd05      	ble.n	8006538 <__gethex+0x1f4>
 800652c:	1eb9      	subs	r1, r7, #2
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fedc 	bl	80072ec <__any_on>
 8006534:	2800      	cmp	r0, #0
 8006536:	d145      	bne.n	80065c4 <__gethex+0x280>
 8006538:	f04f 0a02 	mov.w	sl, #2
 800653c:	4639      	mov	r1, r7
 800653e:	4620      	mov	r0, r4
 8006540:	f7ff fe98 	bl	8006274 <rshift>
 8006544:	443d      	add	r5, r7
 8006546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800654a:	42ab      	cmp	r3, r5
 800654c:	da4c      	bge.n	80065e8 <__gethex+0x2a4>
 800654e:	ee18 0a10 	vmov	r0, s16
 8006552:	4621      	mov	r1, r4
 8006554:	f000 fa6a 	bl	8006a2c <_Bfree>
 8006558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800655a:	2300      	movs	r3, #0
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	27a3      	movs	r7, #163	; 0xa3
 8006560:	e785      	b.n	800646e <__gethex+0x12a>
 8006562:	1e73      	subs	r3, r6, #1
 8006564:	9a05      	ldr	r2, [sp, #20]
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800656c:	4293      	cmp	r3, r2
 800656e:	d019      	beq.n	80065a4 <__gethex+0x260>
 8006570:	f1bb 0f20 	cmp.w	fp, #32
 8006574:	d107      	bne.n	8006586 <__gethex+0x242>
 8006576:	9b02      	ldr	r3, [sp, #8]
 8006578:	9a00      	ldr	r2, [sp, #0]
 800657a:	f843 2b04 	str.w	r2, [r3], #4
 800657e:	9302      	str	r3, [sp, #8]
 8006580:	2300      	movs	r3, #0
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	469b      	mov	fp, r3
 8006586:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800658a:	f7ff fec5 	bl	8006318 <__hexdig_fun>
 800658e:	9b00      	ldr	r3, [sp, #0]
 8006590:	f000 000f 	and.w	r0, r0, #15
 8006594:	fa00 f00b 	lsl.w	r0, r0, fp
 8006598:	4303      	orrs	r3, r0
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	f10b 0b04 	add.w	fp, fp, #4
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	e00d      	b.n	80065c0 <__gethex+0x27c>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	9a06      	ldr	r2, [sp, #24]
 80065a8:	4413      	add	r3, r2
 80065aa:	42bb      	cmp	r3, r7
 80065ac:	d3e0      	bcc.n	8006570 <__gethex+0x22c>
 80065ae:	4618      	mov	r0, r3
 80065b0:	9901      	ldr	r1, [sp, #4]
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	4652      	mov	r2, sl
 80065b6:	f001 f927 	bl	8007808 <strncmp>
 80065ba:	9b07      	ldr	r3, [sp, #28]
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1d7      	bne.n	8006570 <__gethex+0x22c>
 80065c0:	461e      	mov	r6, r3
 80065c2:	e78b      	b.n	80064dc <__gethex+0x198>
 80065c4:	f04f 0a03 	mov.w	sl, #3
 80065c8:	e7b8      	b.n	800653c <__gethex+0x1f8>
 80065ca:	da0a      	bge.n	80065e2 <__gethex+0x29e>
 80065cc:	1a37      	subs	r7, r6, r0
 80065ce:	4621      	mov	r1, r4
 80065d0:	ee18 0a10 	vmov	r0, s16
 80065d4:	463a      	mov	r2, r7
 80065d6:	f000 fc45 	bl	8006e64 <__lshift>
 80065da:	1bed      	subs	r5, r5, r7
 80065dc:	4604      	mov	r4, r0
 80065de:	f100 0914 	add.w	r9, r0, #20
 80065e2:	f04f 0a00 	mov.w	sl, #0
 80065e6:	e7ae      	b.n	8006546 <__gethex+0x202>
 80065e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80065ec:	42a8      	cmp	r0, r5
 80065ee:	dd72      	ble.n	80066d6 <__gethex+0x392>
 80065f0:	1b45      	subs	r5, r0, r5
 80065f2:	42ae      	cmp	r6, r5
 80065f4:	dc36      	bgt.n	8006664 <__gethex+0x320>
 80065f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d02a      	beq.n	8006654 <__gethex+0x310>
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d02c      	beq.n	800665c <__gethex+0x318>
 8006602:	2b01      	cmp	r3, #1
 8006604:	d11c      	bne.n	8006640 <__gethex+0x2fc>
 8006606:	42ae      	cmp	r6, r5
 8006608:	d11a      	bne.n	8006640 <__gethex+0x2fc>
 800660a:	2e01      	cmp	r6, #1
 800660c:	d112      	bne.n	8006634 <__gethex+0x2f0>
 800660e:	9a04      	ldr	r2, [sp, #16]
 8006610:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	2301      	movs	r3, #1
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	f8c9 3000 	str.w	r3, [r9]
 800661e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006620:	2762      	movs	r7, #98	; 0x62
 8006622:	601c      	str	r4, [r3, #0]
 8006624:	e723      	b.n	800646e <__gethex+0x12a>
 8006626:	bf00      	nop
 8006628:	08008e10 	.word	0x08008e10
 800662c:	08008d98 	.word	0x08008d98
 8006630:	08008da9 	.word	0x08008da9
 8006634:	1e71      	subs	r1, r6, #1
 8006636:	4620      	mov	r0, r4
 8006638:	f000 fe58 	bl	80072ec <__any_on>
 800663c:	2800      	cmp	r0, #0
 800663e:	d1e6      	bne.n	800660e <__gethex+0x2ca>
 8006640:	ee18 0a10 	vmov	r0, s16
 8006644:	4621      	mov	r1, r4
 8006646:	f000 f9f1 	bl	8006a2c <_Bfree>
 800664a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800664c:	2300      	movs	r3, #0
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	2750      	movs	r7, #80	; 0x50
 8006652:	e70c      	b.n	800646e <__gethex+0x12a>
 8006654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f2      	bne.n	8006640 <__gethex+0x2fc>
 800665a:	e7d8      	b.n	800660e <__gethex+0x2ca>
 800665c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1d5      	bne.n	800660e <__gethex+0x2ca>
 8006662:	e7ed      	b.n	8006640 <__gethex+0x2fc>
 8006664:	1e6f      	subs	r7, r5, #1
 8006666:	f1ba 0f00 	cmp.w	sl, #0
 800666a:	d131      	bne.n	80066d0 <__gethex+0x38c>
 800666c:	b127      	cbz	r7, 8006678 <__gethex+0x334>
 800666e:	4639      	mov	r1, r7
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fe3b 	bl	80072ec <__any_on>
 8006676:	4682      	mov	sl, r0
 8006678:	117b      	asrs	r3, r7, #5
 800667a:	2101      	movs	r1, #1
 800667c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006680:	f007 071f 	and.w	r7, r7, #31
 8006684:	fa01 f707 	lsl.w	r7, r1, r7
 8006688:	421f      	tst	r7, r3
 800668a:	4629      	mov	r1, r5
 800668c:	4620      	mov	r0, r4
 800668e:	bf18      	it	ne
 8006690:	f04a 0a02 	orrne.w	sl, sl, #2
 8006694:	1b76      	subs	r6, r6, r5
 8006696:	f7ff fded 	bl	8006274 <rshift>
 800669a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800669e:	2702      	movs	r7, #2
 80066a0:	f1ba 0f00 	cmp.w	sl, #0
 80066a4:	d048      	beq.n	8006738 <__gethex+0x3f4>
 80066a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d015      	beq.n	80066da <__gethex+0x396>
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d017      	beq.n	80066e2 <__gethex+0x39e>
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d109      	bne.n	80066ca <__gethex+0x386>
 80066b6:	f01a 0f02 	tst.w	sl, #2
 80066ba:	d006      	beq.n	80066ca <__gethex+0x386>
 80066bc:	f8d9 0000 	ldr.w	r0, [r9]
 80066c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80066c4:	f01a 0f01 	tst.w	sl, #1
 80066c8:	d10e      	bne.n	80066e8 <__gethex+0x3a4>
 80066ca:	f047 0710 	orr.w	r7, r7, #16
 80066ce:	e033      	b.n	8006738 <__gethex+0x3f4>
 80066d0:	f04f 0a01 	mov.w	sl, #1
 80066d4:	e7d0      	b.n	8006678 <__gethex+0x334>
 80066d6:	2701      	movs	r7, #1
 80066d8:	e7e2      	b.n	80066a0 <__gethex+0x35c>
 80066da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066dc:	f1c3 0301 	rsb	r3, r3, #1
 80066e0:	9315      	str	r3, [sp, #84]	; 0x54
 80066e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <__gethex+0x386>
 80066e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80066ec:	f104 0314 	add.w	r3, r4, #20
 80066f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80066f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80066f8:	f04f 0c00 	mov.w	ip, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006702:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006706:	d01c      	beq.n	8006742 <__gethex+0x3fe>
 8006708:	3201      	adds	r2, #1
 800670a:	6002      	str	r2, [r0, #0]
 800670c:	2f02      	cmp	r7, #2
 800670e:	f104 0314 	add.w	r3, r4, #20
 8006712:	d13f      	bne.n	8006794 <__gethex+0x450>
 8006714:	f8d8 2000 	ldr.w	r2, [r8]
 8006718:	3a01      	subs	r2, #1
 800671a:	42b2      	cmp	r2, r6
 800671c:	d10a      	bne.n	8006734 <__gethex+0x3f0>
 800671e:	1171      	asrs	r1, r6, #5
 8006720:	2201      	movs	r2, #1
 8006722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006726:	f006 061f 	and.w	r6, r6, #31
 800672a:	fa02 f606 	lsl.w	r6, r2, r6
 800672e:	421e      	tst	r6, r3
 8006730:	bf18      	it	ne
 8006732:	4617      	movne	r7, r2
 8006734:	f047 0720 	orr.w	r7, r7, #32
 8006738:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800673a:	601c      	str	r4, [r3, #0]
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	601d      	str	r5, [r3, #0]
 8006740:	e695      	b.n	800646e <__gethex+0x12a>
 8006742:	4299      	cmp	r1, r3
 8006744:	f843 cc04 	str.w	ip, [r3, #-4]
 8006748:	d8d8      	bhi.n	80066fc <__gethex+0x3b8>
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	459b      	cmp	fp, r3
 800674e:	db19      	blt.n	8006784 <__gethex+0x440>
 8006750:	6861      	ldr	r1, [r4, #4]
 8006752:	ee18 0a10 	vmov	r0, s16
 8006756:	3101      	adds	r1, #1
 8006758:	f000 f928 	bl	80069ac <_Balloc>
 800675c:	4681      	mov	r9, r0
 800675e:	b918      	cbnz	r0, 8006768 <__gethex+0x424>
 8006760:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <__gethex+0x488>)
 8006762:	4602      	mov	r2, r0
 8006764:	2184      	movs	r1, #132	; 0x84
 8006766:	e6a8      	b.n	80064ba <__gethex+0x176>
 8006768:	6922      	ldr	r2, [r4, #16]
 800676a:	3202      	adds	r2, #2
 800676c:	f104 010c 	add.w	r1, r4, #12
 8006770:	0092      	lsls	r2, r2, #2
 8006772:	300c      	adds	r0, #12
 8006774:	f000 f90c 	bl	8006990 <memcpy>
 8006778:	4621      	mov	r1, r4
 800677a:	ee18 0a10 	vmov	r0, s16
 800677e:	f000 f955 	bl	8006a2c <_Bfree>
 8006782:	464c      	mov	r4, r9
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800678c:	6122      	str	r2, [r4, #16]
 800678e:	2201      	movs	r2, #1
 8006790:	615a      	str	r2, [r3, #20]
 8006792:	e7bb      	b.n	800670c <__gethex+0x3c8>
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	455a      	cmp	r2, fp
 8006798:	dd0b      	ble.n	80067b2 <__gethex+0x46e>
 800679a:	2101      	movs	r1, #1
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff fd69 	bl	8006274 <rshift>
 80067a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067a6:	3501      	adds	r5, #1
 80067a8:	42ab      	cmp	r3, r5
 80067aa:	f6ff aed0 	blt.w	800654e <__gethex+0x20a>
 80067ae:	2701      	movs	r7, #1
 80067b0:	e7c0      	b.n	8006734 <__gethex+0x3f0>
 80067b2:	f016 061f 	ands.w	r6, r6, #31
 80067b6:	d0fa      	beq.n	80067ae <__gethex+0x46a>
 80067b8:	4453      	add	r3, sl
 80067ba:	f1c6 0620 	rsb	r6, r6, #32
 80067be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80067c2:	f000 f9e5 	bl	8006b90 <__hi0bits>
 80067c6:	42b0      	cmp	r0, r6
 80067c8:	dbe7      	blt.n	800679a <__gethex+0x456>
 80067ca:	e7f0      	b.n	80067ae <__gethex+0x46a>
 80067cc:	08008d98 	.word	0x08008d98

080067d0 <L_shift>:
 80067d0:	f1c2 0208 	rsb	r2, r2, #8
 80067d4:	0092      	lsls	r2, r2, #2
 80067d6:	b570      	push	{r4, r5, r6, lr}
 80067d8:	f1c2 0620 	rsb	r6, r2, #32
 80067dc:	6843      	ldr	r3, [r0, #4]
 80067de:	6804      	ldr	r4, [r0, #0]
 80067e0:	fa03 f506 	lsl.w	r5, r3, r6
 80067e4:	432c      	orrs	r4, r5
 80067e6:	40d3      	lsrs	r3, r2
 80067e8:	6004      	str	r4, [r0, #0]
 80067ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80067ee:	4288      	cmp	r0, r1
 80067f0:	d3f4      	bcc.n	80067dc <L_shift+0xc>
 80067f2:	bd70      	pop	{r4, r5, r6, pc}

080067f4 <__match>:
 80067f4:	b530      	push	{r4, r5, lr}
 80067f6:	6803      	ldr	r3, [r0, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fe:	b914      	cbnz	r4, 8006806 <__match+0x12>
 8006800:	6003      	str	r3, [r0, #0]
 8006802:	2001      	movs	r0, #1
 8006804:	bd30      	pop	{r4, r5, pc}
 8006806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800680a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800680e:	2d19      	cmp	r5, #25
 8006810:	bf98      	it	ls
 8006812:	3220      	addls	r2, #32
 8006814:	42a2      	cmp	r2, r4
 8006816:	d0f0      	beq.n	80067fa <__match+0x6>
 8006818:	2000      	movs	r0, #0
 800681a:	e7f3      	b.n	8006804 <__match+0x10>

0800681c <__hexnan>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	680b      	ldr	r3, [r1, #0]
 8006822:	115e      	asrs	r6, r3, #5
 8006824:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006828:	f013 031f 	ands.w	r3, r3, #31
 800682c:	b087      	sub	sp, #28
 800682e:	bf18      	it	ne
 8006830:	3604      	addne	r6, #4
 8006832:	2500      	movs	r5, #0
 8006834:	1f37      	subs	r7, r6, #4
 8006836:	4690      	mov	r8, r2
 8006838:	6802      	ldr	r2, [r0, #0]
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	4682      	mov	sl, r0
 800683e:	f846 5c04 	str.w	r5, [r6, #-4]
 8006842:	46b9      	mov	r9, r7
 8006844:	463c      	mov	r4, r7
 8006846:	9502      	str	r5, [sp, #8]
 8006848:	46ab      	mov	fp, r5
 800684a:	7851      	ldrb	r1, [r2, #1]
 800684c:	1c53      	adds	r3, r2, #1
 800684e:	9303      	str	r3, [sp, #12]
 8006850:	b341      	cbz	r1, 80068a4 <__hexnan+0x88>
 8006852:	4608      	mov	r0, r1
 8006854:	9205      	str	r2, [sp, #20]
 8006856:	9104      	str	r1, [sp, #16]
 8006858:	f7ff fd5e 	bl	8006318 <__hexdig_fun>
 800685c:	2800      	cmp	r0, #0
 800685e:	d14f      	bne.n	8006900 <__hexnan+0xe4>
 8006860:	9904      	ldr	r1, [sp, #16]
 8006862:	9a05      	ldr	r2, [sp, #20]
 8006864:	2920      	cmp	r1, #32
 8006866:	d818      	bhi.n	800689a <__hexnan+0x7e>
 8006868:	9b02      	ldr	r3, [sp, #8]
 800686a:	459b      	cmp	fp, r3
 800686c:	dd13      	ble.n	8006896 <__hexnan+0x7a>
 800686e:	454c      	cmp	r4, r9
 8006870:	d206      	bcs.n	8006880 <__hexnan+0x64>
 8006872:	2d07      	cmp	r5, #7
 8006874:	dc04      	bgt.n	8006880 <__hexnan+0x64>
 8006876:	462a      	mov	r2, r5
 8006878:	4649      	mov	r1, r9
 800687a:	4620      	mov	r0, r4
 800687c:	f7ff ffa8 	bl	80067d0 <L_shift>
 8006880:	4544      	cmp	r4, r8
 8006882:	d950      	bls.n	8006926 <__hexnan+0x10a>
 8006884:	2300      	movs	r3, #0
 8006886:	f1a4 0904 	sub.w	r9, r4, #4
 800688a:	f844 3c04 	str.w	r3, [r4, #-4]
 800688e:	f8cd b008 	str.w	fp, [sp, #8]
 8006892:	464c      	mov	r4, r9
 8006894:	461d      	mov	r5, r3
 8006896:	9a03      	ldr	r2, [sp, #12]
 8006898:	e7d7      	b.n	800684a <__hexnan+0x2e>
 800689a:	2929      	cmp	r1, #41	; 0x29
 800689c:	d156      	bne.n	800694c <__hexnan+0x130>
 800689e:	3202      	adds	r2, #2
 80068a0:	f8ca 2000 	str.w	r2, [sl]
 80068a4:	f1bb 0f00 	cmp.w	fp, #0
 80068a8:	d050      	beq.n	800694c <__hexnan+0x130>
 80068aa:	454c      	cmp	r4, r9
 80068ac:	d206      	bcs.n	80068bc <__hexnan+0xa0>
 80068ae:	2d07      	cmp	r5, #7
 80068b0:	dc04      	bgt.n	80068bc <__hexnan+0xa0>
 80068b2:	462a      	mov	r2, r5
 80068b4:	4649      	mov	r1, r9
 80068b6:	4620      	mov	r0, r4
 80068b8:	f7ff ff8a 	bl	80067d0 <L_shift>
 80068bc:	4544      	cmp	r4, r8
 80068be:	d934      	bls.n	800692a <__hexnan+0x10e>
 80068c0:	f1a8 0204 	sub.w	r2, r8, #4
 80068c4:	4623      	mov	r3, r4
 80068c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80068ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80068ce:	429f      	cmp	r7, r3
 80068d0:	d2f9      	bcs.n	80068c6 <__hexnan+0xaa>
 80068d2:	1b3b      	subs	r3, r7, r4
 80068d4:	f023 0303 	bic.w	r3, r3, #3
 80068d8:	3304      	adds	r3, #4
 80068da:	3401      	adds	r4, #1
 80068dc:	3e03      	subs	r6, #3
 80068de:	42b4      	cmp	r4, r6
 80068e0:	bf88      	it	hi
 80068e2:	2304      	movhi	r3, #4
 80068e4:	4443      	add	r3, r8
 80068e6:	2200      	movs	r2, #0
 80068e8:	f843 2b04 	str.w	r2, [r3], #4
 80068ec:	429f      	cmp	r7, r3
 80068ee:	d2fb      	bcs.n	80068e8 <__hexnan+0xcc>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	b91b      	cbnz	r3, 80068fc <__hexnan+0xe0>
 80068f4:	4547      	cmp	r7, r8
 80068f6:	d127      	bne.n	8006948 <__hexnan+0x12c>
 80068f8:	2301      	movs	r3, #1
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	2005      	movs	r0, #5
 80068fe:	e026      	b.n	800694e <__hexnan+0x132>
 8006900:	3501      	adds	r5, #1
 8006902:	2d08      	cmp	r5, #8
 8006904:	f10b 0b01 	add.w	fp, fp, #1
 8006908:	dd06      	ble.n	8006918 <__hexnan+0xfc>
 800690a:	4544      	cmp	r4, r8
 800690c:	d9c3      	bls.n	8006896 <__hexnan+0x7a>
 800690e:	2300      	movs	r3, #0
 8006910:	f844 3c04 	str.w	r3, [r4, #-4]
 8006914:	2501      	movs	r5, #1
 8006916:	3c04      	subs	r4, #4
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	f000 000f 	and.w	r0, r0, #15
 800691e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006922:	6022      	str	r2, [r4, #0]
 8006924:	e7b7      	b.n	8006896 <__hexnan+0x7a>
 8006926:	2508      	movs	r5, #8
 8006928:	e7b5      	b.n	8006896 <__hexnan+0x7a>
 800692a:	9b01      	ldr	r3, [sp, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0df      	beq.n	80068f0 <__hexnan+0xd4>
 8006930:	f04f 32ff 	mov.w	r2, #4294967295
 8006934:	f1c3 0320 	rsb	r3, r3, #32
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
 800693c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006940:	401a      	ands	r2, r3
 8006942:	f846 2c04 	str.w	r2, [r6, #-4]
 8006946:	e7d3      	b.n	80068f0 <__hexnan+0xd4>
 8006948:	3f04      	subs	r7, #4
 800694a:	e7d1      	b.n	80068f0 <__hexnan+0xd4>
 800694c:	2004      	movs	r0, #4
 800694e:	b007      	add	sp, #28
 8006950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006954 <_localeconv_r>:
 8006954:	4800      	ldr	r0, [pc, #0]	; (8006958 <_localeconv_r+0x4>)
 8006956:	4770      	bx	lr
 8006958:	2000016c 	.word	0x2000016c

0800695c <malloc>:
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <malloc+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f000 bd67 	b.w	8007434 <_malloc_r>
 8006966:	bf00      	nop
 8006968:	20000014 	.word	0x20000014

0800696c <__ascii_mbtowc>:
 800696c:	b082      	sub	sp, #8
 800696e:	b901      	cbnz	r1, 8006972 <__ascii_mbtowc+0x6>
 8006970:	a901      	add	r1, sp, #4
 8006972:	b142      	cbz	r2, 8006986 <__ascii_mbtowc+0x1a>
 8006974:	b14b      	cbz	r3, 800698a <__ascii_mbtowc+0x1e>
 8006976:	7813      	ldrb	r3, [r2, #0]
 8006978:	600b      	str	r3, [r1, #0]
 800697a:	7812      	ldrb	r2, [r2, #0]
 800697c:	1e10      	subs	r0, r2, #0
 800697e:	bf18      	it	ne
 8006980:	2001      	movne	r0, #1
 8006982:	b002      	add	sp, #8
 8006984:	4770      	bx	lr
 8006986:	4610      	mov	r0, r2
 8006988:	e7fb      	b.n	8006982 <__ascii_mbtowc+0x16>
 800698a:	f06f 0001 	mvn.w	r0, #1
 800698e:	e7f8      	b.n	8006982 <__ascii_mbtowc+0x16>

08006990 <memcpy>:
 8006990:	440a      	add	r2, r1
 8006992:	4291      	cmp	r1, r2
 8006994:	f100 33ff 	add.w	r3, r0, #4294967295
 8006998:	d100      	bne.n	800699c <memcpy+0xc>
 800699a:	4770      	bx	lr
 800699c:	b510      	push	{r4, lr}
 800699e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a6:	4291      	cmp	r1, r2
 80069a8:	d1f9      	bne.n	800699e <memcpy+0xe>
 80069aa:	bd10      	pop	{r4, pc}

080069ac <_Balloc>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	b976      	cbnz	r6, 80069d4 <_Balloc+0x28>
 80069b6:	2010      	movs	r0, #16
 80069b8:	f7ff ffd0 	bl	800695c <malloc>
 80069bc:	4602      	mov	r2, r0
 80069be:	6260      	str	r0, [r4, #36]	; 0x24
 80069c0:	b920      	cbnz	r0, 80069cc <_Balloc+0x20>
 80069c2:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <_Balloc+0x78>)
 80069c4:	4818      	ldr	r0, [pc, #96]	; (8006a28 <_Balloc+0x7c>)
 80069c6:	2166      	movs	r1, #102	; 0x66
 80069c8:	f000 ff40 	bl	800784c <__assert_func>
 80069cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d0:	6006      	str	r6, [r0, #0]
 80069d2:	60c6      	str	r6, [r0, #12]
 80069d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069d6:	68f3      	ldr	r3, [r6, #12]
 80069d8:	b183      	cbz	r3, 80069fc <_Balloc+0x50>
 80069da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069e2:	b9b8      	cbnz	r0, 8006a14 <_Balloc+0x68>
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f605 	lsl.w	r6, r1, r5
 80069ea:	1d72      	adds	r2, r6, #5
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fc9d 	bl	800732e <_calloc_r>
 80069f4:	b160      	cbz	r0, 8006a10 <_Balloc+0x64>
 80069f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069fa:	e00e      	b.n	8006a1a <_Balloc+0x6e>
 80069fc:	2221      	movs	r2, #33	; 0x21
 80069fe:	2104      	movs	r1, #4
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fc94 	bl	800732e <_calloc_r>
 8006a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a08:	60f0      	str	r0, [r6, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e4      	bne.n	80069da <_Balloc+0x2e>
 8006a10:	2000      	movs	r0, #0
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	6802      	ldr	r2, [r0, #0]
 8006a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a20:	e7f7      	b.n	8006a12 <_Balloc+0x66>
 8006a22:	bf00      	nop
 8006a24:	08008d26 	.word	0x08008d26
 8006a28:	08008e24 	.word	0x08008e24

08006a2c <_Bfree>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a30:	4605      	mov	r5, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	b976      	cbnz	r6, 8006a54 <_Bfree+0x28>
 8006a36:	2010      	movs	r0, #16
 8006a38:	f7ff ff90 	bl	800695c <malloc>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6268      	str	r0, [r5, #36]	; 0x24
 8006a40:	b920      	cbnz	r0, 8006a4c <_Bfree+0x20>
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <_Bfree+0x3c>)
 8006a44:	4809      	ldr	r0, [pc, #36]	; (8006a6c <_Bfree+0x40>)
 8006a46:	218a      	movs	r1, #138	; 0x8a
 8006a48:	f000 ff00 	bl	800784c <__assert_func>
 8006a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a50:	6006      	str	r6, [r0, #0]
 8006a52:	60c6      	str	r6, [r0, #12]
 8006a54:	b13c      	cbz	r4, 8006a66 <_Bfree+0x3a>
 8006a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a58:	6862      	ldr	r2, [r4, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a60:	6021      	str	r1, [r4, #0]
 8006a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	08008d26 	.word	0x08008d26
 8006a6c:	08008e24 	.word	0x08008e24

08006a70 <__multadd>:
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	690d      	ldr	r5, [r1, #16]
 8006a76:	4607      	mov	r7, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	461e      	mov	r6, r3
 8006a7c:	f101 0c14 	add.w	ip, r1, #20
 8006a80:	2000      	movs	r0, #0
 8006a82:	f8dc 3000 	ldr.w	r3, [ip]
 8006a86:	b299      	uxth	r1, r3
 8006a88:	fb02 6101 	mla	r1, r2, r1, r6
 8006a8c:	0c1e      	lsrs	r6, r3, #16
 8006a8e:	0c0b      	lsrs	r3, r1, #16
 8006a90:	fb02 3306 	mla	r3, r2, r6, r3
 8006a94:	b289      	uxth	r1, r1
 8006a96:	3001      	adds	r0, #1
 8006a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a9c:	4285      	cmp	r5, r0
 8006a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8006aa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aa6:	dcec      	bgt.n	8006a82 <__multadd+0x12>
 8006aa8:	b30e      	cbz	r6, 8006aee <__multadd+0x7e>
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dc19      	bgt.n	8006ae4 <__multadd+0x74>
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	f7ff ff79 	bl	80069ac <_Balloc>
 8006aba:	4680      	mov	r8, r0
 8006abc:	b928      	cbnz	r0, 8006aca <__multadd+0x5a>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <__multadd+0x84>)
 8006ac2:	480d      	ldr	r0, [pc, #52]	; (8006af8 <__multadd+0x88>)
 8006ac4:	21b5      	movs	r1, #181	; 0xb5
 8006ac6:	f000 fec1 	bl	800784c <__assert_func>
 8006aca:	6922      	ldr	r2, [r4, #16]
 8006acc:	3202      	adds	r2, #2
 8006ace:	f104 010c 	add.w	r1, r4, #12
 8006ad2:	0092      	lsls	r2, r2, #2
 8006ad4:	300c      	adds	r0, #12
 8006ad6:	f7ff ff5b 	bl	8006990 <memcpy>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4638      	mov	r0, r7
 8006ade:	f7ff ffa5 	bl	8006a2c <_Bfree>
 8006ae2:	4644      	mov	r4, r8
 8006ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ae8:	3501      	adds	r5, #1
 8006aea:	615e      	str	r6, [r3, #20]
 8006aec:	6125      	str	r5, [r4, #16]
 8006aee:	4620      	mov	r0, r4
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	08008d98 	.word	0x08008d98
 8006af8:	08008e24 	.word	0x08008e24

08006afc <__s2b>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	460c      	mov	r4, r1
 8006b02:	4615      	mov	r5, r2
 8006b04:	461f      	mov	r7, r3
 8006b06:	2209      	movs	r2, #9
 8006b08:	3308      	adds	r3, #8
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b10:	2100      	movs	r1, #0
 8006b12:	2201      	movs	r2, #1
 8006b14:	429a      	cmp	r2, r3
 8006b16:	db09      	blt.n	8006b2c <__s2b+0x30>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff ff47 	bl	80069ac <_Balloc>
 8006b1e:	b940      	cbnz	r0, 8006b32 <__s2b+0x36>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <__s2b+0x8c>)
 8006b24:	4819      	ldr	r0, [pc, #100]	; (8006b8c <__s2b+0x90>)
 8006b26:	21ce      	movs	r1, #206	; 0xce
 8006b28:	f000 fe90 	bl	800784c <__assert_func>
 8006b2c:	0052      	lsls	r2, r2, #1
 8006b2e:	3101      	adds	r1, #1
 8006b30:	e7f0      	b.n	8006b14 <__s2b+0x18>
 8006b32:	9b08      	ldr	r3, [sp, #32]
 8006b34:	6143      	str	r3, [r0, #20]
 8006b36:	2d09      	cmp	r5, #9
 8006b38:	f04f 0301 	mov.w	r3, #1
 8006b3c:	6103      	str	r3, [r0, #16]
 8006b3e:	dd16      	ble.n	8006b6e <__s2b+0x72>
 8006b40:	f104 0909 	add.w	r9, r4, #9
 8006b44:	46c8      	mov	r8, r9
 8006b46:	442c      	add	r4, r5
 8006b48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	3b30      	subs	r3, #48	; 0x30
 8006b50:	220a      	movs	r2, #10
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ff8c 	bl	8006a70 <__multadd>
 8006b58:	45a0      	cmp	r8, r4
 8006b5a:	d1f5      	bne.n	8006b48 <__s2b+0x4c>
 8006b5c:	f1a5 0408 	sub.w	r4, r5, #8
 8006b60:	444c      	add	r4, r9
 8006b62:	1b2d      	subs	r5, r5, r4
 8006b64:	1963      	adds	r3, r4, r5
 8006b66:	42bb      	cmp	r3, r7
 8006b68:	db04      	blt.n	8006b74 <__s2b+0x78>
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6e:	340a      	adds	r4, #10
 8006b70:	2509      	movs	r5, #9
 8006b72:	e7f6      	b.n	8006b62 <__s2b+0x66>
 8006b74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b78:	4601      	mov	r1, r0
 8006b7a:	3b30      	subs	r3, #48	; 0x30
 8006b7c:	220a      	movs	r2, #10
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ff76 	bl	8006a70 <__multadd>
 8006b84:	e7ee      	b.n	8006b64 <__s2b+0x68>
 8006b86:	bf00      	nop
 8006b88:	08008d98 	.word	0x08008d98
 8006b8c:	08008e24 	.word	0x08008e24

08006b90 <__hi0bits>:
 8006b90:	0c03      	lsrs	r3, r0, #16
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	b9d3      	cbnz	r3, 8006bcc <__hi0bits+0x3c>
 8006b96:	0400      	lsls	r0, r0, #16
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b9e:	bf04      	itt	eq
 8006ba0:	0200      	lsleq	r0, r0, #8
 8006ba2:	3308      	addeq	r3, #8
 8006ba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ba8:	bf04      	itt	eq
 8006baa:	0100      	lsleq	r0, r0, #4
 8006bac:	3304      	addeq	r3, #4
 8006bae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bb2:	bf04      	itt	eq
 8006bb4:	0080      	lsleq	r0, r0, #2
 8006bb6:	3302      	addeq	r3, #2
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	db05      	blt.n	8006bc8 <__hi0bits+0x38>
 8006bbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bc0:	f103 0301 	add.w	r3, r3, #1
 8006bc4:	bf08      	it	eq
 8006bc6:	2320      	moveq	r3, #32
 8006bc8:	4618      	mov	r0, r3
 8006bca:	4770      	bx	lr
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e7e4      	b.n	8006b9a <__hi0bits+0xa>

08006bd0 <__lo0bits>:
 8006bd0:	6803      	ldr	r3, [r0, #0]
 8006bd2:	f013 0207 	ands.w	r2, r3, #7
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	d00b      	beq.n	8006bf2 <__lo0bits+0x22>
 8006bda:	07da      	lsls	r2, r3, #31
 8006bdc:	d423      	bmi.n	8006c26 <__lo0bits+0x56>
 8006bde:	0798      	lsls	r0, r3, #30
 8006be0:	bf49      	itett	mi
 8006be2:	085b      	lsrmi	r3, r3, #1
 8006be4:	089b      	lsrpl	r3, r3, #2
 8006be6:	2001      	movmi	r0, #1
 8006be8:	600b      	strmi	r3, [r1, #0]
 8006bea:	bf5c      	itt	pl
 8006bec:	600b      	strpl	r3, [r1, #0]
 8006bee:	2002      	movpl	r0, #2
 8006bf0:	4770      	bx	lr
 8006bf2:	b298      	uxth	r0, r3
 8006bf4:	b9a8      	cbnz	r0, 8006c22 <__lo0bits+0x52>
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	2010      	movs	r0, #16
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	b90a      	cbnz	r2, 8006c02 <__lo0bits+0x32>
 8006bfe:	3008      	adds	r0, #8
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	071a      	lsls	r2, r3, #28
 8006c04:	bf04      	itt	eq
 8006c06:	091b      	lsreq	r3, r3, #4
 8006c08:	3004      	addeq	r0, #4
 8006c0a:	079a      	lsls	r2, r3, #30
 8006c0c:	bf04      	itt	eq
 8006c0e:	089b      	lsreq	r3, r3, #2
 8006c10:	3002      	addeq	r0, #2
 8006c12:	07da      	lsls	r2, r3, #31
 8006c14:	d403      	bmi.n	8006c1e <__lo0bits+0x4e>
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	f100 0001 	add.w	r0, r0, #1
 8006c1c:	d005      	beq.n	8006c2a <__lo0bits+0x5a>
 8006c1e:	600b      	str	r3, [r1, #0]
 8006c20:	4770      	bx	lr
 8006c22:	4610      	mov	r0, r2
 8006c24:	e7e9      	b.n	8006bfa <__lo0bits+0x2a>
 8006c26:	2000      	movs	r0, #0
 8006c28:	4770      	bx	lr
 8006c2a:	2020      	movs	r0, #32
 8006c2c:	4770      	bx	lr
	...

08006c30 <__i2b>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	2101      	movs	r1, #1
 8006c36:	f7ff feb9 	bl	80069ac <_Balloc>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	b928      	cbnz	r0, 8006c4a <__i2b+0x1a>
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <__i2b+0x24>)
 8006c40:	4805      	ldr	r0, [pc, #20]	; (8006c58 <__i2b+0x28>)
 8006c42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c46:	f000 fe01 	bl	800784c <__assert_func>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6144      	str	r4, [r0, #20]
 8006c4e:	6103      	str	r3, [r0, #16]
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	bf00      	nop
 8006c54:	08008d98 	.word	0x08008d98
 8006c58:	08008e24 	.word	0x08008e24

08006c5c <__multiply>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	4691      	mov	r9, r2
 8006c62:	690a      	ldr	r2, [r1, #16]
 8006c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	bfb8      	it	lt
 8006c6c:	460b      	movlt	r3, r1
 8006c6e:	460c      	mov	r4, r1
 8006c70:	bfbc      	itt	lt
 8006c72:	464c      	movlt	r4, r9
 8006c74:	4699      	movlt	r9, r3
 8006c76:	6927      	ldr	r7, [r4, #16]
 8006c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c7c:	68a3      	ldr	r3, [r4, #8]
 8006c7e:	6861      	ldr	r1, [r4, #4]
 8006c80:	eb07 060a 	add.w	r6, r7, sl
 8006c84:	42b3      	cmp	r3, r6
 8006c86:	b085      	sub	sp, #20
 8006c88:	bfb8      	it	lt
 8006c8a:	3101      	addlt	r1, #1
 8006c8c:	f7ff fe8e 	bl	80069ac <_Balloc>
 8006c90:	b930      	cbnz	r0, 8006ca0 <__multiply+0x44>
 8006c92:	4602      	mov	r2, r0
 8006c94:	4b44      	ldr	r3, [pc, #272]	; (8006da8 <__multiply+0x14c>)
 8006c96:	4845      	ldr	r0, [pc, #276]	; (8006dac <__multiply+0x150>)
 8006c98:	f240 115d 	movw	r1, #349	; 0x15d
 8006c9c:	f000 fdd6 	bl	800784c <__assert_func>
 8006ca0:	f100 0514 	add.w	r5, r0, #20
 8006ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ca8:	462b      	mov	r3, r5
 8006caa:	2200      	movs	r2, #0
 8006cac:	4543      	cmp	r3, r8
 8006cae:	d321      	bcc.n	8006cf4 <__multiply+0x98>
 8006cb0:	f104 0314 	add.w	r3, r4, #20
 8006cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006cb8:	f109 0314 	add.w	r3, r9, #20
 8006cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006cc0:	9202      	str	r2, [sp, #8]
 8006cc2:	1b3a      	subs	r2, r7, r4
 8006cc4:	3a15      	subs	r2, #21
 8006cc6:	f022 0203 	bic.w	r2, r2, #3
 8006cca:	3204      	adds	r2, #4
 8006ccc:	f104 0115 	add.w	r1, r4, #21
 8006cd0:	428f      	cmp	r7, r1
 8006cd2:	bf38      	it	cc
 8006cd4:	2204      	movcc	r2, #4
 8006cd6:	9201      	str	r2, [sp, #4]
 8006cd8:	9a02      	ldr	r2, [sp, #8]
 8006cda:	9303      	str	r3, [sp, #12]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d80c      	bhi.n	8006cfa <__multiply+0x9e>
 8006ce0:	2e00      	cmp	r6, #0
 8006ce2:	dd03      	ble.n	8006cec <__multiply+0x90>
 8006ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d05a      	beq.n	8006da2 <__multiply+0x146>
 8006cec:	6106      	str	r6, [r0, #16]
 8006cee:	b005      	add	sp, #20
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	f843 2b04 	str.w	r2, [r3], #4
 8006cf8:	e7d8      	b.n	8006cac <__multiply+0x50>
 8006cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cfe:	f1ba 0f00 	cmp.w	sl, #0
 8006d02:	d024      	beq.n	8006d4e <__multiply+0xf2>
 8006d04:	f104 0e14 	add.w	lr, r4, #20
 8006d08:	46a9      	mov	r9, r5
 8006d0a:	f04f 0c00 	mov.w	ip, #0
 8006d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d12:	f8d9 1000 	ldr.w	r1, [r9]
 8006d16:	fa1f fb82 	uxth.w	fp, r2
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d24:	f8d9 2000 	ldr.w	r2, [r9]
 8006d28:	4461      	add	r1, ip
 8006d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d36:	b289      	uxth	r1, r1
 8006d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d3c:	4577      	cmp	r7, lr
 8006d3e:	f849 1b04 	str.w	r1, [r9], #4
 8006d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d46:	d8e2      	bhi.n	8006d0e <__multiply+0xb2>
 8006d48:	9a01      	ldr	r2, [sp, #4]
 8006d4a:	f845 c002 	str.w	ip, [r5, r2]
 8006d4e:	9a03      	ldr	r2, [sp, #12]
 8006d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d54:	3304      	adds	r3, #4
 8006d56:	f1b9 0f00 	cmp.w	r9, #0
 8006d5a:	d020      	beq.n	8006d9e <__multiply+0x142>
 8006d5c:	6829      	ldr	r1, [r5, #0]
 8006d5e:	f104 0c14 	add.w	ip, r4, #20
 8006d62:	46ae      	mov	lr, r5
 8006d64:	f04f 0a00 	mov.w	sl, #0
 8006d68:	f8bc b000 	ldrh.w	fp, [ip]
 8006d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d70:	fb09 220b 	mla	r2, r9, fp, r2
 8006d74:	4492      	add	sl, r2
 8006d76:	b289      	uxth	r1, r1
 8006d78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8006d80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d84:	f8be 1000 	ldrh.w	r1, [lr]
 8006d88:	0c12      	lsrs	r2, r2, #16
 8006d8a:	fb09 1102 	mla	r1, r9, r2, r1
 8006d8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d92:	4567      	cmp	r7, ip
 8006d94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d98:	d8e6      	bhi.n	8006d68 <__multiply+0x10c>
 8006d9a:	9a01      	ldr	r2, [sp, #4]
 8006d9c:	50a9      	str	r1, [r5, r2]
 8006d9e:	3504      	adds	r5, #4
 8006da0:	e79a      	b.n	8006cd8 <__multiply+0x7c>
 8006da2:	3e01      	subs	r6, #1
 8006da4:	e79c      	b.n	8006ce0 <__multiply+0x84>
 8006da6:	bf00      	nop
 8006da8:	08008d98 	.word	0x08008d98
 8006dac:	08008e24 	.word	0x08008e24

08006db0 <__pow5mult>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	4615      	mov	r5, r2
 8006db6:	f012 0203 	ands.w	r2, r2, #3
 8006dba:	4606      	mov	r6, r0
 8006dbc:	460f      	mov	r7, r1
 8006dbe:	d007      	beq.n	8006dd0 <__pow5mult+0x20>
 8006dc0:	4c25      	ldr	r4, [pc, #148]	; (8006e58 <__pow5mult+0xa8>)
 8006dc2:	3a01      	subs	r2, #1
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dca:	f7ff fe51 	bl	8006a70 <__multadd>
 8006dce:	4607      	mov	r7, r0
 8006dd0:	10ad      	asrs	r5, r5, #2
 8006dd2:	d03d      	beq.n	8006e50 <__pow5mult+0xa0>
 8006dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006dd6:	b97c      	cbnz	r4, 8006df8 <__pow5mult+0x48>
 8006dd8:	2010      	movs	r0, #16
 8006dda:	f7ff fdbf 	bl	800695c <malloc>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6270      	str	r0, [r6, #36]	; 0x24
 8006de2:	b928      	cbnz	r0, 8006df0 <__pow5mult+0x40>
 8006de4:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <__pow5mult+0xac>)
 8006de6:	481e      	ldr	r0, [pc, #120]	; (8006e60 <__pow5mult+0xb0>)
 8006de8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006dec:	f000 fd2e 	bl	800784c <__assert_func>
 8006df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006df4:	6004      	str	r4, [r0, #0]
 8006df6:	60c4      	str	r4, [r0, #12]
 8006df8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e00:	b94c      	cbnz	r4, 8006e16 <__pow5mult+0x66>
 8006e02:	f240 2171 	movw	r1, #625	; 0x271
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff ff12 	bl	8006c30 <__i2b>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e12:	4604      	mov	r4, r0
 8006e14:	6003      	str	r3, [r0, #0]
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	07eb      	lsls	r3, r5, #31
 8006e1c:	d50a      	bpl.n	8006e34 <__pow5mult+0x84>
 8006e1e:	4639      	mov	r1, r7
 8006e20:	4622      	mov	r2, r4
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ff1a 	bl	8006c5c <__multiply>
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff fdfd 	bl	8006a2c <_Bfree>
 8006e32:	4647      	mov	r7, r8
 8006e34:	106d      	asrs	r5, r5, #1
 8006e36:	d00b      	beq.n	8006e50 <__pow5mult+0xa0>
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	b938      	cbnz	r0, 8006e4c <__pow5mult+0x9c>
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff ff0b 	bl	8006c5c <__multiply>
 8006e46:	6020      	str	r0, [r4, #0]
 8006e48:	f8c0 9000 	str.w	r9, [r0]
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	e7e4      	b.n	8006e1a <__pow5mult+0x6a>
 8006e50:	4638      	mov	r0, r7
 8006e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e56:	bf00      	nop
 8006e58:	08008f70 	.word	0x08008f70
 8006e5c:	08008d26 	.word	0x08008d26
 8006e60:	08008e24 	.word	0x08008e24

08006e64 <__lshift>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	460c      	mov	r4, r1
 8006e6a:	6849      	ldr	r1, [r1, #4]
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	4607      	mov	r7, r0
 8006e76:	4691      	mov	r9, r2
 8006e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e7c:	f108 0601 	add.w	r6, r8, #1
 8006e80:	42b3      	cmp	r3, r6
 8006e82:	db0b      	blt.n	8006e9c <__lshift+0x38>
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff fd91 	bl	80069ac <_Balloc>
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	b948      	cbnz	r0, 8006ea2 <__lshift+0x3e>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b2a      	ldr	r3, [pc, #168]	; (8006f3c <__lshift+0xd8>)
 8006e92:	482b      	ldr	r0, [pc, #172]	; (8006f40 <__lshift+0xdc>)
 8006e94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e98:	f000 fcd8 	bl	800784c <__assert_func>
 8006e9c:	3101      	adds	r1, #1
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	e7ee      	b.n	8006e80 <__lshift+0x1c>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f100 0114 	add.w	r1, r0, #20
 8006ea8:	f100 0210 	add.w	r2, r0, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	4553      	cmp	r3, sl
 8006eb0:	db37      	blt.n	8006f22 <__lshift+0xbe>
 8006eb2:	6920      	ldr	r0, [r4, #16]
 8006eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006eb8:	f104 0314 	add.w	r3, r4, #20
 8006ebc:	f019 091f 	ands.w	r9, r9, #31
 8006ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ec4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ec8:	d02f      	beq.n	8006f2a <__lshift+0xc6>
 8006eca:	f1c9 0e20 	rsb	lr, r9, #32
 8006ece:	468a      	mov	sl, r1
 8006ed0:	f04f 0c00 	mov.w	ip, #0
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	fa02 f209 	lsl.w	r2, r2, r9
 8006eda:	ea42 020c 	orr.w	r2, r2, ip
 8006ede:	f84a 2b04 	str.w	r2, [sl], #4
 8006ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee6:	4298      	cmp	r0, r3
 8006ee8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006eec:	d8f2      	bhi.n	8006ed4 <__lshift+0x70>
 8006eee:	1b03      	subs	r3, r0, r4
 8006ef0:	3b15      	subs	r3, #21
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	f104 0215 	add.w	r2, r4, #21
 8006efc:	4290      	cmp	r0, r2
 8006efe:	bf38      	it	cc
 8006f00:	2304      	movcc	r3, #4
 8006f02:	f841 c003 	str.w	ip, [r1, r3]
 8006f06:	f1bc 0f00 	cmp.w	ip, #0
 8006f0a:	d001      	beq.n	8006f10 <__lshift+0xac>
 8006f0c:	f108 0602 	add.w	r6, r8, #2
 8006f10:	3e01      	subs	r6, #1
 8006f12:	4638      	mov	r0, r7
 8006f14:	612e      	str	r6, [r5, #16]
 8006f16:	4621      	mov	r1, r4
 8006f18:	f7ff fd88 	bl	8006a2c <_Bfree>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f26:	3301      	adds	r3, #1
 8006f28:	e7c1      	b.n	8006eae <__lshift+0x4a>
 8006f2a:	3904      	subs	r1, #4
 8006f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f34:	4298      	cmp	r0, r3
 8006f36:	d8f9      	bhi.n	8006f2c <__lshift+0xc8>
 8006f38:	e7ea      	b.n	8006f10 <__lshift+0xac>
 8006f3a:	bf00      	nop
 8006f3c:	08008d98 	.word	0x08008d98
 8006f40:	08008e24 	.word	0x08008e24

08006f44 <__mcmp>:
 8006f44:	b530      	push	{r4, r5, lr}
 8006f46:	6902      	ldr	r2, [r0, #16]
 8006f48:	690c      	ldr	r4, [r1, #16]
 8006f4a:	1b12      	subs	r2, r2, r4
 8006f4c:	d10e      	bne.n	8006f6c <__mcmp+0x28>
 8006f4e:	f100 0314 	add.w	r3, r0, #20
 8006f52:	3114      	adds	r1, #20
 8006f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f64:	42a5      	cmp	r5, r4
 8006f66:	d003      	beq.n	8006f70 <__mcmp+0x2c>
 8006f68:	d305      	bcc.n	8006f76 <__mcmp+0x32>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	bd30      	pop	{r4, r5, pc}
 8006f70:	4283      	cmp	r3, r0
 8006f72:	d3f3      	bcc.n	8006f5c <__mcmp+0x18>
 8006f74:	e7fa      	b.n	8006f6c <__mcmp+0x28>
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7a:	e7f7      	b.n	8006f6c <__mcmp+0x28>

08006f7c <__mdiff>:
 8006f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	460c      	mov	r4, r1
 8006f82:	4606      	mov	r6, r0
 8006f84:	4611      	mov	r1, r2
 8006f86:	4620      	mov	r0, r4
 8006f88:	4690      	mov	r8, r2
 8006f8a:	f7ff ffdb 	bl	8006f44 <__mcmp>
 8006f8e:	1e05      	subs	r5, r0, #0
 8006f90:	d110      	bne.n	8006fb4 <__mdiff+0x38>
 8006f92:	4629      	mov	r1, r5
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff fd09 	bl	80069ac <_Balloc>
 8006f9a:	b930      	cbnz	r0, 8006faa <__mdiff+0x2e>
 8006f9c:	4b3a      	ldr	r3, [pc, #232]	; (8007088 <__mdiff+0x10c>)
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f240 2132 	movw	r1, #562	; 0x232
 8006fa4:	4839      	ldr	r0, [pc, #228]	; (800708c <__mdiff+0x110>)
 8006fa6:	f000 fc51 	bl	800784c <__assert_func>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	bfa4      	itt	ge
 8006fb6:	4643      	movge	r3, r8
 8006fb8:	46a0      	movge	r8, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fc0:	bfa6      	itte	ge
 8006fc2:	461c      	movge	r4, r3
 8006fc4:	2500      	movge	r5, #0
 8006fc6:	2501      	movlt	r5, #1
 8006fc8:	f7ff fcf0 	bl	80069ac <_Balloc>
 8006fcc:	b920      	cbnz	r0, 8006fd8 <__mdiff+0x5c>
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <__mdiff+0x10c>)
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fd6:	e7e5      	b.n	8006fa4 <__mdiff+0x28>
 8006fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fdc:	6926      	ldr	r6, [r4, #16]
 8006fde:	60c5      	str	r5, [r0, #12]
 8006fe0:	f104 0914 	add.w	r9, r4, #20
 8006fe4:	f108 0514 	add.w	r5, r8, #20
 8006fe8:	f100 0e14 	add.w	lr, r0, #20
 8006fec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ff4:	f108 0210 	add.w	r2, r8, #16
 8006ff8:	46f2      	mov	sl, lr
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007004:	fa1f f883 	uxth.w	r8, r3
 8007008:	fa11 f18b 	uxtah	r1, r1, fp
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	eba1 0808 	sub.w	r8, r1, r8
 8007012:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007016:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800701a:	fa1f f888 	uxth.w	r8, r8
 800701e:	1419      	asrs	r1, r3, #16
 8007020:	454e      	cmp	r6, r9
 8007022:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007026:	f84a 3b04 	str.w	r3, [sl], #4
 800702a:	d8e7      	bhi.n	8006ffc <__mdiff+0x80>
 800702c:	1b33      	subs	r3, r6, r4
 800702e:	3b15      	subs	r3, #21
 8007030:	f023 0303 	bic.w	r3, r3, #3
 8007034:	3304      	adds	r3, #4
 8007036:	3415      	adds	r4, #21
 8007038:	42a6      	cmp	r6, r4
 800703a:	bf38      	it	cc
 800703c:	2304      	movcc	r3, #4
 800703e:	441d      	add	r5, r3
 8007040:	4473      	add	r3, lr
 8007042:	469e      	mov	lr, r3
 8007044:	462e      	mov	r6, r5
 8007046:	4566      	cmp	r6, ip
 8007048:	d30e      	bcc.n	8007068 <__mdiff+0xec>
 800704a:	f10c 0203 	add.w	r2, ip, #3
 800704e:	1b52      	subs	r2, r2, r5
 8007050:	f022 0203 	bic.w	r2, r2, #3
 8007054:	3d03      	subs	r5, #3
 8007056:	45ac      	cmp	ip, r5
 8007058:	bf38      	it	cc
 800705a:	2200      	movcc	r2, #0
 800705c:	441a      	add	r2, r3
 800705e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007062:	b17b      	cbz	r3, 8007084 <__mdiff+0x108>
 8007064:	6107      	str	r7, [r0, #16]
 8007066:	e7a3      	b.n	8006fb0 <__mdiff+0x34>
 8007068:	f856 8b04 	ldr.w	r8, [r6], #4
 800706c:	fa11 f288 	uxtah	r2, r1, r8
 8007070:	1414      	asrs	r4, r2, #16
 8007072:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007076:	b292      	uxth	r2, r2
 8007078:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800707c:	f84e 2b04 	str.w	r2, [lr], #4
 8007080:	1421      	asrs	r1, r4, #16
 8007082:	e7e0      	b.n	8007046 <__mdiff+0xca>
 8007084:	3f01      	subs	r7, #1
 8007086:	e7ea      	b.n	800705e <__mdiff+0xe2>
 8007088:	08008d98 	.word	0x08008d98
 800708c:	08008e24 	.word	0x08008e24

08007090 <__ulp>:
 8007090:	b082      	sub	sp, #8
 8007092:	ed8d 0b00 	vstr	d0, [sp]
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	4912      	ldr	r1, [pc, #72]	; (80070e4 <__ulp+0x54>)
 800709a:	4019      	ands	r1, r3
 800709c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80070a0:	2900      	cmp	r1, #0
 80070a2:	dd05      	ble.n	80070b0 <__ulp+0x20>
 80070a4:	2200      	movs	r2, #0
 80070a6:	460b      	mov	r3, r1
 80070a8:	ec43 2b10 	vmov	d0, r2, r3
 80070ac:	b002      	add	sp, #8
 80070ae:	4770      	bx	lr
 80070b0:	4249      	negs	r1, r1
 80070b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80070b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	da04      	bge.n	80070ce <__ulp+0x3e>
 80070c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80070c8:	fa41 f300 	asr.w	r3, r1, r0
 80070cc:	e7ec      	b.n	80070a8 <__ulp+0x18>
 80070ce:	f1a0 0114 	sub.w	r1, r0, #20
 80070d2:	291e      	cmp	r1, #30
 80070d4:	bfda      	itte	le
 80070d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80070da:	fa20 f101 	lsrle.w	r1, r0, r1
 80070de:	2101      	movgt	r1, #1
 80070e0:	460a      	mov	r2, r1
 80070e2:	e7e1      	b.n	80070a8 <__ulp+0x18>
 80070e4:	7ff00000 	.word	0x7ff00000

080070e8 <__b2d>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	6905      	ldr	r5, [r0, #16]
 80070ec:	f100 0714 	add.w	r7, r0, #20
 80070f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80070f4:	1f2e      	subs	r6, r5, #4
 80070f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff fd48 	bl	8006b90 <__hi0bits>
 8007100:	f1c0 0320 	rsb	r3, r0, #32
 8007104:	280a      	cmp	r0, #10
 8007106:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007184 <__b2d+0x9c>
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	dc14      	bgt.n	8007138 <__b2d+0x50>
 800710e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007112:	fa24 f10e 	lsr.w	r1, r4, lr
 8007116:	42b7      	cmp	r7, r6
 8007118:	ea41 030c 	orr.w	r3, r1, ip
 800711c:	bf34      	ite	cc
 800711e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007122:	2100      	movcs	r1, #0
 8007124:	3015      	adds	r0, #21
 8007126:	fa04 f000 	lsl.w	r0, r4, r0
 800712a:	fa21 f10e 	lsr.w	r1, r1, lr
 800712e:	ea40 0201 	orr.w	r2, r0, r1
 8007132:	ec43 2b10 	vmov	d0, r2, r3
 8007136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007138:	42b7      	cmp	r7, r6
 800713a:	bf3a      	itte	cc
 800713c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007140:	f1a5 0608 	subcc.w	r6, r5, #8
 8007144:	2100      	movcs	r1, #0
 8007146:	380b      	subs	r0, #11
 8007148:	d017      	beq.n	800717a <__b2d+0x92>
 800714a:	f1c0 0c20 	rsb	ip, r0, #32
 800714e:	fa04 f500 	lsl.w	r5, r4, r0
 8007152:	42be      	cmp	r6, r7
 8007154:	fa21 f40c 	lsr.w	r4, r1, ip
 8007158:	ea45 0504 	orr.w	r5, r5, r4
 800715c:	bf8c      	ite	hi
 800715e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007162:	2400      	movls	r4, #0
 8007164:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007168:	fa01 f000 	lsl.w	r0, r1, r0
 800716c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007170:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007174:	ea40 0204 	orr.w	r2, r0, r4
 8007178:	e7db      	b.n	8007132 <__b2d+0x4a>
 800717a:	ea44 030c 	orr.w	r3, r4, ip
 800717e:	460a      	mov	r2, r1
 8007180:	e7d7      	b.n	8007132 <__b2d+0x4a>
 8007182:	bf00      	nop
 8007184:	3ff00000 	.word	0x3ff00000

08007188 <__d2b>:
 8007188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800718c:	4689      	mov	r9, r1
 800718e:	2101      	movs	r1, #1
 8007190:	ec57 6b10 	vmov	r6, r7, d0
 8007194:	4690      	mov	r8, r2
 8007196:	f7ff fc09 	bl	80069ac <_Balloc>
 800719a:	4604      	mov	r4, r0
 800719c:	b930      	cbnz	r0, 80071ac <__d2b+0x24>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <__d2b+0xb0>)
 80071a2:	4826      	ldr	r0, [pc, #152]	; (800723c <__d2b+0xb4>)
 80071a4:	f240 310a 	movw	r1, #778	; 0x30a
 80071a8:	f000 fb50 	bl	800784c <__assert_func>
 80071ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80071b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071b4:	bb35      	cbnz	r5, 8007204 <__d2b+0x7c>
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	d028      	beq.n	800720e <__d2b+0x86>
 80071bc:	4668      	mov	r0, sp
 80071be:	9600      	str	r6, [sp, #0]
 80071c0:	f7ff fd06 	bl	8006bd0 <__lo0bits>
 80071c4:	9900      	ldr	r1, [sp, #0]
 80071c6:	b300      	cbz	r0, 800720a <__d2b+0x82>
 80071c8:	9a01      	ldr	r2, [sp, #4]
 80071ca:	f1c0 0320 	rsb	r3, r0, #32
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	430b      	orrs	r3, r1
 80071d4:	40c2      	lsrs	r2, r0
 80071d6:	6163      	str	r3, [r4, #20]
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	61a3      	str	r3, [r4, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf14      	ite	ne
 80071e2:	2202      	movne	r2, #2
 80071e4:	2201      	moveq	r2, #1
 80071e6:	6122      	str	r2, [r4, #16]
 80071e8:	b1d5      	cbz	r5, 8007220 <__d2b+0x98>
 80071ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80071ee:	4405      	add	r5, r0
 80071f0:	f8c9 5000 	str.w	r5, [r9]
 80071f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071f8:	f8c8 0000 	str.w	r0, [r8]
 80071fc:	4620      	mov	r0, r4
 80071fe:	b003      	add	sp, #12
 8007200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007208:	e7d5      	b.n	80071b6 <__d2b+0x2e>
 800720a:	6161      	str	r1, [r4, #20]
 800720c:	e7e5      	b.n	80071da <__d2b+0x52>
 800720e:	a801      	add	r0, sp, #4
 8007210:	f7ff fcde 	bl	8006bd0 <__lo0bits>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	6163      	str	r3, [r4, #20]
 8007218:	2201      	movs	r2, #1
 800721a:	6122      	str	r2, [r4, #16]
 800721c:	3020      	adds	r0, #32
 800721e:	e7e3      	b.n	80071e8 <__d2b+0x60>
 8007220:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007224:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007228:	f8c9 0000 	str.w	r0, [r9]
 800722c:	6918      	ldr	r0, [r3, #16]
 800722e:	f7ff fcaf 	bl	8006b90 <__hi0bits>
 8007232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007236:	e7df      	b.n	80071f8 <__d2b+0x70>
 8007238:	08008d98 	.word	0x08008d98
 800723c:	08008e24 	.word	0x08008e24

08007240 <__ratio>:
 8007240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	4688      	mov	r8, r1
 8007246:	4669      	mov	r1, sp
 8007248:	4681      	mov	r9, r0
 800724a:	f7ff ff4d 	bl	80070e8 <__b2d>
 800724e:	a901      	add	r1, sp, #4
 8007250:	4640      	mov	r0, r8
 8007252:	ec55 4b10 	vmov	r4, r5, d0
 8007256:	f7ff ff47 	bl	80070e8 <__b2d>
 800725a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800725e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007262:	eba3 0c02 	sub.w	ip, r3, r2
 8007266:	e9dd 3200 	ldrd	r3, r2, [sp]
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007270:	ec51 0b10 	vmov	r0, r1, d0
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfd6      	itet	le
 8007278:	460a      	movle	r2, r1
 800727a:	462a      	movgt	r2, r5
 800727c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007280:	468b      	mov	fp, r1
 8007282:	462f      	mov	r7, r5
 8007284:	bfd4      	ite	le
 8007286:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800728a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800728e:	4620      	mov	r0, r4
 8007290:	ee10 2a10 	vmov	r2, s0
 8007294:	465b      	mov	r3, fp
 8007296:	4639      	mov	r1, r7
 8007298:	f7f9 fad8 	bl	800084c <__aeabi_ddiv>
 800729c:	ec41 0b10 	vmov	d0, r0, r1
 80072a0:	b003      	add	sp, #12
 80072a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072a6 <__copybits>:
 80072a6:	3901      	subs	r1, #1
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	1149      	asrs	r1, r1, #5
 80072ac:	6914      	ldr	r4, [r2, #16]
 80072ae:	3101      	adds	r1, #1
 80072b0:	f102 0314 	add.w	r3, r2, #20
 80072b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072bc:	1f05      	subs	r5, r0, #4
 80072be:	42a3      	cmp	r3, r4
 80072c0:	d30c      	bcc.n	80072dc <__copybits+0x36>
 80072c2:	1aa3      	subs	r3, r4, r2
 80072c4:	3b11      	subs	r3, #17
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	3211      	adds	r2, #17
 80072cc:	42a2      	cmp	r2, r4
 80072ce:	bf88      	it	hi
 80072d0:	2300      	movhi	r3, #0
 80072d2:	4418      	add	r0, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	4288      	cmp	r0, r1
 80072d8:	d305      	bcc.n	80072e6 <__copybits+0x40>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80072e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80072e4:	e7eb      	b.n	80072be <__copybits+0x18>
 80072e6:	f840 3b04 	str.w	r3, [r0], #4
 80072ea:	e7f4      	b.n	80072d6 <__copybits+0x30>

080072ec <__any_on>:
 80072ec:	f100 0214 	add.w	r2, r0, #20
 80072f0:	6900      	ldr	r0, [r0, #16]
 80072f2:	114b      	asrs	r3, r1, #5
 80072f4:	4298      	cmp	r0, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	db11      	blt.n	800731e <__any_on+0x32>
 80072fa:	dd0a      	ble.n	8007312 <__any_on+0x26>
 80072fc:	f011 011f 	ands.w	r1, r1, #31
 8007300:	d007      	beq.n	8007312 <__any_on+0x26>
 8007302:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007306:	fa24 f001 	lsr.w	r0, r4, r1
 800730a:	fa00 f101 	lsl.w	r1, r0, r1
 800730e:	428c      	cmp	r4, r1
 8007310:	d10b      	bne.n	800732a <__any_on+0x3e>
 8007312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007316:	4293      	cmp	r3, r2
 8007318:	d803      	bhi.n	8007322 <__any_on+0x36>
 800731a:	2000      	movs	r0, #0
 800731c:	bd10      	pop	{r4, pc}
 800731e:	4603      	mov	r3, r0
 8007320:	e7f7      	b.n	8007312 <__any_on+0x26>
 8007322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007326:	2900      	cmp	r1, #0
 8007328:	d0f5      	beq.n	8007316 <__any_on+0x2a>
 800732a:	2001      	movs	r0, #1
 800732c:	e7f6      	b.n	800731c <__any_on+0x30>

0800732e <_calloc_r>:
 800732e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007330:	fba1 2402 	umull	r2, r4, r1, r2
 8007334:	b94c      	cbnz	r4, 800734a <_calloc_r+0x1c>
 8007336:	4611      	mov	r1, r2
 8007338:	9201      	str	r2, [sp, #4]
 800733a:	f000 f87b 	bl	8007434 <_malloc_r>
 800733e:	9a01      	ldr	r2, [sp, #4]
 8007340:	4605      	mov	r5, r0
 8007342:	b930      	cbnz	r0, 8007352 <_calloc_r+0x24>
 8007344:	4628      	mov	r0, r5
 8007346:	b003      	add	sp, #12
 8007348:	bd30      	pop	{r4, r5, pc}
 800734a:	220c      	movs	r2, #12
 800734c:	6002      	str	r2, [r0, #0]
 800734e:	2500      	movs	r5, #0
 8007350:	e7f8      	b.n	8007344 <_calloc_r+0x16>
 8007352:	4621      	mov	r1, r4
 8007354:	f7fc fbbe 	bl	8003ad4 <memset>
 8007358:	e7f4      	b.n	8007344 <_calloc_r+0x16>
	...

0800735c <_free_r>:
 800735c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800735e:	2900      	cmp	r1, #0
 8007360:	d044      	beq.n	80073ec <_free_r+0x90>
 8007362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007366:	9001      	str	r0, [sp, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f1a1 0404 	sub.w	r4, r1, #4
 800736e:	bfb8      	it	lt
 8007370:	18e4      	addlt	r4, r4, r3
 8007372:	f000 fab5 	bl	80078e0 <__malloc_lock>
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <_free_r+0x94>)
 8007378:	9801      	ldr	r0, [sp, #4]
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	b933      	cbnz	r3, 800738c <_free_r+0x30>
 800737e:	6063      	str	r3, [r4, #4]
 8007380:	6014      	str	r4, [r2, #0]
 8007382:	b003      	add	sp, #12
 8007384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007388:	f000 bab0 	b.w	80078ec <__malloc_unlock>
 800738c:	42a3      	cmp	r3, r4
 800738e:	d908      	bls.n	80073a2 <_free_r+0x46>
 8007390:	6825      	ldr	r5, [r4, #0]
 8007392:	1961      	adds	r1, r4, r5
 8007394:	428b      	cmp	r3, r1
 8007396:	bf01      	itttt	eq
 8007398:	6819      	ldreq	r1, [r3, #0]
 800739a:	685b      	ldreq	r3, [r3, #4]
 800739c:	1949      	addeq	r1, r1, r5
 800739e:	6021      	streq	r1, [r4, #0]
 80073a0:	e7ed      	b.n	800737e <_free_r+0x22>
 80073a2:	461a      	mov	r2, r3
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	b10b      	cbz	r3, 80073ac <_free_r+0x50>
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	d9fa      	bls.n	80073a2 <_free_r+0x46>
 80073ac:	6811      	ldr	r1, [r2, #0]
 80073ae:	1855      	adds	r5, r2, r1
 80073b0:	42a5      	cmp	r5, r4
 80073b2:	d10b      	bne.n	80073cc <_free_r+0x70>
 80073b4:	6824      	ldr	r4, [r4, #0]
 80073b6:	4421      	add	r1, r4
 80073b8:	1854      	adds	r4, r2, r1
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	6011      	str	r1, [r2, #0]
 80073be:	d1e0      	bne.n	8007382 <_free_r+0x26>
 80073c0:	681c      	ldr	r4, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	6053      	str	r3, [r2, #4]
 80073c6:	4421      	add	r1, r4
 80073c8:	6011      	str	r1, [r2, #0]
 80073ca:	e7da      	b.n	8007382 <_free_r+0x26>
 80073cc:	d902      	bls.n	80073d4 <_free_r+0x78>
 80073ce:	230c      	movs	r3, #12
 80073d0:	6003      	str	r3, [r0, #0]
 80073d2:	e7d6      	b.n	8007382 <_free_r+0x26>
 80073d4:	6825      	ldr	r5, [r4, #0]
 80073d6:	1961      	adds	r1, r4, r5
 80073d8:	428b      	cmp	r3, r1
 80073da:	bf04      	itt	eq
 80073dc:	6819      	ldreq	r1, [r3, #0]
 80073de:	685b      	ldreq	r3, [r3, #4]
 80073e0:	6063      	str	r3, [r4, #4]
 80073e2:	bf04      	itt	eq
 80073e4:	1949      	addeq	r1, r1, r5
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	6054      	str	r4, [r2, #4]
 80073ea:	e7ca      	b.n	8007382 <_free_r+0x26>
 80073ec:	b003      	add	sp, #12
 80073ee:	bd30      	pop	{r4, r5, pc}
 80073f0:	200004ec 	.word	0x200004ec

080073f4 <sbrk_aligned>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4e0e      	ldr	r6, [pc, #56]	; (8007430 <sbrk_aligned+0x3c>)
 80073f8:	460c      	mov	r4, r1
 80073fa:	6831      	ldr	r1, [r6, #0]
 80073fc:	4605      	mov	r5, r0
 80073fe:	b911      	cbnz	r1, 8007406 <sbrk_aligned+0x12>
 8007400:	f000 f9f2 	bl	80077e8 <_sbrk_r>
 8007404:	6030      	str	r0, [r6, #0]
 8007406:	4621      	mov	r1, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f000 f9ed 	bl	80077e8 <_sbrk_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d00a      	beq.n	8007428 <sbrk_aligned+0x34>
 8007412:	1cc4      	adds	r4, r0, #3
 8007414:	f024 0403 	bic.w	r4, r4, #3
 8007418:	42a0      	cmp	r0, r4
 800741a:	d007      	beq.n	800742c <sbrk_aligned+0x38>
 800741c:	1a21      	subs	r1, r4, r0
 800741e:	4628      	mov	r0, r5
 8007420:	f000 f9e2 	bl	80077e8 <_sbrk_r>
 8007424:	3001      	adds	r0, #1
 8007426:	d101      	bne.n	800742c <sbrk_aligned+0x38>
 8007428:	f04f 34ff 	mov.w	r4, #4294967295
 800742c:	4620      	mov	r0, r4
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	200004f0 	.word	0x200004f0

08007434 <_malloc_r>:
 8007434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007438:	1ccd      	adds	r5, r1, #3
 800743a:	f025 0503 	bic.w	r5, r5, #3
 800743e:	3508      	adds	r5, #8
 8007440:	2d0c      	cmp	r5, #12
 8007442:	bf38      	it	cc
 8007444:	250c      	movcc	r5, #12
 8007446:	2d00      	cmp	r5, #0
 8007448:	4607      	mov	r7, r0
 800744a:	db01      	blt.n	8007450 <_malloc_r+0x1c>
 800744c:	42a9      	cmp	r1, r5
 800744e:	d905      	bls.n	800745c <_malloc_r+0x28>
 8007450:	230c      	movs	r3, #12
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	2600      	movs	r6, #0
 8007456:	4630      	mov	r0, r6
 8007458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745c:	4e2e      	ldr	r6, [pc, #184]	; (8007518 <_malloc_r+0xe4>)
 800745e:	f000 fa3f 	bl	80078e0 <__malloc_lock>
 8007462:	6833      	ldr	r3, [r6, #0]
 8007464:	461c      	mov	r4, r3
 8007466:	bb34      	cbnz	r4, 80074b6 <_malloc_r+0x82>
 8007468:	4629      	mov	r1, r5
 800746a:	4638      	mov	r0, r7
 800746c:	f7ff ffc2 	bl	80073f4 <sbrk_aligned>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	4604      	mov	r4, r0
 8007474:	d14d      	bne.n	8007512 <_malloc_r+0xde>
 8007476:	6834      	ldr	r4, [r6, #0]
 8007478:	4626      	mov	r6, r4
 800747a:	2e00      	cmp	r6, #0
 800747c:	d140      	bne.n	8007500 <_malloc_r+0xcc>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	4631      	mov	r1, r6
 8007482:	4638      	mov	r0, r7
 8007484:	eb04 0803 	add.w	r8, r4, r3
 8007488:	f000 f9ae 	bl	80077e8 <_sbrk_r>
 800748c:	4580      	cmp	r8, r0
 800748e:	d13a      	bne.n	8007506 <_malloc_r+0xd2>
 8007490:	6821      	ldr	r1, [r4, #0]
 8007492:	3503      	adds	r5, #3
 8007494:	1a6d      	subs	r5, r5, r1
 8007496:	f025 0503 	bic.w	r5, r5, #3
 800749a:	3508      	adds	r5, #8
 800749c:	2d0c      	cmp	r5, #12
 800749e:	bf38      	it	cc
 80074a0:	250c      	movcc	r5, #12
 80074a2:	4629      	mov	r1, r5
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ffa5 	bl	80073f4 <sbrk_aligned>
 80074aa:	3001      	adds	r0, #1
 80074ac:	d02b      	beq.n	8007506 <_malloc_r+0xd2>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	442b      	add	r3, r5
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	e00e      	b.n	80074d4 <_malloc_r+0xa0>
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	1b52      	subs	r2, r2, r5
 80074ba:	d41e      	bmi.n	80074fa <_malloc_r+0xc6>
 80074bc:	2a0b      	cmp	r2, #11
 80074be:	d916      	bls.n	80074ee <_malloc_r+0xba>
 80074c0:	1961      	adds	r1, r4, r5
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	6025      	str	r5, [r4, #0]
 80074c6:	bf18      	it	ne
 80074c8:	6059      	strne	r1, [r3, #4]
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	bf08      	it	eq
 80074ce:	6031      	streq	r1, [r6, #0]
 80074d0:	5162      	str	r2, [r4, r5]
 80074d2:	604b      	str	r3, [r1, #4]
 80074d4:	4638      	mov	r0, r7
 80074d6:	f104 060b 	add.w	r6, r4, #11
 80074da:	f000 fa07 	bl	80078ec <__malloc_unlock>
 80074de:	f026 0607 	bic.w	r6, r6, #7
 80074e2:	1d23      	adds	r3, r4, #4
 80074e4:	1af2      	subs	r2, r6, r3
 80074e6:	d0b6      	beq.n	8007456 <_malloc_r+0x22>
 80074e8:	1b9b      	subs	r3, r3, r6
 80074ea:	50a3      	str	r3, [r4, r2]
 80074ec:	e7b3      	b.n	8007456 <_malloc_r+0x22>
 80074ee:	6862      	ldr	r2, [r4, #4]
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	bf0c      	ite	eq
 80074f4:	6032      	streq	r2, [r6, #0]
 80074f6:	605a      	strne	r2, [r3, #4]
 80074f8:	e7ec      	b.n	80074d4 <_malloc_r+0xa0>
 80074fa:	4623      	mov	r3, r4
 80074fc:	6864      	ldr	r4, [r4, #4]
 80074fe:	e7b2      	b.n	8007466 <_malloc_r+0x32>
 8007500:	4634      	mov	r4, r6
 8007502:	6876      	ldr	r6, [r6, #4]
 8007504:	e7b9      	b.n	800747a <_malloc_r+0x46>
 8007506:	230c      	movs	r3, #12
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	4638      	mov	r0, r7
 800750c:	f000 f9ee 	bl	80078ec <__malloc_unlock>
 8007510:	e7a1      	b.n	8007456 <_malloc_r+0x22>
 8007512:	6025      	str	r5, [r4, #0]
 8007514:	e7de      	b.n	80074d4 <_malloc_r+0xa0>
 8007516:	bf00      	nop
 8007518:	200004ec 	.word	0x200004ec

0800751c <__ssputs_r>:
 800751c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	688e      	ldr	r6, [r1, #8]
 8007522:	429e      	cmp	r6, r3
 8007524:	4682      	mov	sl, r0
 8007526:	460c      	mov	r4, r1
 8007528:	4690      	mov	r8, r2
 800752a:	461f      	mov	r7, r3
 800752c:	d838      	bhi.n	80075a0 <__ssputs_r+0x84>
 800752e:	898a      	ldrh	r2, [r1, #12]
 8007530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007534:	d032      	beq.n	800759c <__ssputs_r+0x80>
 8007536:	6825      	ldr	r5, [r4, #0]
 8007538:	6909      	ldr	r1, [r1, #16]
 800753a:	eba5 0901 	sub.w	r9, r5, r1
 800753e:	6965      	ldr	r5, [r4, #20]
 8007540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007548:	3301      	adds	r3, #1
 800754a:	444b      	add	r3, r9
 800754c:	106d      	asrs	r5, r5, #1
 800754e:	429d      	cmp	r5, r3
 8007550:	bf38      	it	cc
 8007552:	461d      	movcc	r5, r3
 8007554:	0553      	lsls	r3, r2, #21
 8007556:	d531      	bpl.n	80075bc <__ssputs_r+0xa0>
 8007558:	4629      	mov	r1, r5
 800755a:	f7ff ff6b 	bl	8007434 <_malloc_r>
 800755e:	4606      	mov	r6, r0
 8007560:	b950      	cbnz	r0, 8007578 <__ssputs_r+0x5c>
 8007562:	230c      	movs	r3, #12
 8007564:	f8ca 3000 	str.w	r3, [sl]
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007578:	6921      	ldr	r1, [r4, #16]
 800757a:	464a      	mov	r2, r9
 800757c:	f7ff fa08 	bl	8006990 <memcpy>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	6126      	str	r6, [r4, #16]
 800758e:	6165      	str	r5, [r4, #20]
 8007590:	444e      	add	r6, r9
 8007592:	eba5 0509 	sub.w	r5, r5, r9
 8007596:	6026      	str	r6, [r4, #0]
 8007598:	60a5      	str	r5, [r4, #8]
 800759a:	463e      	mov	r6, r7
 800759c:	42be      	cmp	r6, r7
 800759e:	d900      	bls.n	80075a2 <__ssputs_r+0x86>
 80075a0:	463e      	mov	r6, r7
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	4632      	mov	r2, r6
 80075a6:	4641      	mov	r1, r8
 80075a8:	f000 f980 	bl	80078ac <memmove>
 80075ac:	68a3      	ldr	r3, [r4, #8]
 80075ae:	1b9b      	subs	r3, r3, r6
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	4433      	add	r3, r6
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2000      	movs	r0, #0
 80075ba:	e7db      	b.n	8007574 <__ssputs_r+0x58>
 80075bc:	462a      	mov	r2, r5
 80075be:	f000 f99b 	bl	80078f8 <_realloc_r>
 80075c2:	4606      	mov	r6, r0
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d1e1      	bne.n	800758c <__ssputs_r+0x70>
 80075c8:	6921      	ldr	r1, [r4, #16]
 80075ca:	4650      	mov	r0, sl
 80075cc:	f7ff fec6 	bl	800735c <_free_r>
 80075d0:	e7c7      	b.n	8007562 <__ssputs_r+0x46>
	...

080075d4 <_svfiprintf_r>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	4698      	mov	r8, r3
 80075da:	898b      	ldrh	r3, [r1, #12]
 80075dc:	061b      	lsls	r3, r3, #24
 80075de:	b09d      	sub	sp, #116	; 0x74
 80075e0:	4607      	mov	r7, r0
 80075e2:	460d      	mov	r5, r1
 80075e4:	4614      	mov	r4, r2
 80075e6:	d50e      	bpl.n	8007606 <_svfiprintf_r+0x32>
 80075e8:	690b      	ldr	r3, [r1, #16]
 80075ea:	b963      	cbnz	r3, 8007606 <_svfiprintf_r+0x32>
 80075ec:	2140      	movs	r1, #64	; 0x40
 80075ee:	f7ff ff21 	bl	8007434 <_malloc_r>
 80075f2:	6028      	str	r0, [r5, #0]
 80075f4:	6128      	str	r0, [r5, #16]
 80075f6:	b920      	cbnz	r0, 8007602 <_svfiprintf_r+0x2e>
 80075f8:	230c      	movs	r3, #12
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e0d1      	b.n	80077a6 <_svfiprintf_r+0x1d2>
 8007602:	2340      	movs	r3, #64	; 0x40
 8007604:	616b      	str	r3, [r5, #20]
 8007606:	2300      	movs	r3, #0
 8007608:	9309      	str	r3, [sp, #36]	; 0x24
 800760a:	2320      	movs	r3, #32
 800760c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007610:	f8cd 800c 	str.w	r8, [sp, #12]
 8007614:	2330      	movs	r3, #48	; 0x30
 8007616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077c0 <_svfiprintf_r+0x1ec>
 800761a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800761e:	f04f 0901 	mov.w	r9, #1
 8007622:	4623      	mov	r3, r4
 8007624:	469a      	mov	sl, r3
 8007626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800762a:	b10a      	cbz	r2, 8007630 <_svfiprintf_r+0x5c>
 800762c:	2a25      	cmp	r2, #37	; 0x25
 800762e:	d1f9      	bne.n	8007624 <_svfiprintf_r+0x50>
 8007630:	ebba 0b04 	subs.w	fp, sl, r4
 8007634:	d00b      	beq.n	800764e <_svfiprintf_r+0x7a>
 8007636:	465b      	mov	r3, fp
 8007638:	4622      	mov	r2, r4
 800763a:	4629      	mov	r1, r5
 800763c:	4638      	mov	r0, r7
 800763e:	f7ff ff6d 	bl	800751c <__ssputs_r>
 8007642:	3001      	adds	r0, #1
 8007644:	f000 80aa 	beq.w	800779c <_svfiprintf_r+0x1c8>
 8007648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800764a:	445a      	add	r2, fp
 800764c:	9209      	str	r2, [sp, #36]	; 0x24
 800764e:	f89a 3000 	ldrb.w	r3, [sl]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80a2 	beq.w	800779c <_svfiprintf_r+0x1c8>
 8007658:	2300      	movs	r3, #0
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007662:	f10a 0a01 	add.w	sl, sl, #1
 8007666:	9304      	str	r3, [sp, #16]
 8007668:	9307      	str	r3, [sp, #28]
 800766a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800766e:	931a      	str	r3, [sp, #104]	; 0x68
 8007670:	4654      	mov	r4, sl
 8007672:	2205      	movs	r2, #5
 8007674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007678:	4851      	ldr	r0, [pc, #324]	; (80077c0 <_svfiprintf_r+0x1ec>)
 800767a:	f7f8 fdb1 	bl	80001e0 <memchr>
 800767e:	9a04      	ldr	r2, [sp, #16]
 8007680:	b9d8      	cbnz	r0, 80076ba <_svfiprintf_r+0xe6>
 8007682:	06d0      	lsls	r0, r2, #27
 8007684:	bf44      	itt	mi
 8007686:	2320      	movmi	r3, #32
 8007688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800768c:	0711      	lsls	r1, r2, #28
 800768e:	bf44      	itt	mi
 8007690:	232b      	movmi	r3, #43	; 0x2b
 8007692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007696:	f89a 3000 	ldrb.w	r3, [sl]
 800769a:	2b2a      	cmp	r3, #42	; 0x2a
 800769c:	d015      	beq.n	80076ca <_svfiprintf_r+0xf6>
 800769e:	9a07      	ldr	r2, [sp, #28]
 80076a0:	4654      	mov	r4, sl
 80076a2:	2000      	movs	r0, #0
 80076a4:	f04f 0c0a 	mov.w	ip, #10
 80076a8:	4621      	mov	r1, r4
 80076aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ae:	3b30      	subs	r3, #48	; 0x30
 80076b0:	2b09      	cmp	r3, #9
 80076b2:	d94e      	bls.n	8007752 <_svfiprintf_r+0x17e>
 80076b4:	b1b0      	cbz	r0, 80076e4 <_svfiprintf_r+0x110>
 80076b6:	9207      	str	r2, [sp, #28]
 80076b8:	e014      	b.n	80076e4 <_svfiprintf_r+0x110>
 80076ba:	eba0 0308 	sub.w	r3, r0, r8
 80076be:	fa09 f303 	lsl.w	r3, r9, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	46a2      	mov	sl, r4
 80076c8:	e7d2      	b.n	8007670 <_svfiprintf_r+0x9c>
 80076ca:	9b03      	ldr	r3, [sp, #12]
 80076cc:	1d19      	adds	r1, r3, #4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	9103      	str	r1, [sp, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bfbb      	ittet	lt
 80076d6:	425b      	neglt	r3, r3
 80076d8:	f042 0202 	orrlt.w	r2, r2, #2
 80076dc:	9307      	strge	r3, [sp, #28]
 80076de:	9307      	strlt	r3, [sp, #28]
 80076e0:	bfb8      	it	lt
 80076e2:	9204      	strlt	r2, [sp, #16]
 80076e4:	7823      	ldrb	r3, [r4, #0]
 80076e6:	2b2e      	cmp	r3, #46	; 0x2e
 80076e8:	d10c      	bne.n	8007704 <_svfiprintf_r+0x130>
 80076ea:	7863      	ldrb	r3, [r4, #1]
 80076ec:	2b2a      	cmp	r3, #42	; 0x2a
 80076ee:	d135      	bne.n	800775c <_svfiprintf_r+0x188>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	1d1a      	adds	r2, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	9203      	str	r2, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfb8      	it	lt
 80076fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007700:	3402      	adds	r4, #2
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077d0 <_svfiprintf_r+0x1fc>
 8007708:	7821      	ldrb	r1, [r4, #0]
 800770a:	2203      	movs	r2, #3
 800770c:	4650      	mov	r0, sl
 800770e:	f7f8 fd67 	bl	80001e0 <memchr>
 8007712:	b140      	cbz	r0, 8007726 <_svfiprintf_r+0x152>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	eba0 000a 	sub.w	r0, r0, sl
 800771a:	fa03 f000 	lsl.w	r0, r3, r0
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	4303      	orrs	r3, r0
 8007722:	3401      	adds	r4, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772a:	4826      	ldr	r0, [pc, #152]	; (80077c4 <_svfiprintf_r+0x1f0>)
 800772c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007730:	2206      	movs	r2, #6
 8007732:	f7f8 fd55 	bl	80001e0 <memchr>
 8007736:	2800      	cmp	r0, #0
 8007738:	d038      	beq.n	80077ac <_svfiprintf_r+0x1d8>
 800773a:	4b23      	ldr	r3, [pc, #140]	; (80077c8 <_svfiprintf_r+0x1f4>)
 800773c:	bb1b      	cbnz	r3, 8007786 <_svfiprintf_r+0x1b2>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	3307      	adds	r3, #7
 8007742:	f023 0307 	bic.w	r3, r3, #7
 8007746:	3308      	adds	r3, #8
 8007748:	9303      	str	r3, [sp, #12]
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	4433      	add	r3, r6
 800774e:	9309      	str	r3, [sp, #36]	; 0x24
 8007750:	e767      	b.n	8007622 <_svfiprintf_r+0x4e>
 8007752:	fb0c 3202 	mla	r2, ip, r2, r3
 8007756:	460c      	mov	r4, r1
 8007758:	2001      	movs	r0, #1
 800775a:	e7a5      	b.n	80076a8 <_svfiprintf_r+0xd4>
 800775c:	2300      	movs	r3, #0
 800775e:	3401      	adds	r4, #1
 8007760:	9305      	str	r3, [sp, #20]
 8007762:	4619      	mov	r1, r3
 8007764:	f04f 0c0a 	mov.w	ip, #10
 8007768:	4620      	mov	r0, r4
 800776a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800776e:	3a30      	subs	r2, #48	; 0x30
 8007770:	2a09      	cmp	r2, #9
 8007772:	d903      	bls.n	800777c <_svfiprintf_r+0x1a8>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0c5      	beq.n	8007704 <_svfiprintf_r+0x130>
 8007778:	9105      	str	r1, [sp, #20]
 800777a:	e7c3      	b.n	8007704 <_svfiprintf_r+0x130>
 800777c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007780:	4604      	mov	r4, r0
 8007782:	2301      	movs	r3, #1
 8007784:	e7f0      	b.n	8007768 <_svfiprintf_r+0x194>
 8007786:	ab03      	add	r3, sp, #12
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	462a      	mov	r2, r5
 800778c:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <_svfiprintf_r+0x1f8>)
 800778e:	a904      	add	r1, sp, #16
 8007790:	4638      	mov	r0, r7
 8007792:	f7fc fa47 	bl	8003c24 <_printf_float>
 8007796:	1c42      	adds	r2, r0, #1
 8007798:	4606      	mov	r6, r0
 800779a:	d1d6      	bne.n	800774a <_svfiprintf_r+0x176>
 800779c:	89ab      	ldrh	r3, [r5, #12]
 800779e:	065b      	lsls	r3, r3, #25
 80077a0:	f53f af2c 	bmi.w	80075fc <_svfiprintf_r+0x28>
 80077a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077a6:	b01d      	add	sp, #116	; 0x74
 80077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b06      	ldr	r3, [pc, #24]	; (80077cc <_svfiprintf_r+0x1f8>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7fc fcd8 	bl	800416c <_printf_i>
 80077bc:	e7eb      	b.n	8007796 <_svfiprintf_r+0x1c2>
 80077be:	bf00      	nop
 80077c0:	08008f7c 	.word	0x08008f7c
 80077c4:	08008f86 	.word	0x08008f86
 80077c8:	08003c25 	.word	0x08003c25
 80077cc:	0800751d 	.word	0x0800751d
 80077d0:	08008f82 	.word	0x08008f82
 80077d4:	00000000 	.word	0x00000000

080077d8 <nan>:
 80077d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80077e0 <nan+0x8>
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	00000000 	.word	0x00000000
 80077e4:	7ff80000 	.word	0x7ff80000

080077e8 <_sbrk_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d06      	ldr	r5, [pc, #24]	; (8007804 <_sbrk_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fa f97c 	bl	8001af0 <_sbrk>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_sbrk_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_sbrk_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200004f4 	.word	0x200004f4

08007808 <strncmp>:
 8007808:	b510      	push	{r4, lr}
 800780a:	b17a      	cbz	r2, 800782c <strncmp+0x24>
 800780c:	4603      	mov	r3, r0
 800780e:	3901      	subs	r1, #1
 8007810:	1884      	adds	r4, r0, r2
 8007812:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007816:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800781a:	4290      	cmp	r0, r2
 800781c:	d101      	bne.n	8007822 <strncmp+0x1a>
 800781e:	42a3      	cmp	r3, r4
 8007820:	d101      	bne.n	8007826 <strncmp+0x1e>
 8007822:	1a80      	subs	r0, r0, r2
 8007824:	bd10      	pop	{r4, pc}
 8007826:	2800      	cmp	r0, #0
 8007828:	d1f3      	bne.n	8007812 <strncmp+0xa>
 800782a:	e7fa      	b.n	8007822 <strncmp+0x1a>
 800782c:	4610      	mov	r0, r2
 800782e:	e7f9      	b.n	8007824 <strncmp+0x1c>

08007830 <__ascii_wctomb>:
 8007830:	b149      	cbz	r1, 8007846 <__ascii_wctomb+0x16>
 8007832:	2aff      	cmp	r2, #255	; 0xff
 8007834:	bf85      	ittet	hi
 8007836:	238a      	movhi	r3, #138	; 0x8a
 8007838:	6003      	strhi	r3, [r0, #0]
 800783a:	700a      	strbls	r2, [r1, #0]
 800783c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007840:	bf98      	it	ls
 8007842:	2001      	movls	r0, #1
 8007844:	4770      	bx	lr
 8007846:	4608      	mov	r0, r1
 8007848:	4770      	bx	lr
	...

0800784c <__assert_func>:
 800784c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800784e:	4614      	mov	r4, r2
 8007850:	461a      	mov	r2, r3
 8007852:	4b09      	ldr	r3, [pc, #36]	; (8007878 <__assert_func+0x2c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4605      	mov	r5, r0
 8007858:	68d8      	ldr	r0, [r3, #12]
 800785a:	b14c      	cbz	r4, 8007870 <__assert_func+0x24>
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <__assert_func+0x30>)
 800785e:	9100      	str	r1, [sp, #0]
 8007860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007864:	4906      	ldr	r1, [pc, #24]	; (8007880 <__assert_func+0x34>)
 8007866:	462b      	mov	r3, r5
 8007868:	f000 f80e 	bl	8007888 <fiprintf>
 800786c:	f000 fa8c 	bl	8007d88 <abort>
 8007870:	4b04      	ldr	r3, [pc, #16]	; (8007884 <__assert_func+0x38>)
 8007872:	461c      	mov	r4, r3
 8007874:	e7f3      	b.n	800785e <__assert_func+0x12>
 8007876:	bf00      	nop
 8007878:	20000014 	.word	0x20000014
 800787c:	08008f8d 	.word	0x08008f8d
 8007880:	08008f9a 	.word	0x08008f9a
 8007884:	08008fc8 	.word	0x08008fc8

08007888 <fiprintf>:
 8007888:	b40e      	push	{r1, r2, r3}
 800788a:	b503      	push	{r0, r1, lr}
 800788c:	4601      	mov	r1, r0
 800788e:	ab03      	add	r3, sp, #12
 8007890:	4805      	ldr	r0, [pc, #20]	; (80078a8 <fiprintf+0x20>)
 8007892:	f853 2b04 	ldr.w	r2, [r3], #4
 8007896:	6800      	ldr	r0, [r0, #0]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	f000 f885 	bl	80079a8 <_vfiprintf_r>
 800789e:	b002      	add	sp, #8
 80078a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a4:	b003      	add	sp, #12
 80078a6:	4770      	bx	lr
 80078a8:	20000014 	.word	0x20000014

080078ac <memmove>:
 80078ac:	4288      	cmp	r0, r1
 80078ae:	b510      	push	{r4, lr}
 80078b0:	eb01 0402 	add.w	r4, r1, r2
 80078b4:	d902      	bls.n	80078bc <memmove+0x10>
 80078b6:	4284      	cmp	r4, r0
 80078b8:	4623      	mov	r3, r4
 80078ba:	d807      	bhi.n	80078cc <memmove+0x20>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	42a1      	cmp	r1, r4
 80078c0:	d008      	beq.n	80078d4 <memmove+0x28>
 80078c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ca:	e7f8      	b.n	80078be <memmove+0x12>
 80078cc:	4402      	add	r2, r0
 80078ce:	4601      	mov	r1, r0
 80078d0:	428a      	cmp	r2, r1
 80078d2:	d100      	bne.n	80078d6 <memmove+0x2a>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078de:	e7f7      	b.n	80078d0 <memmove+0x24>

080078e0 <__malloc_lock>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__malloc_lock+0x8>)
 80078e2:	f000 bc11 	b.w	8008108 <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	200004f8 	.word	0x200004f8

080078ec <__malloc_unlock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__malloc_unlock+0x8>)
 80078ee:	f000 bc0c 	b.w	800810a <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	200004f8 	.word	0x200004f8

080078f8 <_realloc_r>:
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	4680      	mov	r8, r0
 80078fe:	4614      	mov	r4, r2
 8007900:	460e      	mov	r6, r1
 8007902:	b921      	cbnz	r1, 800790e <_realloc_r+0x16>
 8007904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	4611      	mov	r1, r2
 800790a:	f7ff bd93 	b.w	8007434 <_malloc_r>
 800790e:	b92a      	cbnz	r2, 800791c <_realloc_r+0x24>
 8007910:	f7ff fd24 	bl	800735c <_free_r>
 8007914:	4625      	mov	r5, r4
 8007916:	4628      	mov	r0, r5
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791c:	f000 fc5c 	bl	80081d8 <_malloc_usable_size_r>
 8007920:	4284      	cmp	r4, r0
 8007922:	4607      	mov	r7, r0
 8007924:	d802      	bhi.n	800792c <_realloc_r+0x34>
 8007926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800792a:	d812      	bhi.n	8007952 <_realloc_r+0x5a>
 800792c:	4621      	mov	r1, r4
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fd80 	bl	8007434 <_malloc_r>
 8007934:	4605      	mov	r5, r0
 8007936:	2800      	cmp	r0, #0
 8007938:	d0ed      	beq.n	8007916 <_realloc_r+0x1e>
 800793a:	42bc      	cmp	r4, r7
 800793c:	4622      	mov	r2, r4
 800793e:	4631      	mov	r1, r6
 8007940:	bf28      	it	cs
 8007942:	463a      	movcs	r2, r7
 8007944:	f7ff f824 	bl	8006990 <memcpy>
 8007948:	4631      	mov	r1, r6
 800794a:	4640      	mov	r0, r8
 800794c:	f7ff fd06 	bl	800735c <_free_r>
 8007950:	e7e1      	b.n	8007916 <_realloc_r+0x1e>
 8007952:	4635      	mov	r5, r6
 8007954:	e7df      	b.n	8007916 <_realloc_r+0x1e>

08007956 <__sfputc_r>:
 8007956:	6893      	ldr	r3, [r2, #8]
 8007958:	3b01      	subs	r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	b410      	push	{r4}
 800795e:	6093      	str	r3, [r2, #8]
 8007960:	da08      	bge.n	8007974 <__sfputc_r+0x1e>
 8007962:	6994      	ldr	r4, [r2, #24]
 8007964:	42a3      	cmp	r3, r4
 8007966:	db01      	blt.n	800796c <__sfputc_r+0x16>
 8007968:	290a      	cmp	r1, #10
 800796a:	d103      	bne.n	8007974 <__sfputc_r+0x1e>
 800796c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007970:	f000 b94a 	b.w	8007c08 <__swbuf_r>
 8007974:	6813      	ldr	r3, [r2, #0]
 8007976:	1c58      	adds	r0, r3, #1
 8007978:	6010      	str	r0, [r2, #0]
 800797a:	7019      	strb	r1, [r3, #0]
 800797c:	4608      	mov	r0, r1
 800797e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007982:	4770      	bx	lr

08007984 <__sfputs_r>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	4606      	mov	r6, r0
 8007988:	460f      	mov	r7, r1
 800798a:	4614      	mov	r4, r2
 800798c:	18d5      	adds	r5, r2, r3
 800798e:	42ac      	cmp	r4, r5
 8007990:	d101      	bne.n	8007996 <__sfputs_r+0x12>
 8007992:	2000      	movs	r0, #0
 8007994:	e007      	b.n	80079a6 <__sfputs_r+0x22>
 8007996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799a:	463a      	mov	r2, r7
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff ffda 	bl	8007956 <__sfputc_r>
 80079a2:	1c43      	adds	r3, r0, #1
 80079a4:	d1f3      	bne.n	800798e <__sfputs_r+0xa>
 80079a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079a8 <_vfiprintf_r>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	460d      	mov	r5, r1
 80079ae:	b09d      	sub	sp, #116	; 0x74
 80079b0:	4614      	mov	r4, r2
 80079b2:	4698      	mov	r8, r3
 80079b4:	4606      	mov	r6, r0
 80079b6:	b118      	cbz	r0, 80079c0 <_vfiprintf_r+0x18>
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	b90b      	cbnz	r3, 80079c0 <_vfiprintf_r+0x18>
 80079bc:	f000 fb06 	bl	8007fcc <__sinit>
 80079c0:	4b89      	ldr	r3, [pc, #548]	; (8007be8 <_vfiprintf_r+0x240>)
 80079c2:	429d      	cmp	r5, r3
 80079c4:	d11b      	bne.n	80079fe <_vfiprintf_r+0x56>
 80079c6:	6875      	ldr	r5, [r6, #4]
 80079c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	d405      	bmi.n	80079da <_vfiprintf_r+0x32>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	059a      	lsls	r2, r3, #22
 80079d2:	d402      	bmi.n	80079da <_vfiprintf_r+0x32>
 80079d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d6:	f000 fb97 	bl	8008108 <__retarget_lock_acquire_recursive>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	071b      	lsls	r3, r3, #28
 80079de:	d501      	bpl.n	80079e4 <_vfiprintf_r+0x3c>
 80079e0:	692b      	ldr	r3, [r5, #16]
 80079e2:	b9eb      	cbnz	r3, 8007a20 <_vfiprintf_r+0x78>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 f960 	bl	8007cac <__swsetup_r>
 80079ec:	b1c0      	cbz	r0, 8007a20 <_vfiprintf_r+0x78>
 80079ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f0:	07dc      	lsls	r4, r3, #31
 80079f2:	d50e      	bpl.n	8007a12 <_vfiprintf_r+0x6a>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	b01d      	add	sp, #116	; 0x74
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	4b7b      	ldr	r3, [pc, #492]	; (8007bec <_vfiprintf_r+0x244>)
 8007a00:	429d      	cmp	r5, r3
 8007a02:	d101      	bne.n	8007a08 <_vfiprintf_r+0x60>
 8007a04:	68b5      	ldr	r5, [r6, #8]
 8007a06:	e7df      	b.n	80079c8 <_vfiprintf_r+0x20>
 8007a08:	4b79      	ldr	r3, [pc, #484]	; (8007bf0 <_vfiprintf_r+0x248>)
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	bf08      	it	eq
 8007a0e:	68f5      	ldreq	r5, [r6, #12]
 8007a10:	e7da      	b.n	80079c8 <_vfiprintf_r+0x20>
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d4ed      	bmi.n	80079f4 <_vfiprintf_r+0x4c>
 8007a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1a:	f000 fb76 	bl	800810a <__retarget_lock_release_recursive>
 8007a1e:	e7e9      	b.n	80079f4 <_vfiprintf_r+0x4c>
 8007a20:	2300      	movs	r3, #0
 8007a22:	9309      	str	r3, [sp, #36]	; 0x24
 8007a24:	2320      	movs	r3, #32
 8007a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2e:	2330      	movs	r3, #48	; 0x30
 8007a30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bf4 <_vfiprintf_r+0x24c>
 8007a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a38:	f04f 0901 	mov.w	r9, #1
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	469a      	mov	sl, r3
 8007a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a44:	b10a      	cbz	r2, 8007a4a <_vfiprintf_r+0xa2>
 8007a46:	2a25      	cmp	r2, #37	; 0x25
 8007a48:	d1f9      	bne.n	8007a3e <_vfiprintf_r+0x96>
 8007a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4e:	d00b      	beq.n	8007a68 <_vfiprintf_r+0xc0>
 8007a50:	465b      	mov	r3, fp
 8007a52:	4622      	mov	r2, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7ff ff94 	bl	8007984 <__sfputs_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f000 80aa 	beq.w	8007bb6 <_vfiprintf_r+0x20e>
 8007a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a64:	445a      	add	r2, fp
 8007a66:	9209      	str	r2, [sp, #36]	; 0x24
 8007a68:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80a2 	beq.w	8007bb6 <_vfiprintf_r+0x20e>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7c:	f10a 0a01 	add.w	sl, sl, #1
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a88:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8a:	4654      	mov	r4, sl
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a92:	4858      	ldr	r0, [pc, #352]	; (8007bf4 <_vfiprintf_r+0x24c>)
 8007a94:	f7f8 fba4 	bl	80001e0 <memchr>
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	b9d8      	cbnz	r0, 8007ad4 <_vfiprintf_r+0x12c>
 8007a9c:	06d1      	lsls	r1, r2, #27
 8007a9e:	bf44      	itt	mi
 8007aa0:	2320      	movmi	r3, #32
 8007aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa6:	0713      	lsls	r3, r2, #28
 8007aa8:	bf44      	itt	mi
 8007aaa:	232b      	movmi	r3, #43	; 0x2b
 8007aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab6:	d015      	beq.n	8007ae4 <_vfiprintf_r+0x13c>
 8007ab8:	9a07      	ldr	r2, [sp, #28]
 8007aba:	4654      	mov	r4, sl
 8007abc:	2000      	movs	r0, #0
 8007abe:	f04f 0c0a 	mov.w	ip, #10
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac8:	3b30      	subs	r3, #48	; 0x30
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d94e      	bls.n	8007b6c <_vfiprintf_r+0x1c4>
 8007ace:	b1b0      	cbz	r0, 8007afe <_vfiprintf_r+0x156>
 8007ad0:	9207      	str	r2, [sp, #28]
 8007ad2:	e014      	b.n	8007afe <_vfiprintf_r+0x156>
 8007ad4:	eba0 0308 	sub.w	r3, r0, r8
 8007ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	46a2      	mov	sl, r4
 8007ae2:	e7d2      	b.n	8007a8a <_vfiprintf_r+0xe2>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	1d19      	adds	r1, r3, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfbb      	ittet	lt
 8007af0:	425b      	neglt	r3, r3
 8007af2:	f042 0202 	orrlt.w	r2, r2, #2
 8007af6:	9307      	strge	r3, [sp, #28]
 8007af8:	9307      	strlt	r3, [sp, #28]
 8007afa:	bfb8      	it	lt
 8007afc:	9204      	strlt	r2, [sp, #16]
 8007afe:	7823      	ldrb	r3, [r4, #0]
 8007b00:	2b2e      	cmp	r3, #46	; 0x2e
 8007b02:	d10c      	bne.n	8007b1e <_vfiprintf_r+0x176>
 8007b04:	7863      	ldrb	r3, [r4, #1]
 8007b06:	2b2a      	cmp	r3, #42	; 0x2a
 8007b08:	d135      	bne.n	8007b76 <_vfiprintf_r+0x1ce>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9203      	str	r2, [sp, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bfb8      	it	lt
 8007b16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b1a:	3402      	adds	r4, #2
 8007b1c:	9305      	str	r3, [sp, #20]
 8007b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c04 <_vfiprintf_r+0x25c>
 8007b22:	7821      	ldrb	r1, [r4, #0]
 8007b24:	2203      	movs	r2, #3
 8007b26:	4650      	mov	r0, sl
 8007b28:	f7f8 fb5a 	bl	80001e0 <memchr>
 8007b2c:	b140      	cbz	r0, 8007b40 <_vfiprintf_r+0x198>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	eba0 000a 	sub.w	r0, r0, sl
 8007b34:	fa03 f000 	lsl.w	r0, r3, r0
 8007b38:	9b04      	ldr	r3, [sp, #16]
 8007b3a:	4303      	orrs	r3, r0
 8007b3c:	3401      	adds	r4, #1
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b44:	482c      	ldr	r0, [pc, #176]	; (8007bf8 <_vfiprintf_r+0x250>)
 8007b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b4a:	2206      	movs	r2, #6
 8007b4c:	f7f8 fb48 	bl	80001e0 <memchr>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d03f      	beq.n	8007bd4 <_vfiprintf_r+0x22c>
 8007b54:	4b29      	ldr	r3, [pc, #164]	; (8007bfc <_vfiprintf_r+0x254>)
 8007b56:	bb1b      	cbnz	r3, 8007ba0 <_vfiprintf_r+0x1f8>
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	3307      	adds	r3, #7
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	3308      	adds	r3, #8
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b66:	443b      	add	r3, r7
 8007b68:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6a:	e767      	b.n	8007a3c <_vfiprintf_r+0x94>
 8007b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b70:	460c      	mov	r4, r1
 8007b72:	2001      	movs	r0, #1
 8007b74:	e7a5      	b.n	8007ac2 <_vfiprintf_r+0x11a>
 8007b76:	2300      	movs	r3, #0
 8007b78:	3401      	adds	r4, #1
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f04f 0c0a 	mov.w	ip, #10
 8007b82:	4620      	mov	r0, r4
 8007b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b88:	3a30      	subs	r2, #48	; 0x30
 8007b8a:	2a09      	cmp	r2, #9
 8007b8c:	d903      	bls.n	8007b96 <_vfiprintf_r+0x1ee>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0c5      	beq.n	8007b1e <_vfiprintf_r+0x176>
 8007b92:	9105      	str	r1, [sp, #20]
 8007b94:	e7c3      	b.n	8007b1e <_vfiprintf_r+0x176>
 8007b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e7f0      	b.n	8007b82 <_vfiprintf_r+0x1da>
 8007ba0:	ab03      	add	r3, sp, #12
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <_vfiprintf_r+0x258>)
 8007ba8:	a904      	add	r1, sp, #16
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7fc f83a 	bl	8003c24 <_printf_float>
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	1c78      	adds	r0, r7, #1
 8007bb4:	d1d6      	bne.n	8007b64 <_vfiprintf_r+0x1bc>
 8007bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb8:	07d9      	lsls	r1, r3, #31
 8007bba:	d405      	bmi.n	8007bc8 <_vfiprintf_r+0x220>
 8007bbc:	89ab      	ldrh	r3, [r5, #12]
 8007bbe:	059a      	lsls	r2, r3, #22
 8007bc0:	d402      	bmi.n	8007bc8 <_vfiprintf_r+0x220>
 8007bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc4:	f000 faa1 	bl	800810a <__retarget_lock_release_recursive>
 8007bc8:	89ab      	ldrh	r3, [r5, #12]
 8007bca:	065b      	lsls	r3, r3, #25
 8007bcc:	f53f af12 	bmi.w	80079f4 <_vfiprintf_r+0x4c>
 8007bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd2:	e711      	b.n	80079f8 <_vfiprintf_r+0x50>
 8007bd4:	ab03      	add	r3, sp, #12
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	462a      	mov	r2, r5
 8007bda:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <_vfiprintf_r+0x258>)
 8007bdc:	a904      	add	r1, sp, #16
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7fc fac4 	bl	800416c <_printf_i>
 8007be4:	e7e4      	b.n	8007bb0 <_vfiprintf_r+0x208>
 8007be6:	bf00      	nop
 8007be8:	08008fec 	.word	0x08008fec
 8007bec:	0800900c 	.word	0x0800900c
 8007bf0:	08008fcc 	.word	0x08008fcc
 8007bf4:	08008f7c 	.word	0x08008f7c
 8007bf8:	08008f86 	.word	0x08008f86
 8007bfc:	08003c25 	.word	0x08003c25
 8007c00:	08007985 	.word	0x08007985
 8007c04:	08008f82 	.word	0x08008f82

08007c08 <__swbuf_r>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b118      	cbz	r0, 8007c1a <__swbuf_r+0x12>
 8007c12:	6983      	ldr	r3, [r0, #24]
 8007c14:	b90b      	cbnz	r3, 8007c1a <__swbuf_r+0x12>
 8007c16:	f000 f9d9 	bl	8007fcc <__sinit>
 8007c1a:	4b21      	ldr	r3, [pc, #132]	; (8007ca0 <__swbuf_r+0x98>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d12b      	bne.n	8007c78 <__swbuf_r+0x70>
 8007c20:	686c      	ldr	r4, [r5, #4]
 8007c22:	69a3      	ldr	r3, [r4, #24]
 8007c24:	60a3      	str	r3, [r4, #8]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	071a      	lsls	r2, r3, #28
 8007c2a:	d52f      	bpl.n	8007c8c <__swbuf_r+0x84>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	b36b      	cbz	r3, 8007c8c <__swbuf_r+0x84>
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	6963      	ldr	r3, [r4, #20]
 8007c38:	b2f6      	uxtb	r6, r6
 8007c3a:	4283      	cmp	r3, r0
 8007c3c:	4637      	mov	r7, r6
 8007c3e:	dc04      	bgt.n	8007c4a <__swbuf_r+0x42>
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f92e 	bl	8007ea4 <_fflush_r>
 8007c48:	bb30      	cbnz	r0, 8007c98 <__swbuf_r+0x90>
 8007c4a:	68a3      	ldr	r3, [r4, #8]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	60a3      	str	r3, [r4, #8]
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	6022      	str	r2, [r4, #0]
 8007c56:	701e      	strb	r6, [r3, #0]
 8007c58:	6963      	ldr	r3, [r4, #20]
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	4283      	cmp	r3, r0
 8007c5e:	d004      	beq.n	8007c6a <__swbuf_r+0x62>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	07db      	lsls	r3, r3, #31
 8007c64:	d506      	bpl.n	8007c74 <__swbuf_r+0x6c>
 8007c66:	2e0a      	cmp	r6, #10
 8007c68:	d104      	bne.n	8007c74 <__swbuf_r+0x6c>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f919 	bl	8007ea4 <_fflush_r>
 8007c72:	b988      	cbnz	r0, 8007c98 <__swbuf_r+0x90>
 8007c74:	4638      	mov	r0, r7
 8007c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <__swbuf_r+0x9c>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d101      	bne.n	8007c82 <__swbuf_r+0x7a>
 8007c7e:	68ac      	ldr	r4, [r5, #8]
 8007c80:	e7cf      	b.n	8007c22 <__swbuf_r+0x1a>
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <__swbuf_r+0xa0>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	bf08      	it	eq
 8007c88:	68ec      	ldreq	r4, [r5, #12]
 8007c8a:	e7ca      	b.n	8007c22 <__swbuf_r+0x1a>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f80c 	bl	8007cac <__swsetup_r>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d0cb      	beq.n	8007c30 <__swbuf_r+0x28>
 8007c98:	f04f 37ff 	mov.w	r7, #4294967295
 8007c9c:	e7ea      	b.n	8007c74 <__swbuf_r+0x6c>
 8007c9e:	bf00      	nop
 8007ca0:	08008fec 	.word	0x08008fec
 8007ca4:	0800900c 	.word	0x0800900c
 8007ca8:	08008fcc 	.word	0x08008fcc

08007cac <__swsetup_r>:
 8007cac:	4b32      	ldr	r3, [pc, #200]	; (8007d78 <__swsetup_r+0xcc>)
 8007cae:	b570      	push	{r4, r5, r6, lr}
 8007cb0:	681d      	ldr	r5, [r3, #0]
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	b125      	cbz	r5, 8007cc2 <__swsetup_r+0x16>
 8007cb8:	69ab      	ldr	r3, [r5, #24]
 8007cba:	b913      	cbnz	r3, 8007cc2 <__swsetup_r+0x16>
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 f985 	bl	8007fcc <__sinit>
 8007cc2:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <__swsetup_r+0xd0>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d10f      	bne.n	8007ce8 <__swsetup_r+0x3c>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cd0:	0719      	lsls	r1, r3, #28
 8007cd2:	d42c      	bmi.n	8007d2e <__swsetup_r+0x82>
 8007cd4:	06dd      	lsls	r5, r3, #27
 8007cd6:	d411      	bmi.n	8007cfc <__swsetup_r+0x50>
 8007cd8:	2309      	movs	r3, #9
 8007cda:	6033      	str	r3, [r6, #0]
 8007cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce6:	e03e      	b.n	8007d66 <__swsetup_r+0xba>
 8007ce8:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <__swsetup_r+0xd4>)
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d101      	bne.n	8007cf2 <__swsetup_r+0x46>
 8007cee:	68ac      	ldr	r4, [r5, #8]
 8007cf0:	e7eb      	b.n	8007cca <__swsetup_r+0x1e>
 8007cf2:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <__swsetup_r+0xd8>)
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	bf08      	it	eq
 8007cf8:	68ec      	ldreq	r4, [r5, #12]
 8007cfa:	e7e6      	b.n	8007cca <__swsetup_r+0x1e>
 8007cfc:	0758      	lsls	r0, r3, #29
 8007cfe:	d512      	bpl.n	8007d26 <__swsetup_r+0x7a>
 8007d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d02:	b141      	cbz	r1, 8007d16 <__swsetup_r+0x6a>
 8007d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	d002      	beq.n	8007d12 <__swsetup_r+0x66>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff fb25 	bl	800735c <_free_r>
 8007d12:	2300      	movs	r3, #0
 8007d14:	6363      	str	r3, [r4, #52]	; 0x34
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	6063      	str	r3, [r4, #4]
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f043 0308 	orr.w	r3, r3, #8
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	b94b      	cbnz	r3, 8007d46 <__swsetup_r+0x9a>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3c:	d003      	beq.n	8007d46 <__swsetup_r+0x9a>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 fa09 	bl	8008158 <__smakebuf_r>
 8007d46:	89a0      	ldrh	r0, [r4, #12]
 8007d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d4c:	f010 0301 	ands.w	r3, r0, #1
 8007d50:	d00a      	beq.n	8007d68 <__swsetup_r+0xbc>
 8007d52:	2300      	movs	r3, #0
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	6963      	ldr	r3, [r4, #20]
 8007d58:	425b      	negs	r3, r3
 8007d5a:	61a3      	str	r3, [r4, #24]
 8007d5c:	6923      	ldr	r3, [r4, #16]
 8007d5e:	b943      	cbnz	r3, 8007d72 <__swsetup_r+0xc6>
 8007d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d64:	d1ba      	bne.n	8007cdc <__swsetup_r+0x30>
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	0781      	lsls	r1, r0, #30
 8007d6a:	bf58      	it	pl
 8007d6c:	6963      	ldrpl	r3, [r4, #20]
 8007d6e:	60a3      	str	r3, [r4, #8]
 8007d70:	e7f4      	b.n	8007d5c <__swsetup_r+0xb0>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e7f7      	b.n	8007d66 <__swsetup_r+0xba>
 8007d76:	bf00      	nop
 8007d78:	20000014 	.word	0x20000014
 8007d7c:	08008fec 	.word	0x08008fec
 8007d80:	0800900c 	.word	0x0800900c
 8007d84:	08008fcc 	.word	0x08008fcc

08007d88 <abort>:
 8007d88:	b508      	push	{r3, lr}
 8007d8a:	2006      	movs	r0, #6
 8007d8c:	f000 fa54 	bl	8008238 <raise>
 8007d90:	2001      	movs	r0, #1
 8007d92:	f7f9 fe35 	bl	8001a00 <_exit>
	...

08007d98 <__sflush_r>:
 8007d98:	898a      	ldrh	r2, [r1, #12]
 8007d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9e:	4605      	mov	r5, r0
 8007da0:	0710      	lsls	r0, r2, #28
 8007da2:	460c      	mov	r4, r1
 8007da4:	d458      	bmi.n	8007e58 <__sflush_r+0xc0>
 8007da6:	684b      	ldr	r3, [r1, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dc05      	bgt.n	8007db8 <__sflush_r+0x20>
 8007dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dc02      	bgt.n	8007db8 <__sflush_r+0x20>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	d0f9      	beq.n	8007db2 <__sflush_r+0x1a>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc4:	682f      	ldr	r7, [r5, #0]
 8007dc6:	602b      	str	r3, [r5, #0]
 8007dc8:	d032      	beq.n	8007e30 <__sflush_r+0x98>
 8007dca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	075a      	lsls	r2, r3, #29
 8007dd0:	d505      	bpl.n	8007dde <__sflush_r+0x46>
 8007dd2:	6863      	ldr	r3, [r4, #4]
 8007dd4:	1ac0      	subs	r0, r0, r3
 8007dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd8:	b10b      	cbz	r3, 8007dde <__sflush_r+0x46>
 8007dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ddc:	1ac0      	subs	r0, r0, r3
 8007dde:	2300      	movs	r3, #0
 8007de0:	4602      	mov	r2, r0
 8007de2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de4:	6a21      	ldr	r1, [r4, #32]
 8007de6:	4628      	mov	r0, r5
 8007de8:	47b0      	blx	r6
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	d106      	bne.n	8007dfe <__sflush_r+0x66>
 8007df0:	6829      	ldr	r1, [r5, #0]
 8007df2:	291d      	cmp	r1, #29
 8007df4:	d82c      	bhi.n	8007e50 <__sflush_r+0xb8>
 8007df6:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <__sflush_r+0x108>)
 8007df8:	40ca      	lsrs	r2, r1
 8007dfa:	07d6      	lsls	r6, r2, #31
 8007dfc:	d528      	bpl.n	8007e50 <__sflush_r+0xb8>
 8007dfe:	2200      	movs	r2, #0
 8007e00:	6062      	str	r2, [r4, #4]
 8007e02:	04d9      	lsls	r1, r3, #19
 8007e04:	6922      	ldr	r2, [r4, #16]
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	d504      	bpl.n	8007e14 <__sflush_r+0x7c>
 8007e0a:	1c42      	adds	r2, r0, #1
 8007e0c:	d101      	bne.n	8007e12 <__sflush_r+0x7a>
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	b903      	cbnz	r3, 8007e14 <__sflush_r+0x7c>
 8007e12:	6560      	str	r0, [r4, #84]	; 0x54
 8007e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e16:	602f      	str	r7, [r5, #0]
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	d0ca      	beq.n	8007db2 <__sflush_r+0x1a>
 8007e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e20:	4299      	cmp	r1, r3
 8007e22:	d002      	beq.n	8007e2a <__sflush_r+0x92>
 8007e24:	4628      	mov	r0, r5
 8007e26:	f7ff fa99 	bl	800735c <_free_r>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e2e:	e7c1      	b.n	8007db4 <__sflush_r+0x1c>
 8007e30:	6a21      	ldr	r1, [r4, #32]
 8007e32:	2301      	movs	r3, #1
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	1c41      	adds	r1, r0, #1
 8007e3a:	d1c7      	bne.n	8007dcc <__sflush_r+0x34>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0c4      	beq.n	8007dcc <__sflush_r+0x34>
 8007e42:	2b1d      	cmp	r3, #29
 8007e44:	d001      	beq.n	8007e4a <__sflush_r+0xb2>
 8007e46:	2b16      	cmp	r3, #22
 8007e48:	d101      	bne.n	8007e4e <__sflush_r+0xb6>
 8007e4a:	602f      	str	r7, [r5, #0]
 8007e4c:	e7b1      	b.n	8007db2 <__sflush_r+0x1a>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	e7ad      	b.n	8007db4 <__sflush_r+0x1c>
 8007e58:	690f      	ldr	r7, [r1, #16]
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	d0a9      	beq.n	8007db2 <__sflush_r+0x1a>
 8007e5e:	0793      	lsls	r3, r2, #30
 8007e60:	680e      	ldr	r6, [r1, #0]
 8007e62:	bf08      	it	eq
 8007e64:	694b      	ldreq	r3, [r1, #20]
 8007e66:	600f      	str	r7, [r1, #0]
 8007e68:	bf18      	it	ne
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	eba6 0807 	sub.w	r8, r6, r7
 8007e70:	608b      	str	r3, [r1, #8]
 8007e72:	f1b8 0f00 	cmp.w	r8, #0
 8007e76:	dd9c      	ble.n	8007db2 <__sflush_r+0x1a>
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e7c:	4643      	mov	r3, r8
 8007e7e:	463a      	mov	r2, r7
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dc06      	bgt.n	8007e96 <__sflush_r+0xfe>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8e:	81a3      	strh	r3, [r4, #12]
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	e78e      	b.n	8007db4 <__sflush_r+0x1c>
 8007e96:	4407      	add	r7, r0
 8007e98:	eba8 0800 	sub.w	r8, r8, r0
 8007e9c:	e7e9      	b.n	8007e72 <__sflush_r+0xda>
 8007e9e:	bf00      	nop
 8007ea0:	20400001 	.word	0x20400001

08007ea4 <_fflush_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	690b      	ldr	r3, [r1, #16]
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	b913      	cbnz	r3, 8007eb4 <_fflush_r+0x10>
 8007eae:	2500      	movs	r5, #0
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	b118      	cbz	r0, 8007ebe <_fflush_r+0x1a>
 8007eb6:	6983      	ldr	r3, [r0, #24]
 8007eb8:	b90b      	cbnz	r3, 8007ebe <_fflush_r+0x1a>
 8007eba:	f000 f887 	bl	8007fcc <__sinit>
 8007ebe:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <_fflush_r+0x6c>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	d11b      	bne.n	8007efc <_fflush_r+0x58>
 8007ec4:	686c      	ldr	r4, [r5, #4]
 8007ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0ef      	beq.n	8007eae <_fflush_r+0xa>
 8007ece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ed0:	07d0      	lsls	r0, r2, #31
 8007ed2:	d404      	bmi.n	8007ede <_fflush_r+0x3a>
 8007ed4:	0599      	lsls	r1, r3, #22
 8007ed6:	d402      	bmi.n	8007ede <_fflush_r+0x3a>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eda:	f000 f915 	bl	8008108 <__retarget_lock_acquire_recursive>
 8007ede:	4628      	mov	r0, r5
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f7ff ff59 	bl	8007d98 <__sflush_r>
 8007ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee8:	07da      	lsls	r2, r3, #31
 8007eea:	4605      	mov	r5, r0
 8007eec:	d4e0      	bmi.n	8007eb0 <_fflush_r+0xc>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	059b      	lsls	r3, r3, #22
 8007ef2:	d4dd      	bmi.n	8007eb0 <_fflush_r+0xc>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef6:	f000 f908 	bl	800810a <__retarget_lock_release_recursive>
 8007efa:	e7d9      	b.n	8007eb0 <_fflush_r+0xc>
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <_fflush_r+0x70>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d101      	bne.n	8007f06 <_fflush_r+0x62>
 8007f02:	68ac      	ldr	r4, [r5, #8]
 8007f04:	e7df      	b.n	8007ec6 <_fflush_r+0x22>
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <_fflush_r+0x74>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	bf08      	it	eq
 8007f0c:	68ec      	ldreq	r4, [r5, #12]
 8007f0e:	e7da      	b.n	8007ec6 <_fflush_r+0x22>
 8007f10:	08008fec 	.word	0x08008fec
 8007f14:	0800900c 	.word	0x0800900c
 8007f18:	08008fcc 	.word	0x08008fcc

08007f1c <std>:
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	4604      	mov	r4, r0
 8007f22:	e9c0 3300 	strd	r3, r3, [r0]
 8007f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f2a:	6083      	str	r3, [r0, #8]
 8007f2c:	8181      	strh	r1, [r0, #12]
 8007f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f30:	81c2      	strh	r2, [r0, #14]
 8007f32:	6183      	str	r3, [r0, #24]
 8007f34:	4619      	mov	r1, r3
 8007f36:	2208      	movs	r2, #8
 8007f38:	305c      	adds	r0, #92	; 0x5c
 8007f3a:	f7fb fdcb 	bl	8003ad4 <memset>
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <std+0x38>)
 8007f40:	6263      	str	r3, [r4, #36]	; 0x24
 8007f42:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <std+0x3c>)
 8007f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f46:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <std+0x40>)
 8007f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <std+0x44>)
 8007f4c:	6224      	str	r4, [r4, #32]
 8007f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	bf00      	nop
 8007f54:	08008271 	.word	0x08008271
 8007f58:	08008293 	.word	0x08008293
 8007f5c:	080082cb 	.word	0x080082cb
 8007f60:	080082ef 	.word	0x080082ef

08007f64 <_cleanup_r>:
 8007f64:	4901      	ldr	r1, [pc, #4]	; (8007f6c <_cleanup_r+0x8>)
 8007f66:	f000 b8af 	b.w	80080c8 <_fwalk_reent>
 8007f6a:	bf00      	nop
 8007f6c:	08007ea5 	.word	0x08007ea5

08007f70 <__sfmoreglue>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	2268      	movs	r2, #104	; 0x68
 8007f74:	1e4d      	subs	r5, r1, #1
 8007f76:	4355      	muls	r5, r2
 8007f78:	460e      	mov	r6, r1
 8007f7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f7e:	f7ff fa59 	bl	8007434 <_malloc_r>
 8007f82:	4604      	mov	r4, r0
 8007f84:	b140      	cbz	r0, 8007f98 <__sfmoreglue+0x28>
 8007f86:	2100      	movs	r1, #0
 8007f88:	e9c0 1600 	strd	r1, r6, [r0]
 8007f8c:	300c      	adds	r0, #12
 8007f8e:	60a0      	str	r0, [r4, #8]
 8007f90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f94:	f7fb fd9e 	bl	8003ad4 <memset>
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}

08007f9c <__sfp_lock_acquire>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	; (8007fa4 <__sfp_lock_acquire+0x8>)
 8007f9e:	f000 b8b3 	b.w	8008108 <__retarget_lock_acquire_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	200004f9 	.word	0x200004f9

08007fa8 <__sfp_lock_release>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__sfp_lock_release+0x8>)
 8007faa:	f000 b8ae 	b.w	800810a <__retarget_lock_release_recursive>
 8007fae:	bf00      	nop
 8007fb0:	200004f9 	.word	0x200004f9

08007fb4 <__sinit_lock_acquire>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	; (8007fbc <__sinit_lock_acquire+0x8>)
 8007fb6:	f000 b8a7 	b.w	8008108 <__retarget_lock_acquire_recursive>
 8007fba:	bf00      	nop
 8007fbc:	200004fa 	.word	0x200004fa

08007fc0 <__sinit_lock_release>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__sinit_lock_release+0x8>)
 8007fc2:	f000 b8a2 	b.w	800810a <__retarget_lock_release_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200004fa 	.word	0x200004fa

08007fcc <__sinit>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	f7ff fff0 	bl	8007fb4 <__sinit_lock_acquire>
 8007fd4:	69a3      	ldr	r3, [r4, #24]
 8007fd6:	b11b      	cbz	r3, 8007fe0 <__sinit+0x14>
 8007fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fdc:	f7ff bff0 	b.w	8007fc0 <__sinit_lock_release>
 8007fe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fe4:	6523      	str	r3, [r4, #80]	; 0x50
 8007fe6:	4b13      	ldr	r3, [pc, #76]	; (8008034 <__sinit+0x68>)
 8007fe8:	4a13      	ldr	r2, [pc, #76]	; (8008038 <__sinit+0x6c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fee:	42a3      	cmp	r3, r4
 8007ff0:	bf04      	itt	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	61a3      	streq	r3, [r4, #24]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 f820 	bl	800803c <__sfp>
 8007ffc:	6060      	str	r0, [r4, #4]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f81c 	bl	800803c <__sfp>
 8008004:	60a0      	str	r0, [r4, #8]
 8008006:	4620      	mov	r0, r4
 8008008:	f000 f818 	bl	800803c <__sfp>
 800800c:	2200      	movs	r2, #0
 800800e:	60e0      	str	r0, [r4, #12]
 8008010:	2104      	movs	r1, #4
 8008012:	6860      	ldr	r0, [r4, #4]
 8008014:	f7ff ff82 	bl	8007f1c <std>
 8008018:	68a0      	ldr	r0, [r4, #8]
 800801a:	2201      	movs	r2, #1
 800801c:	2109      	movs	r1, #9
 800801e:	f7ff ff7d 	bl	8007f1c <std>
 8008022:	68e0      	ldr	r0, [r4, #12]
 8008024:	2202      	movs	r2, #2
 8008026:	2112      	movs	r1, #18
 8008028:	f7ff ff78 	bl	8007f1c <std>
 800802c:	2301      	movs	r3, #1
 800802e:	61a3      	str	r3, [r4, #24]
 8008030:	e7d2      	b.n	8007fd8 <__sinit+0xc>
 8008032:	bf00      	nop
 8008034:	08008b84 	.word	0x08008b84
 8008038:	08007f65 	.word	0x08007f65

0800803c <__sfp>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	4607      	mov	r7, r0
 8008040:	f7ff ffac 	bl	8007f9c <__sfp_lock_acquire>
 8008044:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <__sfp+0x84>)
 8008046:	681e      	ldr	r6, [r3, #0]
 8008048:	69b3      	ldr	r3, [r6, #24]
 800804a:	b913      	cbnz	r3, 8008052 <__sfp+0x16>
 800804c:	4630      	mov	r0, r6
 800804e:	f7ff ffbd 	bl	8007fcc <__sinit>
 8008052:	3648      	adds	r6, #72	; 0x48
 8008054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008058:	3b01      	subs	r3, #1
 800805a:	d503      	bpl.n	8008064 <__sfp+0x28>
 800805c:	6833      	ldr	r3, [r6, #0]
 800805e:	b30b      	cbz	r3, 80080a4 <__sfp+0x68>
 8008060:	6836      	ldr	r6, [r6, #0]
 8008062:	e7f7      	b.n	8008054 <__sfp+0x18>
 8008064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008068:	b9d5      	cbnz	r5, 80080a0 <__sfp+0x64>
 800806a:	4b16      	ldr	r3, [pc, #88]	; (80080c4 <__sfp+0x88>)
 800806c:	60e3      	str	r3, [r4, #12]
 800806e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008072:	6665      	str	r5, [r4, #100]	; 0x64
 8008074:	f000 f847 	bl	8008106 <__retarget_lock_init_recursive>
 8008078:	f7ff ff96 	bl	8007fa8 <__sfp_lock_release>
 800807c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008084:	6025      	str	r5, [r4, #0]
 8008086:	61a5      	str	r5, [r4, #24]
 8008088:	2208      	movs	r2, #8
 800808a:	4629      	mov	r1, r5
 800808c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008090:	f7fb fd20 	bl	8003ad4 <memset>
 8008094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800809c:	4620      	mov	r0, r4
 800809e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a0:	3468      	adds	r4, #104	; 0x68
 80080a2:	e7d9      	b.n	8008058 <__sfp+0x1c>
 80080a4:	2104      	movs	r1, #4
 80080a6:	4638      	mov	r0, r7
 80080a8:	f7ff ff62 	bl	8007f70 <__sfmoreglue>
 80080ac:	4604      	mov	r4, r0
 80080ae:	6030      	str	r0, [r6, #0]
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d1d5      	bne.n	8008060 <__sfp+0x24>
 80080b4:	f7ff ff78 	bl	8007fa8 <__sfp_lock_release>
 80080b8:	230c      	movs	r3, #12
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	e7ee      	b.n	800809c <__sfp+0x60>
 80080be:	bf00      	nop
 80080c0:	08008b84 	.word	0x08008b84
 80080c4:	ffff0001 	.word	0xffff0001

080080c8 <_fwalk_reent>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4606      	mov	r6, r0
 80080ce:	4688      	mov	r8, r1
 80080d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080d4:	2700      	movs	r7, #0
 80080d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080da:	f1b9 0901 	subs.w	r9, r9, #1
 80080de:	d505      	bpl.n	80080ec <_fwalk_reent+0x24>
 80080e0:	6824      	ldr	r4, [r4, #0]
 80080e2:	2c00      	cmp	r4, #0
 80080e4:	d1f7      	bne.n	80080d6 <_fwalk_reent+0xe>
 80080e6:	4638      	mov	r0, r7
 80080e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ec:	89ab      	ldrh	r3, [r5, #12]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d907      	bls.n	8008102 <_fwalk_reent+0x3a>
 80080f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080f6:	3301      	adds	r3, #1
 80080f8:	d003      	beq.n	8008102 <_fwalk_reent+0x3a>
 80080fa:	4629      	mov	r1, r5
 80080fc:	4630      	mov	r0, r6
 80080fe:	47c0      	blx	r8
 8008100:	4307      	orrs	r7, r0
 8008102:	3568      	adds	r5, #104	; 0x68
 8008104:	e7e9      	b.n	80080da <_fwalk_reent+0x12>

08008106 <__retarget_lock_init_recursive>:
 8008106:	4770      	bx	lr

08008108 <__retarget_lock_acquire_recursive>:
 8008108:	4770      	bx	lr

0800810a <__retarget_lock_release_recursive>:
 800810a:	4770      	bx	lr

0800810c <__swhatbuf_r>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	460e      	mov	r6, r1
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	2900      	cmp	r1, #0
 8008116:	b096      	sub	sp, #88	; 0x58
 8008118:	4614      	mov	r4, r2
 800811a:	461d      	mov	r5, r3
 800811c:	da08      	bge.n	8008130 <__swhatbuf_r+0x24>
 800811e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	061a      	lsls	r2, r3, #24
 8008128:	d410      	bmi.n	800814c <__swhatbuf_r+0x40>
 800812a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800812e:	e00e      	b.n	800814e <__swhatbuf_r+0x42>
 8008130:	466a      	mov	r2, sp
 8008132:	f000 f903 	bl	800833c <_fstat_r>
 8008136:	2800      	cmp	r0, #0
 8008138:	dbf1      	blt.n	800811e <__swhatbuf_r+0x12>
 800813a:	9a01      	ldr	r2, [sp, #4]
 800813c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008144:	425a      	negs	r2, r3
 8008146:	415a      	adcs	r2, r3
 8008148:	602a      	str	r2, [r5, #0]
 800814a:	e7ee      	b.n	800812a <__swhatbuf_r+0x1e>
 800814c:	2340      	movs	r3, #64	; 0x40
 800814e:	2000      	movs	r0, #0
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	b016      	add	sp, #88	; 0x58
 8008154:	bd70      	pop	{r4, r5, r6, pc}
	...

08008158 <__smakebuf_r>:
 8008158:	898b      	ldrh	r3, [r1, #12]
 800815a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800815c:	079d      	lsls	r5, r3, #30
 800815e:	4606      	mov	r6, r0
 8008160:	460c      	mov	r4, r1
 8008162:	d507      	bpl.n	8008174 <__smakebuf_r+0x1c>
 8008164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	2301      	movs	r3, #1
 800816e:	6163      	str	r3, [r4, #20]
 8008170:	b002      	add	sp, #8
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	ab01      	add	r3, sp, #4
 8008176:	466a      	mov	r2, sp
 8008178:	f7ff ffc8 	bl	800810c <__swhatbuf_r>
 800817c:	9900      	ldr	r1, [sp, #0]
 800817e:	4605      	mov	r5, r0
 8008180:	4630      	mov	r0, r6
 8008182:	f7ff f957 	bl	8007434 <_malloc_r>
 8008186:	b948      	cbnz	r0, 800819c <__smakebuf_r+0x44>
 8008188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818c:	059a      	lsls	r2, r3, #22
 800818e:	d4ef      	bmi.n	8008170 <__smakebuf_r+0x18>
 8008190:	f023 0303 	bic.w	r3, r3, #3
 8008194:	f043 0302 	orr.w	r3, r3, #2
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	e7e3      	b.n	8008164 <__smakebuf_r+0xc>
 800819c:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <__smakebuf_r+0x7c>)
 800819e:	62b3      	str	r3, [r6, #40]	; 0x28
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	6020      	str	r0, [r4, #0]
 80081a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	6163      	str	r3, [r4, #20]
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	6120      	str	r0, [r4, #16]
 80081b2:	b15b      	cbz	r3, 80081cc <__smakebuf_r+0x74>
 80081b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b8:	4630      	mov	r0, r6
 80081ba:	f000 f8d1 	bl	8008360 <_isatty_r>
 80081be:	b128      	cbz	r0, 80081cc <__smakebuf_r+0x74>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	81a3      	strh	r3, [r4, #12]
 80081cc:	89a0      	ldrh	r0, [r4, #12]
 80081ce:	4305      	orrs	r5, r0
 80081d0:	81a5      	strh	r5, [r4, #12]
 80081d2:	e7cd      	b.n	8008170 <__smakebuf_r+0x18>
 80081d4:	08007f65 	.word	0x08007f65

080081d8 <_malloc_usable_size_r>:
 80081d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081dc:	1f18      	subs	r0, r3, #4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	bfbc      	itt	lt
 80081e2:	580b      	ldrlt	r3, [r1, r0]
 80081e4:	18c0      	addlt	r0, r0, r3
 80081e6:	4770      	bx	lr

080081e8 <_raise_r>:
 80081e8:	291f      	cmp	r1, #31
 80081ea:	b538      	push	{r3, r4, r5, lr}
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	d904      	bls.n	80081fc <_raise_r+0x14>
 80081f2:	2316      	movs	r3, #22
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081fe:	b112      	cbz	r2, 8008206 <_raise_r+0x1e>
 8008200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008204:	b94b      	cbnz	r3, 800821a <_raise_r+0x32>
 8008206:	4620      	mov	r0, r4
 8008208:	f000 f830 	bl	800826c <_getpid_r>
 800820c:	462a      	mov	r2, r5
 800820e:	4601      	mov	r1, r0
 8008210:	4620      	mov	r0, r4
 8008212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008216:	f000 b817 	b.w	8008248 <_kill_r>
 800821a:	2b01      	cmp	r3, #1
 800821c:	d00a      	beq.n	8008234 <_raise_r+0x4c>
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	d103      	bne.n	800822a <_raise_r+0x42>
 8008222:	2316      	movs	r3, #22
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	2001      	movs	r0, #1
 8008228:	e7e7      	b.n	80081fa <_raise_r+0x12>
 800822a:	2400      	movs	r4, #0
 800822c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008230:	4628      	mov	r0, r5
 8008232:	4798      	blx	r3
 8008234:	2000      	movs	r0, #0
 8008236:	e7e0      	b.n	80081fa <_raise_r+0x12>

08008238 <raise>:
 8008238:	4b02      	ldr	r3, [pc, #8]	; (8008244 <raise+0xc>)
 800823a:	4601      	mov	r1, r0
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	f7ff bfd3 	b.w	80081e8 <_raise_r>
 8008242:	bf00      	nop
 8008244:	20000014 	.word	0x20000014

08008248 <_kill_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d07      	ldr	r5, [pc, #28]	; (8008268 <_kill_r+0x20>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	4611      	mov	r1, r2
 8008254:	602b      	str	r3, [r5, #0]
 8008256:	f7f9 fbc3 	bl	80019e0 <_kill>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	d102      	bne.n	8008264 <_kill_r+0x1c>
 800825e:	682b      	ldr	r3, [r5, #0]
 8008260:	b103      	cbz	r3, 8008264 <_kill_r+0x1c>
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	bf00      	nop
 8008268:	200004f4 	.word	0x200004f4

0800826c <_getpid_r>:
 800826c:	f7f9 bbb0 	b.w	80019d0 <_getpid>

08008270 <__sread>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	f000 f894 	bl	80083a4 <_read_r>
 800827c:	2800      	cmp	r0, #0
 800827e:	bfab      	itete	ge
 8008280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008282:	89a3      	ldrhlt	r3, [r4, #12]
 8008284:	181b      	addge	r3, r3, r0
 8008286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800828a:	bfac      	ite	ge
 800828c:	6563      	strge	r3, [r4, #84]	; 0x54
 800828e:	81a3      	strhlt	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__swrite>:
 8008292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	461f      	mov	r7, r3
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	05db      	lsls	r3, r3, #23
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4616      	mov	r6, r2
 80082a2:	d505      	bpl.n	80082b0 <__swrite+0x1e>
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	2302      	movs	r3, #2
 80082aa:	2200      	movs	r2, #0
 80082ac:	f000 f868 	bl	8008380 <_lseek_r>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	f000 b817 	b.w	80082f8 <_write_r>

080082ca <__sseek>:
 80082ca:	b510      	push	{r4, lr}
 80082cc:	460c      	mov	r4, r1
 80082ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d2:	f000 f855 	bl	8008380 <_lseek_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	bf15      	itete	ne
 80082dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082e6:	81a3      	strheq	r3, [r4, #12]
 80082e8:	bf18      	it	ne
 80082ea:	81a3      	strhne	r3, [r4, #12]
 80082ec:	bd10      	pop	{r4, pc}

080082ee <__sclose>:
 80082ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f2:	f000 b813 	b.w	800831c <_close_r>
	...

080082f8 <_write_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d07      	ldr	r5, [pc, #28]	; (8008318 <_write_r+0x20>)
 80082fc:	4604      	mov	r4, r0
 80082fe:	4608      	mov	r0, r1
 8008300:	4611      	mov	r1, r2
 8008302:	2200      	movs	r2, #0
 8008304:	602a      	str	r2, [r5, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	f7f9 fba1 	bl	8001a4e <_write>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_write_r+0x1e>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	b103      	cbz	r3, 8008316 <_write_r+0x1e>
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	200004f4 	.word	0x200004f4

0800831c <_close_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_close_r+0x1c>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	f7f9 fbad 	bl	8001a86 <_close>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_close_r+0x1a>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_close_r+0x1a>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	200004f4 	.word	0x200004f4

0800833c <_fstat_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	; (800835c <_fstat_r+0x20>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	f7f9 fba8 	bl	8001a9e <_fstat>
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	d102      	bne.n	8008358 <_fstat_r+0x1c>
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	b103      	cbz	r3, 8008358 <_fstat_r+0x1c>
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	bf00      	nop
 800835c:	200004f4 	.word	0x200004f4

08008360 <_isatty_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	; (800837c <_isatty_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7f9 fba7 	bl	8001abe <_isatty>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_isatty_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_isatty_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	200004f4 	.word	0x200004f4

08008380 <_lseek_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_lseek_r+0x20>)
 8008384:	4604      	mov	r4, r0
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	2200      	movs	r2, #0
 800838c:	602a      	str	r2, [r5, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7f9 fba0 	bl	8001ad4 <_lseek>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_lseek_r+0x1e>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_lseek_r+0x1e>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	200004f4 	.word	0x200004f4

080083a4 <_read_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d07      	ldr	r5, [pc, #28]	; (80083c4 <_read_r+0x20>)
 80083a8:	4604      	mov	r4, r0
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f7f9 fb2e 	bl	8001a14 <_read>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_read_r+0x1e>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_read_r+0x1e>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200004f4 	.word	0x200004f4

080083c8 <_init>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	bf00      	nop
 80083cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ce:	bc08      	pop	{r3}
 80083d0:	469e      	mov	lr, r3
 80083d2:	4770      	bx	lr

080083d4 <_fini>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	bf00      	nop
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr
