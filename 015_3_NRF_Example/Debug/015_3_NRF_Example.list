
015_3_NRF_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ac  080031ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080031c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080031c8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001547  00000000  00000000  00027f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00029c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f51d  00000000  00000000  0002a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e78  00000000  00000000  00049805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdf44  00000000  00000000  0005167d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f5c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d98  00000000  00000000  0010f614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003168 	.word	0x08003168

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003168 	.word	0x08003168

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <DWT_Init+0x38>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d10e      	bne.n	80004fa <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <DWT_Init+0x38>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <DWT_Init+0x38>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <DWT_Init+0x3c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <DWT_Init+0x3c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <DWT_Init+0x3c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6013      	str	r3, [r2, #0]
    }
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	e000edf0 	.word	0xe000edf0
 8000508:	e0001000 	.word	0xe0001000

0800050c <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <DWT_Delay+0x40>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <DWT_Delay+0x44>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <DWT_Delay+0x48>)
 8000520:	fba2 2303 	umull	r2, r3, r2, r3
 8000524:	0c9a      	lsrs	r2, r3, #18
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	fb02 f303 	mul.w	r3, r2, r3
 800052c:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800052e:	bf00      	nop
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <DWT_Delay+0x40>)
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	429a      	cmp	r2, r3
 800053c:	d8f8      	bhi.n	8000530 <DWT_Delay+0x24>
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e0001000 	.word	0xe0001000
 8000550:	20000000 	.word	0x20000000
 8000554:	431bde83 	.word	0x431bde83

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f001 fb3c 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f82e 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f8cc 	bl	8000700 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000568:	f000 f894 	bl	8000694 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800056c:	2064      	movs	r0, #100	; 0x64
 800056e:	f001 fba5 	bl	8001cbc <HAL_Delay>
  DWT_Init();
 8000572:	f7ff ffab 	bl	80004cc <DWT_Init>
  NRF_main_init();
 8000576:	f000 f973 	bl	8000860 <NRF_main_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NRFSendData("00000", "1234567890");
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <main+0x58>)
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <main+0x5c>)
 800057e:	f000 f95b 	bl	8000838 <NRFSendData>
	  HAL_Delay(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f001 fb9a 	bl	8001cbc <HAL_Delay>

	  if((myNRF.RXIRQ==1) && (!myNRF.Busy))
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <main+0x60>)
 800058a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800058e:	2b01      	cmp	r3, #1
 8000590:	d108      	bne.n	80005a4 <main+0x4c>
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <main+0x60>)
 8000594:	7e1b      	ldrb	r3, [r3, #24]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d104      	bne.n	80005a4 <main+0x4c>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <main+0x64>)
 80005a0:	f001 fe77 	bl	8002292 <HAL_GPIO_TogglePin>
		  {

		  }
	  }

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0x64>)
 80005aa:	f001 fe72 	bl	8002292 <HAL_GPIO_TogglePin>
	  NRFSendData("00000", "1234567890");
 80005ae:	e7e4      	b.n	800057a <main+0x22>
 80005b0:	08003180 	.word	0x08003180
 80005b4:	0800318c 	.word	0x0800318c
 80005b8:	20000080 	.word	0x20000080
 80005bc:	40020c00 	.word	0x40020c00

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fdc2 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000634:	23a8      	movs	r3, #168	; 0xa8
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fe57 	bl	80022f8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f962 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f8ae 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f94b 	bl	8000918 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2220      	movs	r2, #32
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f002 fa61 	bl	8002bac <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f912 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000028 	.word	0x20000028
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b34      	ldr	r3, [pc, #208]	; (80007ec <MX_GPIO_Init+0xec>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a33      	ldr	r2, [pc, #204]	; (80007ec <MX_GPIO_Init+0xec>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <MX_GPIO_Init+0xec>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_GPIO_Init+0xec>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <MX_GPIO_Init+0xec>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_GPIO_Init+0xec>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <MX_GPIO_Init+0xec>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2118      	movs	r1, #24
 800076e:	4820      	ldr	r0, [pc, #128]	; (80007f0 <MX_GPIO_Init+0xf0>)
 8000770:	f001 fd76 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800077a:	481e      	ldr	r0, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xf4>)
 800077c:	f001 fd70 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000780:	2304      	movs	r3, #4
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_GPIO_Init+0xf0>)
 8000794:	f001 fbc8 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000798:	2318      	movs	r3, #24
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_GPIO_Init+0xf0>)
 80007b0:	f001 fbba 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_GPIO_Init+0xf4>)
 80007ce:	f001 fbab 	bl	8001f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2008      	movs	r0, #8
 80007d8:	f001 fb6f 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007dc:	2008      	movs	r0, #8
 80007de:	f001 fb88 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	10310000 	.word	0x10310000

080007fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	2b04      	cmp	r3, #4
 800080a:	d10c      	bne.n	8000826 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		if(HAL_nRF24L01P_IRQ_Handler(&myNRF) != HAL_OK)
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_GPIO_EXTI_Callback+0x34>)
 800080e:	f000 f9c1 	bl	8000b94 <HAL_nRF24L01P_IRQ_Handler>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_GPIO_EXTI_Callback+0x20>
		{
			Error_Handler();
 8000818:	f000 f87e 	bl	8000918 <Error_Handler>
		}
		HAL_nRF24L01P_ReadRegister(&myNRF, nRF_STATUS, &regStatus);
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <HAL_GPIO_EXTI_Callback+0x38>)
 800081e:	2107      	movs	r1, #7
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <HAL_GPIO_EXTI_Callback+0x34>)
 8000822:	f000 ffdb 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
	}
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000080 	.word	0x20000080
 8000834:	200000f8 	.word	0x200000f8

08000838 <NRFSendData>:

void NRFSendData(char * nrfID, char * nrfData)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	HAL_nRF24L01P_SetPTXAddress(&myNRF, (uint8_t *) nrfID);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <NRFSendData+0x24>)
 8000846:	f000 fa9b 	bl	8000d80 <HAL_nRF24L01P_SetPTXAddress>
	if(HAL_nRF24L01P_TransmitPacketACK(&myNRF, (uint8_t *) nrfData, nRF_DATA_PIPE_0) != HAL_OK)
 800084a:	2200      	movs	r2, #0
 800084c:	6839      	ldr	r1, [r7, #0]
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <NRFSendData+0x24>)
 8000850:	f000 fa29 	bl	8000ca6 <HAL_nRF24L01P_TransmitPacketACK>
	{
		//Error
	}
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000080 	.word	0x20000080

08000860 <NRF_main_init>:

void NRF_main_init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	/* ---- myNRF24L01+ Definitions ---- */
	myNRF.hspi = &hspi1;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <NRF_main_init+0x9c>)
 8000866:	4a26      	ldr	r2, [pc, #152]	; (8000900 <NRF_main_init+0xa0>)
 8000868:	601a      	str	r2, [r3, #0]
	myNRF.CRC_Width = nRF_CRC_WIDTH_BYTE;
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <NRF_main_init+0x9c>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
	myNRF.ADDR_Width = nRF_ADDR_WIDTH_5;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <NRF_main_init+0x9c>)
 8000872:	2203      	movs	r2, #3
 8000874:	715a      	strb	r2, [r3, #5]
	myNRF.Data_Rate = nRF_DATA_RATE_250KBPS;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <NRF_main_init+0x9c>)
 8000878:	2201      	movs	r2, #1
 800087a:	719a      	strb	r2, [r3, #6]
	myNRF.TX_Power = nRF_TX_PWR_M18dBm;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <NRF_main_init+0x9c>)
 800087e:	2200      	movs	r2, #0
 8000880:	71da      	strb	r2, [r3, #7]
	myNRF.State = nRF_STATE_RX;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <NRF_main_init+0x9c>)
 8000884:	2201      	movs	r2, #1
 8000886:	721a      	strb	r2, [r3, #8]

	myNRF.RF_Channel = 1;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <NRF_main_init+0x9c>)
 800088a:	2201      	movs	r2, #1
 800088c:	725a      	strb	r2, [r3, #9]
	myNRF.PayloadWidth = nRF_RXPW_32BYTES;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <NRF_main_init+0x9c>)
 8000890:	2220      	movs	r2, #32
 8000892:	729a      	strb	r2, [r3, #10]
	myNRF.RetransmitCount = nRF_RETX_DISABLED;// nRF_RETX_COUNT_15;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <NRF_main_init+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	72da      	strb	r2, [r3, #11]
	myNRF.RetransmitDelay = nRF_RETX_DELAY_250uS; //nRF_RETX_DELAY_4000uS;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <NRF_main_init+0x9c>)
 800089c:	2200      	movs	r2, #0
 800089e:	731a      	strb	r2, [r3, #12]

	myNRF.RX_Address = (uint8_t *)"00001";
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <NRF_main_init+0x9c>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <NRF_main_init+0xa4>)
 80008a4:	611a      	str	r2, [r3, #16]
	myNRF.TX_Address = (uint8_t *)"00000";
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <NRF_main_init+0x9c>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <NRF_main_init+0xa8>)
 80008aa:	615a      	str	r2, [r3, #20]

	myNRF.RX_Buffer = RXBuffer;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <NRF_main_init+0x9c>)
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <NRF_main_init+0xac>)
 80008b0:	61da      	str	r2, [r3, #28]
	myNRF.TX_Buffer = TXBuffer;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <NRF_main_init+0x9c>)
 80008b4:	4a16      	ldr	r2, [pc, #88]	; (8000910 <NRF_main_init+0xb0>)
 80008b6:	621a      	str	r2, [r3, #32]

	myNRF.nRF_nSS_GPIO_PORT = GPIOA;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <NRF_main_init+0x9c>)
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <NRF_main_init+0xb4>)
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
	myNRF.nRF_nSS_GPIO_PIN = GPIO_PIN_3;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <NRF_main_init+0x9c>)
 80008c0:	2208      	movs	r2, #8
 80008c2:	851a      	strh	r2, [r3, #40]	; 0x28

	myNRF.nRF_CE_GPIO_PORT = GPIOA;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <NRF_main_init+0x9c>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <NRF_main_init+0xb4>)
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
	myNRF.nRF_CE_GPIO_PIN = GPIO_PIN_4;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <NRF_main_init+0x9c>)
 80008cc:	2210      	movs	r2, #16
 80008ce:	861a      	strh	r2, [r3, #48]	; 0x30

	//ekleme
	myNRF.RXIRQ = 0;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <NRF_main_init+0x9c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	myNRF.TXIRQ = 0;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <NRF_main_init+0x9c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	myNRF.MaxReIRQ = 0;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <NRF_main_init+0x9c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	/* ---- myNRF24L01+ Definitions ---- */


	if(HAL_nRF24L01P_Init(&myNRF) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <NRF_main_init+0x9c>)
 80008ea:	f000 f81c 	bl	8000926 <HAL_nRF24L01P_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <NRF_main_init+0x98>
	{
		Error_Handler();
 80008f4:	f000 f810 	bl	8000918 <Error_Handler>
	}
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000080 	.word	0x20000080
 8000900:	20000028 	.word	0x20000028
 8000904:	08003194 	.word	0x08003194
 8000908:	0800318c 	.word	0x0800318c
 800090c:	200000b8 	.word	0x200000b8
 8000910:	200000d8 	.word	0x200000d8
 8000914:	40020000 	.word	0x40020000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <HAL_nRF24L01P_Init>:
#include "nRF24L01P.h"
#include "dwt_delay.h"

HAL_StatusTypeDef HAL_nRF24L01P_Init(nRF24L01P *nRF)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b084      	sub	sp, #16
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	HAL_StatusTypeDef retValue = HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE) != HAL_OK)
 8000932:	2101      	movs	r1, #1
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 fc29 	bl	800118c <HAL_nRF24L01P_PowerUP>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_nRF24L01P_Init+0x1e>
	{
		return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e123      	b.n	8000b8c <HAL_nRF24L01P_Init+0x266>
	}
	
	do {
			if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000944:	f107 030e 	add.w	r3, r7, #14
 8000948:	461a      	mov	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 ff45 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_nRF24L01P_Init+0x36>
			{
				return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e117      	b.n	8000b8c <HAL_nRF24L01P_Init+0x266>
			}
	} while((regValue & 0x02) == 0x00); // Did device powered up? 
 800095c:	7bbb      	ldrb	r3, [r7, #14]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0ee      	beq.n	8000944 <HAL_nRF24L01P_Init+0x1e>
	
	/* ---- InitProcess ---- */
	retValue |= HAL_nRF24L01P_SetPRXWidth(nRF, nRF->PayloadWidth, nRF_DATA_PIPE_0);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7a9b      	ldrb	r3, [r3, #10]
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 f9c0 	bl	8000cf4 <HAL_nRF24L01P_SetPRXWidth>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4313      	orrs	r3, r2
 800097c:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPRXAddress(nRF, nRF->RX_Address, nRF_DATA_PIPE_0);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 fa12 	bl	8000db0 <HAL_nRF24L01P_SetPRXAddress>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	4313      	orrs	r3, r2
 8000994:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPTXAddress(nRF, nRF->TX_Address);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4619      	mov	r1, r3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f9ef 	bl	8000d80 <HAL_nRF24L01P_SetPTXAddress>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_RXDataReadyIRQ(nRF, nRF_ENABLE);
 80009ac:	2101      	movs	r1, #1
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 fb84 	bl	80010bc <HAL_nRF24L01P_RXDataReadyIRQ>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_TXDataSentIRQ(nRF, nRF_ENABLE);
 80009be:	2101      	movs	r1, #1
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fb4a 	bl	800105a <HAL_nRF24L01P_TXDataSentIRQ>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_MaxReTransmitIRQ(nRF, nRF_ENABLE);
 80009d0:	2101      	movs	r1, #1
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 fb10 	bl	8000ff8 <HAL_nRF24L01P_MaxReTransmitIRQ>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	4313      	orrs	r3, r2
 80009e0:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_CRC(nRF, nRF_ENABLE);
 80009e2:	2101      	movs	r1, #1
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 fc33 	bl	8001250 <HAL_nRF24L01P_CRC>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetCRCWidth(nRF, nRF->CRC_Width);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	791b      	ldrb	r3, [r3, #4]
 80009f8:	4619      	mov	r1, r3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 fbf7 	bl	80011ee <HAL_nRF24L01P_SetCRCWidth>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetAddressWidth(nRF, nRF->ADDR_Width);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 fcd8 	bl	80013c6 <HAL_nRF24L01P_SetAddressWidth>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRFChannel(nRF, nRF->RF_Channel);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a5b      	ldrb	r3, [r3, #9]
 8000a24:	4619      	mov	r1, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 fd64 	bl	80014f4 <HAL_nRF24L01P_SetRFChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetDataRate(nRF, nRF->Data_Rate);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	799b      	ldrb	r3, [r3, #6]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 fd9a 	bl	8001576 <HAL_nRF24L01P_SetDataRate>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionCount(nRF, nRF->RetransmitCount);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7adb      	ldrb	r3, [r3, #11]
 8000a50:	4619      	mov	r1, r3
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 fd1d 	bl	8001492 <HAL_nRF24L01P_SetRetransmissionCount>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionDelay(nRF, nRF->RetransmitDelay);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7b1b      	ldrb	r3, [r3, #12]
 8000a66:	4619      	mov	r1, r3
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 fcdd 	bl	8001428 <HAL_nRF24L01P_SetRetransmissionDelay>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_DynACK(nRF, nRF_DISABLE);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fa8b 	bl	8000f96 <HAL_nRF24L01P_DynACK>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_ACKPayload(nRF, nRF_DISABLE);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 fa51 	bl	8000f34 <HAL_nRF24L01P_ACKPayload>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DynPayload(nRF, nRF_DISABLE);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fa17 	bl	8000ed2 <HAL_nRF24L01P_DynPayload>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_RXPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 fc42 	bl	800133c <HAL_nRF24L01P_RXPipe>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DPLPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 f9c2 	bl	8000e50 <HAL_nRF24L01P_DPLPipe>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2100      	movs	r1, #0
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 fbe9 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_1, nRF_DISABLE);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fbdf 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_2, nRF_DISABLE);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 fbd5 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_3, nRF_DISABLE);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2103      	movs	r1, #3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 fbcb 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_4, nRF_DISABLE);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2104      	movs	r1, #4
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fbc1 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_5, nRF_DISABLE);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 fbb7 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_ClearInterrupts(nRF);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 fceb 	bl	800152a <HAL_nRF24L01P_ClearInterrupts>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fadc 	bl	800111e <HAL_nRF24L01P_TXRX>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_FlushRX(nRF);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 fd69 	bl	8001648 <HAL_nRF24L01P_FlushRX>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	73fb      	strb	r3, [r7, #15]
	
	if(retValue != HAL_OK)
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_nRF24L01P_Init+0x264>
	{
		return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <HAL_nRF24L01P_Init+0x266>
	}
	return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_nRF24L01P_IRQ_Handler>:

HAL_StatusTypeDef HAL_nRF24L01P_IRQ_Handler(nRF24L01P *nRF)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regStatus;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regStatus) != HAL_OK)
 8000b9c:	f107 030f 	add.w	r3, r7, #15
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fe19 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_nRF24L01P_IRQ_Handler+0x20>
	{
		return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e074      	b.n	8000c9e <HAL_nRF24L01P_IRQ_Handler+0x10a>
	}	
	/* ---- RX FIFO Int.---- */
	if((regStatus & (1 << 6)) != 0)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d027      	beq.n	8000c0e <HAL_nRF24L01P_IRQ_Handler+0x7a>
	{
		uint8_t regFIFO_Status;
		HAL_nRF24L01P_CE_Low(nRF);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 ff14 	bl	80019ec <HAL_nRF24L01P_CE_Low>
		do {
		HAL_nRF24L01P_ReadRXPayload(nRF, nRF->RX_Buffer);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 fd56 	bl	800167c <HAL_nRF24L01P_ReadRXPayload>
		regStatus |= (1 << 6);
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8000bda:	f107 030f 	add.w	r3, r7, #15
 8000bde:	461a      	mov	r2, r3
 8000be0:	2107      	movs	r1, #7
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 fddc 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_ReadRegister(nRF, nRF_FIFO_STATUS, &regFIFO_Status);
 8000be8:	f107 030e 	add.w	r3, r7, #14
 8000bec:	461a      	mov	r2, r3
 8000bee:	2117      	movs	r1, #23
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fdf3 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
		} while((regFIFO_Status & 0x01) == 0x00);
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0e1      	beq.n	8000bc4 <HAL_nRF24L01P_IRQ_Handler+0x30>
		HAL_nRF24L01P_CE_High(nRF);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 fee3 	bl	80019cc <HAL_nRF24L01P_CE_High>
		nRF->RXIRQ = 1;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	/* ---- TX Sent Int.---- */
	if((regStatus & (1 << 5)) != 0)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d01c      	beq.n	8000c52 <HAL_nRF24L01P_IRQ_Handler+0xbe>
	{
		HAL_nRF24L01P_CE_Low(nRF);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 fee7 	bl	80019ec <HAL_nRF24L01P_CE_Low>
		regStatus |= (1 << 5);
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fa77 	bl	800111e <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8000c30:	f107 030f 	add.w	r3, r7, #15
 8000c34:	461a      	mov	r2, r3
 8000c36:	2107      	movs	r1, #7
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fdb1 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 fec4 	bl	80019cc <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	761a      	strb	r2, [r3, #24]
		nRF->TXIRQ = 1;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}
	/* ---- MAXReTX Int.---- */
	if((regStatus & (1 << 4)) != 0)
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01f      	beq.n	8000c9c <HAL_nRF24L01P_IRQ_Handler+0x108>
	{
		regStatus |= (1 << 4);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
		
		HAL_nRF24L01P_FlushTX(nRF);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 fcd4 	bl	8001614 <HAL_nRF24L01P_FlushTX>
		//HAL_nRF24L01P_PowerUP(nRF, nRF_DISABLE);	// bi kapatip açalim da düzelsin...
		//HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE);
		
		HAL_nRF24L01P_CE_Low(nRF);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 febd 	bl	80019ec <HAL_nRF24L01P_CE_Low>
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000c72:	2101      	movs	r1, #1
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 fa52 	bl	800111e <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8000c7a:	f107 030f 	add.w	r3, r7, #15
 8000c7e:	461a      	mov	r2, r3
 8000c80:	2107      	movs	r1, #7
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fd8c 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fe9f 	bl	80019cc <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	761a      	strb	r2, [r3, #24]
		nRF->MaxReIRQ = 1;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_nRF24L01P_TransmitPacketACK>:

	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_TransmitPacketACK(nRF24L01P *nRF, uint8_t *Data, nRF_DATA_PIPE Pipe)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71fb      	strb	r3, [r7, #7]
	nRF->Busy = 1;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	761a      	strb	r2, [r3, #24]

	HAL_nRF24L01P_CE_Low(nRF);
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f000 fe96 	bl	80019ec <HAL_nRF24L01P_CE_Low>
	HAL_nRF24L01P_TXRX(nRF, nRF_STATE_TX);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 fa2b 	bl	800111e <HAL_nRF24L01P_TXRX>
	HAL_nRF24L01P_WriteTXPayloadACK(nRF, Data, Pipe);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f000 fd19 	bl	8001706 <HAL_nRF24L01P_WriteTXPayloadACK>
	HAL_nRF24L01P_CE_High(nRF);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 fe79 	bl	80019cc <HAL_nRF24L01P_CE_High>

	//while(nRF->Busy);	// TODO: Add *timeout* functionality
	while(nRF->Busy)
 8000cda:	e002      	b.n	8000ce2 <HAL_nRF24L01P_TransmitPacketACK+0x3c>
		DWT_Delay(10);
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f7ff fc15 	bl	800050c <DWT_Delay>
	while(nRF->Busy)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	7e1b      	ldrb	r3, [r3, #24]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f8      	bne.n	8000cdc <HAL_nRF24L01P_TransmitPacketACK+0x36>

	return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_nRF24L01P_SetPRXWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXWidth(nRF24L01P *nRF, nRF_PRX_WIDTH Width, nRF_DATA_PIPE Pipe)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regAddr, regData;
	regData = Width & 0x3F;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	73bb      	strb	r3, [r7, #14]
	/* ---- Pre Process ---- */
	switch(Pipe)
 8000d0e:	78bb      	ldrb	r3, [r7, #2]
 8000d10:	2b05      	cmp	r3, #5
 8000d12:	d821      	bhi.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x64>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <HAL_nRF24L01P_SetPRXWidth+0x28>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d35 	.word	0x08000d35
 8000d20:	08000d3b 	.word	0x08000d3b
 8000d24:	08000d41 	.word	0x08000d41
 8000d28:	08000d47 	.word	0x08000d47
 8000d2c:	08000d4d 	.word	0x08000d4d
 8000d30:	08000d53 	.word	0x08000d53
	{
		case 0: //P0
			regAddr = nRF_RX_PW_P0;
 8000d34:	2311      	movs	r3, #17
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e010      	b.n	8000d5c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 1: //P1
			regAddr = nRF_RX_PW_P1;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e00d      	b.n	8000d5c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 2: //P2
			regAddr = nRF_RX_PW_P2;
 8000d40:	2313      	movs	r3, #19
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	e00a      	b.n	8000d5c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 3: //P3
			regAddr = nRF_RX_PW_P3;
 8000d46:	2314      	movs	r3, #20
 8000d48:	73fb      	strb	r3, [r7, #15]
		break;
 8000d4a:	e007      	b.n	8000d5c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 4: //P4
			regAddr = nRF_RX_PW_P4;
 8000d4c:	2315      	movs	r3, #21
 8000d4e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d50:	e004      	b.n	8000d5c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 5: //P5
			regAddr = nRF_RX_PW_P5;
 8000d52:	2316      	movs	r3, #22
 8000d54:	73fb      	strb	r3, [r7, #15]
		break;
 8000d56:	e001      	b.n	8000d5c <HAL_nRF24L01P_SetPRXWidth+0x68>
		default:
			return HAL_ERROR;		
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e00c      	b.n	8000d76 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, regAddr, &regData)  != HAL_OK)
 8000d5c:	f107 020e 	add.w	r2, r7, #14
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 fd1b 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_nRF24L01P_SetPRXWidth+0x80>
	{
		return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop

08000d80 <HAL_nRF24L01P_SetPTXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPTXAddress(nRF24L01P *nRF, uint8_t *pRegData)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + nRF_TX_ADDR, pRegData, Zero, 5) != HAL_OK)
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2205      	movs	r2, #5
 8000d90:	9200      	str	r2, [sp, #0]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	2130      	movs	r1, #48	; 0x30
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 fd3c 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_nRF24L01P_SetPTXAddress+0x26>
	{
		return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_nRF24L01P_SetPTXAddress+0x28>
	}
	return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_nRF24L01P_SetPRXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXAddress(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	uint8_t Size;
	uint8_t regAddr;
	/* ---- Pre Process ---- */
	switch(Pipe)
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d82d      	bhi.n	8000e20 <HAL_nRF24L01P_SetPRXAddress+0x70>
 8000dc4:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <HAL_nRF24L01P_SetPRXAddress+0x1c>)
 8000dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dca:	bf00      	nop
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000def 	.word	0x08000def
 8000dd4:	08000df9 	.word	0x08000df9
 8000dd8:	08000e03 	.word	0x08000e03
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000e17 	.word	0x08000e17
	{
		case 0: //P0
			Size = 5;
 8000de4:	2305      	movs	r3, #5
 8000de6:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P0;
 8000de8:	230a      	movs	r3, #10
 8000dea:	75bb      	strb	r3, [r7, #22]
		break;
 8000dec:	e01a      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 1: //P1
			Size = 5;
 8000dee:	2305      	movs	r3, #5
 8000df0:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P1;
 8000df2:	230b      	movs	r3, #11
 8000df4:	75bb      	strb	r3, [r7, #22]
		break;
 8000df6:	e015      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 2: //P2
			Size = 1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P2;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	75bb      	strb	r3, [r7, #22]
		break;
 8000e00:	e010      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 3: //P3
			Size = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P3;
 8000e06:	230d      	movs	r3, #13
 8000e08:	75bb      	strb	r3, [r7, #22]
		break;
 8000e0a:	e00b      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 4: //P4
			Size = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P4;
 8000e10:	230e      	movs	r3, #14
 8000e12:	75bb      	strb	r3, [r7, #22]
		break;
 8000e14:	e006      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 5: //P5
			Size = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P5;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	75bb      	strb	r3, [r7, #22]
		break;
 8000e1e:	e001      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		default:
			return HAL_ERROR;		
 8000e20:	2301      	movs	r3, #1
 8000e22:	e011      	b.n	8000e48 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, Zero, Size) != HAL_OK)
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	3320      	adds	r3, #32
 8000e28:	b2d9      	uxtb	r1, r3
 8000e2a:	f107 0210 	add.w	r2, r7, #16
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4613      	mov	r3, r2
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 fcec 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_nRF24L01P_SetPRXAddress+0x96>
	{
		return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_nRF24L01P_DPLPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_DPLPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE DPL_State)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	70bb      	strb	r3, [r7, #2]
		/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8000e60:	f107 030f 	add.w	r3, r7, #15
 8000e64:	461a      	mov	r2, r3
 8000e66:	211c      	movs	r1, #28
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fcb7 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_nRF24L01P_DPLPipe+0x28>
	{
		return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e028      	b.n	8000eca <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	
	if(DPL_State)
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_nRF24L01P_DPLPipe+0x46>
	{
		regValue |= (1 << Pipe);
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	2201      	movs	r2, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e00c      	b.n	8000eb0 <HAL_nRF24L01P_DPLPipe+0x60>
	} else {
		regValue &= ~(1 << Pipe);
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8000eb0:	f107 030f 	add.w	r3, r7, #15
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	211c      	movs	r1, #28
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 fc71 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_nRF24L01P_DPLPipe+0x78>
	{
		return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_nRF24L01P_DynPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_DynPayload(nRF24L01P *nRF, nRF_STATE DPL_State)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000ede:	f107 030f 	add.w	r3, r7, #15
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	211d      	movs	r1, #29
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fc78 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_nRF24L01P_DynPayload+0x24>
	{
		return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e01a      	b.n	8000f2c <HAL_nRF24L01P_DynPayload+0x5a>
	}
	
	if(DPL_State)
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_nRF24L01P_DynPayload+0x36>
	{
		regValue |= (1 << 2);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e004      	b.n	8000f12 <HAL_nRF24L01P_DynPayload+0x40>
	} else {
		regValue &= ~(1 << 2);
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f023 0304 	bic.w	r3, r3, #4
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000f12:	f107 030f 	add.w	r3, r7, #15
 8000f16:	461a      	mov	r2, r3
 8000f18:	211d      	movs	r1, #29
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fc40 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_nRF24L01P_DynPayload+0x58>
	{
		return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_nRF24L01P_DynPayload+0x5a>
	}
	return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_nRF24L01P_ACKPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ACKPayload(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000f40:	f107 030f 	add.w	r3, r7, #15
 8000f44:	461a      	mov	r2, r3
 8000f46:	211d      	movs	r1, #29
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fc47 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_nRF24L01P_ACKPayload+0x24>
	{
		return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e01a      	b.n	8000f8e <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	
	if(ACK_State)
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_nRF24L01P_ACKPayload+0x36>
	{
		regValue |= (1 << 1);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_nRF24L01P_ACKPayload+0x40>
	} else {
		regValue &= ~(1 << 1);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f023 0302 	bic.w	r3, r3, #2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	461a      	mov	r2, r3
 8000f7a:	211d      	movs	r1, #29
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fc0f 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_nRF24L01P_ACKPayload+0x58>
	{
		return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_nRF24L01P_DynACK>:

HAL_StatusTypeDef HAL_nRF24L01P_DynACK(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	211d      	movs	r1, #29
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fc16 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_nRF24L01P_DynACK+0x24>
	{
		return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e01a      	b.n	8000ff0 <HAL_nRF24L01P_DynACK+0x5a>
	}
	
	if(ACK_State)
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <HAL_nRF24L01P_DynACK+0x36>
	{
		regValue |= (1 << 0);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e004      	b.n	8000fd6 <HAL_nRF24L01P_DynACK+0x40>
	} else {
		regValue &= ~(1 << 0);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000fd6:	f107 030f 	add.w	r3, r7, #15
 8000fda:	461a      	mov	r2, r3
 8000fdc:	211d      	movs	r1, #29
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fbde 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_nRF24L01P_DynACK+0x58>
	{
		return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_nRF24L01P_DynACK+0x5a>
	}
	return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_nRF24L01P_MaxReTransmitIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_MaxReTransmitIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	461a      	mov	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fbe5 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_nRF24L01P_MaxReTransmitIRQ+0x24>
	{
		return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e01a      	b.n	8001052 <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	
	if(IRQ_State)
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_nRF24L01P_MaxReTransmitIRQ+0x36>
	{
		regValue &= ~(1 << 4);
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f023 0310 	bic.w	r3, r3, #16
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e004      	b.n	8001038 <HAL_nRF24L01P_MaxReTransmitIRQ+0x40>
	} else {
		regValue |= (1 << 4);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	461a      	mov	r2, r3
 800103e:	2100      	movs	r1, #0
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fbad 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_nRF24L01P_MaxReTransmitIRQ+0x58>
	{
		return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_nRF24L01P_TXDataSentIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_TXDataSentIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001066:	f107 030f 	add.w	r3, r7, #15
 800106a:	461a      	mov	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fbb4 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_nRF24L01P_TXDataSentIRQ+0x24>
	{
		return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e01a      	b.n	80010b4 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	
	if(IRQ_State)
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_nRF24L01P_TXDataSentIRQ+0x36>
	{
		regValue &= ~(1 << 5);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f023 0320 	bic.w	r3, r3, #32
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e004      	b.n	800109a <HAL_nRF24L01P_TXDataSentIRQ+0x40>
	} else {
		regValue |= (1 << 5);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fb7c 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_nRF24L01P_TXDataSentIRQ+0x58>
	{
		return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_nRF24L01P_RXDataReadyIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_RXDataReadyIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80010c8:	f107 030f 	add.w	r3, r7, #15
 80010cc:	461a      	mov	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fb83 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_nRF24L01P_RXDataReadyIRQ+0x24>
	{
		return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e01a      	b.n	8001116 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	
	if(IRQ_State)
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_nRF24L01P_RXDataReadyIRQ+0x36>
	{
		regValue &= ~(1 << 6);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e004      	b.n	80010fc <HAL_nRF24L01P_RXDataReadyIRQ+0x40>
	} else {
		regValue |= (1 << 6);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80010fc:	f107 030f 	add.w	r3, r7, #15
 8001100:	461a      	mov	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fb4b 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_nRF24L01P_RXDataReadyIRQ+0x58>
	{
		return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_nRF24L01P_TXRX>:

HAL_StatusTypeDef HAL_nRF24L01P_TXRX(nRF24L01P *nRF, nRF_TXRX_STATE TxRx_State)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800112a:	f107 030f 	add.w	r3, r7, #15
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fb52 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_nRF24L01P_TXRX+0x24>
	{
		return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e020      	b.n	8001184 <HAL_nRF24L01P_TXRX+0x66>
	}
	
	if(TxRx_State)
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_nRF24L01P_TXRX+0x3c>
	{
		regValue |= (1);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_TX;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	721a      	strb	r2, [r3, #8]
 8001158:	e007      	b.n	800116a <HAL_nRF24L01P_TXRX+0x4c>
	} else {
		regValue &= ~(1);
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_RX;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	721a      	strb	r2, [r3, #8]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800116a:	f107 030f 	add.w	r3, r7, #15
 800116e:	461a      	mov	r2, r3
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fb14 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_nRF24L01P_TXRX+0x64>
	{
		return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_nRF24L01P_TXRX+0x66>
	}
	return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_nRF24L01P_PowerUP>:

HAL_StatusTypeDef HAL_nRF24L01P_PowerUP(nRF24L01P *nRF, nRF_STATE Power)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001198:	f107 030f 	add.w	r3, r7, #15
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fb1b 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_nRF24L01P_PowerUP+0x24>
	{
		return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e01a      	b.n	80011e6 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	
	if(Power)
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_nRF24L01P_PowerUP+0x36>
	{
		regValue |= (1 << 1);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e004      	b.n	80011cc <HAL_nRF24L01P_PowerUP+0x40>
	} else {
		regValue &= ~(1 << 1);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f023 0302 	bic.w	r3, r3, #2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fae3 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_nRF24L01P_PowerUP+0x58>
	{
		return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_nRF24L01P_SetCRCWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetCRCWidth(nRF24L01P *nRF, nRF_CRC_WIDTH CRC_Width)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 faea 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_nRF24L01P_SetCRCWidth+0x24>
	{
		return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e01a      	b.n	8001248 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	
	if(CRC_Width)
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_nRF24L01P_SetCRCWidth+0x36>
	{
		regValue |= (1 << 2);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e004      	b.n	800122e <HAL_nRF24L01P_SetCRCWidth+0x40>
	} else {
		regValue &= ~(1 << 2);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800122e:	f107 030f 	add.w	r3, r7, #15
 8001232:	461a      	mov	r2, r3
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fab2 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_nRF24L01P_SetCRCWidth+0x58>
	{
		return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_nRF24L01P_CRC>:

HAL_StatusTypeDef HAL_nRF24L01P_CRC(nRF24L01P *nRF, nRF_STATE CRC_State)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800125c:	f107 030f 	add.w	r3, r7, #15
 8001260:	461a      	mov	r2, r3
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fab9 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_nRF24L01P_CRC+0x24>
	{
		return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e01a      	b.n	80012aa <HAL_nRF24L01P_CRC+0x5a>
	}
	
	if(CRC_State)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_nRF24L01P_CRC+0x36>
	{
		regValue |= (1 << 3);
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e004      	b.n	8001290 <HAL_nRF24L01P_CRC+0x40>
	} else {
		regValue &= ~(1 << 3);
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f023 0308 	bic.w	r3, r3, #8
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001290:	f107 030f 	add.w	r3, r7, #15
 8001294:	461a      	mov	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fa81 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_nRF24L01P_CRC+0x58>
	{
		return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_nRF24L01P_CRC+0x5a>
	}
	return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_nRF24L01P_AutoACK>:

HAL_StatusTypeDef HAL_nRF24L01P_AutoACK(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE ACK_State)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 80012c2:	f107 030f 	add.w	r3, r7, #15
 80012c6:	461a      	mov	r2, r3
 80012c8:	2101      	movs	r1, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa86 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_nRF24L01P_AutoACK+0x28>
	{
		return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e02c      	b.n	8001334 <HAL_nRF24L01P_AutoACK+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_AA reg's 6. and 7. bits are Reserved
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012e0:	70fb      	strb	r3, [r7, #3]
	if(ACK_State)
 80012e2:	78bb      	ldrb	r3, [r7, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_nRF24L01P_AutoACK+0x4e>
	{
		regValue |= (1 << Pipe); //nRF_EN_AA reg is Configured
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	2201      	movs	r2, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e00c      	b.n	800131a <HAL_nRF24L01P_AutoACK+0x68>
	} else {
		regValue &= ~(1 << Pipe); //nRF_EN_AA reg is Configured		
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2201      	movs	r2, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	b25b      	sxtb	r3, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	b25a      	sxtb	r2, r3
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 800131a:	f107 030f 	add.w	r3, r7, #15
 800131e:	461a      	mov	r2, r3
 8001320:	2101      	movs	r1, #1
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fa3c 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_nRF24L01P_AutoACK+0x80>
	{
		return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_nRF24L01P_AutoACK+0x82>
	}
	return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_nRF24L01P_RXPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_RXPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE Pipe_State)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
 8001348:	4613      	mov	r3, r2
 800134a:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 800134c:	f107 030f 	add.w	r3, r7, #15
 8001350:	461a      	mov	r2, r3
 8001352:	2102      	movs	r1, #2
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fa41 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_nRF24L01P_RXPipe+0x28>
	{
		return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e02c      	b.n	80013be <HAL_nRF24L01P_RXPipe+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_RXADDR reg's 7. bit is Reserved
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800136a:	70fb      	strb	r3, [r7, #3]
	if(Pipe_State)
 800136c:	78bb      	ldrb	r3, [r7, #2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_nRF24L01P_RXPipe+0x4e>
	{
		regValue |= (1 << Pipe);
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	2201      	movs	r2, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	b25a      	sxtb	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b25b      	sxtb	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e00c      	b.n	80013a4 <HAL_nRF24L01P_RXPipe+0x68>
	} else {
		regValue &= ~(1 << Pipe);
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	2201      	movs	r2, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	b25b      	sxtb	r3, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	b25a      	sxtb	r2, r3
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4013      	ands	r3, r2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73fb      	strb	r3, [r7, #15]
	} //nRF_EN_RXADDR reg is Configured
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 80013a4:	f107 030f 	add.w	r3, r7, #15
 80013a8:	461a      	mov	r2, r3
 80013aa:	2102      	movs	r1, #2
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f9f7 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_nRF24L01P_RXPipe+0x80>
	{
		return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_nRF24L01P_RXPipe+0x82>
	}
	return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_nRF24L01P_SetAddressWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetAddressWidth(nRF24L01P *nRF, nRF_ADDR_WIDTH AddrWidth)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 80013d2:	f107 030f 	add.w	r3, r7, #15
 80013d6:	461a      	mov	r2, r3
 80013d8:	2103      	movs	r1, #3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f9fe 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_nRF24L01P_SetAddressWidth+0x24>
	{
		return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e01a      	b.n	8001420 <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	
	AddrWidth &= (0x03);
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xFC); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Cleared
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	f023 0303 	bic.w	r3, r3, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	73fb      	strb	r3, [r7, #15]
	regValue |= (AddrWidth); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Configured
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	4313      	orrs	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	461a      	mov	r2, r3
 800140c:	2103      	movs	r1, #3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f9c6 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_nRF24L01P_SetAddressWidth+0x58>
	{
		return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_nRF24L01P_SetRetransmissionDelay>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionDelay(nRF24L01P *nRF, nRF_RETX_DELAY Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8001434:	f107 030f 	add.w	r3, r7, #15
 8001438:	461a      	mov	r2, r3
 800143a:	2104      	movs	r1, #4
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f9cd 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_nRF24L01P_SetRetransmissionDelay+0x24>
	{
		return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e01e      	b.n	800148a <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	
	Delay &= (0x0F);
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	70fb      	strb	r3, [r7, #3]
	regValue &= (0x0F); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Cleared
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	b2db      	uxtb	r3, r3
 800145c:	73fb      	strb	r3, [r7, #15]
	regValue |= (Delay << 4); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Configured
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	b25a      	sxtb	r2, r3
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8001470:	f107 030f 	add.w	r3, r7, #15
 8001474:	461a      	mov	r2, r3
 8001476:	2104      	movs	r1, #4
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f991 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_nRF24L01P_SetRetransmissionDelay+0x60>
	{
		return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_nRF24L01P_SetRetransmissionCount>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionCount(nRF24L01P *nRF, nRF_RETX_COUNT Count)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 800149e:	f107 030f 	add.w	r3, r7, #15
 80014a2:	461a      	mov	r2, r3
 80014a4:	2104      	movs	r1, #4
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f998 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_nRF24L01P_SetRetransmissionCount+0x24>
	{
		return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e01a      	b.n	80014ec <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	
	Count &= (0x0F);
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xF0); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Cleared
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	f023 030f 	bic.w	r3, r3, #15
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	73fb      	strb	r3, [r7, #15]
	regValue |= (Count); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Configured
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 80014d2:	f107 030f 	add.w	r3, r7, #15
 80014d6:	461a      	mov	r2, r3
 80014d8:	2104      	movs	r1, #4
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f960 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_nRF24L01P_SetRetransmissionCount+0x58>
	{
		return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_nRF24L01P_SetRFChannel>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRFChannel(nRF24L01P *nRF, uint8_t Channel)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
	/* ---- Pre Process ---- */
	Channel &= 0x7F;	// nRF_RF_CH 7. bit is RESERVED
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001506:	b2db      	uxtb	r3, r3
 8001508:	70fb      	strb	r3, [r7, #3]
										// Freq. = (2400 + "Channel" Value) MHz 
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_CH, &Channel) != HAL_OK)
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	461a      	mov	r2, r3
 800150e:	2105      	movs	r1, #5
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f945 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_nRF24L01P_SetRFChannel+0x2c>
	{
		return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_nRF24L01P_SetRFChannel+0x2e>
	}
	return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_nRF24L01P_ClearInterrupts>:

HAL_StatusTypeDef HAL_nRF24L01P_ClearInterrupts(nRF24L01P *nRF)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8001532:	f107 030f 	add.w	r3, r7, #15
 8001536:	461a      	mov	r2, r3
 8001538:	2107      	movs	r1, #7
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f94e 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_nRF24L01P_ClearInterrupts+0x20>
	{
		return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e011      	b.n	800156e <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	
	regValue |= (0x07 << 4); //nRF_STATUS reg's 4.,5. and 6. bits are RESET
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001550:	b2db      	uxtb	r3, r3
 8001552:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8001554:	f107 030f 	add.w	r3, r7, #15
 8001558:	461a      	mov	r2, r3
 800155a:	2107      	movs	r1, #7
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f91f 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_nRF24L01P_ClearInterrupts+0x42>
	{
		return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_nRF24L01P_SetDataRate>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetDataRate(nRF24L01P *nRF, nRF_DATA_RATE Rate)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 8001582:	f107 030f 	add.w	r3, r7, #15
 8001586:	461a      	mov	r2, r3
 8001588:	2106      	movs	r1, #6
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f926 	bl	80017dc <HAL_nRF24L01P_ReadRegister>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_nRF24L01P_SetDataRate+0x24>
	{
		return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e038      	b.n	800160c <HAL_nRF24L01P_SetDataRate+0x96>
	}
	switch(Rate)
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d01b      	beq.n	80015d8 <HAL_nRF24L01P_SetDataRate+0x62>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	dc24      	bgt.n	80015ee <HAL_nRF24L01P_SetDataRate+0x78>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00c      	beq.n	80015c2 <HAL_nRF24L01P_SetDataRate+0x4c>
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d120      	bne.n	80015ee <HAL_nRF24L01P_SetDataRate+0x78>
	{
		case nRF_DATA_RATE_250KBPS:
			regValue |=  (0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is SET
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f043 0320 	orr.w	r3, r3, #32
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	f023 0308 	bic.w	r3, r3, #8
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
		break;
 80015c0:	e017      	b.n	80015f2 <HAL_nRF24L01P_SetDataRate+0x7c>
		case nRF_DATA_RATE_1MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	f023 0320 	bic.w	r3, r3, #32
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	f023 0308 	bic.w	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	73fb      	strb	r3, [r7, #15]
		break;
 80015d6:	e00c      	b.n	80015f2 <HAL_nRF24L01P_SetDataRate+0x7c>
		case nRF_DATA_RATE_2MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f023 0320 	bic.w	r3, r3, #32
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	73fb      	strb	r3, [r7, #15]
			regValue |=  (0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is SET
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	73fb      	strb	r3, [r7, #15]
		break;
 80015ec:	e001      	b.n	80015f2 <HAL_nRF24L01P_SetDataRate+0x7c>
		default:
			return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00c      	b.n	800160c <HAL_nRF24L01P_SetDataRate+0x96>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 80015f2:	f107 030f 	add.w	r3, r7, #15
 80015f6:	461a      	mov	r2, r3
 80015f8:	2106      	movs	r1, #6
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8d0 	bl	80017a0 <HAL_nRF24L01P_WriteRegister>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_nRF24L01P_SetDataRate+0x94>
	{
		return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_nRF24L01P_SetDataRate+0x96>
	}
	return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_nRF24L01P_FlushTX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushTX(nRF24L01P *nRF)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_TX, &Zero, &Zero, 0) != HAL_OK)
 8001620:	f107 030f 	add.w	r3, r7, #15
 8001624:	f107 020f 	add.w	r2, r7, #15
 8001628:	2100      	movs	r1, #0
 800162a:	9100      	str	r1, [sp, #0]
 800162c:	21e1      	movs	r1, #225	; 0xe1
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8f0 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_nRF24L01P_FlushTX+0x2a>
	{
		return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_nRF24L01P_FlushTX+0x2c>
	}
	return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_nRF24L01P_FlushRX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushRX(nRF24L01P *nRF)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_RX, &Zero, &Zero, 0) != HAL_OK)
 8001654:	f107 030f 	add.w	r3, r7, #15
 8001658:	f107 020f 	add.w	r2, r7, #15
 800165c:	2100      	movs	r1, #0
 800165e:	9100      	str	r1, [sp, #0]
 8001660:	21e2      	movs	r1, #226	; 0xe2
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f8d6 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_nRF24L01P_FlushRX+0x2a>
	{
		return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_nRF24L01P_FlushRX+0x2c>
	}
	return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_nRF24L01P_ReadRXPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRXPayload(nRF24L01P *nRF, uint8_t *pRegData)
{
 800167c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001680:	b087      	sub	sp, #28
 8001682:	af02      	add	r7, sp, #8
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	466b      	mov	r3, sp
 800168a:	461e      	mov	r6, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7a99      	ldrb	r1, [r3, #10]
 8001690:	460b      	mov	r3, r1
 8001692:	3b01      	subs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	b2cb      	uxtb	r3, r1
 8001698:	2200      	movs	r2, #0
 800169a:	4698      	mov	r8, r3
 800169c:	4691      	mov	r9, r2
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b2:	b2cb      	uxtb	r3, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	461c      	mov	r4, r3
 80016b8:	4615      	mov	r5, r2
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	00eb      	lsls	r3, r5, #3
 80016c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	460b      	mov	r3, r1
 80016cc:	3307      	adds	r3, #7
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	ebad 0d03 	sub.w	sp, sp, r3
 80016d6:	ab02      	add	r3, sp, #8
 80016d8:	3300      	adds	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_RX_PAYLOAD, Zero, pRegData, nRF->PayloadWidth) != HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7a9b      	ldrb	r3, [r3, #10]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	2161      	movs	r1, #97	; 0x61
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f893 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_nRF24L01P_ReadRXPayload+0x7c>
	{
		return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_nRF24L01P_ReadRXPayload+0x7e>
	}
	return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	46b5      	mov	sp, r6
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001706 <HAL_nRF24L01P_WriteTXPayloadACK>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_WriteTXPayloadACK(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 8001706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	466b      	mov	r3, sp
 8001718:	461e      	mov	r6, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	7a99      	ldrb	r1, [r3, #10]
 800171e:	460b      	mov	r3, r1
 8001720:	3b01      	subs	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	b2cb      	uxtb	r3, r1
 8001726:	2200      	movs	r2, #0
 8001728:	4698      	mov	r8, r3
 800172a:	4691      	mov	r9, r2
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800173c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001740:	b2cb      	uxtb	r3, r1
 8001742:	2200      	movs	r2, #0
 8001744:	461c      	mov	r4, r3
 8001746:	4615      	mov	r5, r2
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	00eb      	lsls	r3, r5, #3
 8001752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001756:	00e2      	lsls	r2, r4, #3
 8001758:	460b      	mov	r3, r1
 800175a:	3307      	adds	r3, #7
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	ebad 0d03 	sub.w	sp, sp, r3
 8001764:	ab02      	add	r3, sp, #8
 8001766:	3300      	adds	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
	Pipe &= 0x07;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	71fb      	strb	r3, [r7, #7]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_ACK_PAYLOAD + Pipe, pRegData, Zero, nRF->PayloadWidth) != HAL_OK)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	3b58      	subs	r3, #88	; 0x58
 8001776:	b2d9      	uxtb	r1, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	7a9b      	ldrb	r3, [r3, #10]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f846 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_nRF24L01P_WriteTXPayloadACK+0x8c>
	{
		return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_nRF24L01P_WriteTXPayloadACK+0x8e>
	}
	return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	46b5      	mov	sp, r6
}
 8001796:	4618      	mov	r0, r3
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017a0 <HAL_nRF24L01P_WriteRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_WriteRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	460b      	mov	r3, r1
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, &Zero, 1) != HAL_OK)
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	3320      	adds	r3, #32
 80017b6:	b2d9      	uxtb	r1, r3
 80017b8:	f107 0317 	add.w	r3, r7, #23
 80017bc:	2201      	movs	r2, #1
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f826 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_nRF24L01P_WriteRegister+0x32>
	{
		return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_nRF24L01P_WriteRegister+0x34>
	}
	return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_nRF24L01P_ReadRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	460b      	mov	r3, r1
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_REGISTER + regAddr, &Zero, pRegData, 1) != HAL_OK)
 80017ee:	f107 0217 	add.w	r2, r7, #23
 80017f2:	7af9      	ldrb	r1, [r7, #11]
 80017f4:	2301      	movs	r3, #1
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f80a 	bl	8001814 <HAL_nRF24L01P_SendCommand>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_nRF24L01P_ReadRegister+0x2e>
	{
		return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_nRF24L01P_ReadRegister+0x30>
	}
	return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_nRF24L01P_SendCommand>:

HAL_StatusTypeDef HAL_nRF24L01P_SendCommand(nRF24L01P *nRF, uint8_t Command, uint8_t *TxBuffer, uint8_t *RxBuffer, uint8_t Size)
{
 8001814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001818:	b08f      	sub	sp, #60	; 0x3c
 800181a:	af02      	add	r7, sp, #8
 800181c:	6178      	str	r0, [r7, #20]
 800181e:	60fa      	str	r2, [r7, #12]
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	460b      	mov	r3, r1
 8001824:	74fb      	strb	r3, [r7, #19]
 8001826:	466b      	mov	r3, sp
 8001828:	461e      	mov	r6, r3
	/* ---- Local Vars. ---- */
	uint8_t tempTxBuffer[Size + 1];
 800182a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800182e:	1c59      	adds	r1, r3, #1
 8001830:	1e4b      	subs	r3, r1, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
 8001834:	460a      	mov	r2, r1
 8001836:	2300      	movs	r3, #0
 8001838:	603a      	str	r2, [r7, #0]
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	00c3      	lsls	r3, r0, #3
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	00c2      	lsls	r2, r0, #3
 8001852:	460a      	mov	r2, r1
 8001854:	2300      	movs	r3, #0
 8001856:	4692      	mov	sl, r2
 8001858:	469b      	mov	fp, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001866:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800186a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800186e:	460b      	mov	r3, r1
 8001870:	3307      	adds	r3, #7
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	ebad 0d03 	sub.w	sp, sp, r3
 800187a:	ab02      	add	r3, sp, #8
 800187c:	3300      	adds	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t tempRxBuffer[Size + 1];
 8001880:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001884:	1c59      	adds	r1, r3, #1
 8001886:	1e4b      	subs	r3, r1, #1
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	460a      	mov	r2, r1
 800188c:	2300      	movs	r3, #0
 800188e:	4690      	mov	r8, r2
 8001890:	4699      	mov	r9, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a6:	460a      	mov	r2, r1
 80018a8:	2300      	movs	r3, #0
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	00eb      	lsls	r3, r5, #3
 80018b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018bc:	00e2      	lsls	r2, r4, #3
 80018be:	460b      	mov	r3, r1
 80018c0:	3307      	adds	r3, #7
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ca:	ab02      	add	r3, sp, #8
 80018cc:	3300      	adds	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
	/* ---- Pre Process ---- */
	tempTxBuffer[0] = Command;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	7cfa      	ldrb	r2, [r7, #19]
 80018d4:	701a      	strb	r2, [r3, #0]
	tempRxBuffer[0] = 0x00;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80018e2:	e014      	b.n	800190e <HAL_nRF24L01P_SendCommand+0xfa>
	{
		tempTxBuffer[i + 1] = TxBuffer[i]; // Fill tempTxBuffer with Command + All of TxBuffer
 80018e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	441a      	add	r2, r3
 80018ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018f0:	3301      	adds	r3, #1
 80018f2:	7811      	ldrb	r1, [r2, #0]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	54d1      	strb	r1, [r2, r3]
		tempRxBuffer[i + 1] = 0x00;
 80018f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018fc:	3301      	adds	r3, #1
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	2100      	movs	r1, #0
 8001902:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Size; i++)
 8001904:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001908:	3301      	adds	r3, #1
 800190a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800190e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001912:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001916:	429a      	cmp	r2, r3
 8001918:	d3e4      	bcc.n	80018e4 <HAL_nRF24L01P_SendCommand+0xd0>
	}
	/* ---- Fcn Process ---- */
	HAL_nRF24L01P_nSS_Low(nRF); // notSlaveSelect pin is Low
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f000 f846 	bl	80019ac <HAL_nRF24L01P_nSS_Low>
	if(HAL_SPI_TransmitReceive(nRF->hspi, tempTxBuffer, tempRxBuffer, Size + 1, nRF_SPI_TIMEOUT) != HAL_OK)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001928:	b29b      	uxth	r3, r3
 800192a:	3301      	adds	r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	f001 f99c 	bl	8002c74 <HAL_SPI_TransmitReceive>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_nRF24L01P_SendCommand+0x132>
	{
		return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e01c      	b.n	8001980 <HAL_nRF24L01P_SendCommand+0x16c>
	}
	/* ---- PostProcess ---- */
	for(uint8_t i = 0; i < Size; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800194c:	e00e      	b.n	800196c <HAL_nRF24L01P_SendCommand+0x158>
	{
		RxBuffer[i] = tempRxBuffer[i + 1];
 800194e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	440b      	add	r3, r1
 800195c:	69f9      	ldr	r1, [r7, #28]
 800195e:	5c8a      	ldrb	r2, [r1, r2]
 8001960:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 8001962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001966:	3301      	adds	r3, #1
 8001968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800196c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001970:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001974:	429a      	cmp	r2, r3
 8001976:	d3ea      	bcc.n	800194e <HAL_nRF24L01P_SendCommand+0x13a>
	}
	HAL_nRF24L01P_nSS_High(nRF); // notSlaveSelect pin is High
 8001978:	6978      	ldr	r0, [r7, #20]
 800197a:	f000 f807 	bl	800198c <HAL_nRF24L01P_nSS_High>
	return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	46b5      	mov	sp, r6
}
 8001982:	4618      	mov	r0, r3
 8001984:	3734      	adds	r7, #52	; 0x34
 8001986:	46bd      	mov	sp, r7
 8001988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800198c <HAL_nRF24L01P_nSS_High>:

void HAL_nRF24L01P_nSS_High(nRF24L01P *nRF)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_SET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	2201      	movs	r2, #1
 800199e:	4619      	mov	r1, r3
 80019a0:	f000 fc5e 	bl	8002260 <HAL_GPIO_WritePin>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_nRF24L01P_nSS_Low>:
void HAL_nRF24L01P_nSS_Low(nRF24L01P *nRF)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_RESET);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	f000 fc4e 	bl	8002260 <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_nRF24L01P_CE_High>:
void HAL_nRF24L01P_CE_High(nRF24L01P *nRF)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_SET);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	f000 fc3e 	bl	8002260 <HAL_GPIO_WritePin>
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_nRF24L01P_CE_Low>:
void HAL_nRF24L01P_CE_Low(nRF24L01P *nRF)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_RESET);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80019fc:	2200      	movs	r2, #0
 80019fe:	4619      	mov	r1, r3
 8001a00:	f000 fc2e 	bl	8002260 <HAL_GPIO_WritePin>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_SPI_MspInit+0x84>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d12b      	bne.n	8001ad6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ab6:	23e0      	movs	r3, #224	; 0xe0
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001ad2:	f000 fa29 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f89c 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f000 fbbb 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <SystemInit+0x28>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <SystemInit+0x28>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SystemInit+0x28>)
 8001b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b72:	609a      	str	r2, [r3, #8]
#endif
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b8a:	e003      	b.n	8001b94 <LoopCopyDataInit>

08001b8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b92:	3104      	adds	r1, #4

08001b94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b9c:	d3f6      	bcc.n	8001b8c <CopyDataInit>
  ldr  r2, =_sbss
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba0:	e002      	b.n	8001ba8 <LoopFillZerobss>

08001ba2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ba2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba4:	f842 3b04 	str.w	r3, [r2], #4

08001ba8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001baa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bac:	d3f9      	bcc.n	8001ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bae:	f7ff ffd3 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f001 faad 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb6:	f7fe fccf 	bl	8000558 <main>
  bx  lr    
 8001bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bc0:	080031bc 	.word	0x080031bc
  ldr  r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001bcc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001bd0:	20000100 	.word	0x20000100

08001bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_Init+0x40>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_Init+0x40>)
 8001bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_Init+0x40>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 f94f 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f808 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0c:	f7ff fefe 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x54>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x58>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f967 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00e      	b.n	8001c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d80a      	bhi.n	8001c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f000 f92f 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_InitTick+0x5c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x20>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	200000fc 	.word	0x200000fc

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	200000fc 	.word	0x200000fc

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff ffee 	bl	8001ca4 <HAL_GetTick>
 8001cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d005      	beq.n	8001ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_Delay+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff ffde 	bl	8001ca4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d8f7      	bhi.n	8001ce4 <HAL_Delay+0x28>
  {
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e16b      	b.n	800221c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 815a 	bne.w	8002216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00b      	beq.n	8001f82 <HAL_GPIO_Init+0x5a>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d007      	beq.n	8001f82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f76:	2b11      	cmp	r3, #17
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d130      	bne.n	8001fe4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0201 	and.w	r2, r3, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0xfc>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d123      	bne.n	800206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80b4 	beq.w	8002216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b60      	ldr	r3, [pc, #384]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ca:	4a5b      	ldr	r2, [pc, #364]	; (8002238 <HAL_GPIO_Init+0x310>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_GPIO_Init+0x314>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x226>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a51      	ldr	r2, [pc, #324]	; (8002240 <HAL_GPIO_Init+0x318>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x222>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_GPIO_Init+0x31c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x21e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4f      	ldr	r2, [pc, #316]	; (8002248 <HAL_GPIO_Init+0x320>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x21a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4e      	ldr	r2, [pc, #312]	; (800224c <HAL_GPIO_Init+0x324>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x216>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_GPIO_Init+0x328>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x212>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_GPIO_Init+0x32c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_GPIO_Init+0x330>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x20a>
 800212e:	2307      	movs	r3, #7
 8002130:	e00e      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002132:	2308      	movs	r3, #8
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002136:	2306      	movs	r3, #6
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <HAL_GPIO_Init+0x310>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_GPIO_Init+0x334>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_GPIO_Init+0x334>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_GPIO_Init+0x334>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_GPIO_Init+0x334>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_GPIO_Init+0x334>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_GPIO_Init+0x334>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_GPIO_Init+0x334>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_GPIO_Init+0x334>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae90 	bls.w	8001f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40021800 	.word	0x40021800
 8002258:	40021c00 	.word	0x40021c00
 800225c:	40013c00 	.word	0x40013c00

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	401a      	ands	r2, r3
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d104      	bne.n	80022b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	041a      	lsls	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fa88 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e25e      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d075      	beq.n	8002402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	4b88      	ldr	r3, [pc, #544]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b85      	ldr	r3, [pc, #532]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232a:	2b08      	cmp	r3, #8
 800232c:	d112      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	4b7e      	ldr	r3, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05b      	beq.n	8002400 <HAL_RCC_OscConfig+0x108>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d157      	bne.n	8002400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e239      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x74>
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b70      	ldr	r3, [pc, #448]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6f      	ldr	r2, [pc, #444]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6c      	ldr	r2, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 8002390:	4b69      	ldr	r3, [pc, #420]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a68      	ldr	r2, [pc, #416]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc78 	bl	8001ca4 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fc74 	bl	8001ca4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1fe      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b5b      	ldr	r3, [pc, #364]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xc0>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fc64 	bl	8001ca4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fc60 	bl	8001ca4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1ea      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b51      	ldr	r3, [pc, #324]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0xe8>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1be      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4937      	ldr	r1, [pc, #220]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b34      	ldr	r3, [pc, #208]	; (800253c <HAL_RCC_OscConfig+0x244>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff fc19 	bl	8001ca4 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fc15 	bl	8001ca4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e19f      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b28      	ldr	r3, [pc, #160]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4925      	ldr	r1, [pc, #148]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_OscConfig+0x244>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fbf8 	bl	8001ca4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fbf4 	bl	8001ca4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e17e      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d036      	beq.n	8002550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_OscConfig+0x248>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff fbd8 	bl	8001ca4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fbd4 	bl	8001ca4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e15e      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_OscConfig+0x240>)
 800250c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x200>
 8002516:	e01b      	b.n	8002550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_OscConfig+0x248>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff fbc1 	bl	8001ca4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e00e      	b.n	8002544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff fbbd 	bl	8001ca4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d907      	bls.n	8002544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e147      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
 8002538:	40023800 	.word	0x40023800
 800253c:	42470000 	.word	0x42470000
 8002540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	4b88      	ldr	r3, [pc, #544]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ea      	bne.n	8002526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8097 	beq.w	800268c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b7d      	ldr	r3, [pc, #500]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a7c      	ldr	r2, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b77      	ldr	r3, [pc, #476]	; (800276c <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259a:	4b74      	ldr	r3, [pc, #464]	; (800276c <HAL_RCC_OscConfig+0x474>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a73      	ldr	r2, [pc, #460]	; (800276c <HAL_RCC_OscConfig+0x474>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fb7d 	bl	8001ca4 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ae:	f7ff fb79 	bl	8001ca4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e103      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x474>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2ea>
 80025d4:	4b64      	ldr	r3, [pc, #400]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a63      	ldr	r2, [pc, #396]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
 80025e0:	e01c      	b.n	800261c <HAL_RCC_OscConfig+0x324>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x30c>
 80025ea:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0x324>
 8002604:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
 8002610:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a54      	ldr	r2, [pc, #336]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002616:	f023 0304 	bic.w	r3, r3, #4
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fb3e 	bl	8001ca4 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff fb3a 	bl	8001ca4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0c2      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	4b49      	ldr	r3, [pc, #292]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ee      	beq.n	800262c <HAL_RCC_OscConfig+0x334>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7ff fb28 	bl	8001ca4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7ff fb24 	bl	8001ca4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0ac      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ee      	bne.n	8002658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	4a38      	ldr	r2, [pc, #224]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8098 	beq.w	80027c6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d05c      	beq.n	800275c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d141      	bne.n	800272e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_RCC_OscConfig+0x478>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff faf8 	bl	8001ca4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7ff faf4 	bl	8001ca4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e07e      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	491b      	ldr	r1, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x478>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff facd 	bl	8001ca4 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff fac9 	bl	8001ca4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e053      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x416>
 800272c:	e04b      	b.n	80027c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_RCC_OscConfig+0x478>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff fab6 	bl	8001ca4 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff fab2 	bl	8001ca4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e03c      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_RCC_OscConfig+0x470>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x444>
 800275a:	e034      	b.n	80027c6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e02f      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
 8002770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_RCC_OscConfig+0x4d8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	d11c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d115      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7ff f9ee 	bl	8001ca4 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7ff f9ea 	bl	8001ca4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f94e 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	0800319c 	.word	0x0800319c
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b094      	sub	sp, #80	; 0x50
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	2300      	movs	r3, #0
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b0:	2300      	movs	r3, #0
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x40>
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	f200 80e1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x3a>
 80029d2:	e0db      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029d8:	e0db      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029de:	e0d8      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	1a51      	subs	r1, r2, r1
 8002a2e:	6139      	str	r1, [r7, #16]
 8002a30:	4629      	mov	r1, r5
 8002a32:	eb63 0301 	sbc.w	r3, r3, r1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a44:	4659      	mov	r1, fp
 8002a46:	018b      	lsls	r3, r1, #6
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4e:	4651      	mov	r1, sl
 8002a50:	018a      	lsls	r2, r1, #6
 8002a52:	4651      	mov	r1, sl
 8002a54:	ebb2 0801 	subs.w	r8, r2, r1
 8002a58:	4659      	mov	r1, fp
 8002a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a72:	4690      	mov	r8, r2
 8002a74:	4699      	mov	r9, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	eb18 0303 	adds.w	r3, r8, r3
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	462b      	mov	r3, r5
 8002a80:	eb49 0303 	adc.w	r3, r9, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a92:	4629      	mov	r1, r5
 8002a94:	024b      	lsls	r3, r1, #9
 8002a96:	4621      	mov	r1, r4
 8002a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	024a      	lsls	r2, r1, #9
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab0:	f7fd fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4611      	mov	r1, r2
 8002aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	0159      	lsls	r1, r3, #5
 8002ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aea:	0150      	lsls	r0, r2, #5
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4641      	mov	r1, r8
 8002af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b10:	ebb2 040a 	subs.w	r4, r2, sl
 8002b14:	eb63 050b 	sbc.w	r5, r3, fp
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b64:	f7fd fb30 	bl	80001c8 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e056      	b.n	8002c6c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe ff3f 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	ea42 0103 	orr.w	r1, r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	f003 0104 	and.w	r1, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	; 0x30
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c82:	2301      	movs	r3, #1
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_SPI_TransmitReceive+0x26>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e18a      	b.n	8002fb0 <HAL_SPI_TransmitReceive+0x33c>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ca2:	f7fe ffff 	bl	8001ca4 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d00f      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x70>
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cca:	d107      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x68>
 8002cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d003      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ce2:	e15b      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_SPI_TransmitReceive+0x82>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_SPI_TransmitReceive+0x82>
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cfc:	e14e      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	887a      	ldrh	r2, [r7, #2]
 8002d3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d007      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d178      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x10a>
 8002d78:	8b7b      	ldrh	r3, [r7, #26]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d166      	bne.n	8002e4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	881a      	ldrh	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	1c9a      	adds	r2, r3, #2
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002da2:	e053      	b.n	8002e4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d11b      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x176>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x176>
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d113      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d119      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x1b8>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d014      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e2c:	f7fe ff3a 	bl	8001ca4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d807      	bhi.n	8002e4c <HAL_SPI_TransmitReceive+0x1d8>
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d003      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e4a:	e0a7      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1a6      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x130>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1a1      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x130>
 8002e60:	e07c      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x1fc>
 8002e6a:	8b7b      	ldrh	r3, [r7, #26]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d16b      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e96:	e057      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x26c>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <HAL_SPI_TransmitReceive+0x26c>
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d114      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d119      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x2ae>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d014      	beq.n	8002f22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f22:	f7fe febf 	bl	8001ca4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d803      	bhi.n	8002f3a <HAL_SPI_TransmitReceive+0x2c6>
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d102      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x2cc>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f46:	e029      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1a2      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x224>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d19d      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f893 	bl	800308c <SPI_EndRxTxTransaction>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f78:	e010      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	e000      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3730      	adds	r7, #48	; 0x30
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc8:	e04c      	b.n	8003064 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d048      	beq.n	8003064 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fd2:	f7fe fe67 	bl	8001ca4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d902      	bls.n	8002fe8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d13d      	bne.n	8003064 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003000:	d111      	bne.n	8003026 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300a:	d004      	beq.n	8003016 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d107      	bne.n	8003026 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	d10f      	bne.n	8003050 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e00f      	b.n	8003084 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	429a      	cmp	r2, r3
 8003080:	d1a3      	bne.n	8002fca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <SPI_EndRxTxTransaction+0x7c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <SPI_EndRxTxTransaction+0x80>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0d5b      	lsrs	r3, r3, #21
 80030a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b6:	d112      	bne.n	80030de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff78 	bl	8002fb8 <SPI_WaitFlagStateUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e00f      	b.n	80030fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d0f2      	beq.n	80030de <SPI_EndRxTxTransaction+0x52>
 80030f8:	e000      	b.n	80030fc <SPI_EndRxTxTransaction+0x70>
        break;
 80030fa:	bf00      	nop
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000
 800310c:	165e9f81 	.word	0x165e9f81

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	4d0d      	ldr	r5, [pc, #52]	; (8003148 <__libc_init_array+0x38>)
 8003114:	4c0d      	ldr	r4, [pc, #52]	; (800314c <__libc_init_array+0x3c>)
 8003116:	1b64      	subs	r4, r4, r5
 8003118:	10a4      	asrs	r4, r4, #2
 800311a:	2600      	movs	r6, #0
 800311c:	42a6      	cmp	r6, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	4d0b      	ldr	r5, [pc, #44]	; (8003150 <__libc_init_array+0x40>)
 8003122:	4c0c      	ldr	r4, [pc, #48]	; (8003154 <__libc_init_array+0x44>)
 8003124:	f000 f820 	bl	8003168 <_init>
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	2600      	movs	r6, #0
 800312e:	42a6      	cmp	r6, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	f855 3b04 	ldr.w	r3, [r5], #4
 8003138:	4798      	blx	r3
 800313a:	3601      	adds	r6, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003142:	4798      	blx	r3
 8003144:	3601      	adds	r6, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	080031b4 	.word	0x080031b4
 800314c:	080031b4 	.word	0x080031b4
 8003150:	080031b4 	.word	0x080031b4
 8003154:	080031b8 	.word	0x080031b8

08003158 <memset>:
 8003158:	4402      	add	r2, r0
 800315a:	4603      	mov	r3, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	f803 1b01 	strb.w	r1, [r3], #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
