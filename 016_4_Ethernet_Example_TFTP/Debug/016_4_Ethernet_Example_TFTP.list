
016_4_Ethernet_Example_TFTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dcc  08013d14  08013d14  00023d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ae0  08016ae0  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  08016ae0  08016ae0  00026ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ae8  08016ae8  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ae8  08016ae8  00026ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016aec  08016aec  00026aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08016af0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000996c  200000b4  08016ba4  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20009a20  08016ba4  00039a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5ca  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bbe  00000000  00000000  0004e6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00054270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  00055918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f1aa  00000000  00000000  00056ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a134  00000000  00000000  00086052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc6df  00000000  00000000  000b0186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e0  00000000  00000000  0018c8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013cfc 	.word	0x08013cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	08013cfc 	.word	0x08013cfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <SELECT+0x18>)
 800058e:	f003 fa57 	bl	8003a40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f001 fe9c 	bl	80022d0 <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40020c00 	.word	0x40020c00

080005a0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <DESELECT+0x18>)
 80005aa:	f003 fa49 	bl	8003a40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f001 fe8e 	bl	80022d0 <HAL_Delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020c00 	.word	0x40020c00

080005bc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005c6:	bf00      	nop
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <SPI_TxByte+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d1f8      	bne.n	80005c8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005d6:	1df9      	adds	r1, r7, #7
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2201      	movs	r2, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <SPI_TxByte+0x30>)
 80005de:	f003 ff13 	bl	8004408 <HAL_SPI_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000d8 	.word	0x200000d8

080005f0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005fc:	bf00      	nop
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SPI_TxBuffer+0x30>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b02      	cmp	r3, #2
 800060a:	d1f8      	bne.n	80005fe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <SPI_TxBuffer+0x30>)
 8000614:	f003 fef8 	bl	8004408 <HAL_SPI_Transmit>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000d8 	.word	0x200000d8

08000624 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <SPI_RxByte+0x34>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800063e:	1dba      	adds	r2, r7, #6
 8000640:	1df9      	adds	r1, r7, #7
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <SPI_RxByte+0x34>)
 800064a:	f004 f811 	bl	8004670 <HAL_SPI_TransmitReceive>

	return data;
 800064e:	79bb      	ldrb	r3, [r7, #6]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000d8 	.word	0x200000d8

0800065c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000664:	f7ff ffde 	bl	8000624 <SPI_RxByte>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	701a      	strb	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <SD_ReadyWait+0x30>)
 8000680:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000684:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000686:	f7ff ffcd 	bl	8000624 <SPI_RxByte>
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2bff      	cmp	r3, #255	; 0xff
 8000692:	d003      	beq.n	800069c <SD_ReadyWait+0x24>
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <SD_ReadyWait+0x30>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f4      	bne.n	8000686 <SD_ReadyWait+0xe>

	return res;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000d2 	.word	0x200000d2

080006ac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006b2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006b6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006b8:	f7ff ff72 	bl	80005a0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	e005      	b.n	80006ce <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	f7ff ff7a 	bl	80005bc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	ddf6      	ble.n	80006c2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006d4:	f7ff ff56 	bl	8000584 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006ec:	2395      	movs	r3, #149	; 0x95
 80006ee:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006f0:	463b      	mov	r3, r7
 80006f2:	2106      	movs	r1, #6
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff7b 	bl	80005f0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006fa:	e002      	b.n	8000702 <SD_PowerOn+0x56>
	{
		cnt--;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3b01      	subs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000702:	f7ff ff8f 	bl	8000624 <SPI_RxByte>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d002      	beq.n	8000712 <SD_PowerOn+0x66>
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f4      	bne.n	80006fc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000712:	f7ff ff45 	bl	80005a0 <DESELECT>
	SPI_TxByte(0XFF);
 8000716:	20ff      	movs	r0, #255	; 0xff
 8000718:	f7ff ff50 	bl	80005bc <SPI_TxByte>

	PowerFlag = 1;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <SD_PowerOn+0x80>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000d5 	.word	0x200000d5

08000730 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SD_PowerOff+0x14>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000d5 	.word	0x200000d5

08000748 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <SD_CheckPower+0x14>)
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000d5 	.word	0x200000d5

08000760 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SD_RxDataBlock+0x58>)
 800076c:	22c8      	movs	r2, #200	; 0xc8
 800076e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000770:	f7ff ff58 	bl	8000624 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d103      	bne.n	8000786 <SD_RxDataBlock+0x26>
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <SD_RxDataBlock+0x58>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f4      	bne.n	8000770 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2bfe      	cmp	r3, #254	; 0xfe
 800078a:	d001      	beq.n	8000790 <SD_RxDataBlock+0x30>
 800078c:	2300      	movs	r3, #0
 800078e:	e00f      	b.n	80007b0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff60 	bl	800065c <SPI_RxBytePtr>
	} while(len--);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	603a      	str	r2, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f4      	bne.n	8000790 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007a6:	f7ff ff3d 	bl	8000624 <SPI_RxByte>
	SPI_RxByte();
 80007aa:	f7ff ff3b 	bl	8000624 <SPI_RxByte>

	return TRUE;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000d0 	.word	0x200000d0

080007bc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007cc:	f7ff ff54 	bl	8000678 <SD_ReadyWait>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2bff      	cmp	r3, #255	; 0xff
 80007d4:	d001      	beq.n	80007da <SD_TxDataBlock+0x1e>
 80007d6:	2300      	movs	r3, #0
 80007d8:	e02f      	b.n	800083a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff feed 	bl	80005bc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2bfd      	cmp	r3, #253	; 0xfd
 80007e6:	d020      	beq.n	800082a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff feff 	bl	80005f0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007f2:	f7ff ff17 	bl	8000624 <SPI_RxByte>
		SPI_RxByte();
 80007f6:	f7ff ff15 	bl	8000624 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007fa:	e00b      	b.n	8000814 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007fc:	f7ff ff12 	bl	8000624 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	f003 031f 	and.w	r3, r3, #31
 800080a:	2b05      	cmp	r3, #5
 800080c:	d006      	beq.n	800081c <SD_TxDataBlock+0x60>
			i++;
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	2b40      	cmp	r3, #64	; 0x40
 8000818:	d9f0      	bls.n	80007fc <SD_TxDataBlock+0x40>
 800081a:	e000      	b.n	800081e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800081c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800081e:	bf00      	nop
 8000820:	f7ff ff00 	bl	8000624 <SPI_RxByte>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0fa      	beq.n	8000820 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f003 031f 	and.w	r3, r3, #31
 8000830:	2b05      	cmp	r3, #5
 8000832:	d101      	bne.n	8000838 <SD_TxDataBlock+0x7c>
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	6039      	str	r1, [r7, #0]
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800084e:	f7ff ff13 	bl	8000678 <SD_ReadyWait>
 8000852:	4603      	mov	r3, r0
 8000854:	2bff      	cmp	r3, #255	; 0xff
 8000856:	d001      	beq.n	800085c <SD_SendCmd+0x1a>
 8000858:	23ff      	movs	r3, #255	; 0xff
 800085a:	e042      	b.n	80008e2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff feac 	bl	80005bc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0e1b      	lsrs	r3, r3, #24
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fea6 	bl	80005bc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fea0 	bl	80005bc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe9a 	bl	80005bc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe95 	bl	80005bc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b40      	cmp	r3, #64	; 0x40
 8000896:	d102      	bne.n	800089e <SD_SendCmd+0x5c>
 8000898:	2395      	movs	r3, #149	; 0x95
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e007      	b.n	80008ae <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b48      	cmp	r3, #72	; 0x48
 80008a2:	d102      	bne.n	80008aa <SD_SendCmd+0x68>
 80008a4:	2387      	movs	r3, #135	; 0x87
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e001      	b.n	80008ae <SD_SendCmd+0x6c>
	else crc = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe83 	bl	80005bc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b4c      	cmp	r3, #76	; 0x4c
 80008ba:	d101      	bne.n	80008c0 <SD_SendCmd+0x7e>
 80008bc:	f7ff feb2 	bl	8000624 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008c0:	230a      	movs	r3, #10
 80008c2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008c4:	f7ff feae 	bl	8000624 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da05      	bge.n	80008e0 <SD_SendCmd+0x9e>
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	73bb      	strb	r3, [r7, #14]
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f1      	bne.n	80008c4 <SD_SendCmd+0x82>

	return res;
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SD_disk_initialize+0x14>
 80008fc:	2301      	movs	r3, #1
 80008fe:	e0d1      	b.n	8000aa4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000900:	4b6a      	ldr	r3, [pc, #424]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <SD_disk_initialize+0x2a>
 800090e:	4b67      	ldr	r3, [pc, #412]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	e0c6      	b.n	8000aa4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000916:	f7ff fec9 	bl	80006ac <SD_PowerOn>

	/* slave select */
	SELECT();
 800091a:	f7ff fe33 	bl	8000584 <SELECT>

	/* check disk type */
	type = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000922:	2100      	movs	r1, #0
 8000924:	2040      	movs	r0, #64	; 0x40
 8000926:	f7ff ff8c 	bl	8000842 <SD_SendCmd>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	f040 80a1 	bne.w	8000a74 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000932:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800093a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800093e:	2048      	movs	r0, #72	; 0x48
 8000940:	f7ff ff7f 	bl	8000842 <SD_SendCmd>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d155      	bne.n	80009f6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e00c      	b.n	800096a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000950:	7bfc      	ldrb	r4, [r7, #15]
 8000952:	f7ff fe67 	bl	8000624 <SPI_RxByte>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	f104 0310 	add.w	r3, r4, #16
 800095e:	443b      	add	r3, r7
 8000960:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d9ef      	bls.n	8000950 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d17e      	bne.n	8000a74 <SD_disk_initialize+0x188>
 8000976:	7afb      	ldrb	r3, [r7, #11]
 8000978:	2baa      	cmp	r3, #170	; 0xaa
 800097a:	d17b      	bne.n	8000a74 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800097c:	2100      	movs	r1, #0
 800097e:	2077      	movs	r0, #119	; 0x77
 8000980:	f7ff ff5f 	bl	8000842 <SD_SendCmd>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d807      	bhi.n	800099a <SD_disk_initialize+0xae>
 800098a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800098e:	2069      	movs	r0, #105	; 0x69
 8000990:	f7ff ff57 	bl	8000842 <SD_SendCmd>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d004      	beq.n	80009a4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800099a:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1ec      	bne.n	800097c <SD_disk_initialize+0x90>
 80009a2:	e000      	b.n	80009a6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d062      	beq.n	8000a74 <SD_disk_initialize+0x188>
 80009ae:	2100      	movs	r1, #0
 80009b0:	207a      	movs	r0, #122	; 0x7a
 80009b2:	f7ff ff46 	bl	8000842 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d15b      	bne.n	8000a74 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe2e 	bl	8000624 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SD_disk_initialize+0x104>
 80009ec:	230c      	movs	r3, #12
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0x106>
 80009f0:	2304      	movs	r3, #4
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	e03e      	b.n	8000a74 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009f6:	2100      	movs	r1, #0
 80009f8:	2077      	movs	r0, #119	; 0x77
 80009fa:	f7ff ff22 	bl	8000842 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d808      	bhi.n	8000a16 <SD_disk_initialize+0x12a>
 8000a04:	2100      	movs	r1, #0
 8000a06:	2069      	movs	r0, #105	; 0x69
 8000a08:	f7ff ff1b 	bl	8000842 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d801      	bhi.n	8000a16 <SD_disk_initialize+0x12a>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e000      	b.n	8000a18 <SD_disk_initialize+0x12c>
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d10e      	bne.n	8000a3e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	; 0x77
 8000a24:	f7ff ff0d 	bl	8000842 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d80e      	bhi.n	8000a4c <SD_disk_initialize+0x160>
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2069      	movs	r0, #105	; 0x69
 8000a32:	f7ff ff06 	bl	8000842 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <SD_disk_initialize+0x160>
 8000a3c:	e00c      	b.n	8000a58 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f7ff fefe 	bl	8000842 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1e2      	bne.n	8000a1a <SD_disk_initialize+0x12e>
 8000a54:	e000      	b.n	8000a58 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a56:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d007      	beq.n	8000a70 <SD_disk_initialize+0x184>
 8000a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a64:	2050      	movs	r0, #80	; 0x50
 8000a66:	f7ff feec 	bl	8000842 <SD_SendCmd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SD_disk_initialize+0x188>
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a74:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <SD_disk_initialize+0x1c8>)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a7a:	f7ff fd91 	bl	80005a0 <DESELECT>
	SPI_RxByte();
 8000a7e:	f7ff fdd1 	bl	8000624 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e001      	b.n	8000a9e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a9a:	f7ff fe49 	bl	8000730 <SD_PowerOff>
	}

	return Stat;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200000d0 	.word	0x200000d0
 8000ab4:	200000d4 	.word	0x200000d4

08000ab8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SD_disk_status+0x14>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e002      	b.n	8000ad2 <SD_disk_status+0x1a>
	return Stat;
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SD_disk_status+0x28>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <SD_disk_read+0x1c>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <SD_disk_read+0x20>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e051      	b.n	8000ba8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <SD_disk_read+0xcc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SD_disk_read+0x32>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e048      	b.n	8000ba8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <SD_disk_read+0xd0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <SD_disk_read+0x44>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	025b      	lsls	r3, r3, #9
 8000b26:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b28:	f7ff fd2c 	bl	8000584 <SELECT>

	if (count == 1)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d111      	bne.n	8000b56 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2051      	movs	r0, #81	; 0x51
 8000b36:	f7ff fe84 	bl	8000842 <SD_SendCmd>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d129      	bne.n	8000b94 <SD_disk_read+0xb0>
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f7ff fe0b 	bl	8000760 <SD_RxDataBlock>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d021      	beq.n	8000b94 <SD_disk_read+0xb0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	e01e      	b.n	8000b94 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2052      	movs	r0, #82	; 0x52
 8000b5a:	f7ff fe72 	bl	8000842 <SD_SendCmd>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d117      	bne.n	8000b94 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fdf9 	bl	8000760 <SD_RxDataBlock>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <SD_disk_read+0xa6>
				buff += 512;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b7a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ed      	bne.n	8000b64 <SD_disk_read+0x80>
 8000b88:	e000      	b.n	8000b8c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b8a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	204c      	movs	r0, #76	; 0x4c
 8000b90:	f7ff fe57 	bl	8000842 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b94:	f7ff fd04 	bl	80005a0 <DESELECT>
	SPI_RxByte();
 8000b98:	f7ff fd44 	bl	8000624 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bf14      	ite	ne
 8000ba2:	2301      	movne	r3, #1
 8000ba4:	2300      	moveq	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	200000d4 	.word	0x200000d4

08000bb8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <SD_disk_write+0x1c>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <SD_disk_write+0x20>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e06b      	b.n	8000cb0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bd8:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <SD_disk_write+0x100>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SD_disk_write+0x32>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e062      	b.n	8000cb0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <SD_disk_write+0x100>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SD_disk_write+0x44>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e059      	b.n	8000cb0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <SD_disk_write+0x104>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <SD_disk_write+0x56>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c0e:	f7ff fcb9 	bl	8000584 <SELECT>

	if (count == 1)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d110      	bne.n	8000c3a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	2058      	movs	r0, #88	; 0x58
 8000c1c:	f7ff fe11 	bl	8000842 <SD_SendCmd>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d13a      	bne.n	8000c9c <SD_disk_write+0xe4>
 8000c26:	21fe      	movs	r1, #254	; 0xfe
 8000c28:	68b8      	ldr	r0, [r7, #8]
 8000c2a:	f7ff fdc7 	bl	80007bc <SD_TxDataBlock>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d033      	beq.n	8000c9c <SD_disk_write+0xe4>
			count = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e030      	b.n	8000c9c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <SD_disk_write+0x104>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2077      	movs	r0, #119	; 0x77
 8000c4a:	f7ff fdfa 	bl	8000842 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c4e:	6839      	ldr	r1, [r7, #0]
 8000c50:	2057      	movs	r0, #87	; 0x57
 8000c52:	f7ff fdf6 	bl	8000842 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2059      	movs	r0, #89	; 0x59
 8000c5a:	f7ff fdf2 	bl	8000842 <SD_SendCmd>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11b      	bne.n	8000c9c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c64:	21fc      	movs	r1, #252	; 0xfc
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f7ff fda8 	bl	80007bc <SD_TxDataBlock>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00a      	beq.n	8000c88 <SD_disk_write+0xd0>
				buff += 512;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c78:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1ee      	bne.n	8000c64 <SD_disk_write+0xac>
 8000c86:	e000      	b.n	8000c8a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c88:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c8a:	21fd      	movs	r1, #253	; 0xfd
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fd95 	bl	80007bc <SD_TxDataBlock>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <SD_disk_write+0xe4>
			{
				count = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c9c:	f7ff fc80 	bl	80005a0 <DESELECT>
	SPI_RxByte();
 8000ca0:	f7ff fcc0 	bl	8000624 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf14      	ite	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	2300      	moveq	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200000d4 	.word	0x200000d4

08000cc0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	603a      	str	r2, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SD_disk_ioctl+0x1e>
 8000cda:	2304      	movs	r3, #4
 8000cdc:	e115      	b.n	8000f0a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d124      	bne.n	8000d34 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d012      	beq.n	8000d18 <SD_disk_ioctl+0x58>
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dc1a      	bgt.n	8000d2c <SD_disk_ioctl+0x6c>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <SD_disk_ioctl+0x40>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d006      	beq.n	8000d0c <SD_disk_ioctl+0x4c>
 8000cfe:	e015      	b.n	8000d2c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d00:	f7ff fd16 	bl	8000730 <SD_PowerOff>
			res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0a:	e0fc      	b.n	8000f06 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d0c:	f7ff fcce 	bl	80006ac <SD_PowerOn>
			res = RES_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d16:	e0f6      	b.n	8000f06 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	1c5c      	adds	r4, r3, #1
 8000d1c:	f7ff fd14 	bl	8000748 <SD_CheckPower>
 8000d20:	4603      	mov	r3, r0
 8000d22:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2a:	e0ec      	b.n	8000f06 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d32:	e0e8      	b.n	8000f06 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d34:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <SD_disk_ioctl+0x254>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x86>
 8000d42:	2303      	movs	r3, #3
 8000d44:	e0e1      	b.n	8000f0a <SD_disk_ioctl+0x24a>

		SELECT();
 8000d46:	f7ff fc1d 	bl	8000584 <SELECT>

		switch (ctrl)
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b0d      	cmp	r3, #13
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <SD_disk_ioctl+0x228>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <SD_disk_ioctl+0x98>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000e53 	.word	0x08000e53
 8000d5c:	08000d91 	.word	0x08000d91
 8000d60:	08000e43 	.word	0x08000e43
 8000d64:	08000ee9 	.word	0x08000ee9
 8000d68:	08000ee9 	.word	0x08000ee9
 8000d6c:	08000ee9 	.word	0x08000ee9
 8000d70:	08000ee9 	.word	0x08000ee9
 8000d74:	08000ee9 	.word	0x08000ee9
 8000d78:	08000ee9 	.word	0x08000ee9
 8000d7c:	08000ee9 	.word	0x08000ee9
 8000d80:	08000ee9 	.word	0x08000ee9
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd55 	bl	8000842 <SD_SendCmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a8 	bne.w	8000ef0 <SD_disk_ioctl+0x230>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fcda 	bl	8000760 <SD_RxDataBlock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809e 	beq.w	8000ef0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e40:	e056      	b.n	8000ef0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e50:	e055      	b.n	8000efe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e52:	f7ff fc11 	bl	8000678 <SD_ReadyWait>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14b      	bne.n	8000ef4 <SD_disk_ioctl+0x234>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e62:	e047      	b.n	8000ef4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fceb 	bl	8000842 <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d142      	bne.n	8000ef8 <SD_disk_ioctl+0x238>
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc73 	bl	8000760 <SD_RxDataBlock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03b      	beq.n	8000ef8 <SD_disk_ioctl+0x238>
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e86:	e037      	b.n	8000ef8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fcd9 	bl	8000842 <SD_SendCmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d132      	bne.n	8000efc <SD_disk_ioctl+0x23c>
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fc61 	bl	8000760 <SD_RxDataBlock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02b      	beq.n	8000efc <SD_disk_ioctl+0x23c>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e027      	b.n	8000efc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fcc7 	bl	8000842 <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fbac 	bl	8000624 <SPI_RxByte>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eee:	e006      	b.n	8000efe <SD_disk_ioctl+0x23e>
			break;
 8000ef0:	bf00      	nop
 8000ef2:	e004      	b.n	8000efe <SD_disk_ioctl+0x23e>
			break;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <SD_disk_ioctl+0x23e>
			break;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <SD_disk_ioctl+0x23e>
			break;
 8000efc:	bf00      	nop
		}

		DESELECT();
 8000efe:	f7ff fb4f 	bl	80005a0 <DESELECT>
		SPI_RxByte();
 8000f02:	f7ff fb8f 	bl	8000624 <SPI_RxByte>
	}

	return res;
 8000f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	372c      	adds	r7, #44	; 0x2c
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f001 f966 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f814 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 f8b2 	bl	800108c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000f28:	f003 fe60 	bl	8004bec <MX_LWIP_Init>
  MX_SPI3_Init();
 8000f2c:	f000 f878 	bl	8001020 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000f30:	f003 fdec 	bl	8004b0c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8000f34:	f000 fa92 	bl	800145c <tcp_echoserver_init>
  udp_echoserver_init();
 8000f38:	f001 f8ee 	bl	8002118 <udp_echoserver_init>

  tftpd_init();
 8000f3c:	f001 f81a 	bl	8001f74 <tftpd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000f40:	f003 ff86 	bl	8004e50 <MX_LWIP_Process>
	  HAL_Delay(50);
 8000f44:	2032      	movs	r0, #50	; 0x32
 8000f46:	f001 f9c3 	bl	80022d0 <HAL_Delay>
	  MX_LWIP_Process();
 8000f4a:	e7f9      	b.n	8000f40 <main+0x28>

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f011 fe6e 	bl	8012c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc0:	23a8      	movs	r3, #168	; 0xa8
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fd4f 	bl	8003a74 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 f8c2 	bl	8001164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ffa6 	bl	8003f50 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100a:	f000 f8ab 	bl	8001164 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_SPI3_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <MX_SPI3_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SPI3_Init+0x64>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_SPI3_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_SPI3_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_SPI3_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SPI3_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_SPI3_Init+0x64>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SPI3_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_SPI3_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SPI3_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_SPI3_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_SPI3_Init+0x64>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_SPI3_Init+0x64>)
 8001072:	f003 f965 	bl	8004340 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 f872 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000d8 	.word	0x200000d8
 8001088:	40003c00 	.word	0x40003c00

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <MX_GPIO_Init+0xd0>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_GPIO_Init+0xd0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <MX_GPIO_Init+0xd0>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <MX_GPIO_Init+0xd4>)
 8001134:	f002 fc84 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_GPIO_Init+0xd4>)
 8001150:	f002 fada 	bl	8003708 <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020c00 	.word	0x40020c00

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_SPI_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12c      	bne.n	8001240 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_SPI_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_SPI_MspInit+0x88>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_SPI_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800121e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001230:	2306      	movs	r3, #6
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 800123c:	f002 fa64 	bl	8003708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40003c00 	.word	0x40003c00
 800124c:	40023800 	.word	0x40023800
 8001250:	40020800 	.word	0x40020800

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 fff2 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <_kill+0x20>)
 80012cc:	2216      	movs	r2, #22
 80012ce:	601a      	str	r2, [r3, #0]
	return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20009a10 	.word	0x20009a10

080012e4 <_exit>:

void _exit (int status)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffe5 	bl	80012c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012f6:	e7fe      	b.n	80012f6 <_exit+0x12>

080012f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
	}

return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e009      	b.n	8001358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf1      	blt.n	8001344 <_write+0x12>
	}
	return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_close>:

int _close(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	605a      	str	r2, [r3, #4]
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_isatty>:

int _isatty(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return 1;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x50>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x16>
		heap_end = &end;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <_sbrk+0x50>)
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <_sbrk+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <_sbrk+0x50>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <_sbrk+0x50>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	466a      	mov	r2, sp
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d905      	bls.n	800140a <_sbrk+0x36>
	{
		errno = ENOMEM;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <_sbrk+0x58>)
 8001400:	220c      	movs	r2, #12
 8001402:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	e006      	b.n	8001418 <_sbrk+0x44>
	}

	heap_end += incr;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <_sbrk+0x50>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <_sbrk+0x50>)
 8001414:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20000130 	.word	0x20000130
 8001428:	20009a20 	.word	0x20009a20
 800142c:	20009a10 	.word	0x20009a10

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SystemInit+0x28>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <SystemInit+0x28>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SystemInit+0x28>)
 8001446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144a:	609a      	str	r2, [r3, #8]
#endif
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8001462:	f009 fd7b 	bl	800af5c <tcp_new>
 8001466:	4603      	mov	r3, r0
 8001468:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <tcp_echoserver_init+0x68>)
 800146a:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <tcp_echoserver_init+0x68>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d022      	beq.n	80014ba <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <tcp_echoserver_init+0x68>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2207      	movs	r2, #7
 800147a:	4913      	ldr	r1, [pc, #76]	; (80014c8 <tcp_echoserver_init+0x6c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fcc9 	bl	8009e14 <tcp_bind>
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <tcp_echoserver_init+0x68>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	4618      	mov	r0, r3
 8001496:	f008 fd75 	bl	8009f84 <tcp_listen_with_backlog>
 800149a:	4603      	mov	r3, r0
 800149c:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <tcp_echoserver_init+0x68>)
 800149e:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <tcp_echoserver_init+0x68>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4909      	ldr	r1, [pc, #36]	; (80014cc <tcp_echoserver_init+0x70>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 fdd8 	bl	800b05c <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80014ac:	e005      	b.n	80014ba <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <tcp_echoserver_init+0x68>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	2001      	movs	r0, #1
 80014b6:	f007 f8f7 	bl	80086a8 <memp_free>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000134 	.word	0x20000134
 80014c8:	08016984 	.word	0x08016984
 80014cc:	080014d1 	.word	0x080014d1

080014d0 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	4613      	mov	r3, r2
 80014dc:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80014de:	2101      	movs	r1, #1
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f009 fb49 	bl	800ab78 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80014e6:	200c      	movs	r0, #12
 80014e8:	f006 ff24 	bl	8008334 <mem_malloc>
 80014ec:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01f      	beq.n	8001534 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 800150c:	6939      	ldr	r1, [r7, #16]
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f009 fd2c 	bl	800af6c <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8001514:	490d      	ldr	r1, [pc, #52]	; (800154c <tcp_echoserver_accept+0x7c>)
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f009 fd3a 	bl	800af90 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <tcp_echoserver_accept+0x80>)
 800151e:	68b8      	ldr	r0, [r7, #8]
 8001520:	f009 fd7a 	bl	800b018 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	490b      	ldr	r1, [pc, #44]	; (8001554 <tcp_echoserver_accept+0x84>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f009 fdaf 	bl	800b08c <tcp_poll>
    
    ret_err = ERR_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
 8001532:	e005      	b.n	8001540 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8001534:	6939      	ldr	r1, [r7, #16]
 8001536:	68b8      	ldr	r0, [r7, #8]
 8001538:	f000 f96f 	bl	800181a <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 800153c:	23ff      	movs	r3, #255	; 0xff
 800153e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8001540:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	08001559 	.word	0x08001559
 8001550:	080016a1 	.word	0x080016a1
 8001554:	080016c5 	.word	0x080016c5

08001558 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <tcp_echoserver_recv+0x20>
 800156c:	4b47      	ldr	r3, [pc, #284]	; (800168c <tcp_echoserver_recv+0x134>)
 800156e:	22ad      	movs	r2, #173	; 0xad
 8001570:	4947      	ldr	r1, [pc, #284]	; (8001690 <tcp_echoserver_recv+0x138>)
 8001572:	4848      	ldr	r0, [pc, #288]	; (8001694 <tcp_echoserver_recv+0x13c>)
 8001574:	f011 fb6a 	bl	8012c4c <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2203      	movs	r2, #3
 8001586:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8001590:	69b9      	ldr	r1, [r7, #24]
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f000 f941 	bl	800181a <tcp_echoserver_connection_close>
 8001598:	e007      	b.n	80015aa <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 800159a:	493f      	ldr	r1, [pc, #252]	; (8001698 <tcp_echoserver_recv+0x140>)
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f009 fd19 	bl	800afd4 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 80015a2:	69b9      	ldr	r1, [r7, #24]
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f000 f8e5 	bl	8001774 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	77fb      	strb	r3, [r7, #31]
 80015ae:	e067      	b.n	8001680 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80015b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f007 fe81 	bl	80092cc <pbuf_free>
    }
    ret_err = err;
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	77fb      	strb	r3, [r7, #31]
 80015ce:	e057      	b.n	8001680 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d114      	bne.n	8001602 <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 80015e4:	492c      	ldr	r1, [pc, #176]	; (8001698 <tcp_echoserver_recv+0x140>)
 80015e6:	68b8      	ldr	r0, [r7, #8]
 80015e8:	f009 fcf4 	bl	800afd4 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a2a      	ldr	r2, [pc, #168]	; (800169c <tcp_echoserver_recv+0x144>)
 80015f2:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 80015f4:	69b9      	ldr	r1, [r7, #24]
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f000 f8bc 	bl	8001774 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
 8001600:	e03e      	b.n	8001680 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d119      	bne.n	800163e <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10b      	bne.n	800162a <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a1f      	ldr	r2, [pc, #124]	; (800169c <tcp_echoserver_recv+0x144>)
 800161e:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	68b8      	ldr	r0, [r7, #8]
 8001624:	f000 f8a6 	bl	8001774 <tcp_echoserver_send>
 8001628:	e006      	b.n	8001638 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f007 ff62 	bl	80094fc <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
 800163c:	e020      	b.n	8001680 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d10e      	bne.n	8001664 <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	891b      	ldrh	r3, [r3, #8]
 800164a:	4619      	mov	r1, r3
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f008 fdaf 	bl	800a1b0 <tcp_recved>
    es->p = NULL;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f007 fe37 	bl	80092cc <pbuf_free>
    ret_err = ERR_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	77fb      	strb	r3, [r7, #31]
 8001662:	e00d      	b.n	8001680 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	891b      	ldrh	r3, [r3, #8]
 8001668:	4619      	mov	r1, r3
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f008 fda0 	bl	800a1b0 <tcp_recved>
    es->p = NULL;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f007 fe28 	bl	80092cc <pbuf_free>
    ret_err = ERR_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001680:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08013d14 	.word	0x08013d14
 8001690:	08013d34 	.word	0x08013d34
 8001694:	08013d40 	.word	0x08013d40
 8001698:	08001725 	.word	0x08001725
 800169c:	08013d68 	.word	0x08013d68

080016a0 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f006 fcd6 	bl	8008068 <mem_free>
  }
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d017      	beq.n	8001708 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 80016e0:	490f      	ldr	r1, [pc, #60]	; (8001720 <tcp_echoserver_poll+0x5c>)
 80016e2:	6838      	ldr	r0, [r7, #0]
 80016e4:	f009 fc76 	bl	800afd4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f000 f842 	bl	8001774 <tcp_echoserver_send>
 80016f0:	e007      	b.n	8001702 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d103      	bne.n	8001702 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f000 f88c 	bl	800181a <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e004      	b.n	8001712 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f008 fb77 	bl	8009dfc <tcp_abort>
    ret_err = ERR_ABRT;
 800170e:	23f3      	movs	r3, #243	; 0xf3
 8001710:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08001725 	.word	0x08001725

08001724 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2200      	movs	r2, #0
 800173a:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001744:	490a      	ldr	r1, [pc, #40]	; (8001770 <tcp_echoserver_sent+0x4c>)
 8001746:	68b8      	ldr	r0, [r7, #8]
 8001748:	f009 fc44 	bl	800afd4 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 800174c:	6979      	ldr	r1, [r7, #20]
 800174e:	68b8      	ldr	r0, [r7, #8]
 8001750:	f000 f810 	bl	8001774 <tcp_echoserver_send>
 8001754:	e007      	b.n	8001766 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d103      	bne.n	8001766 <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f000 f85a 	bl	800181a <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	08001725 	.word	0x08001725

08001774 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8001782:	e036      	b.n	80017f2 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6859      	ldr	r1, [r3, #4]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	895a      	ldrh	r2, [r3, #10]
 8001792:	2301      	movs	r3, #1
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f00c fb2b 	bl	800ddf0 <tcp_write>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 800179e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11d      	bne.n	80017e2 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	895b      	ldrh	r3, [r3, #10]
 80017aa:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f007 fe23 	bl	800940c <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80017c6:	6938      	ldr	r0, [r7, #16]
 80017c8:	f007 fd80 	bl	80092cc <pbuf_free>
 80017cc:	4603      	mov	r3, r0
 80017ce:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 80017d0:	7b7b      	ldrb	r3, [r7, #13]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f7      	beq.n	80017c6 <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f008 fce8 	bl	800a1b0 <tcp_recved>
 80017e0:	e007      	b.n	80017f2 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80017e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ea:	d102      	bne.n	80017f2 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80017f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10b      	bne.n	8001812 <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	895a      	ldrh	r2, [r3, #10]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 800180e:	429a      	cmp	r2, r3
 8001810:	d9b8      	bls.n	8001784 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001824:	2100      	movs	r1, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f009 fba0 	bl	800af6c <tcp_arg>
  tcp_sent(tpcb, NULL);
 800182c:	2100      	movs	r1, #0
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f009 fbd0 	bl	800afd4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f009 fbaa 	bl	800af90 <tcp_recv>
  tcp_err(tpcb, NULL);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f009 fbea 	bl	800b018 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f009 fc1f 	bl	800b08c <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	f006 fc07 	bl	8008068 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f008 f9e4 	bl	8009c28 <tcp_close>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <tftp_send_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval error code
  */
err_t tftp_send_message(struct udp_pcb *upcb, const ip_addr_t *to_ip, unsigned short to_port, char *buf, unsigned short buflen)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	80fb      	strh	r3, [r7, #6]
  err_t err;
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, buflen, PBUF_POOL);
 8001878:	8c3b      	ldrh	r3, [r7, #32]
 800187a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800187e:	4619      	mov	r1, r3
 8001880:	2036      	movs	r0, #54	; 0x36
 8001882:	f007 fa3f 	bl	8008d04 <pbuf_alloc>
 8001886:	6178      	str	r0, [r7, #20]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and end transmission */
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <tftp_send_message+0x2c>
    return ERR_MEM;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e013      	b.n	80018bc <tftp_send_message+0x54>

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, buf, buflen);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	8c3a      	ldrh	r2, [r7, #32]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f011 f9bf 	bl	8012c20 <memcpy>

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to_ip, to_port);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f00e fb41 	bl	800ff30 <udp_sendto>
 80018ae:	4603      	mov	r3, r0
 80018b0:	74fb      	strb	r3, [r7, #19]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f007 fd0a 	bl	80092cc <pbuf_free>

  return err;
 80018b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <tftp_construct_error_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval 
  */
int tftp_construct_error_message(char *buf, tftp_errorcode err)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
  int errorlen;
  /* Set the opcode in the 2 first bytes */
  tftp_set_opcode(buf, TFTP_ERROR);
 80018d0:	2105      	movs	r1, #5
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fba9 	bl	800202a <tftp_set_opcode>
  /* Set the errorcode in the 2 second bytes  */
  tftp_set_errorcode(buf, err);
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	4619      	mov	r1, r3
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fbb7 	bl	8002050 <tftp_set_errorcode>
  /* Set the error message in the last bytes */
  tftp_set_errormsg(buf, tftp_errorcode_string[err]);
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <tftp_construct_error_message+0x4c>)
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	4619      	mov	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fbc3 	bl	8002078 <tftp_set_errormsg>
  /* Set the length of the error message  */
  errorlen = strlen(tftp_errorcode_string[err]);
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <tftp_construct_error_message+0x4c>)
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fc68 	bl	80001d0 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

  /* return message size */
  return 4 + errorlen + 1;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3305      	adds	r3, #5
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000008 	.word	0x20000008

08001914 <tftp_send_error_message>:
  * @param  to_port: pointer on remote port  
  * @param  err: tftp error code
  * @retval error value
  */
int tftp_send_error_message(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, tftp_errorcode err)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800191a:	af02      	add	r7, sp, #8
 800191c:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8001920:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 8001924:	6020      	str	r0, [r4, #0]
 8001926:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800192a:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 800192e:	6001      	str	r1, [r0, #0]
 8001930:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001934:	f5a1 7105 	sub.w	r1, r1, #532	; 0x214
 8001938:	600a      	str	r2, [r1, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001940:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8001944:	701a      	strb	r2, [r3, #0]
  char buf[512];
  int error_len;

  /* construct error */
  error_len = tftp_construct_error_message(buf, err);
 8001946:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800194a:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ffb4 	bl	80018c4 <tftp_construct_error_message>
 800195c:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
  /* send error message */
  return tftp_send_message(upcb, to, to_port, buf, error_len);
 8001960:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001964:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001970:	b29b      	uxth	r3, r3
 8001972:	f107 0414 	add.w	r4, r7, #20
 8001976:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800197a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800197e:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8001982:	f5a0 7003 	sub.w	r0, r0, #524	; 0x20c
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4623      	mov	r3, r4
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	6800      	ldr	r0, [r0, #0]
 800198e:	f7ff ff6b 	bl	8001868 <tftp_send_message>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}

0800199e <tftp_send_data_packet>:
  * @param  buflen: buffer length
  * @retval error value
  */
int tftp_send_data_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, unsigned short block,
                          char *buf, int buflen)
{
 800199e:	b590      	push	{r4, r7, lr}
 80019a0:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	f507 7406 	add.w	r4, r7, #536	; 0x218
 80019aa:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 80019ae:	6020      	str	r0, [r4, #0]
 80019b0:	f507 7006 	add.w	r0, r7, #536	; 0x218
 80019b4:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 80019b8:	6001      	str	r1, [r0, #0]
 80019ba:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80019be:	f5a1 7105 	sub.w	r1, r1, #532	; 0x214
 80019c2:	600a      	str	r2, [r1, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019ca:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80019ce:	801a      	strh	r2, [r3, #0]
  char packet[TFTP_DATA_PKT_LEN_MAX]; /* (512+4) bytes */

  /* Set the opcode 3 in the 2 first bytes */
  tftp_set_opcode(packet, TFTP_DATA);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2103      	movs	r1, #3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fb27 	bl	800202a <tftp_set_opcode>
  /* Set the block numero in the 2 second bytes */
  tftp_set_block(packet, block);
 80019dc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019e0:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80019e4:	881a      	ldrh	r2, [r3, #0]
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fb52 	bl	8002096 <tftp_set_block>
  /* Set the data message in the n last bytes */
  tftp_set_data_message(packet, buf, buflen);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80019fa:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fb5d 	bl	80020be <tftp_set_data_message>
  /* Send DATA packet */
  return tftp_send_message(upcb, to, to_port, packet, buflen + 4);
 8001a04:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001a08:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3304      	adds	r3, #4
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f107 0414 	add.w	r4, r7, #20
 8001a1e:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001a22:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001a26:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8001a2a:	f5a0 7003 	sub.w	r0, r0, #524	; 0x20c
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4623      	mov	r3, r4
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	6800      	ldr	r0, [r0, #0]
 8001a36:	f7ff ff17 	bl	8001868 <tftp_send_message>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <tftp_send_ack_packet>:
  * @param  to_port: pointer on remote udp port
  * @param  block: block number
  * @retval error value
  */
int tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, unsigned short block)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b088      	sub	sp, #32
 8001a4a:	af02      	add	r7, sp, #8
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	807b      	strh	r3, [r7, #2]

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

  /* define the first two bytes of the packet */
  tftp_set_opcode(packet, TFTP_ACK);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fae5 	bl	800202a <tftp_set_opcode>
  /* Specify the block number being ACK'd.
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement" */
  tftp_set_block(packet, block);
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fb14 	bl	8002096 <tftp_set_block>

  return tftp_send_message(upcb, to, to_port, packet, TFTP_ACK_PKT_LEN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2104      	movs	r1, #4
 8001a78:	9100      	str	r1, [sp, #0]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff fef3 	bl	8001868 <tftp_send_message>
 8001a82:	4603      	mov	r3, r0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <tftp_cleanup_rd>:
  * @param upcb: pointer on udp pcb
  * @param  args: pointer on a structure of type tftp_connection_args
  * @retval None
  */
void tftp_cleanup_rd(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* close the filesystem */
  f_close(&file_SD);
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <tftp_cleanup_rd+0x44>)
 8001a98:	f006 f8df 	bl	8007c5a <f_close>
  f_mount(NULL, (TCHAR const*)"",0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <tftp_cleanup_rd+0x48>)
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f005 fb57 	bl	8007154 <f_mount>
  /* Free the tftp_connection_args structure reserverd for */
  mem_free(args);
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f006 fade 	bl	8008068 <mem_free>

  /* Disconnect the udp_pcb*/  
  udp_disconnect(upcb);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f00e fceb 	bl	8010488 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f00e fd30 	bl	8010518 <udp_remove>

  udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <tftp_cleanup_rd+0x4c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	4907      	ldr	r1, [pc, #28]	; (8001adc <tftp_cleanup_rd+0x50>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00e fd09 	bl	80104d8 <udp_recv>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000116c 	.word	0x2000116c
 8001ad4:	08013dfc 	.word	0x08013dfc
 8001ad8:	200031cc 	.word	0x200031cc
 8001adc:	08001f4d 	.word	0x08001f4d

08001ae0 <tftp_cleanup_wr>:
  * @param upcb: pointer on udp pcb
  * @param  args: pointer on a structure of type tftp_connection_args
  * @retval None
  */
void tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  /* close the filesystem */
  f_close(&file_CR);
 8001aea:	480e      	ldr	r0, [pc, #56]	; (8001b24 <tftp_cleanup_wr+0x44>)
 8001aec:	f006 f8b5 	bl	8007c5a <f_close>
  f_mount(NULL, (TCHAR const*)"",0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	490d      	ldr	r1, [pc, #52]	; (8001b28 <tftp_cleanup_wr+0x48>)
 8001af4:	2000      	movs	r0, #0
 8001af6:	f005 fb2d 	bl	8007154 <f_mount>
  /* Free the tftp_connection_args structure reserverd for */
  mem_free(args);
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f006 fab4 	bl	8008068 <mem_free>

  /* Disconnect the udp_pcb*/
  udp_disconnect(upcb);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f00e fcc1 	bl	8010488 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f00e fd06 	bl	8010518 <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <tftp_cleanup_wr+0x4c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	4907      	ldr	r1, [pc, #28]	; (8001b30 <tftp_cleanup_wr+0x50>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00e fcdf 	bl	80104d8 <udp_recv>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000219c 	.word	0x2000219c
 8001b28:	08013dfc 	.word	0x08013dfc
 8001b2c:	200031cc 	.word	0x200031cc
 8001b30:	08001f4d 	.word	0x08001f4d

08001b34 <tftp_send_next_block>:
  * @param  to_port: pointer on remote udp port
  * @retval None
  */
void tftp_send_next_block(struct udp_pcb *upcb, tftp_connection_args *args,
                          const ip_addr_t *to_ip, u16_t to_port)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	807b      	strh	r3, [r7, #2]
  /* Function to read 512 bytes from the file to send (file_SD), put them
   * in "args->data" and return the number of bytes read */
   f_read(&file_SD, (uint8_t*)args->data, TFTP_DATA_LEN_MAX, (UINT*)(&args->data_len));
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1d19      	adds	r1, r3, #4
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <tftp_send_next_block+0x50>)
 8001b52:	f005 fd11 	bl	8007578 <f_read>

  /*   NOTE: We need to send data packet even if args->data_len = 0*/
 
  /* sEndTransferthe data */
  tftp_send_data_packet(upcb, to_ip, to_port, args->block, args->data, args->data_len);
 8001b56:	8879      	ldrh	r1, [r7, #2]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3304      	adds	r3, #4
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8001b6a:	9201      	str	r2, [sp, #4]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff ff12 	bl	800199e <tftp_send_data_packet>

}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000116c 	.word	0x2000116c

08001b88 <rrq_recv_callback>:
  * @param  port: pointer on remote udp port
  * @retval None
  */
void rrq_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
                       const ip_addr_t *addr, u16_t port)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  /* Get our connection state  */
  tftp_connection_args *args = (tftp_connection_args *)arg;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	617b      	str	r3, [r7, #20]

  if (tftp_is_correct_ack(p->payload, args->block))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 fa9a 	bl	80020e0 <tftp_is_correct_ack>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <rrq_recv_callback+0x38>
  {
    /* increment block # */
    args->block++;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* if the last read returned less than the requested number of bytes
   * (i.e. TFTP_DATA_LEN_MAX), then we've sent the whole file and we can quit
   */
  if (args->data_len < TFTP_DATA_LEN_MAX)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bca:	d206      	bcs.n	8001bda <rrq_recv_callback+0x52>
  {
    /* Clean the connection*/
    tftp_cleanup_rd(upcb, args);
 8001bcc:	6979      	ldr	r1, [r7, #20]
 8001bce:	68b8      	ldr	r0, [r7, #8]
 8001bd0:	f7ff ff5c 	bl	8001a8c <tftp_cleanup_rd>

    pbuf_free(p);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f007 fb79 	bl	80092cc <pbuf_free>
  }

  /* if the whole file has not yet been sent then continue  */
  tftp_send_next_block(upcb, args, addr, port);
 8001bda:	8c3b      	ldrh	r3, [r7, #32]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f7ff ffa7 	bl	8001b34 <tftp_send_next_block>

  pbuf_free(p);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f007 fb70 	bl	80092cc <pbuf_free>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <wrq_recv_callback>:
  * @param  addr: pointer on remote IP address
  * @param  port: pointer on remote port
  * @retval None
  */
void wrq_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  tftp_connection_args *args = (tftp_connection_args *)arg;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	617b      	str	r3, [r7, #20]
  int n = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]

  /* we expect to receive only one pbuf (pbuf size should be 
     configured > max TFTP frame size */
  if (pkt_buf->len != pkt_buf->tot_len)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	895a      	ldrh	r2, [r3, #10]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	891b      	ldrh	r3, [r3, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d169      	bne.n	8001cea <wrq_recv_callback+0xf6>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	895b      	ldrh	r3, [r3, #10]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d937      	bls.n	8001c8e <wrq_recv_callback+0x9a>
      (tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f9e1 	bl	8001fea <tftp_extract_block>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c32:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d12a      	bne.n	8001c8e <wrq_recv_callback+0x9a>
  {
    /* write the received data to the file */
    f_write(&file_CR, (char*)pkt_buf->payload + TFTP_DATA_PKT_HDR_LEN, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN, (UINT*)&n);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	1d19      	adds	r1, r3, #4
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	895b      	ldrh	r3, [r3, #10]
 8001c42:	3b04      	subs	r3, #4
 8001c44:	461a      	mov	r2, r3
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	482a      	ldr	r0, [pc, #168]	; (8001cf4 <wrq_recv_callback+0x100>)
 8001c4c:	f005 fdf3 	bl	8007836 <f_write>

    if (n <= 0)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	dc09      	bgt.n	8001c6a <wrq_recv_callback+0x76>
    {
      tftp_send_error_message(upcb, addr, port, TFTP_ERR_FILE_NOT_FOUND);
 8001c56:	8c3a      	ldrh	r2, [r7, #32]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f7ff fe59 	bl	8001914 <tftp_send_error_message>
      /* close the connection */
      tftp_cleanup_wr(upcb, args); /* close the connection */
 8001c62:	6979      	ldr	r1, [r7, #20]
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff ff3b 	bl	8001ae0 <tftp_cleanup_wr>
    }
    
    /* update our block number to match the block number just received */
    args->block++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	895b      	ldrh	r3, [r3, #10]
 8001c82:	3b04      	subs	r3, #4
 8001c84:	441a      	add	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001c8c:	e013      	b.n	8001cb6 <wrq_recv_callback+0xc2>
  }
  else if (tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f9a9 	bl	8001fea <tftp_extract_block>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <wrq_recv_callback+0xc2>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
   * number, then the args->block (our block number) is never updated and
   * we simply send "duplicate ACK" which has the same block number as the
   * last ACK pkt we sent.  This lets the host know that we are still waiting
   * on block number args->block+1. 
   */
  tftp_send_ack_packet(upcb, addr, port, args->block);
 8001cb6:	8c3a      	ldrh	r2, [r7, #32]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	68b8      	ldr	r0, [r7, #8]
 8001cc4:	f7ff febf 	bl	8001a46 <tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the end of a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	895b      	ldrh	r3, [r3, #10]
 8001ccc:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001cd0:	d207      	bcs.n	8001ce2 <wrq_recv_callback+0xee>
  {
    tftp_cleanup_wr(upcb, args);
 8001cd2:	6979      	ldr	r1, [r7, #20]
 8001cd4:	68b8      	ldr	r0, [r7, #8]
 8001cd6:	f7ff ff03 	bl	8001ae0 <tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f007 faf6 	bl	80092cc <pbuf_free>
 8001ce0:	e004      	b.n	8001cec <wrq_recv_callback+0xf8>
  }
  else
  {
    pbuf_free(pkt_buf);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f007 faf2 	bl	80092cc <pbuf_free>
    return;
 8001ce8:	e000      	b.n	8001cec <wrq_recv_callback+0xf8>
    return;
 8001cea:	bf00      	nop
  }
}
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000219c 	.word	0x2000219c

08001cf8 <tftp_process_read>:
  * @param  to_port: pointer on remote udp port
  * @param  FileName: pointer on filename to be read
  * @retval error code
  */
int tftp_process_read(struct udp_pcb *upcb, const ip_addr_t *to, unsigned short to_port, char* FileName)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	80fb      	strh	r3, [r7, #6]
  tftp_connection_args *args = NULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  /* If Could not open the file which will be transmitted  */
  if (f_open(&file_SD, (const TCHAR*)FileName, FA_READ) != FR_OK)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	4824      	ldr	r0, [pc, #144]	; (8001da4 <tftp_process_read+0xac>)
 8001d12:	f005 fa65 	bl	80071e0 <f_open>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00b      	beq.n	8001d34 <tftp_process_read+0x3c>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_FILE_NOT_FOUND);
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fdf6 	bl	8001914 <tftp_send_error_message>

    tftp_cleanup_rd(upcb, args);
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f7ff feae 	bl	8001a8c <tftp_cleanup_rd>

    return 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e033      	b.n	8001d9c <tftp_process_read+0xa4>
  }
  
  args = mem_malloc(sizeof *args);
 8001d34:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001d38:	f006 fafc 	bl	8008334 <mem_malloc>
 8001d3c:	6178      	str	r0, [r7, #20]
  /* If we aren't able to allocate memory for a "tftp_connection_args" */
  if (!args)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10b      	bne.n	8001d5c <tftp_process_read+0x64>
  {
    /* unable to allocate memory for tftp args  */
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	2300      	movs	r3, #0
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff fde2 	bl	8001914 <tftp_send_error_message>

    /* no need to use tftp_cleanup_rd because no "tftp_connection_args" struct has been malloc'd   */
    tftp_cleanup_rd(upcb, args);
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff fe9a 	bl	8001a8c <tftp_cleanup_rd>

    return 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e01f      	b.n	8001d9c <tftp_process_read+0xa4>
  }

  /* initialize connection structure  */
  args->op = TFTP_RRQ;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  args->block = 1; /* block number starts at 1 (not 0) according to RFC1350  */
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218


  /* set callback for receives on this UDP PCB  */
  udp_recv(upcb, rrq_recv_callback, args);
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <tftp_process_read+0xb0>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f00e fba5 	bl	80104d8 <udp_recv>

  /* initiate the transaction by sending the first block of data,
    further blocks will be sent when ACKs are received */

  tftp_send_next_block(upcb, args, to, to_port);
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	6979      	ldr	r1, [r7, #20]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff fecd 	bl	8001b34 <tftp_send_next_block>

  return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000116c 	.word	0x2000116c
 8001da8:	08001b89 	.word	0x08001b89

08001dac <tftp_process_write>:
  * @param  to_port: pointer on remote udp port
  * @param  FileName: pointer on filename to be written 
  * @retval error code
  */
int tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, unsigned short to_port, char *FileName)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  tftp_connection_args *args = NULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Can not create file */
  if (f_open(&file_CR, (const TCHAR*)FileName, FA_CREATE_ALWAYS|FA_WRITE) != FR_OK)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	4826      	ldr	r0, [pc, #152]	; (8001e60 <tftp_process_write+0xb4>)
 8001dc6:	f005 fa0b 	bl	80071e0 <f_open>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00b      	beq.n	8001de8 <tftp_process_write+0x3c>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fd9c 	bl	8001914 <tftp_send_error_message>

    tftp_cleanup_wr(upcb, args);
 8001ddc:	6979      	ldr	r1, [r7, #20]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fe7e 	bl	8001ae0 <tftp_cleanup_wr>

    return 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e036      	b.n	8001e56 <tftp_process_write+0xaa>
  }

  args = mem_malloc(sizeof *args);
 8001de8:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001dec:	f006 faa2 	bl	8008334 <mem_malloc>
 8001df0:	6178      	str	r0, [r7, #20]
  if (!args)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <tftp_process_write+0x64>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fd88 	bl	8001914 <tftp_send_error_message>

    tftp_cleanup_wr(upcb, args);
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff fe6a 	bl	8001ae0 <tftp_cleanup_wr>

    return 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e022      	b.n	8001e56 <tftp_process_write+0xaa>
  }

  args->op = TFTP_WRQ;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB  */
  udp_recv(upcb, wrq_recv_callback, args);
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	490a      	ldr	r1, [pc, #40]	; (8001e64 <tftp_process_write+0xb8>)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f00e fb4b 	bl	80104d8 <udp_recv>

  /* initiate the write transaction by sending the first ack */
  tftp_send_ack_packet(upcb, to, to_port, args->block);
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fdf9 	bl	8001a46 <tftp_send_ack_packet>

  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000219c 	.word	0x2000219c
 8001e64:	08001bf5 	.word	0x08001bf5

08001e68 <process_tftp_request>:
  * @param  ip_addr: pointer on source IP address
  * @param  port: pointer on source udp port
  * @retval None
  */
void process_tftp_request(struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  tftp_opcode op = tftp_decode_op(pkt_buf->payload);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f8a8 	bl	8001fd0 <tftp_decode_op>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char FileName[30];
  struct udp_pcb *upcb;
  err_t err;

  /* create new UDP PCB structure */
  upcb = udp_new();
 8001e86:	f00e fb89 	bl	801059c <udp_new>
 8001e8a:	6338      	str	r0, [r7, #48]	; 0x30
  if (!upcb)
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d04c      	beq.n	8001f2c <process_tftp_request+0xc4>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
   * 69 which al transactions begin communication on, however all subsequent
   * transactions for a given "stream" occur on another port!  */
  err = udp_bind(upcb, IP_ADDR_ANY, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	492a      	ldr	r1, [pc, #168]	; (8001f40 <process_tftp_request+0xd8>)
 8001e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e98:	f00e fa00 	bl	801029c <udp_bind>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK)
 8001ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d142      	bne.n	8001f30 <process_tftp_request+0xc8>
  {    
    /* Unable to bind to port   */
    return;
  }
  switch (op)
 8001eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d002      	beq.n	8001eb8 <process_tftp_request+0x50>
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d018      	beq.n	8001ee8 <process_tftp_request+0x80>
 8001eb6:	e02f      	b.n	8001f18 <process_tftp_request+0xb0>
  {
    case TFTP_RRQ:/* TFTP RRQ (read request) */
    {
      /* Read the name of the file asked by the client to be sent from the SD card */
      tftp_extract_filename(FileName, pkt_buf->payload);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f8a2 	bl	800200c <tftp_extract_filename>

      /* Could not open filesystem */
      if(f_mount(&filesystem, (TCHAR const*)"", 0) != FR_OK)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	491e      	ldr	r1, [pc, #120]	; (8001f44 <process_tftp_request+0xdc>)
 8001ecc:	481e      	ldr	r0, [pc, #120]	; (8001f48 <process_tftp_request+0xe0>)
 8001ece:	f005 f941 	bl	8007154 <f_mount>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12d      	bne.n	8001f34 <process_tftp_request+0xcc>
      {
        return;
      }

      /* Start the TFTP read mode*/
      tftp_process_read(upcb, addr, port, FileName);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee2:	f7ff ff09 	bl	8001cf8 <tftp_process_read>
      break;
 8001ee6:	e028      	b.n	8001f3a <process_tftp_request+0xd2>
    } 

    case TFTP_WRQ: /* TFTP WRQ (write request) */
    {
      /* Read the name of the file asked by the client to be received and writen in the SD card */
      tftp_extract_filename(FileName, pkt_buf->payload);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f88a 	bl	800200c <tftp_extract_filename>
  
      /* Could not open filesystem */
      if(f_mount(&filesystem, (TCHAR const*)"", 0) != FR_OK)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4912      	ldr	r1, [pc, #72]	; (8001f44 <process_tftp_request+0xdc>)
 8001efc:	4812      	ldr	r0, [pc, #72]	; (8001f48 <process_tftp_request+0xe0>)
 8001efe:	f005 f929 	bl	8007154 <f_mount>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d117      	bne.n	8001f38 <process_tftp_request+0xd0>
      {
        return;
      }
        
      /* Start the TFTP write mode*/
      tftp_process_write(upcb, addr, port, FileName);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f12:	f7ff ff4b 	bl	8001dac <tftp_process_write>
      break;
 8001f16:	e010      	b.n	8001f3a <process_tftp_request+0xd2>
    }
    default: /* TFTP unknown request op */
      /* send generic access violation message */
      tftp_send_error_message(upcb, addr, port, TFTP_ERR_ACCESS_VIOLATION);
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f20:	f7ff fcf8 	bl	8001914 <tftp_send_error_message>
      udp_remove(upcb);
 8001f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f26:	f00e faf7 	bl	8010518 <udp_remove>

      break;
 8001f2a:	e006      	b.n	8001f3a <process_tftp_request+0xd2>
    return;
 8001f2c:	bf00      	nop
 8001f2e:	e004      	b.n	8001f3a <process_tftp_request+0xd2>
    return;
 8001f30:	bf00      	nop
 8001f32:	e002      	b.n	8001f3a <process_tftp_request+0xd2>
        return;
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <process_tftp_request+0xd2>
        return;
 8001f38:	bf00      	nop
  }
}
 8001f3a:	3738      	adds	r7, #56	; 0x38
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	08016984 	.word	0x08016984
 8001f44:	08013dfc 	.word	0x08013dfc
 8001f48:	20000138 	.word	0x20000138

08001f4c <recv_callback_tftp>:
  * @param  port: pointer on source udp port
  * @retval None
  */
void recv_callback_tftp(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  /* process new connection request */
  process_tftp_request(pkt_buf, addr, port);
 8001f5a:	8b3b      	ldrh	r3, [r7, #24]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff81 	bl	8001e68 <process_tftp_request>

  /* free pbuf */
  pbuf_free(pkt_buf);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f007 f9b0 	bl	80092cc <pbuf_free>
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <tftpd_init>:
  * @brief  Initializes the udp pcb for TFTP 
  * @param  None
  * @retval None
  */
void tftpd_init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69;
 8001f7a:	2345      	movs	r3, #69	; 0x45
 8001f7c:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 8001f7e:	f00e fb0d 	bl	801059c <udp_new>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <tftpd_init+0x50>)
 8001f86:	6013      	str	r3, [r2, #0]
  if (UDPpcb)
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <tftpd_init+0x50>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d014      	beq.n	8001fba <tftpd_init+0x46>
  {  
    /* Bind this PCB to port 69  */
    err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <tftpd_init+0x50>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	b292      	uxth	r2, r2
 8001f98:	490b      	ldr	r1, [pc, #44]	; (8001fc8 <tftpd_init+0x54>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f00e f97e 	bl	801029c <udp_bind>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	70fb      	strb	r3, [r7, #3]
    if (err == ERR_OK)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <tftpd_init+0x46>
    {    
      /* TFTP server start  */
      udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <tftpd_init+0x50>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4906      	ldr	r1, [pc, #24]	; (8001fcc <tftpd_init+0x58>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00e fa8f 	bl	80104d8 <udp_recv>
    }
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200031cc 	.word	0x200031cc
 8001fc8:	08016984 	.word	0x08016984
 8001fcc:	08001f4d 	.word	0x08001f4d

08001fd0 <tftp_decode_op>:

/**
  * @brief  Extracts the opcode from a TFTP message
**/ 
tftp_opcode tftp_decode_op(char *buf)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	781b      	ldrb	r3, [r3, #0]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <tftp_extract_block>:

/**
  * @brief Extracts the block number from TFTP message
**/
u16_t tftp_extract_block(char *buf)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 feb2 	bl	8007d66 <lwip_htons>
 8002002:	4603      	mov	r3, r0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <tftp_extract_filename>:

/**
  * @brief Extracts the filename from TFTP message
**/ 
void tftp_extract_filename(char *fname, char *buf)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  strcpy(fname, buf + 2);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3302      	adds	r3, #2
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f010 fe6b 	bl	8012cf8 <strcpy>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <tftp_set_opcode>:

/**
  * @brief set the opcode in TFTP message: RRQ / WRQ / DATA / ACK / ERROR 
**/ 
void tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]

  buffer[0] = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3301      	adds	r3, #1
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	701a      	strb	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <tftp_set_errorcode>:

/**
  * @brief Set the errorcode in TFTP message
**/
void tftp_set_errorcode(char *buffer, tftp_errorcode errCode)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]

  buffer[2] = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3302      	adds	r3, #2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
  buffer[3] = (u8_t)errCode;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3303      	adds	r3, #3
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	701a      	strb	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <tftp_set_errormsg>:

/**
  * @brief Sets the error message
**/
void tftp_set_errormsg(char * buffer, char* errormsg)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  strcpy(buffer + 4, errormsg);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f010 fe35 	bl	8012cf8 <strcpy>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <tftp_set_block>:

/**
  * @brief Sets the block number
**/
void tftp_set_block(char* packet, u16_t block)
{
 8002096:	b590      	push	{r4, r7, lr}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	807b      	strh	r3, [r7, #2]

  u16_t *p = (u16_t *)packet;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1c9c      	adds	r4, r3, #2
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fe5a 	bl	8007d66 <lwip_htons>
 80020b2:	4603      	mov	r3, r0
 80020b4:	8023      	strh	r3, [r4, #0]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}

080020be <tftp_set_data_message>:

/**
  * @brief Set the data message
**/
void tftp_set_data_message(char* packet, char* buf, int buflen)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  memcpy(packet + 4, buf, buflen);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3304      	adds	r3, #4
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f010 fda4 	bl	8012c20 <memcpy>
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <tftp_is_correct_ack>:

/**
  * @brief Check if the received acknowledgement is correct
**/
u32_t tftp_is_correct_ack(char *buf, int block)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  /* first make sure this is a data ACK packet */
  if (tftp_decode_op(buf) != TFTP_ACK)
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff70 	bl	8001fd0 <tftp_decode_op>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d001      	beq.n	80020fa <tftp_is_correct_ack+0x1a>
    return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e00a      	b.n	8002110 <tftp_is_correct_ack+0x30>

  /* then compare block numbers */
  if (block != tftp_extract_block(buf))
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ff75 	bl	8001fea <tftp_extract_block>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4293      	cmp	r3, r2
 8002108:	d001      	beq.n	800210e <tftp_is_correct_ack+0x2e>
    return 0;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <tftp_is_correct_ack+0x30>

  return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 800211e:	f00e fa3d 	bl	801059c <udp_new>
 8002122:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d013      	beq.n	8002152 <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 800212a:	2207      	movs	r2, #7
 800212c:	490b      	ldr	r1, [pc, #44]	; (800215c <udp_echoserver_init+0x44>)
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f00e f8b4 	bl	801029c <udp_bind>
 8002134:	4603      	mov	r3, r0
 8002136:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8002138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8002140:	2200      	movs	r2, #0
 8002142:	4907      	ldr	r1, [pc, #28]	; (8002160 <udp_echoserver_init+0x48>)
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f00e f9c7 	bl	80104d8 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 800214a:	e002      	b.n	8002152 <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f00e f9e3 	bl	8010518 <udp_remove>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	08016984 	.word	0x08016984
 8002160:	08002165 	.word	0x08002165

08002164 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8002172:	2207      	movs	r2, #7
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	68b8      	ldr	r0, [r7, #8]
 8002178:	f00e f918 	bl	80103ac <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	68b8      	ldr	r0, [r7, #8]
 8002180:	f00d fea2 	bl	800fec8 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f00e f97f 	bl	8010488 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f007 f89e 	bl	80092cc <pbuf_free>
   
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800219c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800219e:	e003      	b.n	80021a8 <LoopCopyDataInit>

080021a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021a6:	3104      	adds	r1, #4

080021a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021b0:	d3f6      	bcc.n	80021a0 <CopyDataInit>
  ldr  r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021b4:	e002      	b.n	80021bc <LoopFillZerobss>

080021b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021b8:	f842 3b04 	str.w	r3, [r2], #4

080021bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021c0:	d3f9      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021c2:	f7ff f935 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f010 fcf7 	bl	8012bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7fe fea5 	bl	8000f18 <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021d4:	08016af0 	.word	0x08016af0
  ldr  r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021dc:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80021e0:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80021e4:	20009a20 	.word	0x20009a20

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f931 	bl	800247c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7fe ffa8 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f93b 	bl	80024ca <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f911 	bl	8002492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000004 	.word	0x20000004
 8002288:	2000002c 	.word	0x2000002c
 800228c:	20000028 	.word	0x20000028

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	2000002c 	.word	0x2000002c
 80022b4:	200031d0 	.word	0x200031d0

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200031d0 	.word	0x200031d0

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000002c 	.word	0x2000002c

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002448:	d301      	bcc.n	800244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <SysTick_Config+0x40>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002456:	210f      	movs	r1, #15
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f7ff ff8e 	bl	800237c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SysTick_Config+0x40>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SysTick_Config+0x40>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff47 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a4:	f7ff ff5c 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	f7ff ff8e 	bl	80023d0 <NVIC_EncodePriority>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff5d 	bl	800237c <__NVIC_SetPriority>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffb0 	bl	8002438 <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80024f4:	4ba1      	ldr	r3, [pc, #644]	; (800277c <HAL_ETH_Init+0x298>)
 80024f6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e182      	b.n	8002810 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f002 fca2 	bl	8004e68 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_ETH_Init+0x29c>)
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_ETH_Init+0x29c>)
 800252e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002532:	6453      	str	r3, [r2, #68]	; 0x44
 8002534:	4b92      	ldr	r3, [pc, #584]	; (8002780 <HAL_ETH_Init+0x29c>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002540:	4b90      	ldr	r3, [pc, #576]	; (8002784 <HAL_ETH_Init+0x2a0>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a8f      	ldr	r2, [pc, #572]	; (8002784 <HAL_ETH_Init+0x2a0>)
 8002546:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800254a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800254c:	4b8d      	ldr	r3, [pc, #564]	; (8002784 <HAL_ETH_Init+0x2a0>)
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	498b      	ldr	r1, [pc, #556]	; (8002784 <HAL_ETH_Init+0x2a0>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002570:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002572:	f7ff fea1 	bl	80022b8 <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002578:	e011      	b.n	800259e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800257a:	f7ff fe9d 	bl	80022b8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002588:	d909      	bls.n	800259e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e138      	b.n	8002810 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e4      	bne.n	800257a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f023 031c 	bic.w	r3, r3, #28
 80025be:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025c0:	f001 feb2 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 80025c4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4a6f      	ldr	r2, [pc, #444]	; (8002788 <HAL_ETH_Init+0x2a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d908      	bls.n	80025e0 <HAL_ETH_Init+0xfc>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4a6e      	ldr	r2, [pc, #440]	; (800278c <HAL_ETH_Init+0x2a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d804      	bhi.n	80025e0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e027      	b.n	8002630 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4a6a      	ldr	r2, [pc, #424]	; (800278c <HAL_ETH_Init+0x2a8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d908      	bls.n	80025fa <HAL_ETH_Init+0x116>
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4a64      	ldr	r2, [pc, #400]	; (800277c <HAL_ETH_Init+0x298>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d204      	bcs.n	80025fa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f043 030c 	orr.w	r3, r3, #12
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	e01a      	b.n	8002630 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4a5f      	ldr	r2, [pc, #380]	; (800277c <HAL_ETH_Init+0x298>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d303      	bcc.n	800260a <HAL_ETH_Init+0x126>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4a62      	ldr	r2, [pc, #392]	; (8002790 <HAL_ETH_Init+0x2ac>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d911      	bls.n	800262e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4a60      	ldr	r2, [pc, #384]	; (8002790 <HAL_ETH_Init+0x2ac>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d908      	bls.n	8002624 <HAL_ETH_Init+0x140>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4a5f      	ldr	r2, [pc, #380]	; (8002794 <HAL_ETH_Init+0x2b0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d804      	bhi.n	8002624 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e005      	b.n	8002630 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f043 0310 	orr.w	r3, r3, #16
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	e000      	b.n	8002630 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800262e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002638:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fb94 	bl	8002d6c <HAL_ETH_WritePHYRegister>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800264e:	6939      	ldr	r1, [r7, #16]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fd49 	bl	80030e8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0d6      	b.n	8002810 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002662:	20ff      	movs	r0, #255	; 0xff
 8002664:	f7ff fe34 	bl	80022d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a4 	beq.w	80027ba <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002672:	f7ff fe21 	bl	80022b8 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	461a      	mov	r2, r3
 800267e:	2101      	movs	r1, #1
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fb0b 	bl	8002c9c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002686:	f7ff fe17 	bl	80022b8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d90f      	bls.n	80026b8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fd22 	bl	80030e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0ab      	b.n	8002810 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0da      	beq.n	8002678 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80026c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c6:	2100      	movs	r1, #0
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fb4f 	bl	8002d6c <HAL_ETH_WritePHYRegister>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026d8:	6939      	ldr	r1, [r7, #16]
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fd04 	bl	80030e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026e8:	2301      	movs	r3, #1
 80026ea:	e091      	b.n	8002810 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80026ec:	f7ff fde4 	bl	80022b8 <HAL_GetTick>
 80026f0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	461a      	mov	r2, r3
 80026f8:	2101      	movs	r1, #1
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 face 	bl	8002c9c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002700:	f7ff fdda 	bl	80022b8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d90f      	bls.n	8002732 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002716:	6939      	ldr	r1, [r7, #16]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fce5 	bl	80030e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e06e      	b.n	8002810 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0da      	beq.n	80026f2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	461a      	mov	r2, r3
 8002742:	211f      	movs	r1, #31
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 faa9 	bl	8002c9c <HAL_ETH_ReadPHYRegister>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002754:	6939      	ldr	r1, [r7, #16]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fcc6 	bl	80030e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002764:	2301      	movs	r3, #1
 8002766:	e053      	b.n	8002810 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	e010      	b.n	800279e <HAL_ETH_Init+0x2ba>
 800277c:	03938700 	.word	0x03938700
 8002780:	40023800 	.word	0x40023800
 8002784:	40013800 	.word	0x40013800
 8002788:	01312cff 	.word	0x01312cff
 800278c:	02160ebf 	.word	0x02160ebf
 8002790:	05f5e0ff 	.word	0x05f5e0ff
 8002794:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e026      	b.n	80027fe <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e021      	b.n	80027fe <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	2100      	movs	r1, #0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 faca 	bl	8002d6c <HAL_ETH_WritePHYRegister>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027e2:	6939      	ldr	r1, [r7, #16]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fc7f 	bl	80030e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00c      	b.n	8002810 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027f6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027fa:	f7ff fd69 	bl	80022d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80027fe:	6939      	ldr	r1, [r7, #16]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fc71 	bl	80030e8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ETH_DMATxDescListInit+0x20>
 8002834:	2302      	movs	r3, #2
 8002836:	e051      	b.n	80028dc <HAL_ETH_DMATxDescListInit+0xc4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e030      	b.n	80028b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015b      	lsls	r3, r3, #5
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	4413      	add	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002864:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	461a      	mov	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	d208      	bcs.n	80028aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4413      	add	r3, r2
 80028a2:	461a      	mov	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e002      	b.n	80028b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3ca      	bcc.n	8002854 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c8:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_ETH_DMARxDescListInit+0x20>
 8002904:	2302      	movs	r3, #2
 8002906:	e055      	b.n	80029b4 <HAL_ETH_DMARxDescListInit+0xcc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e034      	b.n	800298e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	4413      	add	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002934:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800293c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	461a      	mov	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	d208      	bcs.n	8002982 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	015b      	lsls	r3, r3, #5
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4413      	add	r3, r2
 800297a:	461a      	mov	r2, r3
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	e002      	b.n	8002988 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d3c6      	bcc.n	8002924 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029a0:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_ETH_TransmitFrame+0x24>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0cc      	b.n	8002b7e <HAL_ETH_TransmitFrame+0x1be>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0b7      	b.n	8002b7e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da09      	bge.n	8002a2c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2212      	movs	r2, #18
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0a8      	b.n	8002b7e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d915      	bls.n	8002a62 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	4a54      	ldr	r2, [pc, #336]	; (8002b8c <HAL_ETH_TransmitFrame+0x1cc>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_ETH_TransmitFrame+0x1cc>)
 8002a46:	fba3 1302 	umull	r1, r3, r3, r2
 8002a4a:	0a9b      	lsrs	r3, r3, #10
 8002a4c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e001      	b.n	8002a66 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a62:	2301      	movs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d11c      	bne.n	8002aa6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a7a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a86:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a96:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa4:	e04b      	b.n	8002b3e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e044      	b.n	8002b36 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aba:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d107      	bne.n	8002ad2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ad0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ada:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d116      	bne.n	8002b14 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002af4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <HAL_ETH_TransmitFrame+0x1d0>)
 8002afa:	fb03 f202 	mul.w	r2, r3, r2
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002b06:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b12:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b22:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3301      	adds	r3, #1
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3b6      	bcc.n	8002aac <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b66:	461a      	mov	r2, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	ac02b00b 	.word	0xac02b00b
 8002b90:	fffffa0c 	.word	0xfffffa0c

08002b94 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_ETH_GetReceivedFrame+0x1a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e070      	b.n	8002c90 <HAL_ETH_GetReceivedFrame+0xfc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db5a      	blt.n	8002c7e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d030      	beq.n	8002c38 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d103      	bne.n	8002bf0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0c1b      	lsrs	r3, r3, #16
 8002c00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c04:	3b04      	subs	r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e02b      	b.n	8002c90 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
 8002c66:	e00a      	b.n	8002c7e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b82      	cmp	r3, #130	; 0x82
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e050      	b.n	8002d64 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2282      	movs	r2, #130	; 0x82
 8002cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 031c 	and.w	r3, r3, #28
 8002cd8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8a1b      	ldrh	r3, [r3, #16]
 8002cde:	02db      	lsls	r3, r3, #11
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	019b      	lsls	r3, r3, #6
 8002cec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 0302 	bic.w	r3, r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0e:	f7ff fad3 	bl	80022b8 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d14:	e015      	b.n	8002d42 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002d16:	f7ff facf 	bl	80022b8 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d309      	bcc.n	8002d3a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e014      	b.n	8002d64 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e4      	bne.n	8002d16 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	460b      	mov	r3, r1
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b42      	cmp	r3, #66	; 0x42
 8002d8c:	d101      	bne.n	8002d92 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e04e      	b.n	8002e30 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2242      	movs	r2, #66	; 0x42
 8002d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 031c 	and.w	r3, r3, #28
 8002da8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8a1b      	ldrh	r3, [r3, #16]
 8002dae:	02db      	lsls	r3, r3, #11
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002de8:	f7ff fa66 	bl	80022b8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dee:	e015      	b.n	8002e1c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002df0:	f7ff fa62 	bl	80022b8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d309      	bcc.n	8002e14 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e00d      	b.n	8002e30 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e4      	bne.n	8002df0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_ETH_Start+0x16>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e01f      	b.n	8002e8e <HAL_ETH_Start+0x56>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb40 	bl	80034e4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb77 	bl	8003558 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fc06 	bl	800367c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fbab 	bl	80035cc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fbd4 	bl	8003624 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_ETH_Stop+0x16>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e01f      	b.n	8002eec <HAL_ETH_Stop+0x56>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fb9b 	bl	80035f8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fbc4 	bl	8003650 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb62 	bl	8003592 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fbd4 	bl	800367c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fb22 	bl	800351e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_ETH_ConfigMAC+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0e4      	b.n	80030da <HAL_ETH_ConfigMAC+0x1e6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80b1 	beq.w	800308a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f40:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002f46:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002f4c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002f52:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002f58:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002f5e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002f64:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002f6a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002f70:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002f76:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002f7c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002f82:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7ff f998 	bl	80022d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fb0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002fb6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002fbc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002fc2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002fc8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002fda:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fdc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7ff f972 	bl	80022d0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ffc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003006:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003016:	4013      	ands	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003024:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800302a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003030:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003036:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800303c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003054:	2001      	movs	r0, #1
 8003056:	f7ff f93b 	bl	80022d0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800307a:	2001      	movs	r0, #1
 800307c:	f7ff f928 	bl	80022d0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	61da      	str	r2, [r3, #28]
 8003088:	e01e      	b.n	80030c8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003098:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7ff f908 	bl	80022d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	ff20810f 	.word	0xff20810f

080030e8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0b0      	sub	sp, #192	; 0xc0
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003104:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800310c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003116:	2300      	movs	r3, #0
 8003118:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003132:	663b      	str	r3, [r7, #96]	; 0x60
 8003134:	e001      	b.n	800313a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800313a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003144:	2300      	movs	r3, #0
 8003146:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003154:	2340      	movs	r3, #64	; 0x40
 8003156:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003176:	2300      	movs	r3, #0
 8003178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031c0:	4baa      	ldr	r3, [pc, #680]	; (800346c <ETH_MACDMAConfig+0x384>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80031ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031cc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80031ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80031d0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80031d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80031d4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80031da:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80031dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80031de:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80031e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80031e2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80031e8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80031ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80031ec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80031ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80031f0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80031f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80031f4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80031f8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80031fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80031fc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003210:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800321c:	2001      	movs	r0, #1
 800321e:	f7ff f857 	bl	80022d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800322a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800322c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800322e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003230:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003234:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800323a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800323c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003240:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003242:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003246:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800324c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003250:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003258:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800325a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003266:	2001      	movs	r0, #1
 8003268:	f7ff f832 	bl	80022d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003274:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003288:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003298:	f64f 7341 	movw	r3, #65345	; 0xff41
 800329c:	4013      	ands	r3, r2
 800329e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032a6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80032a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032ac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80032ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80032b2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80032b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80032b8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80032ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80032be:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80032c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80032c4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fe fff3 	bl	80022d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032f2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80032f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80032f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800330e:	2001      	movs	r0, #1
 8003310:	f7fe ffde 	bl	80022d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800331c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003326:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800332c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003330:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003342:	2304      	movs	r3, #4
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800334c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800335c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003362:	2300      	movs	r3, #0
 8003364:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003366:	2300      	movs	r3, #0
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800337c:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <ETH_MACDMAConfig+0x388>)
 800337e:	4013      	ands	r3, r2
 8003380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003384:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003386:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003388:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800338a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800338c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800338e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003390:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003392:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003394:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003396:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003398:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800339a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800339c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80033a0:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80033a4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80033a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b8:	461a      	mov	r2, r3
 80033ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033be:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f7fe ff7e 	bl	80022d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033dc:	461a      	mov	r2, r3
 80033de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033e2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033e8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80033ec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033f0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80033f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80033f4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80033fa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80033fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80033fe:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003408:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800340c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800341c:	2001      	movs	r0, #1
 800341e:	f7fe ff57 	bl	80022d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	461a      	mov	r2, r3
 800342c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003430:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10d      	bne.n	8003456 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003454:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	461a      	mov	r2, r3
 800345c:	2100      	movs	r1, #0
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f808 	bl	8003474 <ETH_MACAddressConfig>
}
 8003464:	bf00      	nop
 8003466:	37c0      	adds	r7, #192	; 0xc0
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	ff20810f 	.word	0xff20810f
 8003470:	f8de3f23 	.word	0xf8de3f23

08003474 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3305      	adds	r3, #5
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	3204      	adds	r2, #4
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <ETH_MACAddressConfig+0x68>)
 8003496:	4413      	add	r3, r2
 8003498:	461a      	mov	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3303      	adds	r3, #3
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	061a      	lsls	r2, r3, #24
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3302      	adds	r3, #2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	4313      	orrs	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <ETH_MACAddressConfig+0x6c>)
 80034c6:	4413      	add	r3, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40028040 	.word	0x40028040
 80034e0:	40028044 	.word	0x40028044

080034e4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003508:	2001      	movs	r0, #1
 800350a:	f000 f8dd 	bl	80036c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0208 	bic.w	r2, r2, #8
 8003538:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003542:	2001      	movs	r0, #1
 8003544:	f000 f8c0 	bl	80036c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0204 	orr.w	r2, r2, #4
 8003572:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800357c:	2001      	movs	r0, #1
 800357e:	f000 f8a3 	bl	80036c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0204 	bic.w	r2, r2, #4
 80035ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035b6:	2001      	movs	r0, #1
 80035b8:	f000 f886 	bl	80036c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035ea:	6193      	str	r3, [r2, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003616:	6193      	str	r3, [r2, #24]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003642:	6193      	str	r3, [r2, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	f023 0302 	bic.w	r3, r3, #2
 800366a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800366e:	6193      	str	r3, [r2, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800369e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f000 f80b 	bl	80036c8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036bc:	6193      	str	r3, [r2, #24]
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <ETH_Delay+0x38>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <ETH_Delay+0x3c>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0a5b      	lsrs	r3, r3, #9
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80036e4:	bf00      	nop
  } 
  while (Delay --);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	60fa      	str	r2, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f9      	bne.n	80036e4 <ETH_Delay+0x1c>
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000004 	.word	0x20000004
 8003704:	10624dd3 	.word	0x10624dd3

08003708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e16b      	b.n	80039fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003724:	2201      	movs	r2, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	f040 815a 	bne.w	80039f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d00b      	beq.n	8003762 <HAL_GPIO_Init+0x5a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003756:	2b11      	cmp	r3, #17
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b12      	cmp	r3, #18
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0xfc>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b12      	cmp	r3, #18
 8003802:	d123      	bne.n	800384c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3208      	adds	r2, #8
 8003846:	69b9      	ldr	r1, [r7, #24]
 8003848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0203 	and.w	r2, r3, #3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80b4 	beq.w	80039f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <HAL_GPIO_Init+0x30c>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	4a5f      	ldr	r2, [pc, #380]	; (8003a14 <HAL_GPIO_Init+0x30c>)
 8003898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800389c:	6453      	str	r3, [r2, #68]	; 0x44
 800389e:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <HAL_GPIO_Init+0x30c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_GPIO_Init+0x310>)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	3302      	adds	r3, #2
 80038b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	220f      	movs	r2, #15
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_GPIO_Init+0x314>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02b      	beq.n	800392e <HAL_GPIO_Init+0x226>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <HAL_GPIO_Init+0x318>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d025      	beq.n	800392a <HAL_GPIO_Init+0x222>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a50      	ldr	r2, [pc, #320]	; (8003a24 <HAL_GPIO_Init+0x31c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <HAL_GPIO_Init+0x21e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4f      	ldr	r2, [pc, #316]	; (8003a28 <HAL_GPIO_Init+0x320>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <HAL_GPIO_Init+0x21a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4e      	ldr	r2, [pc, #312]	; (8003a2c <HAL_GPIO_Init+0x324>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_GPIO_Init+0x216>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4d      	ldr	r2, [pc, #308]	; (8003a30 <HAL_GPIO_Init+0x328>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00d      	beq.n	800391a <HAL_GPIO_Init+0x212>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4c      	ldr	r2, [pc, #304]	; (8003a34 <HAL_GPIO_Init+0x32c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <HAL_GPIO_Init+0x20e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4b      	ldr	r2, [pc, #300]	; (8003a38 <HAL_GPIO_Init+0x330>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_GPIO_Init+0x20a>
 800390e:	2307      	movs	r3, #7
 8003910:	e00e      	b.n	8003930 <HAL_GPIO_Init+0x228>
 8003912:	2308      	movs	r3, #8
 8003914:	e00c      	b.n	8003930 <HAL_GPIO_Init+0x228>
 8003916:	2306      	movs	r3, #6
 8003918:	e00a      	b.n	8003930 <HAL_GPIO_Init+0x228>
 800391a:	2305      	movs	r3, #5
 800391c:	e008      	b.n	8003930 <HAL_GPIO_Init+0x228>
 800391e:	2304      	movs	r3, #4
 8003920:	e006      	b.n	8003930 <HAL_GPIO_Init+0x228>
 8003922:	2303      	movs	r3, #3
 8003924:	e004      	b.n	8003930 <HAL_GPIO_Init+0x228>
 8003926:	2302      	movs	r3, #2
 8003928:	e002      	b.n	8003930 <HAL_GPIO_Init+0x228>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_GPIO_Init+0x228>
 800392e:	2300      	movs	r3, #0
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	f002 0203 	and.w	r2, r2, #3
 8003936:	0092      	lsls	r2, r2, #2
 8003938:	4093      	lsls	r3, r2
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003940:	4935      	ldr	r1, [pc, #212]	; (8003a18 <HAL_GPIO_Init+0x310>)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	3302      	adds	r3, #2
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_GPIO_Init+0x334>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003972:	4a32      	ldr	r2, [pc, #200]	; (8003a3c <HAL_GPIO_Init+0x334>)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <HAL_GPIO_Init+0x334>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <HAL_GPIO_Init+0x334>)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_GPIO_Init+0x334>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_GPIO_Init+0x334>)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_GPIO_Init+0x334>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039f0:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <HAL_GPIO_Init+0x334>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b0f      	cmp	r3, #15
 8003a00:	f67f ae90 	bls.w	8003724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	40020000 	.word	0x40020000
 8003a20:	40020400 	.word	0x40020400
 8003a24:	40020800 	.word	0x40020800
 8003a28:	40020c00 	.word	0x40020c00
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40021400 	.word	0x40021400
 8003a34:	40021800 	.word	0x40021800
 8003a38:	40021c00 	.word	0x40021c00
 8003a3c:	40013c00 	.word	0x40013c00

08003a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a50:	787b      	ldrb	r3, [r7, #1]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a5c:	e003      	b.n	8003a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	041a      	lsls	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	619a      	str	r2, [r3, #24]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e25e      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d075      	beq.n	8003b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a92:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b85      	ldr	r3, [pc, #532]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d112      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	4b7e      	ldr	r3, [pc, #504]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05b      	beq.n	8003b7c <HAL_RCC_OscConfig+0x108>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d157      	bne.n	8003b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e239      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x74>
 8003ada:	4b76      	ldr	r3, [pc, #472]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a75      	ldr	r2, [pc, #468]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xb0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x98>
 8003af2:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6f      	ldr	r2, [pc, #444]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6d      	ldr	r3, [pc, #436]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6c      	ldr	r2, [pc, #432]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	4b69      	ldr	r3, [pc, #420]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a68      	ldr	r2, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b66      	ldr	r3, [pc, #408]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a65      	ldr	r2, [pc, #404]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fbc4 	bl	80022b8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fbc0 	bl	80022b8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1fe      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b5b      	ldr	r3, [pc, #364]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xc0>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fbb0 	bl	80022b8 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fbac 	bl	80022b8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1ea      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b51      	ldr	r3, [pc, #324]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0xe8>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8a:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x152>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1be      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4937      	ldr	r1, [pc, #220]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e03a      	b.n	8003c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCC_OscConfig+0x244>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fe fb65 	bl	80022b8 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fb61 	bl	80022b8 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e19f      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4925      	ldr	r1, [pc, #148]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCC_OscConfig+0x244>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fb44 	bl	80022b8 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe fb40 	bl	80022b8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e17e      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d036      	beq.n	8003ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_RCC_OscConfig+0x248>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fb24 	bl	80022b8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fe fb20 	bl	80022b8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e15e      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x200>
 8003c92:	e01b      	b.n	8003ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_OscConfig+0x248>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fb0d 	bl	80022b8 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fb09 	bl	80022b8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d907      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e147      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	42470000 	.word	0x42470000
 8003cbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ea      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8097 	beq.w	8003e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	4b81      	ldr	r3, [pc, #516]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a7c      	ldr	r2, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b7a      	ldr	r3, [pc, #488]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b77      	ldr	r3, [pc, #476]	; (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b74      	ldr	r3, [pc, #464]	; (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a73      	ldr	r2, [pc, #460]	; (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fe fac9 	bl	80022b8 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fe fac5 	bl	80022b8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e103      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2ea>
 8003d50:	4b64      	ldr	r3, [pc, #400]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a63      	ldr	r2, [pc, #396]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	e01c      	b.n	8003d98 <HAL_RCC_OscConfig+0x324>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x30c>
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a5e      	ldr	r2, [pc, #376]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a5b      	ldr	r2, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0x324>
 8003d80:	4b58      	ldr	r3, [pc, #352]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a57      	ldr	r2, [pc, #348]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a54      	ldr	r2, [pc, #336]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fe fa8a 	bl	80022b8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fe fa86 	bl	80022b8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0c2      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ee      	beq.n	8003da8 <HAL_RCC_OscConfig+0x334>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dcc:	f7fe fa74 	bl	80022b8 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7fe fa70 	bl	80022b8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0ac      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dea:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ee      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8098 	beq.w	8003f42 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d05c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d141      	bne.n	8003eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b31      	ldr	r3, [pc, #196]	; (8003eec <HAL_RCC_OscConfig+0x478>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fa44 	bl	80022b8 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe fa40 	bl	80022b8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e07e      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	491b      	ldr	r1, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_RCC_OscConfig+0x478>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe fa19 	bl	80022b8 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fe fa15 	bl	80022b8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e053      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x416>
 8003ea8:	e04b      	b.n	8003f42 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <HAL_RCC_OscConfig+0x478>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fa02 	bl	80022b8 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe f9fe 	bl	80022b8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e03c      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x444>
 8003ed6:	e034      	b.n	8003f42 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e02f      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d11c      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d115      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10d      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0cc      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b68      	ldr	r3, [pc, #416]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d90c      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d044      	beq.n	8004070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d003      	beq.n	800400e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	2b03      	cmp	r3, #3
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e067      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4934      	ldr	r1, [pc, #208]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fe f93a 	bl	80022b8 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe f936 	bl	80022b8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e04f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d20c      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f821 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe f89a 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	08016824 	.word	0x08016824
 8004114:	20000004 	.word	0x20000004
 8004118:	20000028 	.word	0x20000028

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004120:	b094      	sub	sp, #80	; 0x50
 8004122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
 8004128:	2300      	movs	r3, #0
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	2300      	movs	r3, #0
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004134:	4b79      	ldr	r3, [pc, #484]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d00d      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x40>
 8004140:	2b08      	cmp	r3, #8
 8004142:	f200 80e1 	bhi.w	8004308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x34>
 800414a:	2b04      	cmp	r3, #4
 800414c:	d003      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0x3a>
 800414e:	e0db      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_GetSysClockFreq+0x204>)
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004154:	e0db      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004156:	4b73      	ldr	r3, [pc, #460]	; (8004324 <HAL_RCC_GetSysClockFreq+0x208>)
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800415a:	e0d8      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800415c:	4b6f      	ldr	r3, [pc, #444]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	2200      	movs	r2, #0
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
 800417c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
 8004186:	2300      	movs	r3, #0
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800418e:	4622      	mov	r2, r4
 8004190:	462b      	mov	r3, r5
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	0159      	lsls	r1, r3, #5
 800419c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a0:	0150      	lsls	r0, r2, #5
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4621      	mov	r1, r4
 80041a8:	1a51      	subs	r1, r2, r1
 80041aa:	6139      	str	r1, [r7, #16]
 80041ac:	4629      	mov	r1, r5
 80041ae:	eb63 0301 	sbc.w	r3, r3, r1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c0:	4659      	mov	r1, fp
 80041c2:	018b      	lsls	r3, r1, #6
 80041c4:	4651      	mov	r1, sl
 80041c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ca:	4651      	mov	r1, sl
 80041cc:	018a      	lsls	r2, r1, #6
 80041ce:	4651      	mov	r1, sl
 80041d0:	ebb2 0801 	subs.w	r8, r2, r1
 80041d4:	4659      	mov	r1, fp
 80041d6:	eb63 0901 	sbc.w	r9, r3, r1
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ee:	4690      	mov	r8, r2
 80041f0:	4699      	mov	r9, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	eb18 0303 	adds.w	r3, r8, r3
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	462b      	mov	r3, r5
 80041fc:	eb49 0303 	adc.w	r3, r9, r3
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800420e:	4629      	mov	r1, r5
 8004210:	024b      	lsls	r3, r1, #9
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004218:	4621      	mov	r1, r4
 800421a:	024a      	lsls	r2, r1, #9
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	2200      	movs	r2, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800422c:	f7fc f828 	bl	8000280 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	e058      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	2200      	movs	r2, #0
 8004242:	4618      	mov	r0, r3
 8004244:	4611      	mov	r1, r2
 8004246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	f04f 0000 	mov.w	r0, #0
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	0159      	lsls	r1, r3, #5
 8004262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004266:	0150      	lsls	r0, r2, #5
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4641      	mov	r1, r8
 800426e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004272:	4649      	mov	r1, r9
 8004274:	eb63 0b01 	sbc.w	fp, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800428c:	ebb2 040a 	subs.w	r4, r2, sl
 8004290:	eb63 050b 	sbc.w	r5, r3, fp
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	00eb      	lsls	r3, r5, #3
 800429e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a2:	00e2      	lsls	r2, r4, #3
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	4643      	mov	r3, r8
 80042aa:	18e3      	adds	r3, r4, r3
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	464b      	mov	r3, r9
 80042b0:	eb45 0303 	adc.w	r3, r5, r3
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c2:	4629      	mov	r1, r5
 80042c4:	028b      	lsls	r3, r1, #10
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042cc:	4621      	mov	r1, r4
 80042ce:	028a      	lsls	r2, r1, #10
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d6:	2200      	movs	r2, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	61fa      	str	r2, [r7, #28]
 80042dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e0:	f7fb ffce 	bl	8000280 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004306:	e002      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetSysClockFreq+0x204>)
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800430c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004310:	4618      	mov	r0, r3
 8004312:	3750      	adds	r7, #80	; 0x50
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200

08004328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000004 	.word	0x20000004

08004340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e056      	b.n	8004400 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fc ff29 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004388:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	f003 0104 	and.w	r1, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_SPI_Transmit+0x22>
 8004426:	2302      	movs	r3, #2
 8004428:	e11e      	b.n	8004668 <HAL_SPI_Transmit+0x260>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004432:	f7fd ff41 	bl	80022b8 <HAL_GetTick>
 8004436:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d002      	beq.n	800444e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004448:	2302      	movs	r3, #2
 800444a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800444c:	e103      	b.n	8004656 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_SPI_Transmit+0x52>
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800445e:	e0fa      	b.n	8004656 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2203      	movs	r2, #3
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a6:	d107      	bne.n	80044b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d007      	beq.n	80044d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044de:	d14b      	bne.n	8004578 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_SPI_Transmit+0xe6>
 80044e8:	8afb      	ldrh	r3, [r7, #22]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d13e      	bne.n	800456c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	1c9a      	adds	r2, r3, #2
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004512:	e02b      	b.n	800456c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d112      	bne.n	8004548 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	86da      	strh	r2, [r3, #54]	; 0x36
 8004546:	e011      	b.n	800456c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004548:	f7fd feb6 	bl	80022b8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d803      	bhi.n	8004560 <HAL_SPI_Transmit+0x158>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <HAL_SPI_Transmit+0x15e>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	77fb      	strb	r3, [r7, #31]
          goto error;
 800456a:	e074      	b.n	8004656 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ce      	bne.n	8004514 <HAL_SPI_Transmit+0x10c>
 8004576:	e04c      	b.n	8004612 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_SPI_Transmit+0x17e>
 8004580:	8afb      	ldrh	r3, [r7, #22]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d140      	bne.n	8004608 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045ac:	e02c      	b.n	8004608 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d113      	bne.n	80045e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	7812      	ldrb	r2, [r2, #0]
 80045c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e2:	e011      	b.n	8004608 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e4:	f7fd fe68 	bl	80022b8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d803      	bhi.n	80045fc <HAL_SPI_Transmit+0x1f4>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_Transmit+0x1fa>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004606:	e026      	b.n	8004656 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1cd      	bne.n	80045ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fa36 	bl	8004a88 <SPI_EndRxTxTransaction>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e000      	b.n	8004656 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004654:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004666:	7ffb      	ldrb	r3, [r7, #31]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800467e:	2301      	movs	r3, #1
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x26>
 8004692:	2302      	movs	r3, #2
 8004694:	e18a      	b.n	80049ac <HAL_SPI_TransmitReceive+0x33c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800469e:	f7fd fe0b 	bl	80022b8 <HAL_GetTick>
 80046a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d00f      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x70>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c6:	d107      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x68>
 80046d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d003      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046de:	e15b      	b.n	8004998 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x82>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x82>
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046f8:	e14e      	b.n	8004998 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b04      	cmp	r3, #4
 8004704:	d003      	beq.n	800470e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2205      	movs	r2, #5
 800470a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	887a      	ldrh	r2, [r7, #2]
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	887a      	ldrh	r2, [r7, #2]
 8004730:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d007      	beq.n	8004762 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476a:	d178      	bne.n	800485e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_SPI_TransmitReceive+0x10a>
 8004774:	8b7b      	ldrh	r3, [r7, #26]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d166      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	1c9a      	adds	r2, r3, #2
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479e:	e053      	b.n	8004848 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d11b      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x176>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x176>
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d113      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	881a      	ldrh	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	1c9a      	adds	r2, r3, #2
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d119      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x1b8>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d014      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	b292      	uxth	r2, r2
 800480a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	1c9a      	adds	r2, r3, #2
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004824:	2301      	movs	r3, #1
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004828:	f7fd fd46 	bl	80022b8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004834:	429a      	cmp	r2, r3
 8004836:	d807      	bhi.n	8004848 <HAL_SPI_TransmitReceive+0x1d8>
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d003      	beq.n	8004848 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004846:	e0a7      	b.n	8004998 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1a6      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x130>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1a1      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x130>
 800485c:	e07c      	b.n	8004958 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_SPI_TransmitReceive+0x1fc>
 8004866:	8b7b      	ldrh	r3, [r7, #26]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d16b      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004892:	e057      	b.n	8004944 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d11c      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x26c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d017      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x26c>
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d114      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	7812      	ldrb	r2, [r2, #0]
 80048be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d119      	bne.n	800491e <HAL_SPI_TransmitReceive+0x2ae>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d014      	beq.n	800491e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800491a:	2301      	movs	r3, #1
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800491e:	f7fd fccb 	bl	80022b8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492a:	429a      	cmp	r2, r3
 800492c:	d803      	bhi.n	8004936 <HAL_SPI_TransmitReceive+0x2c6>
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d102      	bne.n	800493c <HAL_SPI_TransmitReceive+0x2cc>
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004942:	e029      	b.n	8004998 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1a2      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x224>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d19d      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f893 	bl	8004a88 <SPI_EndRxTxTransaction>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d006      	beq.n	8004976 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004974:	e010      	b.n	8004998 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	e000      	b.n	8004998 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004996:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3730      	adds	r7, #48	; 0x30
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c4:	e04c      	b.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d048      	beq.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80049ce:	f7fd fc73 	bl	80022b8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d902      	bls.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d13d      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fc:	d111      	bne.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a06:	d004      	beq.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a10:	d107      	bne.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	d10f      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e00f      	b.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d1a3      	bne.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <SPI_EndRxTxTransaction+0x7c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <SPI_EndRxTxTransaction+0x80>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0d5b      	lsrs	r3, r3, #21
 8004aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aa4:	fb02 f303 	mul.w	r3, r2, r3
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d112      	bne.n	8004ada <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff78 	bl	80049b4 <SPI_WaitFlagStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e00f      	b.n	8004afa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d0f2      	beq.n	8004ada <SPI_EndRxTxTransaction+0x52>
 8004af4:	e000      	b.n	8004af8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004af6:	bf00      	nop
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000004 	.word	0x20000004
 8004b08:	165e9f81 	.word	0x165e9f81

08004b0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b10:	4904      	ldr	r1, [pc, #16]	; (8004b24 <MX_FATFS_Init+0x18>)
 8004b12:	4805      	ldr	r0, [pc, #20]	; (8004b28 <MX_FATFS_Init+0x1c>)
 8004b14:	f003 f918 	bl	8007d48 <FATFS_LinkDriver>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <MX_FATFS_Init+0x20>)
 8004b1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	200031d8 	.word	0x200031d8
 8004b28:	20000030 	.word	0x20000030
 8004b2c:	200031d4 	.word	0x200031d4

08004b30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fecd 	bl	80008ec <SD_disk_initialize>
 8004b52:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fb ffa5 	bl	8000ab8 <SD_disk_status>
 8004b6e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4603      	mov	r3, r0
 8004b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004b88:	7bf8      	ldrb	r0, [r7, #15]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	f7fb ffa8 	bl	8000ae4 <SD_disk_read>
 8004b94:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004bae:	7bf8      	ldrb	r0, [r7, #15]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	f7fb ffff 	bl	8000bb8 <SD_disk_write>
 8004bba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	603a      	str	r2, [r7, #0]
 8004bce:	71fb      	strb	r3, [r7, #7]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004bd4:	79b9      	ldrb	r1, [r7, #6]
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc f870 	bl	8000cc0 <SD_disk_ioctl>
 8004be0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004bf2:	4b8d      	ldr	r3, [pc, #564]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004bf4:	22c0      	movs	r2, #192	; 0xc0
 8004bf6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004bf8:	4b8b      	ldr	r3, [pc, #556]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004bfa:	22a8      	movs	r2, #168	; 0xa8
 8004bfc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004bfe:	4b8a      	ldr	r3, [pc, #552]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004c04:	4b88      	ldr	r3, [pc, #544]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c06:	220a      	movs	r2, #10
 8004c08:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c0a:	4b88      	ldr	r3, [pc, #544]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004c10:	4b86      	ldr	r3, [pc, #536]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004c12:	22ff      	movs	r2, #255	; 0xff
 8004c14:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004c16:	4b85      	ldr	r3, [pc, #532]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004c18:	22ff      	movs	r2, #255	; 0xff
 8004c1a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004c1c:	4b83      	ldr	r3, [pc, #524]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004c22:	4b83      	ldr	r3, [pc, #524]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004c28:	4b81      	ldr	r3, [pc, #516]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004c2e:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004c34:	4b7e      	ldr	r3, [pc, #504]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004c3a:	f003 f8c2 	bl	8007dc2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004c3e:	4b7a      	ldr	r3, [pc, #488]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	061a      	lsls	r2, r3, #24
 8004c44:	4b78      	ldr	r3, [pc, #480]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	4b76      	ldr	r3, [pc, #472]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c4e:	789b      	ldrb	r3, [r3, #2]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	4313      	orrs	r3, r2
 8004c54:	4a74      	ldr	r2, [pc, #464]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c56:	78d2      	ldrb	r2, [r2, #3]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	061a      	lsls	r2, r3, #24
 8004c5c:	4b72      	ldr	r3, [pc, #456]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	0619      	lsls	r1, r3, #24
 8004c62:	4b71      	ldr	r3, [pc, #452]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	4319      	orrs	r1, r3
 8004c6a:	4b6f      	ldr	r3, [pc, #444]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c6c:	789b      	ldrb	r3, [r3, #2]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	430b      	orrs	r3, r1
 8004c72:	496d      	ldr	r1, [pc, #436]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c74:	78c9      	ldrb	r1, [r1, #3]
 8004c76:	430b      	orrs	r3, r1
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	0619      	lsls	r1, r3, #24
 8004c86:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	4319      	orrs	r1, r3
 8004c8e:	4b66      	ldr	r3, [pc, #408]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c90:	789b      	ldrb	r3, [r3, #2]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	430b      	orrs	r3, r1
 8004c96:	4964      	ldr	r1, [pc, #400]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004c98:	78c9      	ldrb	r1, [r1, #3]
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	4b60      	ldr	r3, [pc, #384]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	0619      	lsls	r1, r3, #24
 8004caa:	4b5f      	ldr	r3, [pc, #380]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	4319      	orrs	r1, r3
 8004cb2:	4b5d      	ldr	r3, [pc, #372]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004cb4:	789b      	ldrb	r3, [r3, #2]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	495b      	ldr	r1, [pc, #364]	; (8004e28 <MX_LWIP_Init+0x23c>)
 8004cbc:	78c9      	ldrb	r1, [r1, #3]
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	0e1b      	lsrs	r3, r3, #24
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	4a5b      	ldr	r2, [pc, #364]	; (8004e34 <MX_LWIP_Init+0x248>)
 8004cc6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004cc8:	4b58      	ldr	r3, [pc, #352]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	061a      	lsls	r2, r3, #24
 8004cce:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	4b55      	ldr	r3, [pc, #340]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004cd8:	789b      	ldrb	r3, [r3, #2]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	4a53      	ldr	r2, [pc, #332]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004ce0:	78d2      	ldrb	r2, [r2, #3]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	061a      	lsls	r2, r3, #24
 8004ce6:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	0619      	lsls	r1, r3, #24
 8004cec:	4b4f      	ldr	r3, [pc, #316]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	4319      	orrs	r1, r3
 8004cf4:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004cf6:	789b      	ldrb	r3, [r3, #2]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	494b      	ldr	r1, [pc, #300]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004cfe:	78c9      	ldrb	r1, [r1, #3]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	0619      	lsls	r1, r3, #24
 8004d10:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	4319      	orrs	r1, r3
 8004d18:	4b44      	ldr	r3, [pc, #272]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d1a:	789b      	ldrb	r3, [r3, #2]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	4942      	ldr	r1, [pc, #264]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d22:	78c9      	ldrb	r1, [r1, #3]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	0619      	lsls	r1, r3, #24
 8004d34:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4319      	orrs	r1, r3
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d3e:	789b      	ldrb	r3, [r3, #2]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	430b      	orrs	r3, r1
 8004d44:	4939      	ldr	r1, [pc, #228]	; (8004e2c <MX_LWIP_Init+0x240>)
 8004d46:	78c9      	ldrb	r1, [r1, #3]
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <MX_LWIP_Init+0x24c>)
 8004d50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	061a      	lsls	r2, r3, #24
 8004d58:	4b35      	ldr	r3, [pc, #212]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d62:	789b      	ldrb	r3, [r3, #2]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	4313      	orrs	r3, r2
 8004d68:	4a31      	ldr	r2, [pc, #196]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d6a:	78d2      	ldrb	r2, [r2, #3]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	061a      	lsls	r2, r3, #24
 8004d70:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	0619      	lsls	r1, r3, #24
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	4319      	orrs	r1, r3
 8004d7e:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d80:	789b      	ldrb	r3, [r3, #2]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	430b      	orrs	r3, r1
 8004d86:	492a      	ldr	r1, [pc, #168]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d88:	78c9      	ldrb	r1, [r1, #3]
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d92:	431a      	orrs	r2, r3
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	0619      	lsls	r1, r3, #24
 8004d9a:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	4319      	orrs	r1, r3
 8004da2:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004da4:	789b      	ldrb	r3, [r3, #2]
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	430b      	orrs	r3, r1
 8004daa:	4921      	ldr	r1, [pc, #132]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004dac:	78c9      	ldrb	r1, [r1, #3]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004db6:	431a      	orrs	r2, r3
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	0619      	lsls	r1, r3, #24
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	4319      	orrs	r1, r3
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004dc8:	789b      	ldrb	r3, [r3, #2]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	4918      	ldr	r1, [pc, #96]	; (8004e30 <MX_LWIP_Init+0x244>)
 8004dd0:	78c9      	ldrb	r1, [r1, #3]
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <MX_LWIP_Init+0x250>)
 8004dda:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <MX_LWIP_Init+0x254>)
 8004dde:	9302      	str	r3, [sp, #8]
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <MX_LWIP_Init+0x258>)
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <MX_LWIP_Init+0x250>)
 8004dea:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <MX_LWIP_Init+0x24c>)
 8004dec:	4911      	ldr	r1, [pc, #68]	; (8004e34 <MX_LWIP_Init+0x248>)
 8004dee:	4816      	ldr	r0, [pc, #88]	; (8004e48 <MX_LWIP_Init+0x25c>)
 8004df0:	f003 fc8c 	bl	800870c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004df4:	4814      	ldr	r0, [pc, #80]	; (8004e48 <MX_LWIP_Init+0x25c>)
 8004df6:	f003 fe3b 	bl	8008a70 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <MX_LWIP_Init+0x25c>)
 8004dfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004e0c:	480e      	ldr	r0, [pc, #56]	; (8004e48 <MX_LWIP_Init+0x25c>)
 8004e0e:	f003 fe3f 	bl	8008a90 <netif_set_up>
 8004e12:	e002      	b.n	8004e1a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004e14:	480c      	ldr	r0, [pc, #48]	; (8004e48 <MX_LWIP_Init+0x25c>)
 8004e16:	f003 fea7 	bl	8008b68 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004e1a:	490c      	ldr	r1, [pc, #48]	; (8004e4c <MX_LWIP_Init+0x260>)
 8004e1c:	480a      	ldr	r0, [pc, #40]	; (8004e48 <MX_LWIP_Init+0x25c>)
 8004e1e:	f003 fed5 	bl	8008bcc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	2000321c 	.word	0x2000321c
 8004e2c:	20003220 	.word	0x20003220
 8004e30:	20003224 	.word	0x20003224
 8004e34:	20003210 	.word	0x20003210
 8004e38:	20003214 	.word	0x20003214
 8004e3c:	20003218 	.word	0x20003218
 8004e40:	08012a0d 	.word	0x08012a0d
 8004e44:	080053f1 	.word	0x080053f1
 8004e48:	200031dc 	.word	0x200031dc
 8004e4c:	0800545d 	.word	0x0800545d

08004e50 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004e54:	4803      	ldr	r0, [pc, #12]	; (8004e64 <MX_LWIP_Process+0x14>)
 8004e56:	f000 faab 	bl	80053b0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004e5a:	f00a fe31 	bl	800fac0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200031dc 	.word	0x200031dc

08004e68 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	; 0x38
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a46      	ldr	r2, [pc, #280]	; (8004fa0 <HAL_ETH_MspInit+0x138>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	f040 8085 	bne.w	8004f96 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	4a43      	ldr	r2, [pc, #268]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9c:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	4a3c      	ldr	r2, [pc, #240]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	4a35      	ldr	r2, [pc, #212]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004f22:	f043 0302 	orr.w	r3, r3, #2
 8004f26:	6313      	str	r3, [r2, #48]	; 0x30
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <HAL_ETH_MspInit+0x13c>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004f34:	2332      	movs	r3, #50	; 0x32
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f40:	2303      	movs	r3, #3
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f44:	230b      	movs	r3, #11
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4816      	ldr	r0, [pc, #88]	; (8004fa8 <HAL_ETH_MspInit+0x140>)
 8004f50:	f7fe fbda 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004f54:	2386      	movs	r3, #134	; 0x86
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f60:	2303      	movs	r3, #3
 8004f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f64:	230b      	movs	r3, #11
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	480f      	ldr	r0, [pc, #60]	; (8004fac <HAL_ETH_MspInit+0x144>)
 8004f70:	f7fe fbca 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004f74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f86:	230b      	movs	r3, #11
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4807      	ldr	r0, [pc, #28]	; (8004fb0 <HAL_ETH_MspInit+0x148>)
 8004f92:	f7fe fbb9 	bl	8003708 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f96:	bf00      	nop
 8004f98:	3738      	adds	r7, #56	; 0x38
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40028000 	.word	0x40028000
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40020800 	.word	0x40020800
 8004fac:	40020000 	.word	0x40020000
 8004fb0:	40020400 	.word	0x40020400

08004fb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <low_level_init+0x144>)
 8004fc2:	4a4e      	ldr	r2, [pc, #312]	; (80050fc <low_level_init+0x148>)
 8004fc4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <low_level_init+0x144>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <low_level_init+0x144>)
 8004fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fd2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004fd4:	4b48      	ldr	r3, [pc, #288]	; (80050f8 <low_level_init+0x144>)
 8004fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fda:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004fdc:	4b46      	ldr	r3, [pc, #280]	; (80050f8 <low_level_init+0x144>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004fea:	23e1      	movs	r3, #225	; 0xe1
 8004fec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004ffa:	4a3f      	ldr	r2, [pc, #252]	; (80050f8 <low_level_init+0x144>)
 8004ffc:	f107 0308 	add.w	r3, r7, #8
 8005000:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005002:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <low_level_init+0x144>)
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005008:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <low_level_init+0x144>)
 800500a:	2200      	movs	r2, #0
 800500c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800500e:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <low_level_init+0x144>)
 8005010:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005014:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005016:	4838      	ldr	r0, [pc, #224]	; (80050f8 <low_level_init+0x144>)
 8005018:	f7fd fa64 	bl	80024e4 <HAL_ETH_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005038:	2304      	movs	r3, #4
 800503a:	4a31      	ldr	r2, [pc, #196]	; (8005100 <low_level_init+0x14c>)
 800503c:	4931      	ldr	r1, [pc, #196]	; (8005104 <low_level_init+0x150>)
 800503e:	482e      	ldr	r0, [pc, #184]	; (80050f8 <low_level_init+0x144>)
 8005040:	f7fd fbea 	bl	8002818 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005044:	2304      	movs	r3, #4
 8005046:	4a30      	ldr	r2, [pc, #192]	; (8005108 <low_level_init+0x154>)
 8005048:	4930      	ldr	r1, [pc, #192]	; (800510c <low_level_init+0x158>)
 800504a:	482b      	ldr	r0, [pc, #172]	; (80050f8 <low_level_init+0x144>)
 800504c:	f7fd fc4c 	bl	80028e8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2206      	movs	r2, #6
 8005054:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005058:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <low_level_init+0x144>)
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005064:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <low_level_init+0x144>)
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	785a      	ldrb	r2, [r3, #1]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <low_level_init+0x144>)
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	789a      	ldrb	r2, [r3, #2]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <low_level_init+0x144>)
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	78da      	ldrb	r2, [r3, #3]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <low_level_init+0x144>)
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	791a      	ldrb	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <low_level_init+0x144>)
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	795a      	ldrb	r2, [r3, #5]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050a6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050ae:	f043 030a 	orr.w	r3, r3, #10
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80050ba:	480f      	ldr	r0, [pc, #60]	; (80050f8 <low_level_init+0x144>)
 80050bc:	f7fd febc 	bl	8002e38 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80050c0:	f107 0310 	add.w	r3, r7, #16
 80050c4:	461a      	mov	r2, r3
 80050c6:	211d      	movs	r1, #29
 80050c8:	480b      	ldr	r0, [pc, #44]	; (80050f8 <low_level_init+0x144>)
 80050ca:	f7fd fde7 	bl	8002c9c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f043 030b 	orr.w	r3, r3, #11
 80050d4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	461a      	mov	r2, r3
 80050da:	211d      	movs	r1, #29
 80050dc:	4806      	ldr	r0, [pc, #24]	; (80050f8 <low_level_init+0x144>)
 80050de:	f7fd fe45 	bl	8002d6c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80050e2:	f107 0310 	add.w	r3, r7, #16
 80050e6:	461a      	mov	r2, r3
 80050e8:	211d      	movs	r1, #29
 80050ea:	4803      	ldr	r0, [pc, #12]	; (80050f8 <low_level_init+0x144>)
 80050ec:	f7fd fdd6 	bl	8002c9c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	200062c8 	.word	0x200062c8
 80050fc:	40028000 	.word	0x40028000
 8005100:	20004af8 	.word	0x20004af8
 8005104:	200032a8 	.word	0x200032a8
 8005108:	20003328 	.word	0x20003328
 800510c:	20003228 	.word	0x20003228

08005110 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800511a:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <low_level_output+0x138>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005132:	4b45      	ldr	r3, [pc, #276]	; (8005248 <low_level_output+0x138>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	623b      	str	r3, [r7, #32]
 8005140:	e05a      	b.n	80051f8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	da03      	bge.n	8005152 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800514a:	23f8      	movs	r3, #248	; 0xf8
 800514c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005150:	e05c      	b.n	800520c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	895b      	ldrh	r3, [r3, #10]
 8005156:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800515c:	e02f      	b.n	80051be <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	18d0      	adds	r0, r2, r3
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	18d1      	adds	r1, r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005172:	3304      	adds	r3, #4
 8005174:	461a      	mov	r2, r3
 8005176:	f00d fd53 	bl	8012c20 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da03      	bge.n	8005190 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005188:	23f8      	movs	r3, #248	; 0xf8
 800518a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800518e:	e03d      	b.n	800520c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80051a0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051ac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051b8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d8c8      	bhi.n	800515e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	18d0      	adds	r0, r2, r3
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4619      	mov	r1, r3
 80051de:	f00d fd1f 	bl	8012c20 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1a1      	bne.n	8005142 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80051fe:	6979      	ldr	r1, [r7, #20]
 8005200:	4811      	ldr	r0, [pc, #68]	; (8005248 <low_level_output+0x138>)
 8005202:	f7fd fbdd 	bl	80029c0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <low_level_output+0x138>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <low_level_output+0x138>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005226:	461a      	mov	r2, r3
 8005228:	2320      	movs	r3, #32
 800522a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <low_level_output+0x138>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005234:	461a      	mov	r2, r3
 8005236:	2300      	movs	r3, #0
 8005238:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800523a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800523e:	4618      	mov	r0, r3
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200062c8 	.word	0x200062c8

0800524c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08c      	sub	sp, #48	; 0x30
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005270:	484e      	ldr	r0, [pc, #312]	; (80053ac <low_level_input+0x160>)
 8005272:	f7fd fc8f 	bl	8002b94 <HAL_ETH_GetReceivedFrame>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <low_level_input+0x34>

    return NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	e091      	b.n	80053a4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005280:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <low_level_input+0x160>)
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005286:	4b49      	ldr	r3, [pc, #292]	; (80053ac <low_level_input+0x160>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005298:	4619      	mov	r1, r3
 800529a:	2000      	movs	r0, #0
 800529c:	f003 fd32 	bl	8008d04 <pbuf_alloc>
 80052a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d04b      	beq.n	8005340 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80052a8:	4b40      	ldr	r3, [pc, #256]	; (80053ac <low_level_input+0x160>)
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b6:	e040      	b.n	800533a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	895b      	ldrh	r3, [r3, #10]
 80052bc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80052c2:	e021      	b.n	8005308 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	18d0      	adds	r0, r2, r3
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	18d1      	adds	r1, r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80052d8:	3304      	adds	r3, #4
 80052da:	461a      	mov	r2, r3
 80052dc:	f00d fca0 	bl	8012c20 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80052f6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005302:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005312:	4293      	cmp	r3, r2
 8005314:	d8d6      	bhi.n	80052c4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	18d0      	adds	r0, r2, r3
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4619      	mov	r1, r3
 8005328:	f00d fc7a 	bl	8012c20 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1bb      	bne.n	80052b8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <low_level_input+0x160>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e00b      	b.n	8005364 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	3301      	adds	r3, #1
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	4b11      	ldr	r3, [pc, #68]	; (80053ac <low_level_input+0x160>)
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3ee      	bcc.n	800534c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <low_level_input+0x160>)
 8005370:	2200      	movs	r2, #0
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <low_level_input+0x160>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <low_level_input+0x160>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538e:	461a      	mov	r2, r3
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <low_level_input+0x160>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539c:	461a      	mov	r2, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	6093      	str	r3, [r2, #8]
  }
  return p;
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3730      	adds	r7, #48	; 0x30
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200062c8 	.word	0x200062c8

080053b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff47 	bl	800524c <low_level_input>
 80053be:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	4798      	blx	r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80053d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f003 ff75 	bl	80092cc <pbuf_free>
    p = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e000      	b.n	80053ea <ethernetif_input+0x3a>
  if (p == NULL) return;
 80053e8:	bf00      	nop
  }
}
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <ethernetif_init+0x1c>
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <ethernetif_init+0x48>)
 8005400:	f240 2207 	movw	r2, #519	; 0x207
 8005404:	490d      	ldr	r1, [pc, #52]	; (800543c <ethernetif_init+0x4c>)
 8005406:	480e      	ldr	r0, [pc, #56]	; (8005440 <ethernetif_init+0x50>)
 8005408:	f00d fc20 	bl	8012c4c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2273      	movs	r2, #115	; 0x73
 8005410:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2274      	movs	r2, #116	; 0x74
 8005418:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a09      	ldr	r2, [pc, #36]	; (8005444 <ethernetif_init+0x54>)
 8005420:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a08      	ldr	r2, [pc, #32]	; (8005448 <ethernetif_init+0x58>)
 8005426:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fdc3 	bl	8004fb4 <low_level_init>

  return ERR_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	08013e00 	.word	0x08013e00
 800543c:	08013e1c 	.word	0x08013e1c
 8005440:	08013e2c 	.word	0x08013e2c
 8005444:	08010ec5 	.word	0x08010ec5
 8005448:	08005111 	.word	0x08005111

0800544c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005450:	f7fc ff32 	bl	80022b8 <HAL_GetTick>
 8005454:	4603      	mov	r3, r0
}
 8005456:	4618      	mov	r0, r3
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005472:	089b      	lsrs	r3, r3, #2
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d05d      	beq.n	800553a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800547e:	4b34      	ldr	r3, [pc, #208]	; (8005550 <ethernetif_update_config+0xf4>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d03f      	beq.n	8005506 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800548a:	2100      	movs	r1, #0
 800548c:	4830      	ldr	r0, [pc, #192]	; (8005550 <ethernetif_update_config+0xf4>)
 800548e:	f7fd fc6d 	bl	8002d6c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005492:	f7fc ff11 	bl	80022b8 <HAL_GetTick>
 8005496:	4603      	mov	r3, r0
 8005498:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	461a      	mov	r2, r3
 80054a0:	2101      	movs	r1, #1
 80054a2:	482b      	ldr	r0, [pc, #172]	; (8005550 <ethernetif_update_config+0xf4>)
 80054a4:	f7fd fbfa 	bl	8002c9c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80054a8:	f7fc ff06 	bl	80022b8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b6:	d828      	bhi.n	800550a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0eb      	beq.n	800549a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	461a      	mov	r2, r3
 80054c8:	211f      	movs	r1, #31
 80054ca:	4821      	ldr	r0, [pc, #132]	; (8005550 <ethernetif_update_config+0xf4>)
 80054cc:	f7fd fbe6 	bl	8002c9c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <ethernetif_update_config+0xf4>)
 80054dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	e002      	b.n	80054ea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80054e4:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <ethernetif_update_config+0xf4>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80054f4:	4b16      	ldr	r3, [pc, #88]	; (8005550 <ethernetif_update_config+0xf4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
 80054fa:	e016      	b.n	800552a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80054fc:	4b14      	ldr	r3, [pc, #80]	; (8005550 <ethernetif_update_config+0xf4>)
 80054fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	e011      	b.n	800552a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <ethernetif_update_config+0xb0>
          goto error;
 800550a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <ethernetif_update_config+0xf4>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <ethernetif_update_config+0xf4>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800551c:	4313      	orrs	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	2100      	movs	r1, #0
 8005524:	480a      	ldr	r0, [pc, #40]	; (8005550 <ethernetif_update_config+0xf4>)
 8005526:	f7fd fc21 	bl	8002d6c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800552a:	2100      	movs	r1, #0
 800552c:	4808      	ldr	r0, [pc, #32]	; (8005550 <ethernetif_update_config+0xf4>)
 800552e:	f7fd fce1 	bl	8002ef4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005532:	4807      	ldr	r0, [pc, #28]	; (8005550 <ethernetif_update_config+0xf4>)
 8005534:	f7fd fc80 	bl	8002e38 <HAL_ETH_Start>
 8005538:	e002      	b.n	8005540 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <ethernetif_update_config+0xf4>)
 800553c:	f7fd fcab 	bl	8002e96 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f807 	bl	8005554 <ethernetif_notify_conn_changed>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200062c8 	.word	0x200062c8

08005554 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	4a08      	ldr	r2, [pc, #32]	; (8005598 <disk_status+0x30>)
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	79fa      	ldrb	r2, [r7, #7]
 8005580:	4905      	ldr	r1, [pc, #20]	; (8005598 <disk_status+0x30>)
 8005582:	440a      	add	r2, r1
 8005584:	7a12      	ldrb	r2, [r2, #8]
 8005586:	4610      	mov	r0, r2
 8005588:	4798      	blx	r3
 800558a:	4603      	mov	r3, r0
 800558c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20006338 	.word	0x20006338

0800559c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <disk_initialize+0x48>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d111      	bne.n	80055d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	4a0b      	ldr	r2, [pc, #44]	; (80055e4 <disk_initialize+0x48>)
 80055b8:	2101      	movs	r1, #1
 80055ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <disk_initialize+0x48>)
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	79fa      	ldrb	r2, [r7, #7]
 80055ca:	4906      	ldr	r1, [pc, #24]	; (80055e4 <disk_initialize+0x48>)
 80055cc:	440a      	add	r2, r1
 80055ce:	7a12      	ldrb	r2, [r2, #8]
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20006338 	.word	0x20006338

080055e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <disk_read+0x3c>)
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	689c      	ldr	r4, [r3, #8]
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	4a07      	ldr	r2, [pc, #28]	; (8005624 <disk_read+0x3c>)
 8005608:	4413      	add	r3, r2
 800560a:	7a18      	ldrb	r0, [r3, #8]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	47a0      	blx	r4
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]
  return res;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
}
 800561a:	4618      	mov	r0, r3
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	bf00      	nop
 8005624:	20006338 	.word	0x20006338

08005628 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <disk_write+0x3c>)
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	68dc      	ldr	r4, [r3, #12]
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <disk_write+0x3c>)
 8005648:	4413      	add	r3, r2
 800564a:	7a18      	ldrb	r0, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	47a0      	blx	r4
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]
  return res;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}
 8005662:	bf00      	nop
 8005664:	20006338 	.word	0x20006338

08005668 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	603a      	str	r2, [r7, #0]
 8005672:	71fb      	strb	r3, [r7, #7]
 8005674:	460b      	mov	r3, r1
 8005676:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <disk_ioctl+0x38>)
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	79fa      	ldrb	r2, [r7, #7]
 8005686:	4906      	ldr	r1, [pc, #24]	; (80056a0 <disk_ioctl+0x38>)
 8005688:	440a      	add	r2, r1
 800568a:	7a10      	ldrb	r0, [r2, #8]
 800568c:	79b9      	ldrb	r1, [r7, #6]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4798      	blx	r3
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
  return res;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20006338 	.word	0x20006338

080056a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3301      	adds	r3, #1
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	b21a      	sxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b21b      	sxth	r3, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b21b      	sxth	r3, r3
 80056c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80056c6:	89fb      	ldrh	r3, [r7, #14]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3303      	adds	r3, #3
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	3202      	adds	r2, #2
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	3201      	adds	r2, #1
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
	return rv;
 800570c:	68fb      	ldr	r3, [r7, #12]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	887a      	ldrh	r2, [r7, #2]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	887b      	ldrh	r3, [r7, #2]
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	887a      	ldrh	r2, [r7, #2]
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	0a1b      	lsrs	r3, r3, #8
 800576a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	0a1b      	lsrs	r3, r3, #8
 800578e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	1c53      	adds	r3, r2, #1
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	6179      	str	r1, [r7, #20]
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	607b      	str	r3, [r7, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f1      	bne.n	80057c2 <mem_cpy+0x1a>
	}
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	617a      	str	r2, [r7, #20]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3b01      	subs	r3, #1
 800580a:	607b      	str	r3, [r7, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f3      	bne.n	80057fa <mem_set+0x10>
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	61fb      	str	r3, [r7, #28]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	61ba      	str	r2, [r7, #24]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	1acb      	subs	r3, r1, r3
 800584c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3b01      	subs	r3, #1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <mem_cmp+0x40>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0eb      	beq.n	8005838 <mem_cmp+0x18>

	return r;
 8005860:	697b      	ldr	r3, [r7, #20]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3724      	adds	r7, #36	; 0x24
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005878:	e002      	b.n	8005880 <chk_chr+0x12>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3301      	adds	r3, #1
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <chk_chr+0x26>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	4293      	cmp	r3, r2
 8005892:	d1f2      	bne.n	800587a <chk_chr+0xc>
	return *str;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	781b      	ldrb	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058ae:	2300      	movs	r3, #0
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e029      	b.n	800590c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80058b8:	4a27      	ldr	r2, [pc, #156]	; (8005958 <chk_lock+0xb4>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	4413      	add	r3, r2
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01d      	beq.n	8005902 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80058c6:	4a24      	ldr	r2, [pc, #144]	; (8005958 <chk_lock+0xb4>)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	4413      	add	r3, r2
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d116      	bne.n	8005906 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <chk_lock+0xb4>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	4413      	add	r3, r2
 80058e0:	3304      	adds	r3, #4
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d10c      	bne.n	8005906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80058ec:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <chk_lock+0xb4>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	4413      	add	r3, r2
 80058f4:	3308      	adds	r3, #8
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d102      	bne.n	8005906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005900:	e007      	b.n	8005912 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d9d2      	bls.n	80058b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d109      	bne.n	800592c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <chk_lock+0x80>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d101      	bne.n	8005928 <chk_lock+0x84>
 8005924:	2300      	movs	r3, #0
 8005926:	e010      	b.n	800594a <chk_lock+0xa6>
 8005928:	2312      	movs	r3, #18
 800592a:	e00e      	b.n	800594a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <chk_lock+0xa0>
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <chk_lock+0xb4>)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	4413      	add	r3, r2
 800593a:	330c      	adds	r3, #12
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	d101      	bne.n	8005948 <chk_lock+0xa4>
 8005944:	2310      	movs	r3, #16
 8005946:	e000      	b.n	800594a <chk_lock+0xa6>
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20006318 	.word	0x20006318

0800595c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	e002      	b.n	800596e <enq_lock+0x12>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d806      	bhi.n	8005982 <enq_lock+0x26>
 8005974:	4a09      	ldr	r2, [pc, #36]	; (800599c <enq_lock+0x40>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	4413      	add	r3, r2
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f2      	bne.n	8005968 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b02      	cmp	r3, #2
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20006318 	.word	0x20006318

080059a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	e01f      	b.n	80059f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80059b0:	4a41      	ldr	r2, [pc, #260]	; (8005ab8 <inc_lock+0x118>)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	4413      	add	r3, r2
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d113      	bne.n	80059ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80059c2:	4a3d      	ldr	r2, [pc, #244]	; (8005ab8 <inc_lock+0x118>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	4413      	add	r3, r2
 80059ca:	3304      	adds	r3, #4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d109      	bne.n	80059ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80059d6:	4a38      	ldr	r2, [pc, #224]	; (8005ab8 <inc_lock+0x118>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	4413      	add	r3, r2
 80059de:	3308      	adds	r3, #8
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d006      	beq.n	80059f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d9dc      	bls.n	80059b0 <inc_lock+0x10>
 80059f6:	e000      	b.n	80059fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80059f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d132      	bne.n	8005a66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <inc_lock+0x6c>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d806      	bhi.n	8005a20 <inc_lock+0x80>
 8005a12:	4a29      	ldr	r2, [pc, #164]	; (8005ab8 <inc_lock+0x118>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	4413      	add	r3, r2
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f2      	bne.n	8005a06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d101      	bne.n	8005a2a <inc_lock+0x8a>
 8005a26:	2300      	movs	r3, #0
 8005a28:	e040      	b.n	8005aac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4922      	ldr	r1, [pc, #136]	; (8005ab8 <inc_lock+0x118>)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	440b      	add	r3, r1
 8005a36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	491e      	ldr	r1, [pc, #120]	; (8005ab8 <inc_lock+0x118>)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	440b      	add	r3, r1
 8005a44:	3304      	adds	r3, #4
 8005a46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	491a      	ldr	r1, [pc, #104]	; (8005ab8 <inc_lock+0x118>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	440b      	add	r3, r1
 8005a54:	3308      	adds	r3, #8
 8005a56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <inc_lock+0x118>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	330c      	adds	r3, #12
 8005a62:	2200      	movs	r2, #0
 8005a64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d009      	beq.n	8005a80 <inc_lock+0xe0>
 8005a6c:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <inc_lock+0x118>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	4413      	add	r3, r2
 8005a74:	330c      	adds	r3, #12
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <inc_lock+0xe0>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e015      	b.n	8005aac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d108      	bne.n	8005a98 <inc_lock+0xf8>
 8005a86:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <inc_lock+0x118>)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	4413      	add	r3, r2
 8005a8e:	330c      	adds	r3, #12
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	e001      	b.n	8005a9c <inc_lock+0xfc>
 8005a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a9c:	4906      	ldr	r1, [pc, #24]	; (8005ab8 <inc_lock+0x118>)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	440b      	add	r3, r1
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20006318 	.word	0x20006318

08005abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d825      	bhi.n	8005b1c <dec_lock+0x60>
		n = Files[i].ctr;
 8005ad0:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <dec_lock+0x74>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	4413      	add	r3, r2
 8005ad8:	330c      	adds	r3, #12
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae4:	d101      	bne.n	8005aea <dec_lock+0x2e>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005aea:	89fb      	ldrh	r3, [r7, #14]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <dec_lock+0x3a>
 8005af0:	89fb      	ldrh	r3, [r7, #14]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <dec_lock+0x74>)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	4413      	add	r3, r2
 8005afe:	330c      	adds	r3, #12
 8005b00:	89fa      	ldrh	r2, [r7, #14]
 8005b02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005b04:	89fb      	ldrh	r3, [r7, #14]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <dec_lock+0x5a>
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <dec_lock+0x74>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	4413      	add	r3, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	737b      	strb	r3, [r7, #13]
 8005b1a:	e001      	b.n	8005b20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005b20:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20006318 	.word	0x20006318

08005b34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e010      	b.n	8005b64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b42:	4a0d      	ldr	r2, [pc, #52]	; (8005b78 <clear_lock+0x44>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4413      	add	r3, r2
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d105      	bne.n	8005b5e <clear_lock+0x2a>
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <clear_lock+0x44>)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	4413      	add	r3, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d9eb      	bls.n	8005b42 <clear_lock+0xe>
	}
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20006318 	.word	0x20006318

08005b7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	78db      	ldrb	r3, [r3, #3]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d034      	beq.n	8005bfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	7858      	ldrb	r0, [r3, #1]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	f7ff fd40 	bl	8005628 <disk_write>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
 8005bb2:	e022      	b.n	8005bfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	1ad2      	subs	r2, r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d217      	bcs.n	8005bfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	789b      	ldrb	r3, [r3, #2]
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e010      	b.n	8005bf4 <sync_window+0x78>
					wsect += fs->fsize;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	7858      	ldrb	r0, [r3, #1]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005be6:	2301      	movs	r3, #1
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	f7ff fd1d 	bl	8005628 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d8eb      	bhi.n	8005bd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d01b      	beq.n	8005c54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff ffad 	bl	8005b7c <sync_window>
 8005c22:	4603      	mov	r3, r0
 8005c24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d113      	bne.n	8005c54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7858      	ldrb	r0, [r3, #1]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c36:	2301      	movs	r3, #1
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	f7ff fcd5 	bl	80055e8 <disk_read>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff ff87 	bl	8005b7c <sync_window>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d159      	bne.n	8005d2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d149      	bne.n	8005d14 <sync_fs+0xb4>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	791b      	ldrb	r3, [r3, #4]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d145      	bne.n	8005d14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	899b      	ldrh	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	2100      	movs	r1, #0
 8005c96:	f7ff fda8 	bl	80057ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3334      	adds	r3, #52	; 0x34
 8005c9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ca2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fd37 	bl	800571a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3334      	adds	r3, #52	; 0x34
 8005cb0:	4921      	ldr	r1, [pc, #132]	; (8005d38 <sync_fs+0xd8>)
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fd4c 	bl	8005750 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3334      	adds	r3, #52	; 0x34
 8005cbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005cc0:	491e      	ldr	r1, [pc, #120]	; (8005d3c <sync_fs+0xdc>)
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fd44 	bl	8005750 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3334      	adds	r3, #52	; 0x34
 8005ccc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7ff fd3a 	bl	8005750 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3334      	adds	r3, #52	; 0x34
 8005ce0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7ff fd30 	bl	8005750 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7858      	ldrb	r0, [r3, #1]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f7ff fc8d 	bl	8005628 <disk_write>
			fs->fsi_flag = 0;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fca3 	bl	8005668 <disk_ioctl>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <sync_fs+0xcc>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	41615252 	.word	0x41615252
 8005d3c:	61417272 	.word	0x61417272

08005d40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	3b02      	subs	r3, #2
 8005d4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	3b02      	subs	r3, #2
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d301      	bcc.n	8005d60 <clust2sect+0x20>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e008      	b.n	8005d72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	895b      	ldrh	r3, [r3, #10]
 8005d64:	461a      	mov	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	fb03 f202 	mul.w	r2, r3, r2
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4413      	add	r3, r2
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d904      	bls.n	8005d9e <get_fat+0x20>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005d9e:	2301      	movs	r3, #1
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e0bb      	b.n	8005f1c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005da4:	f04f 33ff 	mov.w	r3, #4294967295
 8005da8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	f000 8083 	beq.w	8005eba <get_fat+0x13c>
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	f300 80a7 	bgt.w	8005f08 <get_fat+0x18a>
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d002      	beq.n	8005dc4 <get_fat+0x46>
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d056      	beq.n	8005e70 <get_fat+0xf2>
 8005dc2:	e0a1      	b.n	8005f08 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	899b      	ldrh	r3, [r3, #12]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8005de2:	4413      	add	r3, r2
 8005de4:	4619      	mov	r1, r3
 8005de6:	6938      	ldr	r0, [r7, #16]
 8005de8:	f7ff ff0c 	bl	8005c04 <move_window>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 808d 	bne.w	8005f0e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	60fa      	str	r2, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	8992      	ldrh	r2, [r2, #12]
 8005dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e02:	fb01 f202 	mul.w	r2, r1, r2
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	899b      	ldrh	r3, [r3, #12]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e22:	4413      	add	r3, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	6938      	ldr	r0, [r7, #16]
 8005e28:	f7ff feec 	bl	8005c04 <move_window>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d16f      	bne.n	8005f12 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	899b      	ldrh	r3, [r3, #12]
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e3e:	fb01 f202 	mul.w	r2, r1, r2
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <get_fat+0xe8>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	e002      	b.n	8005e6c <get_fat+0xee>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6c:	617b      	str	r3, [r7, #20]
			break;
 8005e6e:	e055      	b.n	8005f1c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	899b      	ldrh	r3, [r3, #12]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e84:	4413      	add	r3, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	6938      	ldr	r0, [r7, #16]
 8005e8a:	f7ff febb 	bl	8005c04 <move_window>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d140      	bne.n	8005f16 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	8992      	ldrh	r2, [r2, #12]
 8005ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ea6:	fb00 f202 	mul.w	r2, r0, r2
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	440b      	add	r3, r1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fbf8 	bl	80056a4 <ld_word>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	617b      	str	r3, [r7, #20]
			break;
 8005eb8:	e030      	b.n	8005f1c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	899b      	ldrh	r3, [r3, #12]
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ece:	4413      	add	r3, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f7ff fe96 	bl	8005c04 <move_window>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d11d      	bne.n	8005f1a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	8992      	ldrh	r2, [r2, #12]
 8005eec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ef0:	fb00 f202 	mul.w	r2, r0, r2
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff fbeb 	bl	80056d4 <ld_dword>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f04:	617b      	str	r3, [r7, #20]
			break;
 8005f06:	e009      	b.n	8005f1c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005f08:	2301      	movs	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e006      	b.n	8005f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f0e:	bf00      	nop
 8005f10:	e004      	b.n	8005f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f1a:	bf00      	nop
		}
	}

	return val;
 8005f1c:	697b      	ldr	r3, [r7, #20]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005f26:	b590      	push	{r4, r7, lr}
 8005f28:	b089      	sub	sp, #36	; 0x24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005f32:	2302      	movs	r3, #2
 8005f34:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	f240 8102 	bls.w	8006142 <put_fat+0x21c>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	f080 80fc 	bcs.w	8006142 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	f000 80b6 	beq.w	80060c0 <put_fat+0x19a>
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	f300 80fd 	bgt.w	8006154 <put_fat+0x22e>
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d003      	beq.n	8005f66 <put_fat+0x40>
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	f000 8083 	beq.w	800606a <put_fat+0x144>
 8005f64:	e0f6      	b.n	8006154 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4413      	add	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	899b      	ldrh	r3, [r3, #12]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f84:	4413      	add	r3, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fe3b 	bl	8005c04 <move_window>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 80d6 	bne.w	8006146 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	61ba      	str	r2, [r7, #24]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	8992      	ldrh	r2, [r2, #12]
 8005faa:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fae:	fb00 f202 	mul.w	r2, r0, r2
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <put_fat+0xb8>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	b25a      	sxtb	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b25b      	sxtb	r3, r3
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e001      	b.n	8005fe2 <put_fat+0xbc>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	899b      	ldrh	r3, [r3, #12]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fdff 	bl	8005c04 <move_window>
 8006006:	4603      	mov	r3, r0
 8006008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 809c 	bne.w	800614a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	899b      	ldrh	r3, [r3, #12]
 800601c:	461a      	mov	r2, r3
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	fbb3 f0f2 	udiv	r0, r3, r2
 8006024:	fb00 f202 	mul.w	r2, r0, r2
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	440b      	add	r3, r1
 800602c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <put_fat+0x11a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	b2db      	uxtb	r3, r3
 800603e:	e00e      	b.n	800605e <put_fat+0x138>
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b25b      	sxtb	r3, r3
 8006046:	f023 030f 	bic.w	r3, r3, #15
 800604a:	b25a      	sxtb	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b25b      	sxtb	r3, r3
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	b25b      	sxtb	r3, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	b25b      	sxtb	r3, r3
 800605c:	b2db      	uxtb	r3, r3
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	70da      	strb	r2, [r3, #3]
			break;
 8006068:	e074      	b.n	8006154 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	899b      	ldrh	r3, [r3, #12]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	b29b      	uxth	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	fbb3 f3f1 	udiv	r3, r3, r1
 800607e:	4413      	add	r3, r2
 8006080:	4619      	mov	r1, r3
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fdbe 	bl	8005c04 <move_window>
 8006088:	4603      	mov	r3, r0
 800608a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800608c:	7ffb      	ldrb	r3, [r7, #31]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d15d      	bne.n	800614e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	8992      	ldrh	r2, [r2, #12]
 80060a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80060a4:	fb00 f202 	mul.w	r2, r0, r2
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	440b      	add	r3, r1
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	b292      	uxth	r2, r2
 80060b0:	4611      	mov	r1, r2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fb31 	bl	800571a <st_word>
			fs->wflag = 1;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	70da      	strb	r2, [r3, #3]
			break;
 80060be:	e049      	b.n	8006154 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	899b      	ldrh	r3, [r3, #12]
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80060d4:	4413      	add	r3, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fd93 	bl	8005c04 <move_window>
 80060de:	4603      	mov	r3, r0
 80060e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d134      	bne.n	8006152 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	8992      	ldrh	r2, [r2, #12]
 80060fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006100:	fb00 f202 	mul.w	r2, r0, r2
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	440b      	add	r3, r1
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fae3 	bl	80056d4 <ld_dword>
 800610e:	4603      	mov	r3, r0
 8006110:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006114:	4323      	orrs	r3, r4
 8006116:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	8992      	ldrh	r2, [r2, #12]
 8006126:	fbb3 f0f2 	udiv	r0, r3, r2
 800612a:	fb00 f202 	mul.w	r2, r0, r2
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	440b      	add	r3, r1
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fb0b 	bl	8005750 <st_dword>
			fs->wflag = 1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	70da      	strb	r2, [r3, #3]
			break;
 8006140:	e008      	b.n	8006154 <put_fat+0x22e>
		}
	}
 8006142:	bf00      	nop
 8006144:	e006      	b.n	8006154 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006146:	bf00      	nop
 8006148:	e004      	b.n	8006154 <put_fat+0x22e>
			if (res != FR_OK) break;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <put_fat+0x22e>
			if (res != FR_OK) break;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006152:	bf00      	nop
	return res;
 8006154:	7ffb      	ldrb	r3, [r7, #31]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3724      	adds	r7, #36	; 0x24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd90      	pop	{r4, r7, pc}

0800615e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b088      	sub	sp, #32
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d904      	bls.n	8006184 <remove_chain+0x26>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	d301      	bcc.n	8006188 <remove_chain+0x2a>
 8006184:	2302      	movs	r3, #2
 8006186:	e04b      	b.n	8006220 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	69b8      	ldr	r0, [r7, #24]
 8006196:	f7ff fec6 	bl	8005f26 <put_fat>
 800619a:	4603      	mov	r3, r0
 800619c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800619e:	7ffb      	ldrb	r3, [r7, #31]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <remove_chain+0x4a>
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	e03b      	b.n	8006220 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fde7 	bl	8005d7e <get_fat>
 80061b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d031      	beq.n	800621c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <remove_chain+0x64>
 80061be:	2302      	movs	r3, #2
 80061c0:	e02e      	b.n	8006220 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d101      	bne.n	80061ce <remove_chain+0x70>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e028      	b.n	8006220 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80061ce:	2200      	movs	r2, #0
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	69b8      	ldr	r0, [r7, #24]
 80061d4:	f7ff fea7 	bl	8005f26 <put_fat>
 80061d8:	4603      	mov	r3, r0
 80061da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <remove_chain+0x88>
 80061e2:	7ffb      	ldrb	r3, [r7, #31]
 80061e4:	e01c      	b.n	8006220 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	3b02      	subs	r3, #2
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d20b      	bcs.n	800620c <remove_chain+0xae>
			fs->free_clst++;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	791b      	ldrb	r3, [r3, #4]
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	d3c6      	bcc.n	80061a8 <remove_chain+0x4a>
 800621a:	e000      	b.n	800621e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800621c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10d      	bne.n	800625a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <create_chain+0x2c>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	429a      	cmp	r2, r3
 8006252:	d31b      	bcc.n	800628c <create_chain+0x64>
 8006254:	2301      	movs	r3, #1
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e018      	b.n	800628c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fd8e 	bl	8005d7e <get_fat>
 8006262:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d801      	bhi.n	800626e <create_chain+0x46>
 800626a:	2301      	movs	r3, #1
 800626c:	e070      	b.n	8006350 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d101      	bne.n	800627a <create_chain+0x52>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	e06a      	b.n	8006350 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	429a      	cmp	r2, r3
 8006282:	d201      	bcs.n	8006288 <create_chain+0x60>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e063      	b.n	8006350 <create_chain+0x128>
		scl = clst;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3301      	adds	r3, #1
 8006294:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	429a      	cmp	r2, r3
 800629e:	d307      	bcc.n	80062b0 <create_chain+0x88>
				ncl = 2;
 80062a0:	2302      	movs	r3, #2
 80062a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d901      	bls.n	80062b0 <create_chain+0x88>
 80062ac:	2300      	movs	r3, #0
 80062ae:	e04f      	b.n	8006350 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fd63 	bl	8005d7e <get_fat>
 80062b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00e      	beq.n	80062de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d003      	beq.n	80062ce <create_chain+0xa6>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d101      	bne.n	80062d2 <create_chain+0xaa>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	e03e      	b.n	8006350 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d1da      	bne.n	8006290 <create_chain+0x68>
 80062da:	2300      	movs	r3, #0
 80062dc:	e038      	b.n	8006350 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80062de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	69f9      	ldr	r1, [r7, #28]
 80062e6:	6938      	ldr	r0, [r7, #16]
 80062e8:	f7ff fe1d 	bl	8005f26 <put_fat>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <create_chain+0xe2>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d006      	beq.n	800630a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6938      	ldr	r0, [r7, #16]
 8006302:	f7ff fe10 	bl	8005f26 <put_fat>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d116      	bne.n	800633e <create_chain+0x116>
		fs->last_clst = ncl;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	3b02      	subs	r3, #2
 8006320:	429a      	cmp	r2, r3
 8006322:	d804      	bhi.n	800632e <create_chain+0x106>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	791b      	ldrb	r3, [r3, #4]
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	711a      	strb	r2, [r3, #4]
 800633c:	e007      	b.n	800634e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d102      	bne.n	800634a <create_chain+0x122>
 8006344:	f04f 33ff 	mov.w	r3, #4294967295
 8006348:	e000      	b.n	800634c <create_chain+0x124>
 800634a:	2301      	movs	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800634e:	69fb      	ldr	r3, [r7, #28]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	3304      	adds	r3, #4
 800636e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	899b      	ldrh	r3, [r3, #12]
 8006374:	461a      	mov	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	fbb3 f3f2 	udiv	r3, r3, r2
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	8952      	ldrh	r2, [r2, #10]
 8006380:	fbb3 f3f2 	udiv	r3, r3, r2
 8006384:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1d1a      	adds	r2, r3, #4
 800638a:	613a      	str	r2, [r7, #16]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <clmt_clust+0x42>
 8006396:	2300      	movs	r3, #0
 8006398:	e010      	b.n	80063bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d307      	bcc.n	80063b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3304      	adds	r3, #4
 80063ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063b0:	e7e9      	b.n	8006386 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80063b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4413      	add	r3, r2
}
 80063bc:	4618      	mov	r0, r3
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063de:	d204      	bcs.n	80063ea <dir_sdi+0x22>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80063ea:	2302      	movs	r3, #2
 80063ec:	e071      	b.n	80064d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <dir_sdi+0x46>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d902      	bls.n	800640e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10c      	bne.n	800642e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	8912      	ldrh	r2, [r2, #8]
 800641c:	4293      	cmp	r3, r2
 800641e:	d301      	bcc.n	8006424 <dir_sdi+0x5c>
 8006420:	2302      	movs	r3, #2
 8006422:	e056      	b.n	80064d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	61da      	str	r2, [r3, #28]
 800642c:	e02d      	b.n	800648a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	895b      	ldrh	r3, [r3, #10]
 8006432:	461a      	mov	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	899b      	ldrh	r3, [r3, #12]
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800643e:	e019      	b.n	8006474 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fc9a 	bl	8005d7e <get_fat>
 800644a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d101      	bne.n	8006458 <dir_sdi+0x90>
 8006454:	2301      	movs	r3, #1
 8006456:	e03c      	b.n	80064d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d904      	bls.n	8006468 <dir_sdi+0xa0>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	429a      	cmp	r2, r3
 8006466:	d301      	bcc.n	800646c <dir_sdi+0xa4>
 8006468:	2302      	movs	r3, #2
 800646a:	e032      	b.n	80064d2 <dir_sdi+0x10a>
			ofs -= csz;
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	429a      	cmp	r2, r3
 800647a:	d2e1      	bcs.n	8006440 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800647c:	6979      	ldr	r1, [r7, #20]
 800647e:	6938      	ldr	r0, [r7, #16]
 8006480:	f7ff fc5e 	bl	8005d40 <clust2sect>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <dir_sdi+0xd4>
 8006498:	2302      	movs	r3, #2
 800649a:	e01a      	b.n	80064d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	899b      	ldrh	r3, [r3, #12]
 80064a4:	4619      	mov	r1, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	899b      	ldrh	r3, [r3, #12]
 80064bc:	461a      	mov	r2, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80064c4:	fb00 f202 	mul.w	r2, r0, r2
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	18ca      	adds	r2, r1, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	3320      	adds	r3, #32
 80064f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <dir_next+0x28>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006500:	d301      	bcc.n	8006506 <dir_next+0x2c>
 8006502:	2304      	movs	r3, #4
 8006504:	e0bb      	b.n	800667e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	899b      	ldrh	r3, [r3, #12]
 800650a:	461a      	mov	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006512:	fb01 f202 	mul.w	r2, r1, r2
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 809d 	bne.w	8006658 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	8912      	ldrh	r2, [r2, #8]
 8006538:	4293      	cmp	r3, r2
 800653a:	f0c0 808d 	bcc.w	8006658 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	61da      	str	r2, [r3, #28]
 8006544:	2304      	movs	r3, #4
 8006546:	e09a      	b.n	800667e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	899b      	ldrh	r3, [r3, #12]
 800654c:	461a      	mov	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	fbb3 f3f2 	udiv	r3, r3, r2
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	8952      	ldrh	r2, [r2, #10]
 8006558:	3a01      	subs	r2, #1
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d17b      	bne.n	8006658 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f7ff fc08 	bl	8005d7e <get_fat>
 800656e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d801      	bhi.n	800657a <dir_next+0xa0>
 8006576:	2302      	movs	r3, #2
 8006578:	e081      	b.n	800667e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d101      	bne.n	8006586 <dir_next+0xac>
 8006582:	2301      	movs	r3, #1
 8006584:	e07b      	b.n	800667e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	429a      	cmp	r2, r3
 800658e:	d359      	bcc.n	8006644 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	61da      	str	r2, [r3, #28]
 800659c:	2304      	movs	r3, #4
 800659e:	e06e      	b.n	800667e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7ff fe3d 	bl	8006228 <create_chain>
 80065ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <dir_next+0xe0>
 80065b6:	2307      	movs	r3, #7
 80065b8:	e061      	b.n	800667e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <dir_next+0xea>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e05c      	b.n	800667e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d101      	bne.n	80065d0 <dir_next+0xf6>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e056      	b.n	800667e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff fad3 	bl	8005b7c <sync_window>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <dir_next+0x106>
 80065dc:	2301      	movs	r3, #1
 80065de:	e04e      	b.n	800667e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	899b      	ldrh	r3, [r3, #12]
 80065ea:	461a      	mov	r2, r3
 80065ec:	2100      	movs	r1, #0
 80065ee:	f7ff f8fc 	bl	80057ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80065f2:	2300      	movs	r3, #0
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fba1 	bl	8005d40 <clust2sect>
 80065fe:	4602      	mov	r2, r0
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
 8006604:	e012      	b.n	800662c <dir_next+0x152>
						fs->wflag = 1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fab5 	bl	8005b7c <sync_window>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <dir_next+0x142>
 8006618:	2301      	movs	r3, #1
 800661a:	e030      	b.n	800667e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	3301      	adds	r3, #1
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	895b      	ldrh	r3, [r3, #10]
 8006630:	461a      	mov	r2, r3
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4293      	cmp	r3, r2
 8006636:	d3e6      	bcc.n	8006606 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff fb77 	bl	8005d40 <clust2sect>
 8006652:	4602      	mov	r2, r0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	899b      	ldrh	r3, [r3, #12]
 8006668:	461a      	mov	r2, r3
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006670:	fb00 f202 	mul.w	r2, r0, r2
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	18ca      	adds	r2, r1, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006696:	2100      	movs	r1, #0
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fe95 	bl	80063c8 <dir_sdi>
 800669e:	4603      	mov	r3, r0
 80066a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d12b      	bne.n	8006700 <dir_alloc+0x7a>
		n = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	4619      	mov	r1, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff faa6 	bl	8005c04 <move_window>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11d      	bne.n	80066fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2be5      	cmp	r3, #229	; 0xe5
 80066ca:	d004      	beq.n	80066d6 <dir_alloc+0x50>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3301      	adds	r3, #1
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d102      	bne.n	80066ea <dir_alloc+0x64>
 80066e4:	e00c      	b.n	8006700 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066e6:	2300      	movs	r3, #0
 80066e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80066ea:	2101      	movs	r1, #1
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fef4 	bl	80064da <dir_next>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0d7      	beq.n	80066ac <dir_alloc+0x26>
 80066fc:	e000      	b.n	8006700 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80066fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	2b04      	cmp	r3, #4
 8006704:	d101      	bne.n	800670a <dir_alloc+0x84>
 8006706:	2307      	movs	r3, #7
 8006708:	75fb      	strb	r3, [r7, #23]
	return res;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	331a      	adds	r3, #26
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe ffbe 	bl	80056a4 <ld_word>
 8006728:	4603      	mov	r3, r0
 800672a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d109      	bne.n	8006748 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe ffb3 	bl	80056a4 <ld_word>
 800673e:	4603      	mov	r3, r0
 8006740:	041b      	lsls	r3, r3, #16
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006748:	68fb      	ldr	r3, [r7, #12]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	331a      	adds	r3, #26
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	b292      	uxth	r2, r2
 8006766:	4611      	mov	r1, r2
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe ffd6 	bl	800571a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b03      	cmp	r3, #3
 8006774:	d109      	bne.n	800678a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f103 0214 	add.w	r2, r3, #20
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0c1b      	lsrs	r3, r3, #16
 8006780:	b29b      	uxth	r3, r3
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f7fe ffc8 	bl	800571a <st_word>
	}
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fe10 	bl	80063c8 <dir_sdi>
 80067a8:	4603      	mov	r3, r0
 80067aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <dir_find+0x24>
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	e03e      	b.n	8006834 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6938      	ldr	r0, [r7, #16]
 80067be:	f7ff fa21 	bl	8005c04 <move_window>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d12f      	bne.n	800682c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <dir_find+0x4e>
 80067da:	2304      	movs	r3, #4
 80067dc:	75fb      	strb	r3, [r7, #23]
 80067de:	e028      	b.n	8006832 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	330b      	adds	r3, #11
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	330b      	adds	r3, #11
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <dir_find+0x86>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a18      	ldr	r0, [r3, #32]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3324      	adds	r3, #36	; 0x24
 800680a:	220b      	movs	r2, #11
 800680c:	4619      	mov	r1, r3
 800680e:	f7ff f807 	bl	8005820 <mem_cmp>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006818:	2100      	movs	r1, #0
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fe5d 	bl	80064da <dir_next>
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0c5      	beq.n	80067b6 <dir_find+0x24>
 800682a:	e002      	b.n	8006832 <dir_find+0xa0>
		if (res != FR_OK) break;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006830:	bf00      	nop

	return res;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800684a:	2101      	movs	r1, #1
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff1a 	bl	8006686 <dir_alloc>
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d11c      	bne.n	8006896 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	4619      	mov	r1, r3
 8006862:	68b8      	ldr	r0, [r7, #8]
 8006864:	f7ff f9ce 	bl	8005c04 <move_window>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d111      	bne.n	8006896 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	2220      	movs	r2, #32
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe ffb5 	bl	80057ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a18      	ldr	r0, [r3, #32]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3324      	adds	r3, #36	; 0x24
 8006888:	220b      	movs	r2, #11
 800688a:	4619      	mov	r1, r3
 800688c:	f7fe ff8c 	bl	80057a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2201      	movs	r2, #1
 8006894:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3324      	adds	r3, #36	; 0x24
 80068b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80068b6:	220b      	movs	r2, #11
 80068b8:	2120      	movs	r1, #32
 80068ba:	68b8      	ldr	r0, [r7, #8]
 80068bc:	f7fe ff95 	bl	80057ea <mem_set>
	si = i = 0; ni = 8;
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	2308      	movs	r3, #8
 80068ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	61fa      	str	r2, [r7, #28]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068da:	7efb      	ldrb	r3, [r7, #27]
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d94e      	bls.n	800697e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80068e0:	7efb      	ldrb	r3, [r7, #27]
 80068e2:	2b2f      	cmp	r3, #47	; 0x2f
 80068e4:	d006      	beq.n	80068f4 <create_name+0x54>
 80068e6:	7efb      	ldrb	r3, [r7, #27]
 80068e8:	2b5c      	cmp	r3, #92	; 0x5c
 80068ea:	d110      	bne.n	800690e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80068ec:	e002      	b.n	80068f4 <create_name+0x54>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3301      	adds	r3, #1
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b2f      	cmp	r3, #47	; 0x2f
 80068fe:	d0f6      	beq.n	80068ee <create_name+0x4e>
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b5c      	cmp	r3, #92	; 0x5c
 800690a:	d0f0      	beq.n	80068ee <create_name+0x4e>
			break;
 800690c:	e038      	b.n	8006980 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800690e:	7efb      	ldrb	r3, [r7, #27]
 8006910:	2b2e      	cmp	r3, #46	; 0x2e
 8006912:	d003      	beq.n	800691c <create_name+0x7c>
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	429a      	cmp	r2, r3
 800691a:	d30c      	bcc.n	8006936 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b0b      	cmp	r3, #11
 8006920:	d002      	beq.n	8006928 <create_name+0x88>
 8006922:	7efb      	ldrb	r3, [r7, #27]
 8006924:	2b2e      	cmp	r3, #46	; 0x2e
 8006926:	d001      	beq.n	800692c <create_name+0x8c>
 8006928:	2306      	movs	r3, #6
 800692a:	e044      	b.n	80069b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800692c:	2308      	movs	r3, #8
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	230b      	movs	r3, #11
 8006932:	617b      	str	r3, [r7, #20]
			continue;
 8006934:	e022      	b.n	800697c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006936:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da04      	bge.n	8006948 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800693e:	7efb      	ldrb	r3, [r7, #27]
 8006940:	3b80      	subs	r3, #128	; 0x80
 8006942:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <create_name+0x120>)
 8006944:	5cd3      	ldrb	r3, [r2, r3]
 8006946:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006948:	7efb      	ldrb	r3, [r7, #27]
 800694a:	4619      	mov	r1, r3
 800694c:	481d      	ldr	r0, [pc, #116]	; (80069c4 <create_name+0x124>)
 800694e:	f7fe ff8e 	bl	800586e <chk_chr>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <create_name+0xbc>
 8006958:	2306      	movs	r3, #6
 800695a:	e02c      	b.n	80069b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800695c:	7efb      	ldrb	r3, [r7, #27]
 800695e:	2b60      	cmp	r3, #96	; 0x60
 8006960:	d905      	bls.n	800696e <create_name+0xce>
 8006962:	7efb      	ldrb	r3, [r7, #27]
 8006964:	2b7a      	cmp	r3, #122	; 0x7a
 8006966:	d802      	bhi.n	800696e <create_name+0xce>
 8006968:	7efb      	ldrb	r3, [r7, #27]
 800696a:	3b20      	subs	r3, #32
 800696c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	613a      	str	r2, [r7, #16]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	4413      	add	r3, r2
 8006978:	7efa      	ldrb	r2, [r7, #27]
 800697a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800697c:	e7a6      	b.n	80068cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800697e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	441a      	add	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <create_name+0xf4>
 8006990:	2306      	movs	r3, #6
 8006992:	e010      	b.n	80069b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2be5      	cmp	r3, #229	; 0xe5
 800699a:	d102      	bne.n	80069a2 <create_name+0x102>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2205      	movs	r2, #5
 80069a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80069a2:	7efb      	ldrb	r3, [r7, #27]
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d801      	bhi.n	80069ac <create_name+0x10c>
 80069a8:	2204      	movs	r2, #4
 80069aa:	e000      	b.n	80069ae <create_name+0x10e>
 80069ac:	2200      	movs	r2, #0
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	330b      	adds	r3, #11
 80069b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80069b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	08016834 	.word	0x08016834
 80069c4:	08013e54 	.word	0x08013e54

080069c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80069dc:	e002      	b.n	80069e4 <follow_path+0x1c>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b2f      	cmp	r3, #47	; 0x2f
 80069ea:	d0f8      	beq.n	80069de <follow_path+0x16>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b5c      	cmp	r3, #92	; 0x5c
 80069f2:	d0f4      	beq.n	80069de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b1f      	cmp	r3, #31
 8006a00:	d80a      	bhi.n	8006a18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2280      	movs	r2, #128	; 0x80
 8006a06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fcdb 	bl	80063c8 <dir_sdi>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
 8006a16:	e048      	b.n	8006aaa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a18:	463b      	mov	r3, r7
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ff3f 	bl	80068a0 <create_name>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d139      	bne.n	8006aa0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff feb0 	bl	8006792 <dir_find>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d12c      	bne.n	8006aa4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d127      	bne.n	8006aa4 <follow_path+0xdc>
 8006a54:	2305      	movs	r3, #5
 8006a56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006a58:	e024      	b.n	8006aa4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d121      	bne.n	8006aa8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	799b      	ldrb	r3, [r3, #6]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006a70:	2305      	movs	r3, #5
 8006a72:	75fb      	strb	r3, [r7, #23]
 8006a74:	e019      	b.n	8006aaa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	8992      	ldrh	r2, [r2, #12]
 8006a84:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a88:	fb00 f202 	mul.w	r2, r0, r2
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	440b      	add	r3, r1
 8006a90:	4619      	mov	r1, r3
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fe3e 	bl	8006714 <ld_clust>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a9e:	e7bb      	b.n	8006a18 <follow_path+0x50>
			if (res != FR_OK) break;
 8006aa0:	bf00      	nop
 8006aa2:	e002      	b.n	8006aaa <follow_path+0xe2>
				break;
 8006aa4:	bf00      	nop
 8006aa6:	e000      	b.n	8006aaa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aa8:	bf00      	nop
			}
		}
	}

	return res;
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006abc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d031      	beq.n	8006b2e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e002      	b.n	8006ad8 <get_ldnumber+0x24>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d903      	bls.n	8006ae8 <get_ldnumber+0x34>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b3a      	cmp	r3, #58	; 0x3a
 8006ae6:	d1f4      	bne.n	8006ad2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b3a      	cmp	r3, #58	; 0x3a
 8006aee:	d11c      	bne.n	8006b2a <get_ldnumber+0x76>
			tp = *path;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	60fa      	str	r2, [r7, #12]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	3b30      	subs	r3, #48	; 0x30
 8006b00:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	d80e      	bhi.n	8006b26 <get_ldnumber+0x72>
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d10a      	bne.n	8006b26 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d107      	bne.n	8006b26 <get_ldnumber+0x72>
					vol = (int)i;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	e002      	b.n	8006b30 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b2e:	693b      	ldr	r3, [r7, #16]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	70da      	strb	r2, [r3, #3]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff f854 	bl	8005c04 <move_window>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <check_fs+0x2a>
 8006b62:	2304      	movs	r3, #4
 8006b64:	e038      	b.n	8006bd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3334      	adds	r3, #52	; 0x34
 8006b6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fd98 	bl	80056a4 <ld_word>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <check_fs+0x48>
 8006b80:	2303      	movs	r3, #3
 8006b82:	e029      	b.n	8006bd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b8a:	2be9      	cmp	r3, #233	; 0xe9
 8006b8c:	d009      	beq.n	8006ba2 <check_fs+0x66>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b94:	2beb      	cmp	r3, #235	; 0xeb
 8006b96:	d11e      	bne.n	8006bd6 <check_fs+0x9a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b9e:	2b90      	cmp	r3, #144	; 0x90
 8006ba0:	d119      	bne.n	8006bd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3334      	adds	r3, #52	; 0x34
 8006ba6:	3336      	adds	r3, #54	; 0x36
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe fd93 	bl	80056d4 <ld_dword>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bb4:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <check_fs+0xa4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <check_fs+0x82>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e00c      	b.n	8006bd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3334      	adds	r3, #52	; 0x34
 8006bc2:	3352      	adds	r3, #82	; 0x52
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fd85 	bl	80056d4 <ld_dword>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <check_fs+0xa8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <check_fs+0x9a>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006bd6:	2302      	movs	r3, #2
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	00544146 	.word	0x00544146
 8006be4:	33544146 	.word	0x33544146

08006be8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b096      	sub	sp, #88	; 0x58
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff ff59 	bl	8006ab4 <get_ldnumber>
 8006c02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da01      	bge.n	8006c0e <find_volume+0x26>
 8006c0a:	230b      	movs	r3, #11
 8006c0c:	e262      	b.n	80070d4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c0e:	4a9f      	ldr	r2, [pc, #636]	; (8006e8c <find_volume+0x2a4>)
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <find_volume+0x3a>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	e258      	b.n	80070d4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	f023 0301 	bic.w	r3, r3, #1
 8006c2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01a      	beq.n	8006c6e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fc93 	bl	8005568 <disk_status>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10c      	bne.n	8006c6e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <find_volume+0x82>
 8006c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006c66:	230a      	movs	r3, #10
 8006c68:	e234      	b.n	80070d4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e232      	b.n	80070d4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fc8b 	bl	800559c <disk_initialize>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e21b      	b.n	80070d4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <find_volume+0xca>
 8006ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006cae:	230a      	movs	r3, #10
 8006cb0:	e210      	b.n	80070d4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	7858      	ldrb	r0, [r3, #1]
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	330c      	adds	r3, #12
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	f7fe fcd3 	bl	8005668 <disk_ioctl>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <find_volume+0xe4>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e203      	b.n	80070d4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	899b      	ldrh	r3, [r3, #12]
 8006cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd4:	d80d      	bhi.n	8006cf2 <find_volume+0x10a>
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	899b      	ldrh	r3, [r3, #12]
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cde:	d308      	bcc.n	8006cf2 <find_volume+0x10a>
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	899b      	ldrh	r3, [r3, #12]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	899b      	ldrh	r3, [r3, #12]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <find_volume+0x10e>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e1ee      	b.n	80070d4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006cfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cfe:	f7ff ff1d 	bl	8006b3c <check_fs>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d149      	bne.n	8006da4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d10:	2300      	movs	r3, #0
 8006d12:	643b      	str	r3, [r7, #64]	; 0x40
 8006d14:	e01e      	b.n	8006d54 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d24:	4413      	add	r3, r2
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <find_volume+0x158>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	3308      	adds	r3, #8
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe fccc 	bl	80056d4 <ld_dword>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	e000      	b.n	8006d42 <find_volume+0x15a>
 8006d40:	2200      	movs	r2, #0
 8006d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	3358      	adds	r3, #88	; 0x58
 8006d48:	443b      	add	r3, r7
 8006d4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d50:	3301      	adds	r3, #1
 8006d52:	643b      	str	r3, [r7, #64]	; 0x40
 8006d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d9dd      	bls.n	8006d16 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <find_volume+0x182>
 8006d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d66:	3b01      	subs	r3, #1
 8006d68:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	3358      	adds	r3, #88	; 0x58
 8006d70:	443b      	add	r3, r7
 8006d72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <find_volume+0x1a2>
 8006d7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d82:	f7ff fedb 	bl	8006b3c <check_fs>
 8006d86:	4603      	mov	r3, r0
 8006d88:	e000      	b.n	8006d8c <find_volume+0x1a4>
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d905      	bls.n	8006da4 <find_volume+0x1bc>
 8006d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d9e2      	bls.n	8006d6a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d101      	bne.n	8006db0 <find_volume+0x1c8>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e191      	b.n	80070d4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d901      	bls.n	8006dbc <find_volume+0x1d4>
 8006db8:	230d      	movs	r3, #13
 8006dba:	e18b      	b.n	80070d4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	3334      	adds	r3, #52	; 0x34
 8006dc0:	330b      	adds	r3, #11
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fc6e 	bl	80056a4 <ld_word>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	899b      	ldrh	r3, [r3, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <find_volume+0x1f0>
 8006dd4:	230d      	movs	r3, #13
 8006dd6:	e17d      	b.n	80070d4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	3334      	adds	r3, #52	; 0x34
 8006ddc:	3316      	adds	r3, #22
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fc60 	bl	80056a4 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <find_volume+0x214>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	3334      	adds	r3, #52	; 0x34
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fc6d 	bl	80056d4 <ld_dword>
 8006dfa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e00:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	789b      	ldrb	r3, [r3, #2]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d005      	beq.n	8006e20 <find_volume+0x238>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	789b      	ldrb	r3, [r3, #2]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d001      	beq.n	8006e20 <find_volume+0x238>
 8006e1c:	230d      	movs	r3, #13
 8006e1e:	e159      	b.n	80070d4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	789b      	ldrb	r3, [r3, #2]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	895b      	ldrh	r3, [r3, #10]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <find_volume+0x26c>
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	895b      	ldrh	r3, [r3, #10]
 8006e46:	461a      	mov	r2, r3
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	895b      	ldrh	r3, [r3, #10]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <find_volume+0x270>
 8006e54:	230d      	movs	r3, #13
 8006e56:	e13d      	b.n	80070d4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	3334      	adds	r3, #52	; 0x34
 8006e5c:	3311      	adds	r3, #17
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fc20 	bl	80056a4 <ld_word>
 8006e64:	4603      	mov	r3, r0
 8006e66:	461a      	mov	r2, r3
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	891b      	ldrh	r3, [r3, #8]
 8006e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e72:	8992      	ldrh	r2, [r2, #12]
 8006e74:	0952      	lsrs	r2, r2, #5
 8006e76:	b292      	uxth	r2, r2
 8006e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e7c:	fb01 f202 	mul.w	r2, r1, r2
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <find_volume+0x2a8>
 8006e88:	230d      	movs	r3, #13
 8006e8a:	e123      	b.n	80070d4 <find_volume+0x4ec>
 8006e8c:	20006310 	.word	0x20006310

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	3334      	adds	r3, #52	; 0x34
 8006e94:	3313      	adds	r3, #19
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fc04 	bl	80056a4 <ld_word>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <find_volume+0x2cc>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	3334      	adds	r3, #52	; 0x34
 8006eaa:	3320      	adds	r3, #32
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe fc11 	bl	80056d4 <ld_dword>
 8006eb2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	3334      	adds	r3, #52	; 0x34
 8006eb8:	330e      	adds	r3, #14
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fbf2 	bl	80056a4 <ld_word>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <find_volume+0x2e6>
 8006eca:	230d      	movs	r3, #13
 8006ecc:	e102      	b.n	80070d4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ece:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	4413      	add	r3, r2
 8006ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed6:	8911      	ldrh	r1, [r2, #8]
 8006ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eda:	8992      	ldrh	r2, [r2, #12]
 8006edc:	0952      	lsrs	r2, r2, #5
 8006ede:	b292      	uxth	r2, r2
 8006ee0:	fbb1 f2f2 	udiv	r2, r1, r2
 8006ee4:	b292      	uxth	r2, r2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d201      	bcs.n	8006ef6 <find_volume+0x30e>
 8006ef2:	230d      	movs	r3, #13
 8006ef4:	e0ee      	b.n	80070d4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efe:	8952      	ldrh	r2, [r2, #10]
 8006f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <find_volume+0x328>
 8006f0c:	230d      	movs	r3, #13
 8006f0e:	e0e1      	b.n	80070d4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006f10:	2303      	movs	r3, #3
 8006f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d802      	bhi.n	8006f26 <find_volume+0x33e>
 8006f20:	2302      	movs	r3, #2
 8006f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d802      	bhi.n	8006f36 <find_volume+0x34e>
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f42:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f48:	441a      	add	r2, r3
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006f4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	441a      	add	r2, r3
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d11e      	bne.n	8006f9e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	3334      	adds	r3, #52	; 0x34
 8006f64:	332a      	adds	r3, #42	; 0x2a
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fb9c 	bl	80056a4 <ld_word>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <find_volume+0x38e>
 8006f72:	230d      	movs	r3, #13
 8006f74:	e0ae      	b.n	80070d4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	891b      	ldrh	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <find_volume+0x39a>
 8006f7e:	230d      	movs	r3, #13
 8006f80:	e0a8      	b.n	80070d4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	3334      	adds	r3, #52	; 0x34
 8006f86:	332c      	adds	r3, #44	; 0x2c
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fba3 	bl	80056d4 <ld_dword>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f9c:	e01f      	b.n	8006fde <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	891b      	ldrh	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <find_volume+0x3c2>
 8006fa6:	230d      	movs	r3, #13
 8006fa8:	e094      	b.n	80070d4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	441a      	add	r2, r3
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d103      	bne.n	8006fc6 <find_volume+0x3de>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	e00a      	b.n	8006fdc <find_volume+0x3f4>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	4413      	add	r3, r2
 8006fd0:	085a      	lsrs	r2, r3, #1
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006fdc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	899b      	ldrh	r3, [r3, #12]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fea:	440b      	add	r3, r1
 8006fec:	3b01      	subs	r3, #1
 8006fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ff0:	8989      	ldrh	r1, [r1, #12]
 8006ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d201      	bcs.n	8006ffe <find_volume+0x416>
 8006ffa:	230d      	movs	r3, #13
 8006ffc:	e06a      	b.n	80070d4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f04f 32ff 	mov.w	r2, #4294967295
 8007004:	615a      	str	r2, [r3, #20]
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2280      	movs	r2, #128	; 0x80
 8007012:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007018:	2b03      	cmp	r3, #3
 800701a:	d149      	bne.n	80070b0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3334      	adds	r3, #52	; 0x34
 8007020:	3330      	adds	r3, #48	; 0x30
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fb3e 	bl	80056a4 <ld_word>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d140      	bne.n	80070b0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007030:	3301      	adds	r3, #1
 8007032:	4619      	mov	r1, r3
 8007034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007036:	f7fe fde5 	bl	8005c04 <move_window>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d137      	bne.n	80070b0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	2200      	movs	r2, #0
 8007044:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	3334      	adds	r3, #52	; 0x34
 800704a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fb28 	bl	80056a4 <ld_word>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800705c:	429a      	cmp	r2, r3
 800705e:	d127      	bne.n	80070b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	3334      	adds	r3, #52	; 0x34
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fb35 	bl	80056d4 <ld_dword>
 800706a:	4603      	mov	r3, r0
 800706c:	4a1b      	ldr	r2, [pc, #108]	; (80070dc <find_volume+0x4f4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d11e      	bne.n	80070b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	3334      	adds	r3, #52	; 0x34
 8007076:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fb2a 	bl	80056d4 <ld_dword>
 8007080:	4603      	mov	r3, r0
 8007082:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <find_volume+0x4f8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d113      	bne.n	80070b0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	3334      	adds	r3, #52	; 0x34
 800708c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fb1f 	bl	80056d4 <ld_dword>
 8007096:	4602      	mov	r2, r0
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	3334      	adds	r3, #52	; 0x34
 80070a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fb15 	bl	80056d4 <ld_dword>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80070b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <find_volume+0x4fc>)
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <find_volume+0x4fc>)
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <find_volume+0x4fc>)
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80070cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070ce:	f7fe fd31 	bl	8005b34 <clear_lock>
#endif
	return FR_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3758      	adds	r7, #88	; 0x58
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	41615252 	.word	0x41615252
 80070e0:	61417272 	.word	0x61417272
 80070e4:	20006314 	.word	0x20006314

080070e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80070f2:	2309      	movs	r3, #9
 80070f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01c      	beq.n	8007136 <validate+0x4e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d018      	beq.n	8007136 <validate+0x4e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d013      	beq.n	8007136 <validate+0x4e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	889a      	ldrh	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	429a      	cmp	r2, r3
 800711a:	d10c      	bne.n	8007136 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fa20 	bl	8005568 <disk_status>
 8007128:	4603      	mov	r3, r0
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <validate+0x4e>
			res = FR_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <validate+0x5a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	e000      	b.n	8007144 <validate+0x5c>
 8007142:	2300      	movs	r3, #0
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	6013      	str	r3, [r2, #0]
	return res;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007166:	f107 0310 	add.w	r3, r7, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fca2 	bl	8006ab4 <get_ldnumber>
 8007170:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da01      	bge.n	800717c <f_mount+0x28>
 8007178:	230b      	movs	r3, #11
 800717a:	e02b      	b.n	80071d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800717c:	4a17      	ldr	r2, [pc, #92]	; (80071dc <f_mount+0x88>)
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007184:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d005      	beq.n	8007198 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800718c:	69b8      	ldr	r0, [r7, #24]
 800718e:	f7fe fcd1 	bl	8005b34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	490d      	ldr	r1, [pc, #52]	; (80071dc <f_mount+0x88>)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <f_mount+0x66>
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d001      	beq.n	80071be <f_mount+0x6a>
 80071ba:	2300      	movs	r3, #0
 80071bc:	e00a      	b.n	80071d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80071be:	f107 010c 	add.w	r1, r7, #12
 80071c2:	f107 0308 	add.w	r3, r7, #8
 80071c6:	2200      	movs	r2, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fd0d 	bl	8006be8 <find_volume>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20006310 	.word	0x20006310

080071e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b098      	sub	sp, #96	; 0x60
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <f_open+0x18>
 80071f4:	2309      	movs	r3, #9
 80071f6:	e1bb      	b.n	8007570 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	f107 0110 	add.w	r1, r7, #16
 8007206:	f107 0308 	add.w	r3, r7, #8
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fcec 	bl	8006be8 <find_volume>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 819f 	bne.w	800755e <f_open+0x37e>
		dj.obj.fs = fs;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	f107 0314 	add.w	r3, r7, #20
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fbcb 	bl	80069c8 <follow_path>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800723c:	2b00      	cmp	r3, #0
 800723e:	d11a      	bne.n	8007276 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007240:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007244:	b25b      	sxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	da03      	bge.n	8007252 <f_open+0x72>
				res = FR_INVALID_NAME;
 800724a:	2306      	movs	r3, #6
 800724c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007250:	e011      	b.n	8007276 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf14      	ite	ne
 800725c:	2301      	movne	r3, #1
 800725e:	2300      	moveq	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fb1a 	bl	80058a4 <chk_lock>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	f003 031c 	and.w	r3, r3, #28
 800727c:	2b00      	cmp	r3, #0
 800727e:	d07f      	beq.n	8007380 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007284:	2b00      	cmp	r3, #0
 8007286:	d017      	beq.n	80072b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800728c:	2b04      	cmp	r3, #4
 800728e:	d10e      	bne.n	80072ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007290:	f7fe fb64 	bl	800595c <enq_lock>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <f_open+0xc8>
 800729a:	f107 0314 	add.w	r3, r7, #20
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff facc 	bl	800683c <dir_register>
 80072a4:	4603      	mov	r3, r0
 80072a6:	e000      	b.n	80072aa <f_open+0xca>
 80072a8:	2312      	movs	r3, #18
 80072aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	f043 0308 	orr.w	r3, r3, #8
 80072b4:	71fb      	strb	r3, [r7, #7]
 80072b6:	e010      	b.n	80072da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072b8:	7ebb      	ldrb	r3, [r7, #26]
 80072ba:	f003 0311 	and.w	r3, r3, #17
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <f_open+0xea>
					res = FR_DENIED;
 80072c2:	2307      	movs	r3, #7
 80072c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072c8:	e007      	b.n	80072da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <f_open+0xfa>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80072da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d168      	bne.n	80073b4 <f_open+0x1d4>
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d063      	beq.n	80073b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80072ec:	f7fd fc20 	bl	8004b30 <get_fattime>
 80072f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	330e      	adds	r3, #14
 80072f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fa29 	bl	8005750 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	3316      	adds	r3, #22
 8007302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fa23 	bl	8005750 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	330b      	adds	r3, #11
 800730e:	2220      	movs	r2, #32
 8007310:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff f9fb 	bl	8006714 <ld_clust>
 800731e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007324:	2200      	movs	r2, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff fa13 	bl	8006752 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	331c      	adds	r3, #28
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fa0c 	bl	8005750 <st_dword>
					fs->wflag = 1;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2201      	movs	r2, #1
 800733c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d037      	beq.n	80073b4 <f_open+0x1d4>
						dw = fs->winsect;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	2200      	movs	r2, #0
 8007350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe ff03 	bl	800615e <remove_chain>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800735e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007362:	2b00      	cmp	r3, #0
 8007364:	d126      	bne.n	80073b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fc4a 	bl	8005c04 <move_window>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800737a:	3a01      	subs	r2, #1
 800737c:	611a      	str	r2, [r3, #16]
 800737e:	e019      	b.n	80073b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007384:	2b00      	cmp	r3, #0
 8007386:	d115      	bne.n	80073b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007388:	7ebb      	ldrb	r3, [r7, #26]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007392:	2304      	movs	r3, #4
 8007394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007398:	e00c      	b.n	80073b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <f_open+0x1d4>
 80073a4:	7ebb      	ldrb	r3, [r7, #26]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <f_open+0x1d4>
						res = FR_DENIED;
 80073ae:	2307      	movs	r3, #7
 80073b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80073b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d128      	bne.n	800740e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80073d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bf14      	ite	ne
 80073e6:	2301      	movne	r3, #1
 80073e8:	2300      	moveq	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	f107 0314 	add.w	r3, r7, #20
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fad3 	bl	80059a0 <inc_lock>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <f_open+0x22e>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800740e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007412:	2b00      	cmp	r3, #0
 8007414:	f040 80a3 	bne.w	800755e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff f978 	bl	8006714 <ld_clust>
 8007424:	4602      	mov	r2, r0
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	331c      	adds	r3, #28
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe f950 	bl	80056d4 <ld_dword>
 8007434:	4602      	mov	r2, r0
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	88da      	ldrh	r2, [r3, #6]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	79fa      	ldrb	r2, [r7, #7]
 8007452:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3330      	adds	r3, #48	; 0x30
 800746a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe f9ba 	bl	80057ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d06e      	beq.n	800755e <f_open+0x37e>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d06a      	beq.n	800755e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	895b      	ldrh	r3, [r3, #10]
 8007494:	461a      	mov	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	899b      	ldrh	r3, [r3, #12]
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	657b      	str	r3, [r7, #84]	; 0x54
 80074ac:	e016      	b.n	80074dc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fc63 	bl	8005d7e <get_fat>
 80074b8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80074ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d802      	bhi.n	80074c6 <f_open+0x2e6>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80074c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d102      	bne.n	80074d4 <f_open+0x2f4>
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	657b      	str	r3, [r7, #84]	; 0x54
 80074dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <f_open+0x30c>
 80074e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d8e0      	bhi.n	80074ae <f_open+0x2ce>
				}
				fp->clust = clst;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80074f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d131      	bne.n	800755e <f_open+0x37e>
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	899b      	ldrh	r3, [r3, #12]
 80074fe:	461a      	mov	r2, r3
 8007500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007502:	fbb3 f1f2 	udiv	r1, r3, r2
 8007506:	fb01 f202 	mul.w	r2, r1, r2
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d026      	beq.n	800755e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe fc13 	bl	8005d40 <clust2sect>
 800751a:	6478      	str	r0, [r7, #68]	; 0x44
 800751c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <f_open+0x34a>
						res = FR_INT_ERR;
 8007522:	2302      	movs	r3, #2
 8007524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007528:	e019      	b.n	800755e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	899b      	ldrh	r3, [r3, #12]
 800752e:	461a      	mov	r2, r3
 8007530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007532:	fbb3 f2f2 	udiv	r2, r3, r2
 8007536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007538:	441a      	add	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	7858      	ldrb	r0, [r3, #1]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	2301      	movs	r3, #1
 800754e:	f7fe f84b 	bl	80055e8 <disk_read>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <f_open+0x37e>
 8007558:	2301      	movs	r3, #1
 800755a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800755e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <f_open+0x38c>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800756c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007570:	4618      	mov	r0, r3
 8007572:	3760      	adds	r7, #96	; 0x60
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08e      	sub	sp, #56	; 0x38
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f107 0214 	add.w	r2, r7, #20
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fda5 	bl	80070e8 <validate>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80075a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d107      	bne.n	80075bc <f_read+0x44>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	7d5b      	ldrb	r3, [r3, #21]
 80075b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80075b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <f_read+0x4a>
 80075bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075c0:	e135      	b.n	800782e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	7d1b      	ldrb	r3, [r3, #20]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <f_read+0x5a>
 80075ce:	2307      	movs	r3, #7
 80075d0:	e12d      	b.n	800782e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f240 811e 	bls.w	8007824 <f_read+0x2ac>
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80075ec:	e11a      	b.n	8007824 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	8992      	ldrh	r2, [r2, #12]
 80075f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80075fa:	fb01 f202 	mul.w	r2, r1, r2
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	f040 80d5 	bne.w	80077b0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	8992      	ldrh	r2, [r2, #12]
 800760e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	8952      	ldrh	r2, [r2, #10]
 8007616:	3a01      	subs	r2, #1
 8007618:	4013      	ands	r3, r2
 800761a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d12f      	bne.n	8007682 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
 8007630:	e013      	b.n	800765a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7fe fe89 	bl	8006358 <clmt_clust>
 8007646:	6338      	str	r0, [r7, #48]	; 0x30
 8007648:	e007      	b.n	800765a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe fb93 	bl	8005d7e <get_fat>
 8007658:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2b01      	cmp	r3, #1
 800765e:	d804      	bhi.n	800766a <f_read+0xf2>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2202      	movs	r2, #2
 8007664:	755a      	strb	r2, [r3, #21]
 8007666:	2302      	movs	r3, #2
 8007668:	e0e1      	b.n	800782e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d104      	bne.n	800767c <f_read+0x104>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	755a      	strb	r2, [r3, #21]
 8007678:	2301      	movs	r3, #1
 800767a:	e0d8      	b.n	800782e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007680:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fe fb58 	bl	8005d40 <clust2sect>
 8007690:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <f_read+0x12a>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2202      	movs	r2, #2
 800769c:	755a      	strb	r2, [r3, #21]
 800769e:	2302      	movs	r3, #2
 80076a0:	e0c5      	b.n	800782e <f_read+0x2b6>
			sect += csect;
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	899b      	ldrh	r3, [r3, #12]
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d041      	beq.n	8007742 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	4413      	add	r3, r2
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	8952      	ldrh	r2, [r2, #10]
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d905      	bls.n	80076d8 <f_read+0x160>
					cc = fs->csize - csect;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	895b      	ldrh	r3, [r3, #10]
 80076d0:	461a      	mov	r2, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	7858      	ldrb	r0, [r3, #1]
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076e2:	f7fd ff81 	bl	80055e8 <disk_read>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <f_read+0x17e>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	755a      	strb	r2, [r3, #21]
 80076f2:	2301      	movs	r3, #1
 80076f4:	e09b      	b.n	800782e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	7d1b      	ldrb	r3, [r3, #20]
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	da18      	bge.n	8007732 <f_read+0x1ba>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1a      	ldr	r2, [r3, #32]
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770a:	429a      	cmp	r2, r3
 800770c:	d911      	bls.n	8007732 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	8992      	ldrh	r2, [r2, #12]
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007720:	18d0      	adds	r0, r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	899b      	ldrh	r3, [r3, #12]
 800772c:	461a      	mov	r2, r3
 800772e:	f7fe f83b 	bl	80057a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	899b      	ldrh	r3, [r3, #12]
 8007736:	461a      	mov	r2, r3
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007740:	e05c      	b.n	80077fc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	429a      	cmp	r2, r3
 800774a:	d02e      	beq.n	80077aa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	7d1b      	ldrb	r3, [r3, #20]
 8007750:	b25b      	sxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	da18      	bge.n	8007788 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	7858      	ldrb	r0, [r3, #1]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	2301      	movs	r3, #1
 8007766:	f7fd ff5f 	bl	8005628 <disk_write>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <f_read+0x202>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	755a      	strb	r2, [r3, #21]
 8007776:	2301      	movs	r3, #1
 8007778:	e059      	b.n	800782e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	7d1b      	ldrb	r3, [r3, #20]
 800777e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007782:	b2da      	uxtb	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	7858      	ldrb	r0, [r3, #1]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007792:	2301      	movs	r3, #1
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	f7fd ff27 	bl	80055e8 <disk_read>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d004      	beq.n	80077aa <f_read+0x232>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	755a      	strb	r2, [r3, #21]
 80077a6:	2301      	movs	r3, #1
 80077a8:	e041      	b.n	800782e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	899b      	ldrh	r3, [r3, #12]
 80077b4:	4618      	mov	r0, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	8992      	ldrh	r2, [r2, #12]
 80077be:	fbb3 f1f2 	udiv	r1, r3, r2
 80077c2:	fb01 f202 	mul.w	r2, r1, r2
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	1ac3      	subs	r3, r0, r3
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80077cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d901      	bls.n	80077d8 <f_read+0x260>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	8992      	ldrh	r2, [r2, #12]
 80077e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80077ea:	fb00 f202 	mul.w	r2, r0, r2
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	440b      	add	r3, r1
 80077f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f4:	4619      	mov	r1, r3
 80077f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077f8:	f7fd ffd6 	bl	80057a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	4413      	add	r3, r2
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	441a      	add	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	619a      	str	r2, [r3, #24]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	441a      	add	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f47f aee1 	bne.w	80075ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3738      	adds	r7, #56	; 0x38
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b08c      	sub	sp, #48	; 0x30
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f107 0210 	add.w	r2, r7, #16
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fc46 	bl	80070e8 <validate>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007866:	2b00      	cmp	r3, #0
 8007868:	d107      	bne.n	800787a <f_write+0x44>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	7d5b      	ldrb	r3, [r3, #21]
 800786e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <f_write+0x4a>
 800787a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800787e:	e16a      	b.n	8007b56 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	7d1b      	ldrb	r3, [r3, #20]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <f_write+0x5a>
 800788c:	2307      	movs	r3, #7
 800788e:	e162      	b.n	8007b56 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	f080 814c 	bcs.w	8007b3a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	43db      	mvns	r3, r3
 80078a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078aa:	e146      	b.n	8007b3a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	8992      	ldrh	r2, [r2, #12]
 80078b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80078b8:	fb01 f202 	mul.w	r2, r1, r2
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 80f1 	bne.w	8007aa6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	8992      	ldrh	r2, [r2, #12]
 80078cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	8952      	ldrh	r2, [r2, #10]
 80078d4:	3a01      	subs	r2, #1
 80078d6:	4013      	ands	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d143      	bne.n	8007968 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10c      	bne.n	8007902 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11a      	bne.n	800792a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fc95 	bl	8006228 <create_chain>
 80078fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007900:	e013      	b.n	800792a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7fe fd21 	bl	8006358 <clmt_clust>
 8007916:	62b8      	str	r0, [r7, #40]	; 0x28
 8007918:	e007      	b.n	800792a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fc80 	bl	8006228 <create_chain>
 8007928:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8109 	beq.w	8007b44 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b01      	cmp	r3, #1
 8007936:	d104      	bne.n	8007942 <f_write+0x10c>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2202      	movs	r2, #2
 800793c:	755a      	strb	r2, [r3, #21]
 800793e:	2302      	movs	r3, #2
 8007940:	e109      	b.n	8007b56 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d104      	bne.n	8007954 <f_write+0x11e>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	755a      	strb	r2, [r3, #21]
 8007950:	2301      	movs	r3, #1
 8007952:	e100      	b.n	8007b56 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007958:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <f_write+0x132>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007966:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	7d1b      	ldrb	r3, [r3, #20]
 800796c:	b25b      	sxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	da18      	bge.n	80079a4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	7858      	ldrb	r0, [r3, #1]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1a      	ldr	r2, [r3, #32]
 8007980:	2301      	movs	r3, #1
 8007982:	f7fd fe51 	bl	8005628 <disk_write>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <f_write+0x160>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	755a      	strb	r2, [r3, #21]
 8007992:	2301      	movs	r3, #1
 8007994:	e0df      	b.n	8007b56 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7d1b      	ldrb	r3, [r3, #20]
 800799a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fe f9c7 	bl	8005d40 <clust2sect>
 80079b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <f_write+0x18e>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2202      	movs	r2, #2
 80079be:	755a      	strb	r2, [r3, #21]
 80079c0:	2302      	movs	r3, #2
 80079c2:	e0c8      	b.n	8007b56 <f_write+0x320>
			sect += csect;
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	4413      	add	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	899b      	ldrh	r3, [r3, #12]
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d043      	beq.n	8007a68 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	4413      	add	r3, r2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	8952      	ldrh	r2, [r2, #10]
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d905      	bls.n	80079fa <f_write+0x1c4>
					cc = fs->csize - csect;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	895b      	ldrh	r3, [r3, #10]
 80079f2:	461a      	mov	r2, r3
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	7858      	ldrb	r0, [r3, #1]
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	69f9      	ldr	r1, [r7, #28]
 8007a04:	f7fd fe10 	bl	8005628 <disk_write>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d004      	beq.n	8007a18 <f_write+0x1e2>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	755a      	strb	r2, [r3, #21]
 8007a14:	2301      	movs	r3, #1
 8007a16:	e09e      	b.n	8007b56 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	6a3a      	ldr	r2, [r7, #32]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d918      	bls.n	8007a58 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	8992      	ldrh	r2, [r2, #12]
 8007a38:	fb02 f303 	mul.w	r3, r2, r3
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	18d1      	adds	r1, r2, r3
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	899b      	ldrh	r3, [r3, #12]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f7fd feaf 	bl	80057a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	7d1b      	ldrb	r3, [r3, #20]
 8007a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	899b      	ldrh	r3, [r3, #12]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	fb02 f303 	mul.w	r3, r2, r3
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a66:	e04b      	b.n	8007b00 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d016      	beq.n	8007aa0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d210      	bcs.n	8007aa0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	7858      	ldrb	r0, [r3, #1]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a88:	2301      	movs	r3, #1
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	f7fd fdac 	bl	80055e8 <disk_read>
 8007a90:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	755a      	strb	r2, [r3, #21]
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e05a      	b.n	8007b56 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	899b      	ldrh	r3, [r3, #12]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	8992      	ldrh	r2, [r2, #12]
 8007ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab8:	fb01 f202 	mul.w	r2, r1, r2
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	1ac3      	subs	r3, r0, r3
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d901      	bls.n	8007ace <f_write+0x298>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	8992      	ldrh	r2, [r2, #12]
 8007adc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ae0:	fb00 f202 	mul.w	r2, r0, r2
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aea:	69f9      	ldr	r1, [r7, #28]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd fe5b 	bl	80057a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	7d1b      	ldrb	r3, [r3, #20]
 8007af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	4413      	add	r3, r2
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	441a      	add	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	619a      	str	r2, [r3, #24]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	bf38      	it	cc
 8007b20:	461a      	movcc	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	441a      	add	r2, r3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f47f aeb5 	bne.w	80078ac <f_write+0x76>
 8007b42:	e000      	b.n	8007b46 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b44:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	7d1b      	ldrb	r3, [r3, #20]
 8007b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3730      	adds	r7, #48	; 0x30
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff faba 	bl	80070e8 <validate>
 8007b74:	4603      	mov	r3, r0
 8007b76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d168      	bne.n	8007c50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7d1b      	ldrb	r3, [r3, #20]
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d062      	beq.n	8007c50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	7d1b      	ldrb	r3, [r3, #20]
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da15      	bge.n	8007bc0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	7858      	ldrb	r0, [r3, #1]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1a      	ldr	r2, [r3, #32]
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f7fd fd40 	bl	8005628 <disk_write>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <f_sync+0x54>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e04f      	b.n	8007c52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7d1b      	ldrb	r3, [r3, #20]
 8007bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007bc0:	f7fc ffb6 	bl	8004b30 <get_fattime>
 8007bc4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7fe f818 	bl	8005c04 <move_window>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d138      	bne.n	8007c50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	330b      	adds	r3, #11
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	330b      	adds	r3, #11
 8007bee:	f042 0220 	orr.w	r2, r2, #32
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	f7fe fda6 	bl	8006752 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f103 021c 	add.w	r2, r3, #28
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7fd fd9c 	bl	8005750 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3316      	adds	r3, #22
 8007c1c:	6939      	ldr	r1, [r7, #16]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fd96 	bl	8005750 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3312      	adds	r3, #18
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fd fd75 	bl	800571a <st_word>
					fs->wflag = 1;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2201      	movs	r2, #1
 8007c34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe f811 	bl	8005c60 <sync_fs>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7d1b      	ldrb	r3, [r3, #20]
 8007c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ff7b 	bl	8007b5e <f_sync>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d118      	bne.n	8007ca4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f107 0208 	add.w	r2, r7, #8
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fa34 	bl	80070e8 <validate>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10c      	bne.n	8007ca4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd ff14 	bl	8005abc <dec_lock>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cc6:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007cc8:	7a5b      	ldrb	r3, [r3, #9]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d131      	bne.n	8007d34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007cd2:	7a5b      	ldrb	r3, [r3, #9]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007cda:	2100      	movs	r1, #0
 8007cdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007ce0:	7a5b      	ldrb	r3, [r3, #9]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	4a17      	ldr	r2, [pc, #92]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007cf0:	7a5b      	ldrb	r3, [r3, #9]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	79fa      	ldrb	r2, [r7, #7]
 8007cfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cfe:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007d00:	7a5b      	ldrb	r3, [r3, #9]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	b2d1      	uxtb	r1, r2
 8007d08:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <FATFS_LinkDriverEx+0x94>)
 8007d0a:	7251      	strb	r1, [r2, #9]
 8007d0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d0e:	7dbb      	ldrb	r3, [r7, #22]
 8007d10:	3330      	adds	r3, #48	; 0x30
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	223a      	movs	r2, #58	; 0x3a
 8007d1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3302      	adds	r3, #2
 8007d24:	222f      	movs	r2, #47	; 0x2f
 8007d26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	3303      	adds	r3, #3
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20006338 	.word	0x20006338

08007d48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d52:	2200      	movs	r2, #0
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff ffaa 	bl	8007cb0 <FATFS_LinkDriverEx>
 8007d5c:	4603      	mov	r3, r0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	b21a      	sxth	r2, r3
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	0a1b      	lsrs	r3, r3, #8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	b21b      	sxth	r3, r3
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	b21b      	sxth	r3, r3
 8007d82:	b29b      	uxth	r3, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	061a      	lsls	r2, r3, #24
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	0a1b      	lsrs	r3, r3, #8
 8007daa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	0e1b      	lsrs	r3, r3, #24
 8007db4:	4313      	orrs	r3, r2
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007dcc:	f000 f8d4 	bl	8007f78 <mem_init>
  memp_init();
 8007dd0:	f000 fbda 	bl	8008588 <memp_init>
  pbuf_init();
  netif_init();
 8007dd4:	f000 fc92 	bl	80086fc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007dd8:	f007 feb4 	bl	800fb44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007ddc:	f001 fd14 	bl	8009808 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007de0:	f007 fe26 	bl	800fa30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <ptr_to_mem+0x20>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	4413      	add	r3, r2
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	200069b0 	.word	0x200069b0

08007e10 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <mem_to_ptr+0x20>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	b29b      	uxth	r3, r3
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	200069b0 	.word	0x200069b0

08007e34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007e3c:	4b45      	ldr	r3, [pc, #276]	; (8007f54 <plug_holes+0x120>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d206      	bcs.n	8007e54 <plug_holes+0x20>
 8007e46:	4b44      	ldr	r3, [pc, #272]	; (8007f58 <plug_holes+0x124>)
 8007e48:	f240 12df 	movw	r2, #479	; 0x1df
 8007e4c:	4943      	ldr	r1, [pc, #268]	; (8007f5c <plug_holes+0x128>)
 8007e4e:	4844      	ldr	r0, [pc, #272]	; (8007f60 <plug_holes+0x12c>)
 8007e50:	f00a fefc 	bl	8012c4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007e54:	4b43      	ldr	r3, [pc, #268]	; (8007f64 <plug_holes+0x130>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d306      	bcc.n	8007e6c <plug_holes+0x38>
 8007e5e:	4b3e      	ldr	r3, [pc, #248]	; (8007f58 <plug_holes+0x124>)
 8007e60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007e64:	4940      	ldr	r1, [pc, #256]	; (8007f68 <plug_holes+0x134>)
 8007e66:	483e      	ldr	r0, [pc, #248]	; (8007f60 <plug_holes+0x12c>)
 8007e68:	f00a fef0 	bl	8012c4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	791b      	ldrb	r3, [r3, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d006      	beq.n	8007e82 <plug_holes+0x4e>
 8007e74:	4b38      	ldr	r3, [pc, #224]	; (8007f58 <plug_holes+0x124>)
 8007e76:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007e7a:	493c      	ldr	r1, [pc, #240]	; (8007f6c <plug_holes+0x138>)
 8007e7c:	4838      	ldr	r0, [pc, #224]	; (8007f60 <plug_holes+0x12c>)
 8007e7e:	f00a fee5 	bl	8012c4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e8a:	d906      	bls.n	8007e9a <plug_holes+0x66>
 8007e8c:	4b32      	ldr	r3, [pc, #200]	; (8007f58 <plug_holes+0x124>)
 8007e8e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007e92:	4937      	ldr	r1, [pc, #220]	; (8007f70 <plug_holes+0x13c>)
 8007e94:	4832      	ldr	r0, [pc, #200]	; (8007f60 <plug_holes+0x12c>)
 8007e96:	f00a fed9 	bl	8012c4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff ffa4 	bl	8007dec <ptr_to_mem>
 8007ea4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d024      	beq.n	8007ef8 <plug_holes+0xc4>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d120      	bne.n	8007ef8 <plug_holes+0xc4>
 8007eb6:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <plug_holes+0x130>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d01b      	beq.n	8007ef8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007ec0:	4b2c      	ldr	r3, [pc, #176]	; (8007f74 <plug_holes+0x140>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d102      	bne.n	8007ed0 <plug_holes+0x9c>
      lfree = mem;
 8007eca:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <plug_holes+0x140>)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ee0:	d00a      	beq.n	8007ef8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff ff80 	bl	8007dec <ptr_to_mem>
 8007eec:	4604      	mov	r4, r0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff ff8e 	bl	8007e10 <mem_to_ptr>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff75 	bl	8007dec <ptr_to_mem>
 8007f02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d01f      	beq.n	8007f4c <plug_holes+0x118>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	791b      	ldrb	r3, [r3, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11b      	bne.n	8007f4c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007f14:	4b17      	ldr	r3, [pc, #92]	; (8007f74 <plug_holes+0x140>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d102      	bne.n	8007f24 <plug_holes+0xf0>
      lfree = pmem;
 8007f1e:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <plug_holes+0x140>)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	881a      	ldrh	r2, [r3, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f34:	d00a      	beq.n	8007f4c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff ff56 	bl	8007dec <ptr_to_mem>
 8007f40:	4604      	mov	r4, r0
 8007f42:	68b8      	ldr	r0, [r7, #8]
 8007f44:	f7ff ff64 	bl	8007e10 <mem_to_ptr>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}
 8007f54:	200069b0 	.word	0x200069b0
 8007f58:	08013e98 	.word	0x08013e98
 8007f5c:	08013ec8 	.word	0x08013ec8
 8007f60:	08013ee0 	.word	0x08013ee0
 8007f64:	200069b4 	.word	0x200069b4
 8007f68:	08013f08 	.word	0x08013f08
 8007f6c:	08013f24 	.word	0x08013f24
 8007f70:	08013f40 	.word	0x08013f40
 8007f74:	200069b8 	.word	0x200069b8

08007f78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007f7e:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <mem_init+0x68>)
 8007f80:	3303      	adds	r3, #3
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	461a      	mov	r2, r3
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <mem_init+0x6c>)
 8007f8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007f8c:	4b15      	ldr	r3, [pc, #84]	; (8007fe4 <mem_init+0x6c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007fa6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007faa:	f7ff ff1f 	bl	8007dec <ptr_to_mem>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4a0d      	ldr	r2, [pc, #52]	; (8007fe8 <mem_init+0x70>)
 8007fb2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <mem_init+0x70>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <mem_init+0x70>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007fc4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <mem_init+0x70>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007fce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <mem_init+0x6c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a05      	ldr	r2, [pc, #20]	; (8007fec <mem_init+0x74>)
 8007fd6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	2000635c 	.word	0x2000635c
 8007fe4:	200069b0 	.word	0x200069b0
 8007fe8:	200069b4 	.word	0x200069b4
 8007fec:	200069b8 	.word	0x200069b8

08007ff0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff ff09 	bl	8007e10 <mem_to_ptr>
 8007ffe:	4603      	mov	r3, r0
 8008000:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fef0 	bl	8007dec <ptr_to_mem>
 800800c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	885b      	ldrh	r3, [r3, #2]
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff feea 	bl	8007dec <ptr_to_mem>
 8008018:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008022:	d818      	bhi.n	8008056 <mem_link_valid+0x66>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	885b      	ldrh	r3, [r3, #2]
 8008028:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800802c:	d813      	bhi.n	8008056 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008032:	8afa      	ldrh	r2, [r7, #22]
 8008034:	429a      	cmp	r2, r3
 8008036:	d004      	beq.n	8008042 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	8afa      	ldrh	r2, [r7, #22]
 800803e:	429a      	cmp	r2, r3
 8008040:	d109      	bne.n	8008056 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <mem_link_valid+0x74>)
 8008044:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	429a      	cmp	r2, r3
 800804a:	d006      	beq.n	800805a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	8afa      	ldrh	r2, [r7, #22]
 8008052:	429a      	cmp	r2, r3
 8008054:	d001      	beq.n	800805a <mem_link_valid+0x6a>
    return 0;
 8008056:	2300      	movs	r3, #0
 8008058:	e000      	b.n	800805c <mem_link_valid+0x6c>
  }
  return 1;
 800805a:	2301      	movs	r3, #1
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	200069b4 	.word	0x200069b4

08008068 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04c      	beq.n	8008110 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008080:	4b25      	ldr	r3, [pc, #148]	; (8008118 <mem_free+0xb0>)
 8008082:	f240 2273 	movw	r2, #627	; 0x273
 8008086:	4925      	ldr	r1, [pc, #148]	; (800811c <mem_free+0xb4>)
 8008088:	4825      	ldr	r0, [pc, #148]	; (8008120 <mem_free+0xb8>)
 800808a:	f00a fddf 	bl	8012c4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800808e:	e040      	b.n	8008112 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3b08      	subs	r3, #8
 8008094:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008096:	4b23      	ldr	r3, [pc, #140]	; (8008124 <mem_free+0xbc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d306      	bcc.n	80080ae <mem_free+0x46>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f103 020c 	add.w	r2, r3, #12
 80080a6:	4b20      	ldr	r3, [pc, #128]	; (8008128 <mem_free+0xc0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d907      	bls.n	80080be <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <mem_free+0xb0>)
 80080b0:	f240 227f 	movw	r2, #639	; 0x27f
 80080b4:	491d      	ldr	r1, [pc, #116]	; (800812c <mem_free+0xc4>)
 80080b6:	481a      	ldr	r0, [pc, #104]	; (8008120 <mem_free+0xb8>)
 80080b8:	f00a fdc8 	bl	8012c4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80080bc:	e029      	b.n	8008112 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <mem_free+0xb0>)
 80080c8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80080cc:	4918      	ldr	r1, [pc, #96]	; (8008130 <mem_free+0xc8>)
 80080ce:	4814      	ldr	r0, [pc, #80]	; (8008120 <mem_free+0xb8>)
 80080d0:	f00a fdbc 	bl	8012c4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80080d4:	e01d      	b.n	8008112 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff ff8a 	bl	8007ff0 <mem_link_valid>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <mem_free+0xb0>)
 80080e4:	f240 2295 	movw	r2, #661	; 0x295
 80080e8:	4912      	ldr	r1, [pc, #72]	; (8008134 <mem_free+0xcc>)
 80080ea:	480d      	ldr	r0, [pc, #52]	; (8008120 <mem_free+0xb8>)
 80080ec:	f00a fdae 	bl	8012c4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80080f0:	e00f      	b.n	8008112 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <mem_free+0xd0>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d202      	bcs.n	8008108 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008102:	4a0d      	ldr	r2, [pc, #52]	; (8008138 <mem_free+0xd0>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fe93 	bl	8007e34 <plug_holes>
 800810e:	e000      	b.n	8008112 <mem_free+0xaa>
    return;
 8008110:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	08013e98 	.word	0x08013e98
 800811c:	08013f6c 	.word	0x08013f6c
 8008120:	08013ee0 	.word	0x08013ee0
 8008124:	200069b0 	.word	0x200069b0
 8008128:	200069b4 	.word	0x200069b4
 800812c:	08013f90 	.word	0x08013f90
 8008130:	08013fac 	.word	0x08013fac
 8008134:	08013fd4 	.word	0x08013fd4
 8008138:	200069b8 	.word	0x200069b8

0800813c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008148:	887b      	ldrh	r3, [r7, #2]
 800814a:	3303      	adds	r3, #3
 800814c:	b29b      	uxth	r3, r3
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008154:	8bfb      	ldrh	r3, [r7, #30]
 8008156:	2b0b      	cmp	r3, #11
 8008158:	d801      	bhi.n	800815e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800815a:	230c      	movs	r3, #12
 800815c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800815e:	8bfb      	ldrh	r3, [r7, #30]
 8008160:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008164:	d803      	bhi.n	800816e <mem_trim+0x32>
 8008166:	8bfa      	ldrh	r2, [r7, #30]
 8008168:	887b      	ldrh	r3, [r7, #2]
 800816a:	429a      	cmp	r2, r3
 800816c:	d201      	bcs.n	8008172 <mem_trim+0x36>
    return NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	e0cc      	b.n	800830c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008172:	4b68      	ldr	r3, [pc, #416]	; (8008314 <mem_trim+0x1d8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d304      	bcc.n	8008186 <mem_trim+0x4a>
 800817c:	4b66      	ldr	r3, [pc, #408]	; (8008318 <mem_trim+0x1dc>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	429a      	cmp	r2, r3
 8008184:	d306      	bcc.n	8008194 <mem_trim+0x58>
 8008186:	4b65      	ldr	r3, [pc, #404]	; (800831c <mem_trim+0x1e0>)
 8008188:	f240 22d1 	movw	r2, #721	; 0x2d1
 800818c:	4964      	ldr	r1, [pc, #400]	; (8008320 <mem_trim+0x1e4>)
 800818e:	4865      	ldr	r0, [pc, #404]	; (8008324 <mem_trim+0x1e8>)
 8008190:	f00a fd5c 	bl	8012c4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008194:	4b5f      	ldr	r3, [pc, #380]	; (8008314 <mem_trim+0x1d8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d304      	bcc.n	80081a8 <mem_trim+0x6c>
 800819e:	4b5e      	ldr	r3, [pc, #376]	; (8008318 <mem_trim+0x1dc>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d301      	bcc.n	80081ac <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	e0af      	b.n	800830c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3b08      	subs	r3, #8
 80081b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80081b2:	69b8      	ldr	r0, [r7, #24]
 80081b4:	f7ff fe2c 	bl	8007e10 <mem_to_ptr>
 80081b8:	4603      	mov	r3, r0
 80081ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	881a      	ldrh	r2, [r3, #0]
 80081c0:	8afb      	ldrh	r3, [r7, #22]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b08      	subs	r3, #8
 80081c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80081ca:	8bfa      	ldrh	r2, [r7, #30]
 80081cc:	8abb      	ldrh	r3, [r7, #20]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d906      	bls.n	80081e0 <mem_trim+0xa4>
 80081d2:	4b52      	ldr	r3, [pc, #328]	; (800831c <mem_trim+0x1e0>)
 80081d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80081d8:	4953      	ldr	r1, [pc, #332]	; (8008328 <mem_trim+0x1ec>)
 80081da:	4852      	ldr	r0, [pc, #328]	; (8008324 <mem_trim+0x1e8>)
 80081dc:	f00a fd36 	bl	8012c4c <iprintf>
  if (newsize > size) {
 80081e0:	8bfa      	ldrh	r2, [r7, #30]
 80081e2:	8abb      	ldrh	r3, [r7, #20]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d901      	bls.n	80081ec <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e08f      	b.n	800830c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80081ec:	8bfa      	ldrh	r2, [r7, #30]
 80081ee:	8abb      	ldrh	r3, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d101      	bne.n	80081f8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	e089      	b.n	800830c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fdf5 	bl	8007dec <ptr_to_mem>
 8008202:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	791b      	ldrb	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d13f      	bne.n	800828c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008214:	d106      	bne.n	8008224 <mem_trim+0xe8>
 8008216:	4b41      	ldr	r3, [pc, #260]	; (800831c <mem_trim+0x1e0>)
 8008218:	f240 22f5 	movw	r2, #757	; 0x2f5
 800821c:	4943      	ldr	r1, [pc, #268]	; (800832c <mem_trim+0x1f0>)
 800821e:	4841      	ldr	r0, [pc, #260]	; (8008324 <mem_trim+0x1e8>)
 8008220:	f00a fd14 	bl	8012c4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800822a:	8afa      	ldrh	r2, [r7, #22]
 800822c:	8bfb      	ldrh	r3, [r7, #30]
 800822e:	4413      	add	r3, r2
 8008230:	b29b      	uxth	r3, r3
 8008232:	3308      	adds	r3, #8
 8008234:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008236:	4b3e      	ldr	r3, [pc, #248]	; (8008330 <mem_trim+0x1f4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	429a      	cmp	r2, r3
 800823e:	d106      	bne.n	800824e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008240:	89fb      	ldrh	r3, [r7, #14]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fdd2 	bl	8007dec <ptr_to_mem>
 8008248:	4603      	mov	r3, r0
 800824a:	4a39      	ldr	r2, [pc, #228]	; (8008330 <mem_trim+0x1f4>)
 800824c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800824e:	89fb      	ldrh	r3, [r7, #14]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fdcb 	bl	8007dec <ptr_to_mem>
 8008256:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2200      	movs	r2, #0
 800825c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	89ba      	ldrh	r2, [r7, #12]
 8008262:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	8afa      	ldrh	r2, [r7, #22]
 8008268:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	89fa      	ldrh	r2, [r7, #14]
 800826e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008278:	d047      	beq.n	800830a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fdb4 	bl	8007dec <ptr_to_mem>
 8008284:	4602      	mov	r2, r0
 8008286:	89fb      	ldrh	r3, [r7, #14]
 8008288:	8053      	strh	r3, [r2, #2]
 800828a:	e03e      	b.n	800830a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800828c:	8bfb      	ldrh	r3, [r7, #30]
 800828e:	f103 0214 	add.w	r2, r3, #20
 8008292:	8abb      	ldrh	r3, [r7, #20]
 8008294:	429a      	cmp	r2, r3
 8008296:	d838      	bhi.n	800830a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008298:	8afa      	ldrh	r2, [r7, #22]
 800829a:	8bfb      	ldrh	r3, [r7, #30]
 800829c:	4413      	add	r3, r2
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3308      	adds	r3, #8
 80082a2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082ac:	d106      	bne.n	80082bc <mem_trim+0x180>
 80082ae:	4b1b      	ldr	r3, [pc, #108]	; (800831c <mem_trim+0x1e0>)
 80082b0:	f240 3216 	movw	r2, #790	; 0x316
 80082b4:	491d      	ldr	r1, [pc, #116]	; (800832c <mem_trim+0x1f0>)
 80082b6:	481b      	ldr	r0, [pc, #108]	; (8008324 <mem_trim+0x1e8>)
 80082b8:	f00a fcc8 	bl	8012c4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80082bc:	89fb      	ldrh	r3, [r7, #14]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fd94 	bl	8007dec <ptr_to_mem>
 80082c4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80082c6:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <mem_trim+0x1f4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d202      	bcs.n	80082d6 <mem_trim+0x19a>
      lfree = mem2;
 80082d0:	4a17      	ldr	r2, [pc, #92]	; (8008330 <mem_trim+0x1f4>)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2200      	movs	r2, #0
 80082da:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	881a      	ldrh	r2, [r3, #0]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	8afa      	ldrh	r2, [r7, #22]
 80082e8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	89fa      	ldrh	r2, [r7, #14]
 80082ee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082f8:	d007      	beq.n	800830a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff fd74 	bl	8007dec <ptr_to_mem>
 8008304:	4602      	mov	r2, r0
 8008306:	89fb      	ldrh	r3, [r7, #14]
 8008308:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800830a:	687b      	ldr	r3, [r7, #4]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200069b0 	.word	0x200069b0
 8008318:	200069b4 	.word	0x200069b4
 800831c:	08013e98 	.word	0x08013e98
 8008320:	08014008 	.word	0x08014008
 8008324:	08013ee0 	.word	0x08013ee0
 8008328:	08014020 	.word	0x08014020
 800832c:	08014040 	.word	0x08014040
 8008330:	200069b8 	.word	0x200069b8

08008334 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <mem_malloc+0x14>
    return NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	e0d9      	b.n	80084fc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	3303      	adds	r3, #3
 800834c:	b29b      	uxth	r3, r3
 800834e:	f023 0303 	bic.w	r3, r3, #3
 8008352:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008354:	8bbb      	ldrh	r3, [r7, #28]
 8008356:	2b0b      	cmp	r3, #11
 8008358:	d801      	bhi.n	800835e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800835a:	230c      	movs	r3, #12
 800835c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800835e:	8bbb      	ldrh	r3, [r7, #28]
 8008360:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008364:	d803      	bhi.n	800836e <mem_malloc+0x3a>
 8008366:	8bba      	ldrh	r2, [r7, #28]
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	429a      	cmp	r2, r3
 800836c:	d201      	bcs.n	8008372 <mem_malloc+0x3e>
    return NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	e0c4      	b.n	80084fc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008372:	4b64      	ldr	r3, [pc, #400]	; (8008504 <mem_malloc+0x1d0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff fd4a 	bl	8007e10 <mem_to_ptr>
 800837c:	4603      	mov	r3, r0
 800837e:	83fb      	strh	r3, [r7, #30]
 8008380:	e0b4      	b.n	80084ec <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008382:	8bfb      	ldrh	r3, [r7, #30]
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fd31 	bl	8007dec <ptr_to_mem>
 800838a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	791b      	ldrb	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 80a4 	bne.w	80084de <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	8bfb      	ldrh	r3, [r7, #30]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	f1a3 0208 	sub.w	r2, r3, #8
 80083a4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80083a6:	429a      	cmp	r2, r3
 80083a8:	f0c0 8099 	bcc.w	80084de <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	8bfb      	ldrh	r3, [r7, #30]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f1a3 0208 	sub.w	r2, r3, #8
 80083ba:	8bbb      	ldrh	r3, [r7, #28]
 80083bc:	3314      	adds	r3, #20
 80083be:	429a      	cmp	r2, r3
 80083c0:	d333      	bcc.n	800842a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80083c2:	8bfa      	ldrh	r2, [r7, #30]
 80083c4:	8bbb      	ldrh	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3308      	adds	r3, #8
 80083cc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80083ce:	8a7b      	ldrh	r3, [r7, #18]
 80083d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083d4:	d106      	bne.n	80083e4 <mem_malloc+0xb0>
 80083d6:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <mem_malloc+0x1d4>)
 80083d8:	f240 3287 	movw	r2, #903	; 0x387
 80083dc:	494b      	ldr	r1, [pc, #300]	; (800850c <mem_malloc+0x1d8>)
 80083de:	484c      	ldr	r0, [pc, #304]	; (8008510 <mem_malloc+0x1dc>)
 80083e0:	f00a fc34 	bl	8012c4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80083e4:	8a7b      	ldrh	r3, [r7, #18]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fd00 	bl	8007dec <ptr_to_mem>
 80083ec:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	881a      	ldrh	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8bfa      	ldrh	r2, [r7, #30]
 8008400:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	8a7a      	ldrh	r2, [r7, #18]
 8008406:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2201      	movs	r2, #1
 800840c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008416:	d00b      	beq.n	8008430 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fce5 	bl	8007dec <ptr_to_mem>
 8008422:	4602      	mov	r2, r0
 8008424:	8a7b      	ldrh	r3, [r7, #18]
 8008426:	8053      	strh	r3, [r2, #2]
 8008428:	e002      	b.n	8008430 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2201      	movs	r2, #1
 800842e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008430:	4b34      	ldr	r3, [pc, #208]	; (8008504 <mem_malloc+0x1d0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	429a      	cmp	r2, r3
 8008438:	d127      	bne.n	800848a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800843a:	4b32      	ldr	r3, [pc, #200]	; (8008504 <mem_malloc+0x1d0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008440:	e005      	b.n	800844e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fcd0 	bl	8007dec <ptr_to_mem>
 800844c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	791b      	ldrb	r3, [r3, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <mem_malloc+0x12c>
 8008456:	4b2f      	ldr	r3, [pc, #188]	; (8008514 <mem_malloc+0x1e0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	429a      	cmp	r2, r3
 800845e:	d1f0      	bne.n	8008442 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008460:	4a28      	ldr	r2, [pc, #160]	; (8008504 <mem_malloc+0x1d0>)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <mem_malloc+0x1d0>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b2a      	ldr	r3, [pc, #168]	; (8008514 <mem_malloc+0x1e0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d00b      	beq.n	800848a <mem_malloc+0x156>
 8008472:	4b24      	ldr	r3, [pc, #144]	; (8008504 <mem_malloc+0x1d0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <mem_malloc+0x156>
 800847c:	4b22      	ldr	r3, [pc, #136]	; (8008508 <mem_malloc+0x1d4>)
 800847e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008482:	4925      	ldr	r1, [pc, #148]	; (8008518 <mem_malloc+0x1e4>)
 8008484:	4822      	ldr	r0, [pc, #136]	; (8008510 <mem_malloc+0x1dc>)
 8008486:	f00a fbe1 	bl	8012c4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800848a:	8bba      	ldrh	r2, [r7, #28]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	3308      	adds	r3, #8
 8008492:	4a20      	ldr	r2, [pc, #128]	; (8008514 <mem_malloc+0x1e0>)
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	4293      	cmp	r3, r2
 8008498:	d906      	bls.n	80084a8 <mem_malloc+0x174>
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <mem_malloc+0x1d4>)
 800849c:	f240 32b9 	movw	r2, #953	; 0x3b9
 80084a0:	491e      	ldr	r1, [pc, #120]	; (800851c <mem_malloc+0x1e8>)
 80084a2:	481b      	ldr	r0, [pc, #108]	; (8008510 <mem_malloc+0x1dc>)
 80084a4:	f00a fbd2 	bl	8012c4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d006      	beq.n	80084c0 <mem_malloc+0x18c>
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <mem_malloc+0x1d4>)
 80084b4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80084b8:	4919      	ldr	r1, [pc, #100]	; (8008520 <mem_malloc+0x1ec>)
 80084ba:	4815      	ldr	r0, [pc, #84]	; (8008510 <mem_malloc+0x1dc>)
 80084bc:	f00a fbc6 	bl	8012c4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d006      	beq.n	80084d8 <mem_malloc+0x1a4>
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <mem_malloc+0x1d4>)
 80084cc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80084d0:	4914      	ldr	r1, [pc, #80]	; (8008524 <mem_malloc+0x1f0>)
 80084d2:	480f      	ldr	r0, [pc, #60]	; (8008510 <mem_malloc+0x1dc>)
 80084d4:	f00a fbba 	bl	8012c4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	3308      	adds	r3, #8
 80084dc:	e00e      	b.n	80084fc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80084de:	8bfb      	ldrh	r3, [r7, #30]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fc83 	bl	8007dec <ptr_to_mem>
 80084e6:	4603      	mov	r3, r0
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80084ec:	8bfa      	ldrh	r2, [r7, #30]
 80084ee:	8bbb      	ldrh	r3, [r7, #28]
 80084f0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80084f4:	429a      	cmp	r2, r3
 80084f6:	f4ff af44 	bcc.w	8008382 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3720      	adds	r7, #32
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200069b8 	.word	0x200069b8
 8008508:	08013e98 	.word	0x08013e98
 800850c:	08014040 	.word	0x08014040
 8008510:	08013ee0 	.word	0x08013ee0
 8008514:	200069b4 	.word	0x200069b4
 8008518:	08014054 	.word	0x08014054
 800851c:	08014070 	.word	0x08014070
 8008520:	080140a0 	.word	0x080140a0
 8008524:	080140d0 	.word	0x080140d0

08008528 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	3303      	adds	r3, #3
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	e011      	b.n	800856e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4413      	add	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	461a      	mov	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4293      	cmp	r3, r2
 8008578:	dbe7      	blt.n	800854a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800858e:	2300      	movs	r3, #0
 8008590:	80fb      	strh	r3, [r7, #6]
 8008592:	e009      	b.n	80085a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <memp_init+0x30>)
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff ffc3 	bl	8008528 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	3301      	adds	r3, #1
 80085a6:	80fb      	strh	r3, [r7, #6]
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d9f2      	bls.n	8008594 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	08016920 	.word	0x08016920

080085bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d012      	beq.n	80085f8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d006      	beq.n	80085f4 <do_memp_malloc_pool+0x38>
 80085e6:	4b07      	ldr	r3, [pc, #28]	; (8008604 <do_memp_malloc_pool+0x48>)
 80085e8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80085ec:	4906      	ldr	r1, [pc, #24]	; (8008608 <do_memp_malloc_pool+0x4c>)
 80085ee:	4807      	ldr	r0, [pc, #28]	; (800860c <do_memp_malloc_pool+0x50>)
 80085f0:	f00a fb2c 	bl	8012c4c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	e000      	b.n	80085fa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	080140f4 	.word	0x080140f4
 8008608:	08014124 	.word	0x08014124
 800860c:	08014148 	.word	0x08014148

08008610 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	2b08      	cmp	r3, #8
 800861e:	d908      	bls.n	8008632 <memp_malloc+0x22>
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <memp_malloc+0x3c>)
 8008622:	f240 1257 	movw	r2, #343	; 0x157
 8008626:	490a      	ldr	r1, [pc, #40]	; (8008650 <memp_malloc+0x40>)
 8008628:	480a      	ldr	r0, [pc, #40]	; (8008654 <memp_malloc+0x44>)
 800862a:	f00a fb0f 	bl	8012c4c <iprintf>
 800862e:	2300      	movs	r3, #0
 8008630:	e008      	b.n	8008644 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	4a08      	ldr	r2, [pc, #32]	; (8008658 <memp_malloc+0x48>)
 8008636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff ffbe 	bl	80085bc <do_memp_malloc_pool>
 8008640:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008642:	68fb      	ldr	r3, [r7, #12]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	080140f4 	.word	0x080140f4
 8008650:	08014184 	.word	0x08014184
 8008654:	08014148 	.word	0x08014148
 8008658:	08016920 	.word	0x08016920

0800865c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <do_memp_free_pool+0x22>
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <do_memp_free_pool+0x40>)
 8008672:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008676:	490a      	ldr	r1, [pc, #40]	; (80086a0 <do_memp_free_pool+0x44>)
 8008678:	480a      	ldr	r0, [pc, #40]	; (80086a4 <do_memp_free_pool+0x48>)
 800867a:	f00a fae7 	bl	8012c4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008694:	bf00      	nop
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	080140f4 	.word	0x080140f4
 80086a0:	080141a4 	.word	0x080141a4
 80086a4:	08014148 	.word	0x08014148

080086a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d907      	bls.n	80086ca <memp_free+0x22>
 80086ba:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <memp_free+0x44>)
 80086bc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80086c0:	490b      	ldr	r1, [pc, #44]	; (80086f0 <memp_free+0x48>)
 80086c2:	480c      	ldr	r0, [pc, #48]	; (80086f4 <memp_free+0x4c>)
 80086c4:	f00a fac2 	bl	8012c4c <iprintf>
 80086c8:	e00c      	b.n	80086e4 <memp_free+0x3c>

  if (mem == NULL) {
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <memp_free+0x50>)
 80086d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff ffbe 	bl	800865c <do_memp_free_pool>
 80086e0:	e000      	b.n	80086e4 <memp_free+0x3c>
    return;
 80086e2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	080140f4 	.word	0x080140f4
 80086f0:	080141c4 	.word	0x080141c4
 80086f4:	08014148 	.word	0x08014148
 80086f8:	08016920 	.word	0x08016920

080086fc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008700:	bf00      	nop
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d108      	bne.n	8008732 <netif_add+0x26>
 8008720:	4b57      	ldr	r3, [pc, #348]	; (8008880 <netif_add+0x174>)
 8008722:	f240 1227 	movw	r2, #295	; 0x127
 8008726:	4957      	ldr	r1, [pc, #348]	; (8008884 <netif_add+0x178>)
 8008728:	4857      	ldr	r0, [pc, #348]	; (8008888 <netif_add+0x17c>)
 800872a:	f00a fa8f 	bl	8012c4c <iprintf>
 800872e:	2300      	movs	r3, #0
 8008730:	e0a2      	b.n	8008878 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d108      	bne.n	800874a <netif_add+0x3e>
 8008738:	4b51      	ldr	r3, [pc, #324]	; (8008880 <netif_add+0x174>)
 800873a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800873e:	4953      	ldr	r1, [pc, #332]	; (800888c <netif_add+0x180>)
 8008740:	4851      	ldr	r0, [pc, #324]	; (8008888 <netif_add+0x17c>)
 8008742:	f00a fa83 	bl	8012c4c <iprintf>
 8008746:	2300      	movs	r3, #0
 8008748:	e096      	b.n	8008878 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008750:	4b4f      	ldr	r3, [pc, #316]	; (8008890 <netif_add+0x184>)
 8008752:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800875a:	4b4d      	ldr	r3, [pc, #308]	; (8008890 <netif_add+0x184>)
 800875c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008764:	4b4a      	ldr	r3, [pc, #296]	; (8008890 <netif_add+0x184>)
 8008766:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4a45      	ldr	r2, [pc, #276]	; (8008894 <netif_add+0x188>)
 800877e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800879a:	4b3f      	ldr	r3, [pc, #252]	; (8008898 <netif_add+0x18c>)
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f913 	bl	80089dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <netif_add+0xba>
    return NULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e058      	b.n	8008878 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087cc:	2bff      	cmp	r3, #255	; 0xff
 80087ce:	d103      	bne.n	80087d8 <netif_add+0xcc>
        netif->num = 0;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087dc:	4b2f      	ldr	r3, [pc, #188]	; (800889c <netif_add+0x190>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e02b      	b.n	800883c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d106      	bne.n	80087fa <netif_add+0xee>
 80087ec:	4b24      	ldr	r3, [pc, #144]	; (8008880 <netif_add+0x174>)
 80087ee:	f240 128b 	movw	r2, #395	; 0x18b
 80087f2:	492b      	ldr	r1, [pc, #172]	; (80088a0 <netif_add+0x194>)
 80087f4:	4824      	ldr	r0, [pc, #144]	; (8008888 <netif_add+0x17c>)
 80087f6:	f00a fa29 	bl	8012c4c <iprintf>
        num_netifs++;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3301      	adds	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2bff      	cmp	r3, #255	; 0xff
 8008804:	dd06      	ble.n	8008814 <netif_add+0x108>
 8008806:	4b1e      	ldr	r3, [pc, #120]	; (8008880 <netif_add+0x174>)
 8008808:	f240 128d 	movw	r2, #397	; 0x18d
 800880c:	4925      	ldr	r1, [pc, #148]	; (80088a4 <netif_add+0x198>)
 800880e:	481e      	ldr	r0, [pc, #120]	; (8008888 <netif_add+0x17c>)
 8008810:	f00a fa1c 	bl	8012c4c <iprintf>
        if (netif2->num == netif->num) {
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008820:	429a      	cmp	r2, r3
 8008822:	d108      	bne.n	8008836 <netif_add+0x12a>
          netif->num++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800882a:	3301      	adds	r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008834:	e005      	b.n	8008842 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1d0      	bne.n	80087e4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1be      	bne.n	80087c6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800884e:	2bfe      	cmp	r3, #254	; 0xfe
 8008850:	d103      	bne.n	800885a <netif_add+0x14e>
    netif_num = 0;
 8008852:	4b11      	ldr	r3, [pc, #68]	; (8008898 <netif_add+0x18c>)
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	e006      	b.n	8008868 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008860:	3301      	adds	r3, #1
 8008862:	b2da      	uxtb	r2, r3
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <netif_add+0x18c>)
 8008866:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008868:	4b0c      	ldr	r3, [pc, #48]	; (800889c <netif_add+0x190>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <netif_add+0x190>)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008876:	68fb      	ldr	r3, [r7, #12]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	080141e0 	.word	0x080141e0
 8008884:	08014274 	.word	0x08014274
 8008888:	08014230 	.word	0x08014230
 800888c:	08014290 	.word	0x08014290
 8008890:	08016984 	.word	0x08016984
 8008894:	08008bef 	.word	0x08008bef
 8008898:	200098b0 	.word	0x200098b0
 800889c:	200098a8 	.word	0x200098a8
 80088a0:	080142b4 	.word	0x080142b4
 80088a4:	080142c8 	.word	0x080142c8

080088a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f002 fd8f 	bl	800b3d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f007 fe85 	bl	80105cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <netif_do_set_ipaddr+0x20>
 80088de:	4b1d      	ldr	r3, [pc, #116]	; (8008954 <netif_do_set_ipaddr+0x88>)
 80088e0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80088e4:	491c      	ldr	r1, [pc, #112]	; (8008958 <netif_do_set_ipaddr+0x8c>)
 80088e6:	481d      	ldr	r0, [pc, #116]	; (800895c <netif_do_set_ipaddr+0x90>)
 80088e8:	f00a f9b0 	bl	8012c4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <netif_do_set_ipaddr+0x34>
 80088f2:	4b18      	ldr	r3, [pc, #96]	; (8008954 <netif_do_set_ipaddr+0x88>)
 80088f4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80088f8:	4917      	ldr	r1, [pc, #92]	; (8008958 <netif_do_set_ipaddr+0x8c>)
 80088fa:	4818      	ldr	r0, [pc, #96]	; (800895c <netif_do_set_ipaddr+0x90>)
 80088fc:	f00a f9a6 	bl	8012c4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3304      	adds	r3, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d01c      	beq.n	8008948 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3304      	adds	r3, #4
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800891e:	f107 0314 	add.w	r3, r7, #20
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff ffbf 	bl	80088a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <netif_do_set_ipaddr+0x6a>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	e000      	b.n	8008938 <netif_do_set_ipaddr+0x6c>
 8008936:	2300      	movs	r3, #0
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800893c:	2101      	movs	r1, #1
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f8d2 	bl	8008ae8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	080141e0 	.word	0x080141e0
 8008958:	080142f8 	.word	0x080142f8
 800895c:	08014230 	.word	0x08014230

08008960 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3308      	adds	r3, #8
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d00a      	beq.n	8008990 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <netif_do_set_netmask+0x26>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	e000      	b.n	8008988 <netif_do_set_netmask+0x28>
 8008986:	2300      	movs	r3, #0
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	330c      	adds	r3, #12
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d00a      	beq.n	80089ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <netif_do_set_gw+0x26>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	e000      	b.n	80089c6 <netif_do_set_gw+0x28>
 80089c4:	2300      	movs	r3, #0
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <netif_set_addr+0x90>)
 80089fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008a02:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <netif_set_addr+0x90>)
 8008a04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008a0c:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <netif_set_addr+0x90>)
 8008a0e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <netif_set_addr+0x42>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <netif_set_addr+0x46>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e000      	b.n	8008a24 <netif_set_addr+0x48>
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d006      	beq.n	8008a3a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008a2c:	f107 0310 	add.w	r3, r7, #16
 8008a30:	461a      	mov	r2, r3
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff ff49 	bl	80088cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff ff8e 	bl	8008960 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff ffa8 	bl	800899e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff ff35 	bl	80088cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008a62:	bf00      	nop
 8008a64:	3720      	adds	r7, #32
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	08016984 	.word	0x08016984

08008a70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a78:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <netif_set_default+0x1c>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	200098ac 	.word	0x200098ac

08008a90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d107      	bne.n	8008aae <netif_set_up+0x1e>
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <netif_set_up+0x4c>)
 8008aa0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008aa4:	490e      	ldr	r1, [pc, #56]	; (8008ae0 <netif_set_up+0x50>)
 8008aa6:	480f      	ldr	r0, [pc, #60]	; (8008ae4 <netif_set_up+0x54>)
 8008aa8:	f00a f8d0 	bl	8012c4c <iprintf>
 8008aac:	e013      	b.n	8008ad6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10c      	bne.n	8008ad6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ac2:	f043 0301 	orr.w	r3, r3, #1
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008ace:	2103      	movs	r1, #3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f809 	bl	8008ae8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	080141e0 	.word	0x080141e0
 8008ae0:	08014368 	.word	0x08014368
 8008ae4:	08014230 	.word	0x08014230

08008ae8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <netif_issue_reports+0x20>
 8008afa:	4b18      	ldr	r3, [pc, #96]	; (8008b5c <netif_issue_reports+0x74>)
 8008afc:	f240 326d 	movw	r2, #877	; 0x36d
 8008b00:	4917      	ldr	r1, [pc, #92]	; (8008b60 <netif_issue_reports+0x78>)
 8008b02:	4818      	ldr	r0, [pc, #96]	; (8008b64 <netif_issue_reports+0x7c>)
 8008b04:	f00a f8a2 	bl	8012c4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01e      	beq.n	8008b54 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b1c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d017      	beq.n	8008b54 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d013      	beq.n	8008b56 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3304      	adds	r3, #4
 8008b32:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00e      	beq.n	8008b56 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f008 fca7 	bl	80114a0 <etharp_request>
 8008b52:	e000      	b.n	8008b56 <netif_issue_reports+0x6e>
    return;
 8008b54:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	080141e0 	.word	0x080141e0
 8008b60:	08014384 	.word	0x08014384
 8008b64:	08014230 	.word	0x08014230

08008b68 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d107      	bne.n	8008b86 <netif_set_down+0x1e>
 8008b76:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <netif_set_down+0x58>)
 8008b78:	f240 329b 	movw	r2, #923	; 0x39b
 8008b7c:	4911      	ldr	r1, [pc, #68]	; (8008bc4 <netif_set_down+0x5c>)
 8008b7e:	4812      	ldr	r0, [pc, #72]	; (8008bc8 <netif_set_down+0x60>)
 8008b80:	f00a f864 	bl	8012c4c <iprintf>
 8008b84:	e019      	b.n	8008bba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d012      	beq.n	8008bba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bac:	f003 0308 	and.w	r3, r3, #8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f008 f831 	bl	8010c1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	080141e0 	.word	0x080141e0
 8008bc4:	080143a8 	.word	0x080143a8
 8008bc8:	08014230 	.word	0x08014230

08008bcc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	61da      	str	r2, [r3, #28]
  }
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008bfa:	f06f 030b 	mvn.w	r3, #11
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
	...

08008c0c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d013      	beq.n	8008c44 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <netif_get_by_index+0x48>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e00c      	b.n	8008c3e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	79fa      	ldrb	r2, [r7, #7]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d101      	bne.n	8008c38 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e006      	b.n	8008c46 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1ef      	bne.n	8008c24 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200098a8 	.word	0x200098a8

08008c58 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <pbuf_free_ooseq+0x38>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <pbuf_free_ooseq+0x3c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	e00a      	b.n	8008c82 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f002 fbed 	bl	800b454 <tcp_free_ooseq>
      return;
 8008c7a:	e005      	b.n	8008c88 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f1      	bne.n	8008c6c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200098b1 	.word	0x200098b1
 8008c94:	200098c0 	.word	0x200098c0

08008c98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008c9c:	4b03      	ldr	r3, [pc, #12]	; (8008cac <pbuf_pool_is_empty+0x14>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008ca2:	bf00      	nop
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200098b1 	.word	0x200098b1

08008cb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	80fb      	strh	r3, [r7, #6]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88ba      	ldrh	r2, [r7, #4]
 8008cdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008cde:	8b3b      	ldrh	r3, [r7, #24]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	7f3a      	ldrb	r2, [r7, #28]
 8008cea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	73da      	strb	r2, [r3, #15]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	; 0x30
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	71fb      	strb	r3, [r7, #7]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	80bb      	strh	r3, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008d1a:	887b      	ldrh	r3, [r7, #2]
 8008d1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008d20:	d07f      	beq.n	8008e22 <pbuf_alloc+0x11e>
 8008d22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008d26:	f300 80c8 	bgt.w	8008eba <pbuf_alloc+0x1b6>
 8008d2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008d2e:	d010      	beq.n	8008d52 <pbuf_alloc+0x4e>
 8008d30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008d34:	f300 80c1 	bgt.w	8008eba <pbuf_alloc+0x1b6>
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d002      	beq.n	8008d42 <pbuf_alloc+0x3e>
 8008d3c:	2b41      	cmp	r3, #65	; 0x41
 8008d3e:	f040 80bc 	bne.w	8008eba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008d42:	887a      	ldrh	r2, [r7, #2]
 8008d44:	88bb      	ldrh	r3, [r7, #4]
 8008d46:	4619      	mov	r1, r3
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f000 f8d1 	bl	8008ef0 <pbuf_alloc_reference>
 8008d4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008d50:	e0bd      	b.n	8008ece <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008d5a:	88bb      	ldrh	r3, [r7, #4]
 8008d5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008d5e:	2008      	movs	r0, #8
 8008d60:	f7ff fc56 	bl	8008610 <memp_malloc>
 8008d64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008d6c:	f7ff ff94 	bl	8008c98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d78:	f000 faa8 	bl	80092cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e0a7      	b.n	8008ed0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d82:	3303      	adds	r3, #3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	8b7a      	ldrh	r2, [r7, #26]
 8008d94:	4293      	cmp	r3, r2
 8008d96:	bf28      	it	cs
 8008d98:	4613      	movcs	r3, r2
 8008d9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d9e:	3310      	adds	r3, #16
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4413      	add	r3, r2
 8008da4:	3303      	adds	r3, #3
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	4618      	mov	r0, r3
 8008dac:	89f9      	ldrh	r1, [r7, #14]
 8008dae:	8b7a      	ldrh	r2, [r7, #26]
 8008db0:	2300      	movs	r3, #0
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	887b      	ldrh	r3, [r7, #2]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	460b      	mov	r3, r1
 8008dba:	4601      	mov	r1, r0
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7ff ff77 	bl	8008cb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d006      	beq.n	8008ddc <pbuf_alloc+0xd8>
 8008dce:	4b42      	ldr	r3, [pc, #264]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dd4:	4941      	ldr	r1, [pc, #260]	; (8008edc <pbuf_alloc+0x1d8>)
 8008dd6:	4842      	ldr	r0, [pc, #264]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008dd8:	f009 ff38 	bl	8012c4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dde:	3303      	adds	r3, #3
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008de8:	d106      	bne.n	8008df8 <pbuf_alloc+0xf4>
 8008dea:	4b3b      	ldr	r3, [pc, #236]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008dec:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008df0:	493c      	ldr	r1, [pc, #240]	; (8008ee4 <pbuf_alloc+0x1e0>)
 8008df2:	483b      	ldr	r0, [pc, #236]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008df4:	f009 ff2a 	bl	8012c4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
 8008e02:	e002      	b.n	8008e0a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008e0e:	8b7a      	ldrh	r2, [r7, #26]
 8008e10:	89fb      	ldrh	r3, [r7, #14]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008e1a:	8b7b      	ldrh	r3, [r7, #26]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d19e      	bne.n	8008d5e <pbuf_alloc+0x5a>
      break;
 8008e20:	e055      	b.n	8008ece <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e24:	3303      	adds	r3, #3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	88bb      	ldrh	r3, [r7, #4]
 8008e30:	3303      	adds	r3, #3
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f023 0303 	bic.w	r3, r3, #3
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008e3e:	8b3b      	ldrh	r3, [r7, #24]
 8008e40:	3310      	adds	r3, #16
 8008e42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e44:	8b3a      	ldrh	r2, [r7, #24]
 8008e46:	88bb      	ldrh	r3, [r7, #4]
 8008e48:	3303      	adds	r3, #3
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d306      	bcc.n	8008e60 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008e52:	8afa      	ldrh	r2, [r7, #22]
 8008e54:	88bb      	ldrh	r3, [r7, #4]
 8008e56:	3303      	adds	r3, #3
 8008e58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d201      	bcs.n	8008e64 <pbuf_alloc+0x160>
        return NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	e035      	b.n	8008ed0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008e64:	8afb      	ldrh	r3, [r7, #22]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fa64 	bl	8008334 <mem_malloc>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <pbuf_alloc+0x174>
        return NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e02b      	b.n	8008ed0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e7a:	3310      	adds	r3, #16
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	4413      	add	r3, r2
 8008e80:	3303      	adds	r3, #3
 8008e82:	f023 0303 	bic.w	r3, r3, #3
 8008e86:	4618      	mov	r0, r3
 8008e88:	88b9      	ldrh	r1, [r7, #4]
 8008e8a:	88ba      	ldrh	r2, [r7, #4]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	460b      	mov	r3, r1
 8008e96:	4601      	mov	r1, r0
 8008e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e9a:	f7ff ff09 	bl	8008cb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d010      	beq.n	8008ecc <pbuf_alloc+0x1c8>
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008eac:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008eb0:	490d      	ldr	r1, [pc, #52]	; (8008ee8 <pbuf_alloc+0x1e4>)
 8008eb2:	480b      	ldr	r0, [pc, #44]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008eb4:	f009 feca 	bl	8012c4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008eb8:	e008      	b.n	8008ecc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008ebc:	f240 1227 	movw	r2, #295	; 0x127
 8008ec0:	490a      	ldr	r1, [pc, #40]	; (8008eec <pbuf_alloc+0x1e8>)
 8008ec2:	4807      	ldr	r0, [pc, #28]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008ec4:	f009 fec2 	bl	8012c4c <iprintf>
      return NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e001      	b.n	8008ed0 <pbuf_alloc+0x1cc>
      break;
 8008ecc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3728      	adds	r7, #40	; 0x28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	08014410 	.word	0x08014410
 8008edc:	08014440 	.word	0x08014440
 8008ee0:	08014470 	.word	0x08014470
 8008ee4:	08014498 	.word	0x08014498
 8008ee8:	080144cc 	.word	0x080144cc
 8008eec:	080144f8 	.word	0x080144f8

08008ef0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	807b      	strh	r3, [r7, #2]
 8008efc:	4613      	mov	r3, r2
 8008efe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008f00:	883b      	ldrh	r3, [r7, #0]
 8008f02:	2b41      	cmp	r3, #65	; 0x41
 8008f04:	d009      	beq.n	8008f1a <pbuf_alloc_reference+0x2a>
 8008f06:	883b      	ldrh	r3, [r7, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d006      	beq.n	8008f1a <pbuf_alloc_reference+0x2a>
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <pbuf_alloc_reference+0x5c>)
 8008f0e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008f12:	490f      	ldr	r1, [pc, #60]	; (8008f50 <pbuf_alloc_reference+0x60>)
 8008f14:	480f      	ldr	r0, [pc, #60]	; (8008f54 <pbuf_alloc_reference+0x64>)
 8008f16:	f009 fe99 	bl	8012c4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008f1a:	2007      	movs	r0, #7
 8008f1c:	f7ff fb78 	bl	8008610 <memp_malloc>
 8008f20:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e00b      	b.n	8008f44 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008f2c:	8879      	ldrh	r1, [r7, #2]
 8008f2e:	887a      	ldrh	r2, [r7, #2]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	883b      	ldrh	r3, [r7, #0]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff feb7 	bl	8008cb0 <pbuf_init_alloced_pbuf>
  return p;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08014410 	.word	0x08014410
 8008f50:	08014514 	.word	0x08014514
 8008f54:	08014470 	.word	0x08014470

08008f58 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
 8008f64:	460b      	mov	r3, r1
 8008f66:	81bb      	strh	r3, [r7, #12]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008f70:	8a7b      	ldrh	r3, [r7, #18]
 8008f72:	3303      	adds	r3, #3
 8008f74:	f023 0203 	bic.w	r2, r3, #3
 8008f78:	89bb      	ldrh	r3, [r7, #12]
 8008f7a:	441a      	add	r2, r3
 8008f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d901      	bls.n	8008f86 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e018      	b.n	8008fb8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008f8c:	8a7b      	ldrh	r3, [r7, #18]
 8008f8e:	3303      	adds	r3, #3
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	6a3a      	ldr	r2, [r7, #32]
 8008f96:	4413      	add	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e001      	b.n	8008fa0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	89b9      	ldrh	r1, [r7, #12]
 8008fa4:	89ba      	ldrh	r2, [r7, #12]
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	6979      	ldr	r1, [r7, #20]
 8008fb2:	f7ff fe7d 	bl	8008cb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008fb6:	687b      	ldr	r3, [r7, #4]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <pbuf_realloc+0x20>
 8008fd2:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <pbuf_realloc+0xfc>)
 8008fd4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008fd8:	4939      	ldr	r1, [pc, #228]	; (80090c0 <pbuf_realloc+0x100>)
 8008fda:	483a      	ldr	r0, [pc, #232]	; (80090c4 <pbuf_realloc+0x104>)
 8008fdc:	f009 fe36 	bl	8012c4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	891b      	ldrh	r3, [r3, #8]
 8008fe4:	887a      	ldrh	r2, [r7, #2]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d263      	bcs.n	80090b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	891a      	ldrh	r2, [r3, #8]
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008ff4:	887b      	ldrh	r3, [r7, #2]
 8008ff6:	817b      	strh	r3, [r7, #10]
  q = p;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008ffc:	e018      	b.n	8009030 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	895b      	ldrh	r3, [r3, #10]
 8009002:	897a      	ldrh	r2, [r7, #10]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	891a      	ldrh	r2, [r3, #8]
 800900c:	893b      	ldrh	r3, [r7, #8]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <pbuf_realloc+0x70>
 8009022:	4b26      	ldr	r3, [pc, #152]	; (80090bc <pbuf_realloc+0xfc>)
 8009024:	f240 12af 	movw	r2, #431	; 0x1af
 8009028:	4927      	ldr	r1, [pc, #156]	; (80090c8 <pbuf_realloc+0x108>)
 800902a:	4826      	ldr	r0, [pc, #152]	; (80090c4 <pbuf_realloc+0x104>)
 800902c:	f009 fe0e 	bl	8012c4c <iprintf>
  while (rem_len > q->len) {
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	895b      	ldrh	r3, [r3, #10]
 8009034:	897a      	ldrh	r2, [r7, #10]
 8009036:	429a      	cmp	r2, r3
 8009038:	d8e1      	bhi.n	8008ffe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7b1b      	ldrb	r3, [r3, #12]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	2b00      	cmp	r3, #0
 8009044:	d121      	bne.n	800908a <pbuf_realloc+0xca>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	895b      	ldrh	r3, [r3, #10]
 800904a:	897a      	ldrh	r2, [r7, #10]
 800904c:	429a      	cmp	r2, r3
 800904e:	d01c      	beq.n	800908a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	7b5b      	ldrb	r3, [r3, #13]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d116      	bne.n	800908a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	b29a      	uxth	r2, r3
 8009066:	897b      	ldrh	r3, [r7, #10]
 8009068:	4413      	add	r3, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	4619      	mov	r1, r3
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff f864 	bl	800813c <mem_trim>
 8009074:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <pbuf_realloc+0xca>
 800907c:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <pbuf_realloc+0xfc>)
 800907e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009082:	4912      	ldr	r1, [pc, #72]	; (80090cc <pbuf_realloc+0x10c>)
 8009084:	480f      	ldr	r0, [pc, #60]	; (80090c4 <pbuf_realloc+0x104>)
 8009086:	f009 fde1 	bl	8012c4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	897a      	ldrh	r2, [r7, #10]
 800908e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	895a      	ldrh	r2, [r3, #10]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f911 	bl	80092cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e000      	b.n	80090b4 <pbuf_realloc+0xf4>
    return;
 80090b2:	bf00      	nop

}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08014410 	.word	0x08014410
 80090c0:	08014528 	.word	0x08014528
 80090c4:	08014470 	.word	0x08014470
 80090c8:	08014540 	.word	0x08014540
 80090cc:	08014558 	.word	0x08014558

080090d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <pbuf_add_header_impl+0x22>
 80090e4:	4b2b      	ldr	r3, [pc, #172]	; (8009194 <pbuf_add_header_impl+0xc4>)
 80090e6:	f240 12df 	movw	r2, #479	; 0x1df
 80090ea:	492b      	ldr	r1, [pc, #172]	; (8009198 <pbuf_add_header_impl+0xc8>)
 80090ec:	482b      	ldr	r0, [pc, #172]	; (800919c <pbuf_add_header_impl+0xcc>)
 80090ee:	f009 fdad 	bl	8012c4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <pbuf_add_header_impl+0x30>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fe:	d301      	bcc.n	8009104 <pbuf_add_header_impl+0x34>
    return 1;
 8009100:	2301      	movs	r3, #1
 8009102:	e043      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <pbuf_add_header_impl+0x3e>
    return 0;
 800910a:	2300      	movs	r3, #0
 800910c:	e03e      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	891a      	ldrh	r2, [r3, #8]
 8009116:	8a7b      	ldrh	r3, [r7, #18]
 8009118:	4413      	add	r3, r2
 800911a:	b29b      	uxth	r3, r3
 800911c:	8a7a      	ldrh	r2, [r7, #18]
 800911e:	429a      	cmp	r2, r3
 8009120:	d901      	bls.n	8009126 <pbuf_add_header_impl+0x56>
    return 1;
 8009122:	2301      	movs	r3, #1
 8009124:	e032      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	7b1b      	ldrb	r3, [r3, #12]
 800912a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800912c:	8a3b      	ldrh	r3, [r7, #16]
 800912e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00c      	beq.n	8009150 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	425b      	negs	r3, r3
 800913e:	4413      	add	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3310      	adds	r3, #16
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	429a      	cmp	r2, r3
 800914a:	d20d      	bcs.n	8009168 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800914c:	2301      	movs	r3, #1
 800914e:	e01d      	b.n	800918c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d006      	beq.n	8009164 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	425b      	negs	r3, r3
 800915e:	4413      	add	r3, r2
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e001      	b.n	8009168 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009164:	2301      	movs	r3, #1
 8009166:	e011      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	895a      	ldrh	r2, [r3, #10]
 8009172:	8a7b      	ldrh	r3, [r7, #18]
 8009174:	4413      	add	r3, r2
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	891a      	ldrh	r2, [r3, #8]
 8009180:	8a7b      	ldrh	r3, [r7, #18]
 8009182:	4413      	add	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	811a      	strh	r2, [r3, #8]


  return 0;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	08014410 	.word	0x08014410
 8009198:	08014574 	.word	0x08014574
 800919c:	08014470 	.word	0x08014470

080091a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80091aa:	2200      	movs	r2, #0
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff ff8e 	bl	80090d0 <pbuf_add_header_impl>
 80091b4:	4603      	mov	r3, r0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <pbuf_remove_header+0x1e>
 80091d0:	4b20      	ldr	r3, [pc, #128]	; (8009254 <pbuf_remove_header+0x94>)
 80091d2:	f240 224b 	movw	r2, #587	; 0x24b
 80091d6:	4920      	ldr	r1, [pc, #128]	; (8009258 <pbuf_remove_header+0x98>)
 80091d8:	4820      	ldr	r0, [pc, #128]	; (800925c <pbuf_remove_header+0x9c>)
 80091da:	f009 fd37 	bl	8012c4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <pbuf_remove_header+0x2c>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ea:	d301      	bcc.n	80091f0 <pbuf_remove_header+0x30>
    return 1;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e02c      	b.n	800924a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <pbuf_remove_header+0x3a>
    return 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e027      	b.n	800924a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	89fa      	ldrh	r2, [r7, #14]
 8009204:	429a      	cmp	r2, r3
 8009206:	d908      	bls.n	800921a <pbuf_remove_header+0x5a>
 8009208:	4b12      	ldr	r3, [pc, #72]	; (8009254 <pbuf_remove_header+0x94>)
 800920a:	f240 2255 	movw	r2, #597	; 0x255
 800920e:	4914      	ldr	r1, [pc, #80]	; (8009260 <pbuf_remove_header+0xa0>)
 8009210:	4812      	ldr	r0, [pc, #72]	; (800925c <pbuf_remove_header+0x9c>)
 8009212:	f009 fd1b 	bl	8012c4c <iprintf>
 8009216:	2301      	movs	r3, #1
 8009218:	e017      	b.n	800924a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	441a      	add	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	895a      	ldrh	r2, [r3, #10]
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	b29a      	uxth	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	891a      	ldrh	r2, [r3, #8]
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	08014410 	.word	0x08014410
 8009258:	08014574 	.word	0x08014574
 800925c:	08014470 	.word	0x08014470
 8009260:	08014580 	.word	0x08014580

08009264 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	807b      	strh	r3, [r7, #2]
 8009270:	4613      	mov	r3, r2
 8009272:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da08      	bge.n	800928e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800927c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009280:	425b      	negs	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ff9b 	bl	80091c0 <pbuf_remove_header>
 800928a:	4603      	mov	r3, r0
 800928c:	e007      	b.n	800929e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800928e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009292:	787a      	ldrb	r2, [r7, #1]
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff ff1a 	bl	80090d0 <pbuf_add_header_impl>
 800929c:	4603      	mov	r3, r0
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80092b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b6:	2201      	movs	r2, #1
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ffd2 	bl	8009264 <pbuf_header_impl>
 80092c0:	4603      	mov	r3, r0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <pbuf_free+0x22>
 80092e0:	4b38      	ldr	r3, [pc, #224]	; (80093c4 <pbuf_free+0xf8>)
 80092e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80092e6:	4938      	ldr	r1, [pc, #224]	; (80093c8 <pbuf_free+0xfc>)
 80092e8:	4838      	ldr	r0, [pc, #224]	; (80093cc <pbuf_free+0x100>)
 80092ea:	f009 fcaf 	bl	8012c4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e063      	b.n	80093ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80092f6:	e05c      	b.n	80093b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7b9b      	ldrb	r3, [r3, #14]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <pbuf_free+0x42>
 8009300:	4b30      	ldr	r3, [pc, #192]	; (80093c4 <pbuf_free+0xf8>)
 8009302:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009306:	4932      	ldr	r1, [pc, #200]	; (80093d0 <pbuf_free+0x104>)
 8009308:	4830      	ldr	r0, [pc, #192]	; (80093cc <pbuf_free+0x100>)
 800930a:	f009 fc9f 	bl	8012c4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7b9b      	ldrb	r3, [r3, #14]
 8009312:	3b01      	subs	r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	739a      	strb	r2, [r3, #14]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7b9b      	ldrb	r3, [r3, #14]
 800931e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009320:	7dbb      	ldrb	r3, [r7, #22]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d143      	bne.n	80093ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	7b1b      	ldrb	r3, [r3, #12]
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7b5b      	ldrb	r3, [r3, #13]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <pbuf_free+0x90>
 800934e:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <pbuf_free+0xf8>)
 8009350:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009354:	491f      	ldr	r1, [pc, #124]	; (80093d4 <pbuf_free+0x108>)
 8009356:	481d      	ldr	r0, [pc, #116]	; (80093cc <pbuf_free+0x100>)
 8009358:	f009 fc78 	bl	8012c4c <iprintf>
        pc->custom_free_function(p);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
 8009364:	e01d      	b.n	80093a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d104      	bne.n	8009376 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	2008      	movs	r0, #8
 8009370:	f7ff f99a 	bl	80086a8 <memp_free>
 8009374:	e015      	b.n	80093a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d104      	bne.n	8009386 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	2007      	movs	r0, #7
 8009380:	f7ff f992 	bl	80086a8 <memp_free>
 8009384:	e00d      	b.n	80093a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <pbuf_free+0xc8>
          mem_free(p);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe fe6b 	bl	8008068 <mem_free>
 8009392:	e006      	b.n	80093a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <pbuf_free+0xf8>)
 8009396:	f240 320f 	movw	r2, #783	; 0x30f
 800939a:	490f      	ldr	r1, [pc, #60]	; (80093d8 <pbuf_free+0x10c>)
 800939c:	480b      	ldr	r0, [pc, #44]	; (80093cc <pbuf_free+0x100>)
 800939e:	f009 fc55 	bl	8012c4c <iprintf>
        }
      }
      count++;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	3301      	adds	r3, #1
 80093a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e001      	b.n	80093b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d19f      	bne.n	80092f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	08014410 	.word	0x08014410
 80093c8:	08014574 	.word	0x08014574
 80093cc:	08014470 	.word	0x08014470
 80093d0:	080145a0 	.word	0x080145a0
 80093d4:	080145b8 	.word	0x080145b8
 80093d8:	080145dc 	.word	0x080145dc

080093dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80093e8:	e005      	b.n	80093f6 <pbuf_clen+0x1a>
    ++len;
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	3301      	adds	r3, #1
 80093ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f6      	bne.n	80093ea <pbuf_clen+0xe>
  }
  return len;
 80093fc:	89fb      	ldrh	r3, [r7, #14]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7b9b      	ldrb	r3, [r3, #14]
 800941e:	3301      	adds	r3, #1
 8009420:	b2da      	uxtb	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	7b9b      	ldrb	r3, [r3, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <pbuf_ref+0x30>
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <pbuf_ref+0x38>)
 8009430:	f240 3242 	movw	r2, #834	; 0x342
 8009434:	4904      	ldr	r1, [pc, #16]	; (8009448 <pbuf_ref+0x3c>)
 8009436:	4805      	ldr	r0, [pc, #20]	; (800944c <pbuf_ref+0x40>)
 8009438:	f009 fc08 	bl	8012c4c <iprintf>
  }
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	08014410 	.word	0x08014410
 8009448:	080145f0 	.word	0x080145f0
 800944c:	08014470 	.word	0x08014470

08009450 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <pbuf_cat+0x16>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d107      	bne.n	8009476 <pbuf_cat+0x26>
 8009466:	4b20      	ldr	r3, [pc, #128]	; (80094e8 <pbuf_cat+0x98>)
 8009468:	f240 3259 	movw	r2, #857	; 0x359
 800946c:	491f      	ldr	r1, [pc, #124]	; (80094ec <pbuf_cat+0x9c>)
 800946e:	4820      	ldr	r0, [pc, #128]	; (80094f0 <pbuf_cat+0xa0>)
 8009470:	f009 fbec 	bl	8012c4c <iprintf>
 8009474:	e034      	b.n	80094e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e00a      	b.n	8009492 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	891a      	ldrh	r2, [r3, #8]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	891b      	ldrh	r3, [r3, #8]
 8009484:	4413      	add	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f0      	bne.n	800947c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	891a      	ldrh	r2, [r3, #8]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	895b      	ldrh	r3, [r3, #10]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d006      	beq.n	80094b4 <pbuf_cat+0x64>
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <pbuf_cat+0x98>)
 80094a8:	f240 3262 	movw	r2, #866	; 0x362
 80094ac:	4911      	ldr	r1, [pc, #68]	; (80094f4 <pbuf_cat+0xa4>)
 80094ae:	4810      	ldr	r0, [pc, #64]	; (80094f0 <pbuf_cat+0xa0>)
 80094b0:	f009 fbcc 	bl	8012c4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d006      	beq.n	80094ca <pbuf_cat+0x7a>
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <pbuf_cat+0x98>)
 80094be:	f240 3263 	movw	r2, #867	; 0x363
 80094c2:	490d      	ldr	r1, [pc, #52]	; (80094f8 <pbuf_cat+0xa8>)
 80094c4:	480a      	ldr	r0, [pc, #40]	; (80094f0 <pbuf_cat+0xa0>)
 80094c6:	f009 fbc1 	bl	8012c4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	891a      	ldrh	r2, [r3, #8]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	891b      	ldrh	r3, [r3, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	08014410 	.word	0x08014410
 80094ec:	08014604 	.word	0x08014604
 80094f0:	08014470 	.word	0x08014470
 80094f4:	0801463c 	.word	0x0801463c
 80094f8:	0801466c 	.word	0x0801466c

080094fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7ff ffa1 	bl	8009450 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800950e:	6838      	ldr	r0, [r7, #0]
 8009510:	f7ff ff7c 	bl	800940c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d008      	beq.n	8009546 <pbuf_copy+0x2a>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <pbuf_copy+0x2a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	891a      	ldrh	r2, [r3, #8]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	891b      	ldrh	r3, [r3, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d209      	bcs.n	800955a <pbuf_copy+0x3e>
 8009546:	4b57      	ldr	r3, [pc, #348]	; (80096a4 <pbuf_copy+0x188>)
 8009548:	f240 32c9 	movw	r2, #969	; 0x3c9
 800954c:	4956      	ldr	r1, [pc, #344]	; (80096a8 <pbuf_copy+0x18c>)
 800954e:	4857      	ldr	r0, [pc, #348]	; (80096ac <pbuf_copy+0x190>)
 8009550:	f009 fb7c 	bl	8012c4c <iprintf>
 8009554:	f06f 030f 	mvn.w	r3, #15
 8009558:	e09f      	b.n	800969a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	895b      	ldrh	r3, [r3, #10]
 800955e:	461a      	mov	r2, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	895b      	ldrh	r3, [r3, #10]
 8009568:	4619      	mov	r1, r3
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	1acb      	subs	r3, r1, r3
 800956e:	429a      	cmp	r2, r3
 8009570:	d306      	bcc.n	8009580 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	895b      	ldrh	r3, [r3, #10]
 8009576:	461a      	mov	r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	e005      	b.n	800958c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	895b      	ldrh	r3, [r3, #10]
 8009584:	461a      	mov	r2, r3
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	18d0      	adds	r0, r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	4413      	add	r3, r2
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4619      	mov	r1, r3
 80095a0:	f009 fb3e 	bl	8012c20 <memcpy>
    offset_to += len;
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	895b      	ldrh	r3, [r3, #10]
 80095b8:	461a      	mov	r2, r3
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	4293      	cmp	r3, r2
 80095be:	d906      	bls.n	80095ce <pbuf_copy+0xb2>
 80095c0:	4b38      	ldr	r3, [pc, #224]	; (80096a4 <pbuf_copy+0x188>)
 80095c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80095c6:	493a      	ldr	r1, [pc, #232]	; (80096b0 <pbuf_copy+0x194>)
 80095c8:	4838      	ldr	r0, [pc, #224]	; (80096ac <pbuf_copy+0x190>)
 80095ca:	f009 fb3f 	bl	8012c4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	895b      	ldrh	r3, [r3, #10]
 80095d2:	461a      	mov	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d906      	bls.n	80095e8 <pbuf_copy+0xcc>
 80095da:	4b32      	ldr	r3, [pc, #200]	; (80096a4 <pbuf_copy+0x188>)
 80095dc:	f240 32da 	movw	r2, #986	; 0x3da
 80095e0:	4934      	ldr	r1, [pc, #208]	; (80096b4 <pbuf_copy+0x198>)
 80095e2:	4832      	ldr	r0, [pc, #200]	; (80096ac <pbuf_copy+0x190>)
 80095e4:	f009 fb32 	bl	8012c4c <iprintf>
    if (offset_from >= p_from->len) {
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	895b      	ldrh	r3, [r3, #10]
 80095ec:	461a      	mov	r2, r3
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d304      	bcc.n	80095fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	895b      	ldrh	r3, [r3, #10]
 8009602:	461a      	mov	r2, r3
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	4293      	cmp	r3, r2
 8009608:	d114      	bne.n	8009634 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10c      	bne.n	8009634 <pbuf_copy+0x118>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <pbuf_copy+0x118>
 8009620:	4b20      	ldr	r3, [pc, #128]	; (80096a4 <pbuf_copy+0x188>)
 8009622:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009626:	4924      	ldr	r1, [pc, #144]	; (80096b8 <pbuf_copy+0x19c>)
 8009628:	4820      	ldr	r0, [pc, #128]	; (80096ac <pbuf_copy+0x190>)
 800962a:	f009 fb0f 	bl	8012c4c <iprintf>
 800962e:	f06f 030f 	mvn.w	r3, #15
 8009632:	e032      	b.n	800969a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d013      	beq.n	8009662 <pbuf_copy+0x146>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	895a      	ldrh	r2, [r3, #10]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	891b      	ldrh	r3, [r3, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	d10d      	bne.n	8009662 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <pbuf_copy+0x146>
 800964e:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <pbuf_copy+0x188>)
 8009650:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009654:	4919      	ldr	r1, [pc, #100]	; (80096bc <pbuf_copy+0x1a0>)
 8009656:	4815      	ldr	r0, [pc, #84]	; (80096ac <pbuf_copy+0x190>)
 8009658:	f009 faf8 	bl	8012c4c <iprintf>
 800965c:	f06f 0305 	mvn.w	r3, #5
 8009660:	e01b      	b.n	800969a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d013      	beq.n	8009690 <pbuf_copy+0x174>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	895a      	ldrh	r2, [r3, #10]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	891b      	ldrh	r3, [r3, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	d10d      	bne.n	8009690 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <pbuf_copy+0x174>
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <pbuf_copy+0x188>)
 800967e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009682:	490e      	ldr	r1, [pc, #56]	; (80096bc <pbuf_copy+0x1a0>)
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <pbuf_copy+0x190>)
 8009686:	f009 fae1 	bl	8012c4c <iprintf>
 800968a:	f06f 0305 	mvn.w	r3, #5
 800968e:	e004      	b.n	800969a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f47f af61 	bne.w	800955a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08014410 	.word	0x08014410
 80096a8:	080146b8 	.word	0x080146b8
 80096ac:	08014470 	.word	0x08014470
 80096b0:	080146e8 	.word	0x080146e8
 80096b4:	08014700 	.word	0x08014700
 80096b8:	0801471c 	.word	0x0801471c
 80096bc:	0801472c 	.word	0x0801472c

080096c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4611      	mov	r1, r2
 80096cc:	461a      	mov	r2, r3
 80096ce:	460b      	mov	r3, r1
 80096d0:	80fb      	strh	r3, [r7, #6]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <pbuf_copy_partial+0x36>
 80096e4:	4b2b      	ldr	r3, [pc, #172]	; (8009794 <pbuf_copy_partial+0xd4>)
 80096e6:	f240 420a 	movw	r2, #1034	; 0x40a
 80096ea:	492b      	ldr	r1, [pc, #172]	; (8009798 <pbuf_copy_partial+0xd8>)
 80096ec:	482b      	ldr	r0, [pc, #172]	; (800979c <pbuf_copy_partial+0xdc>)
 80096ee:	f009 faad 	bl	8012c4c <iprintf>
 80096f2:	2300      	movs	r3, #0
 80096f4:	e04a      	b.n	800978c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d108      	bne.n	800970e <pbuf_copy_partial+0x4e>
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <pbuf_copy_partial+0xd4>)
 80096fe:	f240 420b 	movw	r2, #1035	; 0x40b
 8009702:	4927      	ldr	r1, [pc, #156]	; (80097a0 <pbuf_copy_partial+0xe0>)
 8009704:	4825      	ldr	r0, [pc, #148]	; (800979c <pbuf_copy_partial+0xdc>)
 8009706:	f009 faa1 	bl	8012c4c <iprintf>
 800970a:	2300      	movs	r3, #0
 800970c:	e03e      	b.n	800978c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	e034      	b.n	800977e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009714:	88bb      	ldrh	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <pbuf_copy_partial+0x70>
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	895b      	ldrh	r3, [r3, #10]
 800971e:	88ba      	ldrh	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d305      	bcc.n	8009730 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	895b      	ldrh	r3, [r3, #10]
 8009728:	88ba      	ldrh	r2, [r7, #4]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	80bb      	strh	r3, [r7, #4]
 800972e:	e023      	b.n	8009778 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	895a      	ldrh	r2, [r3, #10]
 8009734:	88bb      	ldrh	r3, [r7, #4]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800973a:	8b3a      	ldrh	r2, [r7, #24]
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	429a      	cmp	r2, r3
 8009740:	d901      	bls.n	8009746 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009742:	88fb      	ldrh	r3, [r7, #6]
 8009744:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009746:	8b7b      	ldrh	r3, [r7, #26]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	18d0      	adds	r0, r2, r3
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	88bb      	ldrh	r3, [r7, #4]
 8009752:	4413      	add	r3, r2
 8009754:	8b3a      	ldrh	r2, [r7, #24]
 8009756:	4619      	mov	r1, r3
 8009758:	f009 fa62 	bl	8012c20 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800975c:	8afa      	ldrh	r2, [r7, #22]
 800975e:	8b3b      	ldrh	r3, [r7, #24]
 8009760:	4413      	add	r3, r2
 8009762:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009764:	8b7a      	ldrh	r2, [r7, #26]
 8009766:	8b3b      	ldrh	r3, [r7, #24]
 8009768:	4413      	add	r3, r2
 800976a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800976c:	88fa      	ldrh	r2, [r7, #6]
 800976e:	8b3b      	ldrh	r3, [r7, #24]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <pbuf_copy_partial+0xca>
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1c4      	bne.n	8009714 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800978a:	8afb      	ldrh	r3, [r7, #22]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	08014410 	.word	0x08014410
 8009798:	08014758 	.word	0x08014758
 800979c:	08014470 	.word	0x08014470
 80097a0:	08014778 	.word	0x08014778

080097a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	603a      	str	r2, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
 80097b0:	460b      	mov	r3, r1
 80097b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	8919      	ldrh	r1, [r3, #8]
 80097b8:	88ba      	ldrh	r2, [r7, #4]
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff faa1 	bl	8008d04 <pbuf_alloc>
 80097c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <pbuf_clone+0x2a>
    return NULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e011      	b.n	80097f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff fea3 	bl	800951c <pbuf_copy>
 80097d6:	4603      	mov	r3, r0
 80097d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80097da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <pbuf_clone+0x4c>
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <pbuf_clone+0x58>)
 80097e4:	f240 5224 	movw	r2, #1316	; 0x524
 80097e8:	4905      	ldr	r1, [pc, #20]	; (8009800 <pbuf_clone+0x5c>)
 80097ea:	4806      	ldr	r0, [pc, #24]	; (8009804 <pbuf_clone+0x60>)
 80097ec:	f009 fa2e 	bl	8012c4c <iprintf>
  return q;
 80097f0:	68fb      	ldr	r3, [r7, #12]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	08014410 	.word	0x08014410
 8009800:	08014884 	.word	0x08014884
 8009804:	08014470 	.word	0x08014470

08009808 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800980c:	f009 fa36 	bl	8012c7c <rand>
 8009810:	4603      	mov	r3, r0
 8009812:	b29b      	uxth	r3, r3
 8009814:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009818:	b29b      	uxth	r3, r3
 800981a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800981e:	b29a      	uxth	r2, r3
 8009820:	4b01      	ldr	r3, [pc, #4]	; (8009828 <tcp_init+0x20>)
 8009822:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009824:	bf00      	nop
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000044 	.word	0x20000044

0800982c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7d1b      	ldrb	r3, [r3, #20]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d105      	bne.n	8009848 <tcp_free+0x1c>
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <tcp_free+0x2c>)
 800983e:	22d4      	movs	r2, #212	; 0xd4
 8009840:	4906      	ldr	r1, [pc, #24]	; (800985c <tcp_free+0x30>)
 8009842:	4807      	ldr	r0, [pc, #28]	; (8009860 <tcp_free+0x34>)
 8009844:	f009 fa02 	bl	8012c4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	2001      	movs	r0, #1
 800984c:	f7fe ff2c 	bl	80086a8 <memp_free>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	08014910 	.word	0x08014910
 800985c:	08014940 	.word	0x08014940
 8009860:	08014954 	.word	0x08014954

08009864 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7d1b      	ldrb	r3, [r3, #20]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d105      	bne.n	8009880 <tcp_free_listen+0x1c>
 8009874:	4b06      	ldr	r3, [pc, #24]	; (8009890 <tcp_free_listen+0x2c>)
 8009876:	22df      	movs	r2, #223	; 0xdf
 8009878:	4906      	ldr	r1, [pc, #24]	; (8009894 <tcp_free_listen+0x30>)
 800987a:	4807      	ldr	r0, [pc, #28]	; (8009898 <tcp_free_listen+0x34>)
 800987c:	f009 f9e6 	bl	8012c4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	2002      	movs	r0, #2
 8009884:	f7fe ff10 	bl	80086a8 <memp_free>
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	08014910 	.word	0x08014910
 8009894:	0801497c 	.word	0x0801497c
 8009898:	08014954 	.word	0x08014954

0800989c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80098a0:	f001 f85c 	bl	800a95c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80098a4:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <tcp_tmr+0x28>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <tcp_tmr+0x28>)
 80098ae:	701a      	strb	r2, [r3, #0]
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <tcp_tmr+0x28>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80098bc:	f000 fd0e 	bl	800a2dc <tcp_slowtmr>
  }
}
 80098c0:	bf00      	nop
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	200098c9 	.word	0x200098c9

080098c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d105      	bne.n	80098e4 <tcp_remove_listener+0x1c>
 80098d8:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <tcp_remove_listener+0x48>)
 80098da:	22ff      	movs	r2, #255	; 0xff
 80098dc:	490d      	ldr	r1, [pc, #52]	; (8009914 <tcp_remove_listener+0x4c>)
 80098de:	480e      	ldr	r0, [pc, #56]	; (8009918 <tcp_remove_listener+0x50>)
 80098e0:	f009 f9b4 	bl	8012c4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e00a      	b.n	8009900 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d102      	bne.n	80098fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1f1      	bne.n	80098ea <tcp_remove_listener+0x22>
    }
  }
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	08014910 	.word	0x08014910
 8009914:	08014998 	.word	0x08014998
 8009918:	08014954 	.word	0x08014954

0800991c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <tcp_listen_closed+0x1c>
 800992a:	4b14      	ldr	r3, [pc, #80]	; (800997c <tcp_listen_closed+0x60>)
 800992c:	f240 1211 	movw	r2, #273	; 0x111
 8009930:	4913      	ldr	r1, [pc, #76]	; (8009980 <tcp_listen_closed+0x64>)
 8009932:	4814      	ldr	r0, [pc, #80]	; (8009984 <tcp_listen_closed+0x68>)
 8009934:	f009 f98a 	bl	8012c4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7d1b      	ldrb	r3, [r3, #20]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d006      	beq.n	800994e <tcp_listen_closed+0x32>
 8009940:	4b0e      	ldr	r3, [pc, #56]	; (800997c <tcp_listen_closed+0x60>)
 8009942:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009946:	4910      	ldr	r1, [pc, #64]	; (8009988 <tcp_listen_closed+0x6c>)
 8009948:	480e      	ldr	r0, [pc, #56]	; (8009984 <tcp_listen_closed+0x68>)
 800994a:	f009 f97f 	bl	8012c4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800994e:	2301      	movs	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e00b      	b.n	800996c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <tcp_listen_closed+0x70>)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff ffb1 	bl	80098c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b03      	cmp	r3, #3
 8009970:	d9f0      	bls.n	8009954 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009972:	bf00      	nop
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	08014910 	.word	0x08014910
 8009980:	080149c0 	.word	0x080149c0
 8009984:	08014954 	.word	0x08014954
 8009988:	080149cc 	.word	0x080149cc
 800998c:	0801695c 	.word	0x0801695c

08009990 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009990:	b5b0      	push	{r4, r5, r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af04      	add	r7, sp, #16
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <tcp_close_shutdown+0x20>
 80099a2:	4b63      	ldr	r3, [pc, #396]	; (8009b30 <tcp_close_shutdown+0x1a0>)
 80099a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80099a8:	4962      	ldr	r1, [pc, #392]	; (8009b34 <tcp_close_shutdown+0x1a4>)
 80099aa:	4863      	ldr	r0, [pc, #396]	; (8009b38 <tcp_close_shutdown+0x1a8>)
 80099ac:	f009 f94e 	bl	8012c4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d066      	beq.n	8009a84 <tcp_close_shutdown+0xf4>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	7d1b      	ldrb	r3, [r3, #20]
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d003      	beq.n	80099c6 <tcp_close_shutdown+0x36>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7d1b      	ldrb	r3, [r3, #20]
 80099c2:	2b07      	cmp	r3, #7
 80099c4:	d15e      	bne.n	8009a84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <tcp_close_shutdown+0x48>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80099d6:	d055      	beq.n	8009a84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	8b5b      	ldrh	r3, [r3, #26]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <tcp_close_shutdown+0x62>
 80099e4:	4b52      	ldr	r3, [pc, #328]	; (8009b30 <tcp_close_shutdown+0x1a0>)
 80099e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80099ea:	4954      	ldr	r1, [pc, #336]	; (8009b3c <tcp_close_shutdown+0x1ac>)
 80099ec:	4852      	ldr	r0, [pc, #328]	; (8009b38 <tcp_close_shutdown+0x1a8>)
 80099ee:	f009 f92d 	bl	8012c4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80099fa:	687d      	ldr	r5, [r7, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3304      	adds	r3, #4
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	8ad2      	ldrh	r2, [r2, #22]
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	8b09      	ldrh	r1, [r1, #24]
 8009a08:	9102      	str	r1, [sp, #8]
 8009a0a:	9201      	str	r2, [sp, #4]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	462b      	mov	r3, r5
 8009a10:	4622      	mov	r2, r4
 8009a12:	4601      	mov	r1, r0
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f005 fd89 	bl	800f52c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 fb66 	bl	800b0ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009a20:	4b47      	ldr	r3, [pc, #284]	; (8009b40 <tcp_close_shutdown+0x1b0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d105      	bne.n	8009a36 <tcp_close_shutdown+0xa6>
 8009a2a:	4b45      	ldr	r3, [pc, #276]	; (8009b40 <tcp_close_shutdown+0x1b0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	4a43      	ldr	r2, [pc, #268]	; (8009b40 <tcp_close_shutdown+0x1b0>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e013      	b.n	8009a5e <tcp_close_shutdown+0xce>
 8009a36:	4b42      	ldr	r3, [pc, #264]	; (8009b40 <tcp_close_shutdown+0x1b0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e00c      	b.n	8009a58 <tcp_close_shutdown+0xc8>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d104      	bne.n	8009a52 <tcp_close_shutdown+0xc2>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	60da      	str	r2, [r3, #12]
 8009a50:	e005      	b.n	8009a5e <tcp_close_shutdown+0xce>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1ef      	bne.n	8009a3e <tcp_close_shutdown+0xae>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	60da      	str	r2, [r3, #12]
 8009a64:	4b37      	ldr	r3, [pc, #220]	; (8009b44 <tcp_close_shutdown+0x1b4>)
 8009a66:	2201      	movs	r2, #1
 8009a68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009a6a:	4b37      	ldr	r3, [pc, #220]	; (8009b48 <tcp_close_shutdown+0x1b8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d102      	bne.n	8009a7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009a74:	f003 fffe 	bl	800da74 <tcp_trigger_input_pcb_close>
 8009a78:	e002      	b.n	8009a80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fed6 	bl	800982c <tcp_free>
      }
      return ERR_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e050      	b.n	8009b26 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	7d1b      	ldrb	r3, [r3, #20]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d03b      	beq.n	8009b04 <tcp_close_shutdown+0x174>
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	dc44      	bgt.n	8009b1a <tcp_close_shutdown+0x18a>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <tcp_close_shutdown+0x10a>
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d02a      	beq.n	8009aee <tcp_close_shutdown+0x15e>
 8009a98:	e03f      	b.n	8009b1a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8adb      	ldrh	r3, [r3, #22]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d021      	beq.n	8009ae6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009aa2:	4b2a      	ldr	r3, [pc, #168]	; (8009b4c <tcp_close_shutdown+0x1bc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d105      	bne.n	8009ab8 <tcp_close_shutdown+0x128>
 8009aac:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <tcp_close_shutdown+0x1bc>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <tcp_close_shutdown+0x1bc>)
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	e013      	b.n	8009ae0 <tcp_close_shutdown+0x150>
 8009ab8:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <tcp_close_shutdown+0x1bc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60bb      	str	r3, [r7, #8]
 8009abe:	e00c      	b.n	8009ada <tcp_close_shutdown+0x14a>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d104      	bne.n	8009ad4 <tcp_close_shutdown+0x144>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	60da      	str	r2, [r3, #12]
 8009ad2:	e005      	b.n	8009ae0 <tcp_close_shutdown+0x150>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	60bb      	str	r3, [r7, #8]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ef      	bne.n	8009ac0 <tcp_close_shutdown+0x130>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fea0 	bl	800982c <tcp_free>
      break;
 8009aec:	e01a      	b.n	8009b24 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff ff14 	bl	800991c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4816      	ldr	r0, [pc, #88]	; (8009b50 <tcp_close_shutdown+0x1c0>)
 8009af8:	f001 fb48 	bl	800b18c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff feb1 	bl	8009864 <tcp_free_listen>
      break;
 8009b02:	e00f      	b.n	8009b24 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <tcp_close_shutdown+0x1b0>)
 8009b08:	f001 fb40 	bl	800b18c <tcp_pcb_remove>
 8009b0c:	4b0d      	ldr	r3, [pc, #52]	; (8009b44 <tcp_close_shutdown+0x1b4>)
 8009b0e:	2201      	movs	r2, #1
 8009b10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff fe8a 	bl	800982c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009b18:	e004      	b.n	8009b24 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f81a 	bl	8009b54 <tcp_close_shutdown_fin>
 8009b20:	4603      	mov	r3, r0
 8009b22:	e000      	b.n	8009b26 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	08014910 	.word	0x08014910
 8009b34:	080149e4 	.word	0x080149e4
 8009b38:	08014954 	.word	0x08014954
 8009b3c:	08014a04 	.word	0x08014a04
 8009b40:	200098c0 	.word	0x200098c0
 8009b44:	200098c8 	.word	0x200098c8
 8009b48:	20009900 	.word	0x20009900
 8009b4c:	200098b8 	.word	0x200098b8
 8009b50:	200098bc 	.word	0x200098bc

08009b54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <tcp_close_shutdown_fin+0x1c>
 8009b62:	4b2e      	ldr	r3, [pc, #184]	; (8009c1c <tcp_close_shutdown_fin+0xc8>)
 8009b64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009b68:	492d      	ldr	r1, [pc, #180]	; (8009c20 <tcp_close_shutdown_fin+0xcc>)
 8009b6a:	482e      	ldr	r0, [pc, #184]	; (8009c24 <tcp_close_shutdown_fin+0xd0>)
 8009b6c:	f009 f86e 	bl	8012c4c <iprintf>

  switch (pcb->state) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	7d1b      	ldrb	r3, [r3, #20]
 8009b74:	2b07      	cmp	r3, #7
 8009b76:	d020      	beq.n	8009bba <tcp_close_shutdown_fin+0x66>
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	dc2b      	bgt.n	8009bd4 <tcp_close_shutdown_fin+0x80>
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d002      	beq.n	8009b86 <tcp_close_shutdown_fin+0x32>
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d00d      	beq.n	8009ba0 <tcp_close_shutdown_fin+0x4c>
 8009b84:	e026      	b.n	8009bd4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f004 fdde 	bl	800e748 <tcp_send_fin>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d11f      	bne.n	8009bd8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2205      	movs	r2, #5
 8009b9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009b9e:	e01b      	b.n	8009bd8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f004 fdd1 	bl	800e748 <tcp_send_fin>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d114      	bne.n	8009bdc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009bb8:	e010      	b.n	8009bdc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f004 fdc4 	bl	800e748 <tcp_send_fin>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d109      	bne.n	8009be0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2209      	movs	r2, #9
 8009bd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009bd2:	e005      	b.n	8009be0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e01c      	b.n	8009c12 <tcp_close_shutdown_fin+0xbe>
      break;
 8009bd8:	bf00      	nop
 8009bda:	e002      	b.n	8009be2 <tcp_close_shutdown_fin+0x8e>
      break;
 8009bdc:	bf00      	nop
 8009bde:	e000      	b.n	8009be2 <tcp_close_shutdown_fin+0x8e>
      break;
 8009be0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d103      	bne.n	8009bf2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f004 feea 	bl	800e9c4 <tcp_output>
 8009bf0:	e00d      	b.n	8009c0e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d108      	bne.n	8009c0e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	8b5b      	ldrh	r3, [r3, #26]
 8009c00:	f043 0308 	orr.w	r3, r3, #8
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e001      	b.n	8009c12 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	08014910 	.word	0x08014910
 8009c20:	080149c0 	.word	0x080149c0
 8009c24:	08014954 	.word	0x08014954

08009c28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d109      	bne.n	8009c4a <tcp_close+0x22>
 8009c36:	4b0f      	ldr	r3, [pc, #60]	; (8009c74 <tcp_close+0x4c>)
 8009c38:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009c3c:	490e      	ldr	r1, [pc, #56]	; (8009c78 <tcp_close+0x50>)
 8009c3e:	480f      	ldr	r0, [pc, #60]	; (8009c7c <tcp_close+0x54>)
 8009c40:	f009 f804 	bl	8012c4c <iprintf>
 8009c44:	f06f 030f 	mvn.w	r3, #15
 8009c48:	e00f      	b.n	8009c6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7d1b      	ldrb	r3, [r3, #20]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d006      	beq.n	8009c60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	8b5b      	ldrh	r3, [r3, #26]
 8009c56:	f043 0310 	orr.w	r3, r3, #16
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009c60:	2101      	movs	r1, #1
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff fe94 	bl	8009990 <tcp_close_shutdown>
 8009c68:	4603      	mov	r3, r0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	08014910 	.word	0x08014910
 8009c78:	08014a20 	.word	0x08014a20
 8009c7c:	08014954 	.word	0x08014954

08009c80 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08e      	sub	sp, #56	; 0x38
 8009c84:	af04      	add	r7, sp, #16
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d107      	bne.n	8009ca0 <tcp_abandon+0x20>
 8009c90:	4b52      	ldr	r3, [pc, #328]	; (8009ddc <tcp_abandon+0x15c>)
 8009c92:	f240 223d 	movw	r2, #573	; 0x23d
 8009c96:	4952      	ldr	r1, [pc, #328]	; (8009de0 <tcp_abandon+0x160>)
 8009c98:	4852      	ldr	r0, [pc, #328]	; (8009de4 <tcp_abandon+0x164>)
 8009c9a:	f008 ffd7 	bl	8012c4c <iprintf>
 8009c9e:	e099      	b.n	8009dd4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7d1b      	ldrb	r3, [r3, #20]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d106      	bne.n	8009cb6 <tcp_abandon+0x36>
 8009ca8:	4b4c      	ldr	r3, [pc, #304]	; (8009ddc <tcp_abandon+0x15c>)
 8009caa:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009cae:	494e      	ldr	r1, [pc, #312]	; (8009de8 <tcp_abandon+0x168>)
 8009cb0:	484c      	ldr	r0, [pc, #304]	; (8009de4 <tcp_abandon+0x164>)
 8009cb2:	f008 ffcb 	bl	8012c4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7d1b      	ldrb	r3, [r3, #20]
 8009cba:	2b0a      	cmp	r3, #10
 8009cbc:	d107      	bne.n	8009cce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	484a      	ldr	r0, [pc, #296]	; (8009dec <tcp_abandon+0x16c>)
 8009cc2:	f001 fa63 	bl	800b18c <tcp_pcb_remove>
    tcp_free(pcb);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff fdb0 	bl	800982c <tcp_free>
 8009ccc:	e082      	b.n	8009dd4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cda:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7d1b      	ldrb	r3, [r3, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d126      	bne.n	8009d46 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	8adb      	ldrh	r3, [r3, #22]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d02e      	beq.n	8009d5e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d00:	4b3b      	ldr	r3, [pc, #236]	; (8009df0 <tcp_abandon+0x170>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d105      	bne.n	8009d16 <tcp_abandon+0x96>
 8009d0a:	4b39      	ldr	r3, [pc, #228]	; (8009df0 <tcp_abandon+0x170>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	4a37      	ldr	r2, [pc, #220]	; (8009df0 <tcp_abandon+0x170>)
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e013      	b.n	8009d3e <tcp_abandon+0xbe>
 8009d16:	4b36      	ldr	r3, [pc, #216]	; (8009df0 <tcp_abandon+0x170>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	61fb      	str	r3, [r7, #28]
 8009d1c:	e00c      	b.n	8009d38 <tcp_abandon+0xb8>
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d104      	bne.n	8009d32 <tcp_abandon+0xb2>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	60da      	str	r2, [r3, #12]
 8009d30:	e005      	b.n	8009d3e <tcp_abandon+0xbe>
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	61fb      	str	r3, [r7, #28]
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1ef      	bne.n	8009d1e <tcp_abandon+0x9e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	60da      	str	r2, [r3, #12]
 8009d44:	e00b      	b.n	8009d5e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8adb      	ldrh	r3, [r3, #22]
 8009d4e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	4828      	ldr	r0, [pc, #160]	; (8009df4 <tcp_abandon+0x174>)
 8009d54:	f001 fa1a 	bl	800b18c <tcp_pcb_remove>
 8009d58:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <tcp_abandon+0x178>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fed6 	bl	800ab1c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fecd 	bl	800ab1c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fec4 	bl	800ab1c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00e      	beq.n	8009db8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	8b12      	ldrh	r2, [r2, #24]
 8009da4:	9202      	str	r2, [sp, #8]
 8009da6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009da8:	9201      	str	r2, [sp, #4]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	460b      	mov	r3, r1
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	69b9      	ldr	r1, [r7, #24]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f005 fbba 	bl	800f52c <tcp_rst>
    }
    last_state = pcb->state;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7d1b      	ldrb	r3, [r3, #20]
 8009dbc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff fd34 	bl	800982c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d004      	beq.n	8009dd4 <tcp_abandon+0x154>
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f06f 010c 	mvn.w	r1, #12
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	4798      	blx	r3
  }
}
 8009dd4:	3728      	adds	r7, #40	; 0x28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	08014910 	.word	0x08014910
 8009de0:	08014a54 	.word	0x08014a54
 8009de4:	08014954 	.word	0x08014954
 8009de8:	08014a70 	.word	0x08014a70
 8009dec:	200098c4 	.word	0x200098c4
 8009df0:	200098b8 	.word	0x200098b8
 8009df4:	200098c0 	.word	0x200098c0
 8009df8:	200098c8 	.word	0x200098c8

08009dfc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009e04:	2101      	movs	r1, #1
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7ff ff3a 	bl	8009c80 <tcp_abandon>
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009e22:	2304      	movs	r3, #4
 8009e24:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009e2c:	4b3e      	ldr	r3, [pc, #248]	; (8009f28 <tcp_bind+0x114>)
 8009e2e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d109      	bne.n	8009e4a <tcp_bind+0x36>
 8009e36:	4b3d      	ldr	r3, [pc, #244]	; (8009f2c <tcp_bind+0x118>)
 8009e38:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009e3c:	493c      	ldr	r1, [pc, #240]	; (8009f30 <tcp_bind+0x11c>)
 8009e3e:	483d      	ldr	r0, [pc, #244]	; (8009f34 <tcp_bind+0x120>)
 8009e40:	f008 ff04 	bl	8012c4c <iprintf>
 8009e44:	f06f 030f 	mvn.w	r3, #15
 8009e48:	e06a      	b.n	8009f20 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	7d1b      	ldrb	r3, [r3, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d009      	beq.n	8009e66 <tcp_bind+0x52>
 8009e52:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <tcp_bind+0x118>)
 8009e54:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009e58:	4937      	ldr	r1, [pc, #220]	; (8009f38 <tcp_bind+0x124>)
 8009e5a:	4836      	ldr	r0, [pc, #216]	; (8009f34 <tcp_bind+0x120>)
 8009e5c:	f008 fef6 	bl	8012c4c <iprintf>
 8009e60:	f06f 0305 	mvn.w	r3, #5
 8009e64:	e05c      	b.n	8009f20 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009e66:	88fb      	ldrh	r3, [r7, #6]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009e6c:	f000 f9f0 	bl	800a250 <tcp_new_port>
 8009e70:	4603      	mov	r3, r0
 8009e72:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009e74:	88fb      	ldrh	r3, [r7, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d135      	bne.n	8009ee6 <tcp_bind+0xd2>
      return ERR_BUF;
 8009e7a:	f06f 0301 	mvn.w	r3, #1
 8009e7e:	e04f      	b.n	8009f20 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009e80:	2300      	movs	r3, #0
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	e02b      	b.n	8009ede <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009e86:	4a2d      	ldr	r2, [pc, #180]	; (8009f3c <tcp_bind+0x128>)
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	e01e      	b.n	8009ed2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	8adb      	ldrh	r3, [r3, #22]
 8009e98:	88fa      	ldrh	r2, [r7, #6]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d116      	bne.n	8009ecc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009e9e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d010      	beq.n	8009ec6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00c      	beq.n	8009ec6 <tcp_bind+0xb2>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d009      	beq.n	8009ec6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d102      	bne.n	8009ecc <tcp_bind+0xb8>
              return ERR_USE;
 8009ec6:	f06f 0307 	mvn.w	r3, #7
 8009eca:	e029      	b.n	8009f20 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1dd      	bne.n	8009e94 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	3301      	adds	r3, #1
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	dbcf      	blt.n	8009e86 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00c      	beq.n	8009f06 <tcp_bind+0xf2>
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <tcp_bind+0xec>
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	e000      	b.n	8009f02 <tcp_bind+0xee>
 8009f00:	2300      	movs	r3, #0
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	88fa      	ldrh	r2, [r7, #6]
 8009f0a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <tcp_bind+0x12c>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	60da      	str	r2, [r3, #12]
 8009f14:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <tcp_bind+0x12c>)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	f005 fcc9 	bl	800f8b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3720      	adds	r7, #32
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	08016984 	.word	0x08016984
 8009f2c:	08014910 	.word	0x08014910
 8009f30:	08014aa4 	.word	0x08014aa4
 8009f34:	08014954 	.word	0x08014954
 8009f38:	08014abc 	.word	0x08014abc
 8009f3c:	0801695c 	.word	0x0801695c
 8009f40:	200098b8 	.word	0x200098b8

08009f44 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <tcp_accept_null+0x22>
 8009f58:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <tcp_accept_null+0x34>)
 8009f5a:	f240 320f 	movw	r2, #783	; 0x30f
 8009f5e:	4907      	ldr	r1, [pc, #28]	; (8009f7c <tcp_accept_null+0x38>)
 8009f60:	4807      	ldr	r0, [pc, #28]	; (8009f80 <tcp_accept_null+0x3c>)
 8009f62:	f008 fe73 	bl	8012c4c <iprintf>

  tcp_abort(pcb);
 8009f66:	68b8      	ldr	r0, [r7, #8]
 8009f68:	f7ff ff48 	bl	8009dfc <tcp_abort>

  return ERR_ABRT;
 8009f6c:	f06f 030c 	mvn.w	r3, #12
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	08014910 	.word	0x08014910
 8009f7c:	08014ae4 	.word	0x08014ae4
 8009f80:	08014954 	.word	0x08014954

08009f84 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	2200      	movs	r2, #0
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f806 	bl	8009fa8 <tcp_listen_with_backlog_and_err>
 8009f9c:	4603      	mov	r3, r0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d109      	bne.n	8009fd4 <tcp_listen_with_backlog_and_err+0x2c>
 8009fc0:	4b47      	ldr	r3, [pc, #284]	; (800a0e0 <tcp_listen_with_backlog_and_err+0x138>)
 8009fc2:	f240 3259 	movw	r2, #857	; 0x359
 8009fc6:	4947      	ldr	r1, [pc, #284]	; (800a0e4 <tcp_listen_with_backlog_and_err+0x13c>)
 8009fc8:	4847      	ldr	r0, [pc, #284]	; (800a0e8 <tcp_listen_with_backlog_and_err+0x140>)
 8009fca:	f008 fe3f 	bl	8012c4c <iprintf>
 8009fce:	23f0      	movs	r3, #240	; 0xf0
 8009fd0:	76fb      	strb	r3, [r7, #27]
 8009fd2:	e079      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	7d1b      	ldrb	r3, [r3, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <tcp_listen_with_backlog_and_err+0x48>
 8009fdc:	4b40      	ldr	r3, [pc, #256]	; (800a0e0 <tcp_listen_with_backlog_and_err+0x138>)
 8009fde:	f240 325a 	movw	r2, #858	; 0x35a
 8009fe2:	4942      	ldr	r1, [pc, #264]	; (800a0ec <tcp_listen_with_backlog_and_err+0x144>)
 8009fe4:	4840      	ldr	r0, [pc, #256]	; (800a0e8 <tcp_listen_with_backlog_and_err+0x140>)
 8009fe6:	f008 fe31 	bl	8012c4c <iprintf>
 8009fea:	23f1      	movs	r3, #241	; 0xf1
 8009fec:	76fb      	strb	r3, [r7, #27]
 8009fee:	e06b      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d104      	bne.n	800a002 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009ffc:	23f7      	movs	r3, #247	; 0xf7
 8009ffe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a000:	e062      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a002:	2002      	movs	r0, #2
 800a004:	f7fe fb04 	bl	8008610 <memp_malloc>
 800a008:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a010:	23ff      	movs	r3, #255	; 0xff
 800a012:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a014:	e058      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8ada      	ldrh	r2, [r3, #22]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	2201      	movs	r2, #1
 800a02a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	7d5a      	ldrb	r2, [r3, #21]
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	7a5a      	ldrb	r2, [r3, #9]
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	2200      	movs	r2, #0
 800a040:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	7ada      	ldrb	r2, [r3, #11]
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	7a9a      	ldrb	r2, [r3, #10]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8adb      	ldrh	r3, [r3, #22]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d021      	beq.n	800a0a6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a062:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d105      	bne.n	800a078 <tcp_listen_with_backlog_and_err+0xd0>
 800a06c:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	e013      	b.n	800a0a0 <tcp_listen_with_backlog_and_err+0xf8>
 800a078:	4b1d      	ldr	r3, [pc, #116]	; (800a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e00c      	b.n	800a09a <tcp_listen_with_backlog_and_err+0xf2>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	429a      	cmp	r2, r3
 800a088:	d104      	bne.n	800a094 <tcp_listen_with_backlog_and_err+0xec>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	60da      	str	r2, [r3, #12]
 800a092:	e005      	b.n	800a0a0 <tcp_listen_with_backlog_and_err+0xf8>
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	617b      	str	r3, [r7, #20]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1ef      	bne.n	800a080 <tcp_listen_with_backlog_and_err+0xd8>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7ff fbc0 	bl	800982c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	4a11      	ldr	r2, [pc, #68]	; (800a0f4 <tcp_listen_with_backlog_and_err+0x14c>)
 800a0b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a0b2:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <tcp_listen_with_backlog_and_err+0x150>)
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	60da      	str	r2, [r3, #12]
 800a0ba:	4a0f      	ldr	r2, [pc, #60]	; (800a0f8 <tcp_listen_with_backlog_and_err+0x150>)
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	f005 fbf6 	bl	800f8b0 <tcp_timer_needed>
  res = ERR_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7efa      	ldrb	r2, [r7, #27]
 800a0d2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3720      	adds	r7, #32
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	08014910 	.word	0x08014910
 800a0e4:	08014b04 	.word	0x08014b04
 800a0e8:	08014954 	.word	0x08014954
 800a0ec:	08014b34 	.word	0x08014b34
 800a0f0:	200098b8 	.word	0x200098b8
 800a0f4:	08009f45 	.word	0x08009f45
 800a0f8:	200098bc 	.word	0x200098bc

0800a0fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <tcp_update_rcv_ann_wnd+0x1c>
 800a10a:	4b25      	ldr	r3, [pc, #148]	; (800a1a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800a10c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a110:	4924      	ldr	r1, [pc, #144]	; (800a1a4 <tcp_update_rcv_ann_wnd+0xa8>)
 800a112:	4825      	ldr	r0, [pc, #148]	; (800a1a8 <tcp_update_rcv_ann_wnd+0xac>)
 800a114:	f008 fd9a 	bl	8012c4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a120:	4413      	add	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a12c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a130:	bf28      	it	cs
 800a132:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a136:	b292      	uxth	r2, r2
 800a138:	4413      	add	r3, r2
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	db08      	blt.n	800a154 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	e020      	b.n	800a196 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dd03      	ble.n	800a16a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a168:	e014      	b.n	800a194 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17c:	d306      	bcc.n	800a18c <tcp_update_rcv_ann_wnd+0x90>
 800a17e:	4b08      	ldr	r3, [pc, #32]	; (800a1a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800a180:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a184:	4909      	ldr	r1, [pc, #36]	; (800a1ac <tcp_update_rcv_ann_wnd+0xb0>)
 800a186:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <tcp_update_rcv_ann_wnd+0xac>)
 800a188:	f008 fd60 	bl	8012c4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a194:	2300      	movs	r3, #0
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	08014910 	.word	0x08014910
 800a1a4:	08014b6c 	.word	0x08014b6c
 800a1a8:	08014954 	.word	0x08014954
 800a1ac:	08014b90 	.word	0x08014b90

0800a1b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d107      	bne.n	800a1d2 <tcp_recved+0x22>
 800a1c2:	4b1f      	ldr	r3, [pc, #124]	; (800a240 <tcp_recved+0x90>)
 800a1c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a1c8:	491e      	ldr	r1, [pc, #120]	; (800a244 <tcp_recved+0x94>)
 800a1ca:	481f      	ldr	r0, [pc, #124]	; (800a248 <tcp_recved+0x98>)
 800a1cc:	f008 fd3e 	bl	8012c4c <iprintf>
 800a1d0:	e032      	b.n	800a238 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	7d1b      	ldrb	r3, [r3, #20]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d106      	bne.n	800a1e8 <tcp_recved+0x38>
 800a1da:	4b19      	ldr	r3, [pc, #100]	; (800a240 <tcp_recved+0x90>)
 800a1dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a1e0:	491a      	ldr	r1, [pc, #104]	; (800a24c <tcp_recved+0x9c>)
 800a1e2:	4819      	ldr	r0, [pc, #100]	; (800a248 <tcp_recved+0x98>)
 800a1e4:	f008 fd32 	bl	8012c4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1ec:	887b      	ldrh	r3, [r7, #2]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a1f2:	89fb      	ldrh	r3, [r7, #14]
 800a1f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a1f8:	d804      	bhi.n	800a204 <tcp_recved+0x54>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1fe:	89fa      	ldrh	r2, [r7, #14]
 800a200:	429a      	cmp	r2, r3
 800a202:	d204      	bcs.n	800a20e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a20a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a20c:	e002      	b.n	800a214 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	89fa      	ldrh	r2, [r7, #14]
 800a212:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ff71 	bl	800a0fc <tcp_update_rcv_ann_wnd>
 800a21a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a222:	d309      	bcc.n	800a238 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	8b5b      	ldrh	r3, [r3, #26]
 800a228:	f043 0302 	orr.w	r3, r3, #2
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f004 fbc6 	bl	800e9c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	08014910 	.word	0x08014910
 800a244:	08014bac 	.word	0x08014bac
 800a248:	08014954 	.word	0x08014954
 800a24c:	08014bc4 	.word	0x08014bc4

0800a250 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a25a:	4b1e      	ldr	r3, [pc, #120]	; (800a2d4 <tcp_new_port+0x84>)
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	3301      	adds	r3, #1
 800a260:	b29a      	uxth	r2, r3
 800a262:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <tcp_new_port+0x84>)
 800a264:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a266:	4b1b      	ldr	r3, [pc, #108]	; (800a2d4 <tcp_new_port+0x84>)
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a26e:	4293      	cmp	r3, r2
 800a270:	d103      	bne.n	800a27a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a272:	4b18      	ldr	r3, [pc, #96]	; (800a2d4 <tcp_new_port+0x84>)
 800a274:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a278:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a27a:	2300      	movs	r3, #0
 800a27c:	71fb      	strb	r3, [r7, #7]
 800a27e:	e01e      	b.n	800a2be <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	4a15      	ldr	r2, [pc, #84]	; (800a2d8 <tcp_new_port+0x88>)
 800a284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	e011      	b.n	800a2b2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	8ada      	ldrh	r2, [r3, #22]
 800a292:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <tcp_new_port+0x84>)
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d108      	bne.n	800a2ac <tcp_new_port+0x5c>
        n++;
 800a29a:	88bb      	ldrh	r3, [r7, #4]
 800a29c:	3301      	adds	r3, #1
 800a29e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a2a0:	88bb      	ldrh	r3, [r7, #4]
 800a2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a6:	d3d8      	bcc.n	800a25a <tcp_new_port+0xa>
          return 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e00d      	b.n	800a2c8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	603b      	str	r3, [r7, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1ea      	bne.n	800a28e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	71fb      	strb	r3, [r7, #7]
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d9dd      	bls.n	800a280 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a2c4:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <tcp_new_port+0x84>)
 800a2c6:	881b      	ldrh	r3, [r3, #0]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	20000044 	.word	0x20000044
 800a2d8:	0801695c 	.word	0x0801695c

0800a2dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a2dc:	b5b0      	push	{r4, r5, r7, lr}
 800a2de:	b090      	sub	sp, #64	; 0x40
 800a2e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a2e8:	4b94      	ldr	r3, [pc, #592]	; (800a53c <tcp_slowtmr+0x260>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	4a93      	ldr	r2, [pc, #588]	; (800a53c <tcp_slowtmr+0x260>)
 800a2f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a2f2:	4b93      	ldr	r3, [pc, #588]	; (800a540 <tcp_slowtmr+0x264>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	4b91      	ldr	r3, [pc, #580]	; (800a540 <tcp_slowtmr+0x264>)
 800a2fc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a302:	4b90      	ldr	r3, [pc, #576]	; (800a544 <tcp_slowtmr+0x268>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a308:	e29f      	b.n	800a84a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	7d1b      	ldrb	r3, [r3, #20]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <tcp_slowtmr+0x44>
 800a312:	4b8d      	ldr	r3, [pc, #564]	; (800a548 <tcp_slowtmr+0x26c>)
 800a314:	f240 42be 	movw	r2, #1214	; 0x4be
 800a318:	498c      	ldr	r1, [pc, #560]	; (800a54c <tcp_slowtmr+0x270>)
 800a31a:	488d      	ldr	r0, [pc, #564]	; (800a550 <tcp_slowtmr+0x274>)
 800a31c:	f008 fc96 	bl	8012c4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	7d1b      	ldrb	r3, [r3, #20]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d106      	bne.n	800a336 <tcp_slowtmr+0x5a>
 800a328:	4b87      	ldr	r3, [pc, #540]	; (800a548 <tcp_slowtmr+0x26c>)
 800a32a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a32e:	4989      	ldr	r1, [pc, #548]	; (800a554 <tcp_slowtmr+0x278>)
 800a330:	4887      	ldr	r0, [pc, #540]	; (800a550 <tcp_slowtmr+0x274>)
 800a332:	f008 fc8b 	bl	8012c4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	7d1b      	ldrb	r3, [r3, #20]
 800a33a:	2b0a      	cmp	r3, #10
 800a33c:	d106      	bne.n	800a34c <tcp_slowtmr+0x70>
 800a33e:	4b82      	ldr	r3, [pc, #520]	; (800a548 <tcp_slowtmr+0x26c>)
 800a340:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a344:	4984      	ldr	r1, [pc, #528]	; (800a558 <tcp_slowtmr+0x27c>)
 800a346:	4882      	ldr	r0, [pc, #520]	; (800a550 <tcp_slowtmr+0x274>)
 800a348:	f008 fc80 	bl	8012c4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	7f9a      	ldrb	r2, [r3, #30]
 800a350:	4b7b      	ldr	r3, [pc, #492]	; (800a540 <tcp_slowtmr+0x264>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d105      	bne.n	800a364 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a362:	e272      	b.n	800a84a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a364:	4b76      	ldr	r3, [pc, #472]	; (800a540 <tcp_slowtmr+0x264>)
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	7d1b      	ldrb	r3, [r3, #20]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d10a      	bne.n	800a396 <tcp_slowtmr+0xba>
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a386:	2b05      	cmp	r3, #5
 800a388:	d905      	bls.n	800a396 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a38a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a38e:	3301      	adds	r3, #1
 800a390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a394:	e11e      	b.n	800a5d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a398:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a39c:	2b0b      	cmp	r3, #11
 800a39e:	d905      	bls.n	800a3ac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3aa:	e113      	b.n	800a5d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d075      	beq.n	800a4a2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d006      	beq.n	800a3cc <tcp_slowtmr+0xf0>
 800a3be:	4b62      	ldr	r3, [pc, #392]	; (800a548 <tcp_slowtmr+0x26c>)
 800a3c0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a3c4:	4965      	ldr	r1, [pc, #404]	; (800a55c <tcp_slowtmr+0x280>)
 800a3c6:	4862      	ldr	r0, [pc, #392]	; (800a550 <tcp_slowtmr+0x274>)
 800a3c8:	f008 fc40 	bl	8012c4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d106      	bne.n	800a3e2 <tcp_slowtmr+0x106>
 800a3d4:	4b5c      	ldr	r3, [pc, #368]	; (800a548 <tcp_slowtmr+0x26c>)
 800a3d6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a3da:	4961      	ldr	r1, [pc, #388]	; (800a560 <tcp_slowtmr+0x284>)
 800a3dc:	485c      	ldr	r0, [pc, #368]	; (800a550 <tcp_slowtmr+0x274>)
 800a3de:	f008 fc35 	bl	8012c4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a3e8:	2b0b      	cmp	r3, #11
 800a3ea:	d905      	bls.n	800a3f8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3f6:	e0ed      	b.n	800a5d4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4a58      	ldr	r2, [pc, #352]	; (800a564 <tcp_slowtmr+0x288>)
 800a402:	5cd3      	ldrb	r3, [r2, r3]
 800a404:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a40c:	7c7a      	ldrb	r2, [r7, #17]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d907      	bls.n	800a422 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a418:	3301      	adds	r3, #1
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a428:	7c7a      	ldrb	r2, [r7, #17]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	f200 80d2 	bhi.w	800a5d4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a430:	2301      	movs	r3, #1
 800a432:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d108      	bne.n	800a450 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a440:	f005 f968 	bl	800f714 <tcp_zero_window_probe>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d014      	beq.n	800a474 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a44a:	2300      	movs	r3, #0
 800a44c:	623b      	str	r3, [r7, #32]
 800a44e:	e011      	b.n	800a474 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a456:	4619      	mov	r1, r3
 800a458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a45a:	f004 f82d 	bl	800e4b8 <tcp_split_unsent_seg>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d107      	bne.n	800a474 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a466:	f004 faad 	bl	800e9c4 <tcp_output>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 80ac 	beq.w	800a5d4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a48a:	2b06      	cmp	r3, #6
 800a48c:	f200 80a2 	bhi.w	800a5d4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a496:	3301      	adds	r3, #1
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a4a0:	e098      	b.n	800a5d4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	db0f      	blt.n	800a4cc <tcp_slowtmr+0x1f0>
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d008      	beq.n	800a4cc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	db7b      	blt.n	800a5d4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a4dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4de:	f004 fd63 	bl	800efa8 <tcp_rexmit_rto_prepare>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <tcp_slowtmr+0x21c>
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d171      	bne.n	800a5d4 <tcp_slowtmr+0x2f8>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d06d      	beq.n	800a5d4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	7d1b      	ldrb	r3, [r3, #20]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d03a      	beq.n	800a576 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a506:	2b0c      	cmp	r3, #12
 800a508:	bf28      	it	cs
 800a50a:	230c      	movcs	r3, #12
 800a50c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a514:	10db      	asrs	r3, r3, #3
 800a516:	b21b      	sxth	r3, r3
 800a518:	461a      	mov	r2, r3
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a520:	4413      	add	r3, r2
 800a522:	7efa      	ldrb	r2, [r7, #27]
 800a524:	4910      	ldr	r1, [pc, #64]	; (800a568 <tcp_slowtmr+0x28c>)
 800a526:	5c8a      	ldrb	r2, [r1, r2]
 800a528:	4093      	lsls	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a532:	4293      	cmp	r3, r2
 800a534:	dc1a      	bgt.n	800a56c <tcp_slowtmr+0x290>
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	b21a      	sxth	r2, r3
 800a53a:	e019      	b.n	800a570 <tcp_slowtmr+0x294>
 800a53c:	200098b4 	.word	0x200098b4
 800a540:	200098ca 	.word	0x200098ca
 800a544:	200098c0 	.word	0x200098c0
 800a548:	08014910 	.word	0x08014910
 800a54c:	08014c54 	.word	0x08014c54
 800a550:	08014954 	.word	0x08014954
 800a554:	08014c80 	.word	0x08014c80
 800a558:	08014cac 	.word	0x08014cac
 800a55c:	08014cdc 	.word	0x08014cdc
 800a560:	08014d10 	.word	0x08014d10
 800a564:	08016954 	.word	0x08016954
 800a568:	08016944 	.word	0x08016944
 800a56c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a572:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	2200      	movs	r2, #0
 800a57a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a588:	4293      	cmp	r3, r2
 800a58a:	bf28      	it	cs
 800a58c:	4613      	movcs	r3, r2
 800a58e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a590:	8a7b      	ldrh	r3, [r7, #18]
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d206      	bcs.n	800a5bc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a5ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5d0:	f004 fd5a 	bl	800f088 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	7d1b      	ldrb	r3, [r3, #20]
 800a5d8:	2b06      	cmp	r3, #6
 800a5da:	d111      	bne.n	800a600 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	8b5b      	ldrh	r3, [r3, #26]
 800a5e0:	f003 0310 	and.w	r3, r3, #16
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5e8:	4b9d      	ldr	r3, [pc, #628]	; (800a860 <tcp_slowtmr+0x584>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	2b28      	cmp	r3, #40	; 0x28
 800a5f4:	d904      	bls.n	800a600 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a5f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	7a5b      	ldrb	r3, [r3, #9]
 800a604:	f003 0308 	and.w	r3, r3, #8
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d04c      	beq.n	800a6a6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a610:	2b04      	cmp	r3, #4
 800a612:	d003      	beq.n	800a61c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a618:	2b07      	cmp	r3, #7
 800a61a:	d144      	bne.n	800a6a6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a61c:	4b90      	ldr	r3, [pc, #576]	; (800a860 <tcp_slowtmr+0x584>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a62c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a630:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a634:	498b      	ldr	r1, [pc, #556]	; (800a864 <tcp_slowtmr+0x588>)
 800a636:	fba1 1303 	umull	r1, r3, r1, r3
 800a63a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d90a      	bls.n	800a656 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a644:	3301      	adds	r3, #1
 800a646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a64a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a64e:	3301      	adds	r3, #1
 800a650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a654:	e027      	b.n	800a6a6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a656:	4b82      	ldr	r3, [pc, #520]	; (800a860 <tcp_slowtmr+0x584>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a66c:	4618      	mov	r0, r3
 800a66e:	4b7e      	ldr	r3, [pc, #504]	; (800a868 <tcp_slowtmr+0x58c>)
 800a670:	fb00 f303 	mul.w	r3, r0, r3
 800a674:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a676:	497b      	ldr	r1, [pc, #492]	; (800a864 <tcp_slowtmr+0x588>)
 800a678:	fba1 1303 	umull	r1, r3, r1, r3
 800a67c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a67e:	429a      	cmp	r2, r3
 800a680:	d911      	bls.n	800a6a6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a684:	f005 f806 	bl	800f694 <tcp_keepalive>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a68e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a692:	2b00      	cmp	r3, #0
 800a694:	d107      	bne.n	800a6a6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a69c:	3301      	adds	r3, #1
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d011      	beq.n	800a6d2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a6ae:	4b6c      	ldr	r3, [pc, #432]	; (800a860 <tcp_slowtmr+0x584>)
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	1ad2      	subs	r2, r2, r3
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a6be:	4619      	mov	r1, r3
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	440b      	add	r3, r1
 800a6c6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d302      	bcc.n	800a6d2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a6cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6ce:	f000 fec1 	bl	800b454 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	7d1b      	ldrb	r3, [r3, #20]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d10b      	bne.n	800a6f2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6da:	4b61      	ldr	r3, [pc, #388]	; (800a860 <tcp_slowtmr+0x584>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	2b28      	cmp	r3, #40	; 0x28
 800a6e6:	d904      	bls.n	800a6f2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	7d1b      	ldrb	r3, [r3, #20]
 800a6f6:	2b09      	cmp	r3, #9
 800a6f8:	d10b      	bne.n	800a712 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a6fa:	4b59      	ldr	r3, [pc, #356]	; (800a860 <tcp_slowtmr+0x584>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	2bf0      	cmp	r3, #240	; 0xf0
 800a706:	d904      	bls.n	800a712 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70c:	3301      	adds	r3, #1
 800a70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a716:	2b00      	cmp	r3, #0
 800a718:	d060      	beq.n	800a7dc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a720:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a724:	f000 fce2 	bl	800b0ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d010      	beq.n	800a750 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a72e:	4b4f      	ldr	r3, [pc, #316]	; (800a86c <tcp_slowtmr+0x590>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a734:	429a      	cmp	r2, r3
 800a736:	d106      	bne.n	800a746 <tcp_slowtmr+0x46a>
 800a738:	4b4d      	ldr	r3, [pc, #308]	; (800a870 <tcp_slowtmr+0x594>)
 800a73a:	f240 526d 	movw	r2, #1389	; 0x56d
 800a73e:	494d      	ldr	r1, [pc, #308]	; (800a874 <tcp_slowtmr+0x598>)
 800a740:	484d      	ldr	r0, [pc, #308]	; (800a878 <tcp_slowtmr+0x59c>)
 800a742:	f008 fa83 	bl	8012c4c <iprintf>
        prev->next = pcb->next;
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	60da      	str	r2, [r3, #12]
 800a74e:	e00f      	b.n	800a770 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a750:	4b46      	ldr	r3, [pc, #280]	; (800a86c <tcp_slowtmr+0x590>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a756:	429a      	cmp	r2, r3
 800a758:	d006      	beq.n	800a768 <tcp_slowtmr+0x48c>
 800a75a:	4b45      	ldr	r3, [pc, #276]	; (800a870 <tcp_slowtmr+0x594>)
 800a75c:	f240 5271 	movw	r2, #1393	; 0x571
 800a760:	4946      	ldr	r1, [pc, #280]	; (800a87c <tcp_slowtmr+0x5a0>)
 800a762:	4845      	ldr	r0, [pc, #276]	; (800a878 <tcp_slowtmr+0x59c>)
 800a764:	f008 fa72 	bl	8012c4c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	4a3f      	ldr	r2, [pc, #252]	; (800a86c <tcp_slowtmr+0x590>)
 800a76e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a774:	2b00      	cmp	r3, #0
 800a776:	d013      	beq.n	800a7a0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a780:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	3304      	adds	r3, #4
 800a786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a788:	8ad2      	ldrh	r2, [r2, #22]
 800a78a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a78c:	8b09      	ldrh	r1, [r1, #24]
 800a78e:	9102      	str	r1, [sp, #8]
 800a790:	9201      	str	r2, [sp, #4]
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	462b      	mov	r3, r5
 800a796:	4622      	mov	r2, r4
 800a798:	4601      	mov	r1, r0
 800a79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a79c:	f004 fec6 	bl	800f52c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a8:	7d1b      	ldrb	r3, [r3, #20]
 800a7aa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a7b6:	6838      	ldr	r0, [r7, #0]
 800a7b8:	f7ff f838 	bl	800982c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a7bc:	4b30      	ldr	r3, [pc, #192]	; (800a880 <tcp_slowtmr+0x5a4>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <tcp_slowtmr+0x4f6>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f06f 010c 	mvn.w	r1, #12
 800a7ce:	68b8      	ldr	r0, [r7, #8]
 800a7d0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a7d2:	4b2b      	ldr	r3, [pc, #172]	; (800a880 <tcp_slowtmr+0x5a4>)
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d037      	beq.n	800a84a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a7da:	e590      	b.n	800a2fe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	7f1b      	ldrb	r3, [r3, #28]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	7f1a      	ldrb	r2, [r3, #28]
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	7f5b      	ldrb	r3, [r3, #29]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d325      	bcc.n	800a84a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a804:	4b1e      	ldr	r3, [pc, #120]	; (800a880 <tcp_slowtmr+0x5a4>)
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <tcp_slowtmr+0x550>
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a81c:	6912      	ldr	r2, [r2, #16]
 800a81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a820:	4610      	mov	r0, r2
 800a822:	4798      	blx	r3
 800a824:	4603      	mov	r3, r0
 800a826:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a82a:	e002      	b.n	800a832 <tcp_slowtmr+0x556>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <tcp_slowtmr+0x5a4>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d000      	beq.n	800a83c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a83a:	e560      	b.n	800a2fe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a83c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a846:	f004 f8bd 	bl	800e9c4 <tcp_output>
  while (pcb != NULL) {
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f47f ad5c 	bne.w	800a30a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a852:	2300      	movs	r3, #0
 800a854:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a856:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <tcp_slowtmr+0x5a8>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a85c:	e067      	b.n	800a92e <tcp_slowtmr+0x652>
 800a85e:	bf00      	nop
 800a860:	200098b4 	.word	0x200098b4
 800a864:	10624dd3 	.word	0x10624dd3
 800a868:	000124f8 	.word	0x000124f8
 800a86c:	200098c0 	.word	0x200098c0
 800a870:	08014910 	.word	0x08014910
 800a874:	08014d48 	.word	0x08014d48
 800a878:	08014954 	.word	0x08014954
 800a87c:	08014d74 	.word	0x08014d74
 800a880:	200098c8 	.word	0x200098c8
 800a884:	200098c4 	.word	0x200098c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	7d1b      	ldrb	r3, [r3, #20]
 800a88c:	2b0a      	cmp	r3, #10
 800a88e:	d006      	beq.n	800a89e <tcp_slowtmr+0x5c2>
 800a890:	4b2b      	ldr	r3, [pc, #172]	; (800a940 <tcp_slowtmr+0x664>)
 800a892:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a896:	492b      	ldr	r1, [pc, #172]	; (800a944 <tcp_slowtmr+0x668>)
 800a898:	482b      	ldr	r0, [pc, #172]	; (800a948 <tcp_slowtmr+0x66c>)
 800a89a:	f008 f9d7 	bl	8012c4c <iprintf>
    pcb_remove = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a8a4:	4b29      	ldr	r3, [pc, #164]	; (800a94c <tcp_slowtmr+0x670>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	2bf0      	cmp	r3, #240	; 0xf0
 800a8b0:	d904      	bls.n	800a8bc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d02f      	beq.n	800a924 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8c6:	f000 fc11 	bl	800b0ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d010      	beq.n	800a8f2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a8d0:	4b1f      	ldr	r3, [pc, #124]	; (800a950 <tcp_slowtmr+0x674>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d106      	bne.n	800a8e8 <tcp_slowtmr+0x60c>
 800a8da:	4b19      	ldr	r3, [pc, #100]	; (800a940 <tcp_slowtmr+0x664>)
 800a8dc:	f240 52af 	movw	r2, #1455	; 0x5af
 800a8e0:	491c      	ldr	r1, [pc, #112]	; (800a954 <tcp_slowtmr+0x678>)
 800a8e2:	4819      	ldr	r0, [pc, #100]	; (800a948 <tcp_slowtmr+0x66c>)
 800a8e4:	f008 f9b2 	bl	8012c4c <iprintf>
        prev->next = pcb->next;
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	60da      	str	r2, [r3, #12]
 800a8f0:	e00f      	b.n	800a912 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a8f2:	4b17      	ldr	r3, [pc, #92]	; (800a950 <tcp_slowtmr+0x674>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d006      	beq.n	800a90a <tcp_slowtmr+0x62e>
 800a8fc:	4b10      	ldr	r3, [pc, #64]	; (800a940 <tcp_slowtmr+0x664>)
 800a8fe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a902:	4915      	ldr	r1, [pc, #84]	; (800a958 <tcp_slowtmr+0x67c>)
 800a904:	4810      	ldr	r0, [pc, #64]	; (800a948 <tcp_slowtmr+0x66c>)
 800a906:	f008 f9a1 	bl	8012c4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	4a10      	ldr	r2, [pc, #64]	; (800a950 <tcp_slowtmr+0x674>)
 800a910:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a91c:	69f8      	ldr	r0, [r7, #28]
 800a91e:	f7fe ff85 	bl	800982c <tcp_free>
 800a922:	e004      	b.n	800a92e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1a9      	bne.n	800a888 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop
 800a938:	3730      	adds	r7, #48	; 0x30
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bdb0      	pop	{r4, r5, r7, pc}
 800a93e:	bf00      	nop
 800a940:	08014910 	.word	0x08014910
 800a944:	08014da0 	.word	0x08014da0
 800a948:	08014954 	.word	0x08014954
 800a94c:	200098b4 	.word	0x200098b4
 800a950:	200098c4 	.word	0x200098c4
 800a954:	08014dd0 	.word	0x08014dd0
 800a958:	08014df8 	.word	0x08014df8

0800a95c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a962:	4b2d      	ldr	r3, [pc, #180]	; (800aa18 <tcp_fasttmr+0xbc>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	3301      	adds	r3, #1
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	4b2b      	ldr	r3, [pc, #172]	; (800aa18 <tcp_fasttmr+0xbc>)
 800a96c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a96e:	4b2b      	ldr	r3, [pc, #172]	; (800aa1c <tcp_fasttmr+0xc0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a974:	e048      	b.n	800aa08 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7f9a      	ldrb	r2, [r3, #30]
 800a97a:	4b27      	ldr	r3, [pc, #156]	; (800aa18 <tcp_fasttmr+0xbc>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d03f      	beq.n	800aa02 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a982:	4b25      	ldr	r3, [pc, #148]	; (800aa18 <tcp_fasttmr+0xbc>)
 800a984:	781a      	ldrb	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	8b5b      	ldrh	r3, [r3, #26]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	d010      	beq.n	800a9b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	8b5b      	ldrh	r3, [r3, #26]
 800a99a:	f043 0302 	orr.w	r3, r3, #2
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f004 f80d 	bl	800e9c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	8b5b      	ldrh	r3, [r3, #26]
 800a9ae:	f023 0303 	bic.w	r3, r3, #3
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8b5b      	ldrh	r3, [r3, #26]
 800a9bc:	f003 0308 	and.w	r3, r3, #8
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d009      	beq.n	800a9d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	8b5b      	ldrh	r3, [r3, #26]
 800a9c8:	f023 0308 	bic.w	r3, r3, #8
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff f8be 	bl	8009b54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00a      	beq.n	800a9fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <tcp_fasttmr+0xc4>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f819 	bl	800aa24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <tcp_fasttmr+0xc4>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d000      	beq.n	800a9fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a9fa:	e7b8      	b.n	800a96e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	607b      	str	r3, [r7, #4]
 800aa00:	e002      	b.n	800aa08 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1b3      	bne.n	800a976 <tcp_fasttmr+0x1a>
    }
  }
}
 800aa0e:	bf00      	nop
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	200098ca 	.word	0x200098ca
 800aa1c:	200098c0 	.word	0x200098c0
 800aa20:	200098c8 	.word	0x200098c8

0800aa24 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800aa24:	b590      	push	{r4, r7, lr}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d109      	bne.n	800aa46 <tcp_process_refused_data+0x22>
 800aa32:	4b37      	ldr	r3, [pc, #220]	; (800ab10 <tcp_process_refused_data+0xec>)
 800aa34:	f240 6209 	movw	r2, #1545	; 0x609
 800aa38:	4936      	ldr	r1, [pc, #216]	; (800ab14 <tcp_process_refused_data+0xf0>)
 800aa3a:	4837      	ldr	r0, [pc, #220]	; (800ab18 <tcp_process_refused_data+0xf4>)
 800aa3c:	f008 f906 	bl	8012c4c <iprintf>
 800aa40:	f06f 030f 	mvn.w	r3, #15
 800aa44:	e060      	b.n	800ab08 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa4a:	7b5b      	ldrb	r3, [r3, #13]
 800aa4c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa52:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00b      	beq.n	800aa7c <tcp_process_refused_data+0x58>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6918      	ldr	r0, [r3, #16]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	47a0      	blx	r4
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
 800aa7a:	e007      	b.n	800aa8c <tcp_process_refused_data+0x68>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	2000      	movs	r0, #0
 800aa84:	f000 f8c2 	bl	800ac0c <tcp_recv_null>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800aa8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d12a      	bne.n	800aaea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d033      	beq.n	800ab06 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aaa6:	d005      	beq.n	800aab4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaac:	3301      	adds	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <tcp_process_refused_data+0xb2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6918      	ldr	r0, [r3, #16]
 800aac8:	2300      	movs	r3, #0
 800aaca:	2200      	movs	r2, #0
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	47a0      	blx	r4
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]
 800aad4:	e001      	b.n	800aada <tcp_process_refused_data+0xb6>
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800aada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aade:	f113 0f0d 	cmn.w	r3, #13
 800aae2:	d110      	bne.n	800ab06 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800aae4:	f06f 030c 	mvn.w	r3, #12
 800aae8:	e00e      	b.n	800ab08 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800aaea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaee:	f113 0f0d 	cmn.w	r3, #13
 800aaf2:	d102      	bne.n	800aafa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aaf4:	f06f 030c 	mvn.w	r3, #12
 800aaf8:	e006      	b.n	800ab08 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ab00:	f06f 0304 	mvn.w	r3, #4
 800ab04:	e000      	b.n	800ab08 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd90      	pop	{r4, r7, pc}
 800ab10:	08014910 	.word	0x08014910
 800ab14:	08014e20 	.word	0x08014e20
 800ab18:	08014954 	.word	0x08014954

0800ab1c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ab24:	e007      	b.n	800ab36 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f80a 	bl	800ab46 <tcp_seg_free>
    seg = next;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f4      	bne.n	800ab26 <tcp_segs_free+0xa>
  }
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fbb3 	bl	80092cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	2003      	movs	r0, #3
 800ab6a:	f7fd fd9d 	bl	80086a8 <memp_free>
  }
}
 800ab6e:	bf00      	nop
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d107      	bne.n	800ab9a <tcp_setprio+0x22>
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <tcp_setprio+0x30>)
 800ab8c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ab90:	4906      	ldr	r1, [pc, #24]	; (800abac <tcp_setprio+0x34>)
 800ab92:	4807      	ldr	r0, [pc, #28]	; (800abb0 <tcp_setprio+0x38>)
 800ab94:	f008 f85a 	bl	8012c4c <iprintf>
 800ab98:	e002      	b.n	800aba0 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	78fa      	ldrb	r2, [r7, #3]
 800ab9e:	755a      	strb	r2, [r3, #21]
}
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	08014910 	.word	0x08014910
 800abac:	08014e48 	.word	0x08014e48
 800abb0:	08014954 	.word	0x08014954

0800abb4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <tcp_seg_copy+0x1c>
 800abc2:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <tcp_seg_copy+0x4c>)
 800abc4:	f240 6282 	movw	r2, #1666	; 0x682
 800abc8:	490e      	ldr	r1, [pc, #56]	; (800ac04 <tcp_seg_copy+0x50>)
 800abca:	480f      	ldr	r0, [pc, #60]	; (800ac08 <tcp_seg_copy+0x54>)
 800abcc:	f008 f83e 	bl	8012c4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800abd0:	2003      	movs	r0, #3
 800abd2:	f7fd fd1d 	bl	8008610 <memp_malloc>
 800abd6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <tcp_seg_copy+0x2e>
    return NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	e00a      	b.n	800abf8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800abe2:	2210      	movs	r2, #16
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f008 f81a 	bl	8012c20 <memcpy>
  pbuf_ref(cseg->p);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fe fc0b 	bl	800940c <pbuf_ref>
  return cseg;
 800abf6:	68fb      	ldr	r3, [r7, #12]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	08014910 	.word	0x08014910
 800ac04:	08014e64 	.word	0x08014e64
 800ac08:	08014954 	.word	0x08014954

0800ac0c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d109      	bne.n	800ac34 <tcp_recv_null+0x28>
 800ac20:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <tcp_recv_null+0x60>)
 800ac22:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ac26:	4912      	ldr	r1, [pc, #72]	; (800ac70 <tcp_recv_null+0x64>)
 800ac28:	4812      	ldr	r0, [pc, #72]	; (800ac74 <tcp_recv_null+0x68>)
 800ac2a:	f008 f80f 	bl	8012c4c <iprintf>
 800ac2e:	f06f 030f 	mvn.w	r3, #15
 800ac32:	e016      	b.n	800ac62 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d009      	beq.n	800ac4e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	891b      	ldrh	r3, [r3, #8]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68b8      	ldr	r0, [r7, #8]
 800ac42:	f7ff fab5 	bl	800a1b0 <tcp_recved>
    pbuf_free(p);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7fe fb40 	bl	80092cc <pbuf_free>
 800ac4c:	e008      	b.n	800ac60 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ac4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d104      	bne.n	800ac60 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ac56:	68b8      	ldr	r0, [r7, #8]
 800ac58:	f7fe ffe6 	bl	8009c28 <tcp_close>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	e000      	b.n	800ac62 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	08014910 	.word	0x08014910
 800ac70:	08014e80 	.word	0x08014e80
 800ac74:	08014954 	.word	0x08014954

0800ac78 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ac82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	db01      	blt.n	800ac8e <tcp_kill_prio+0x16>
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	e000      	b.n	800ac90 <tcp_kill_prio+0x18>
 800ac8e:	237f      	movs	r3, #127	; 0x7f
 800ac90:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d034      	beq.n	800ad02 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ac98:	7afb      	ldrb	r3, [r7, #11]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aca6:	4b19      	ldr	r3, [pc, #100]	; (800ad0c <tcp_kill_prio+0x94>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	e01f      	b.n	800acee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	7d5b      	ldrb	r3, [r3, #21]
 800acb2:	7afa      	ldrb	r2, [r7, #11]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d80c      	bhi.n	800acd2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800acbc:	7afa      	ldrb	r2, [r7, #11]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d112      	bne.n	800ace8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800acc2:	4b13      	ldr	r3, [pc, #76]	; (800ad10 <tcp_kill_prio+0x98>)
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d80a      	bhi.n	800ace8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800acd2:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <tcp_kill_prio+0x98>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	7d5b      	ldrb	r3, [r3, #21]
 800ace6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1dc      	bne.n	800acae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800acfa:	6938      	ldr	r0, [r7, #16]
 800acfc:	f7ff f87e 	bl	8009dfc <tcp_abort>
 800ad00:	e000      	b.n	800ad04 <tcp_kill_prio+0x8c>
    return;
 800ad02:	bf00      	nop
  }
}
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200098c0 	.word	0x200098c0
 800ad10:	200098b4 	.word	0x200098b4

0800ad14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ad1e:	79fb      	ldrb	r3, [r7, #7]
 800ad20:	2b08      	cmp	r3, #8
 800ad22:	d009      	beq.n	800ad38 <tcp_kill_state+0x24>
 800ad24:	79fb      	ldrb	r3, [r7, #7]
 800ad26:	2b09      	cmp	r3, #9
 800ad28:	d006      	beq.n	800ad38 <tcp_kill_state+0x24>
 800ad2a:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <tcp_kill_state+0x80>)
 800ad2c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ad30:	4919      	ldr	r1, [pc, #100]	; (800ad98 <tcp_kill_state+0x84>)
 800ad32:	481a      	ldr	r0, [pc, #104]	; (800ad9c <tcp_kill_state+0x88>)
 800ad34:	f007 ff8a 	bl	8012c4c <iprintf>

  inactivity = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad40:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <tcp_kill_state+0x8c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	e017      	b.n	800ad78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	7d1b      	ldrb	r3, [r3, #20]
 800ad4c:	79fa      	ldrb	r2, [r7, #7]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d10f      	bne.n	800ad72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad52:	4b14      	ldr	r3, [pc, #80]	; (800ada4 <tcp_kill_state+0x90>)
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d807      	bhi.n	800ad72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ad62:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <tcp_kill_state+0x90>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e4      	bne.n	800ad48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ad84:	2100      	movs	r1, #0
 800ad86:	6938      	ldr	r0, [r7, #16]
 800ad88:	f7fe ff7a 	bl	8009c80 <tcp_abandon>
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	08014910 	.word	0x08014910
 800ad98:	08014e9c 	.word	0x08014e9c
 800ad9c:	08014954 	.word	0x08014954
 800ada0:	200098c0 	.word	0x200098c0
 800ada4:	200098b4 	.word	0x200098b4

0800ada8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adb6:	4b12      	ldr	r3, [pc, #72]	; (800ae00 <tcp_kill_timewait+0x58>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e012      	b.n	800ade4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800adbe:	4b11      	ldr	r3, [pc, #68]	; (800ae04 <tcp_kill_timewait+0x5c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d807      	bhi.n	800adde <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800adce:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <tcp_kill_timewait+0x5c>)
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	60fb      	str	r3, [r7, #12]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e9      	bne.n	800adbe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800adf0:	68b8      	ldr	r0, [r7, #8]
 800adf2:	f7ff f803 	bl	8009dfc <tcp_abort>
  }
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	200098c4 	.word	0x200098c4
 800ae04:	200098b4 	.word	0x200098b4

0800ae08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ae0e:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <tcp_handle_closepend+0x48>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ae14:	e014      	b.n	800ae40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	8b5b      	ldrh	r3, [r3, #26]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d009      	beq.n	800ae3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	8b5b      	ldrh	r3, [r3, #26]
 800ae2c:	f023 0308 	bic.w	r3, r3, #8
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fe fe8c 	bl	8009b54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e7      	bne.n	800ae16 <tcp_handle_closepend+0xe>
  }
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	200098c0 	.word	0x200098c0

0800ae54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae5e:	2001      	movs	r0, #1
 800ae60:	f7fd fbd6 	bl	8008610 <memp_malloc>
 800ae64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d126      	bne.n	800aeba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ae6c:	f7ff ffcc 	bl	800ae08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ae70:	f7ff ff9a 	bl	800ada8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae74:	2001      	movs	r0, #1
 800ae76:	f7fd fbcb 	bl	8008610 <memp_malloc>
 800ae7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d11b      	bne.n	800aeba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ae82:	2009      	movs	r0, #9
 800ae84:	f7ff ff46 	bl	800ad14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7fd fbc1 	bl	8008610 <memp_malloc>
 800ae8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d111      	bne.n	800aeba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ae96:	2008      	movs	r0, #8
 800ae98:	f7ff ff3c 	bl	800ad14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	f7fd fbb7 	bl	8008610 <memp_malloc>
 800aea2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d107      	bne.n	800aeba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff fee3 	bl	800ac78 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	f7fd fbac 	bl	8008610 <memp_malloc>
 800aeb8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d03f      	beq.n	800af40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aec0:	229c      	movs	r2, #156	; 0x9c
 800aec2:	2100      	movs	r1, #0
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f007 feb9 	bl	8012c3c <memset>
    pcb->prio = prio;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	79fa      	ldrb	r2, [r7, #7]
 800aece:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aed6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aee0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	22ff      	movs	r2, #255	; 0xff
 800aeee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aef6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2206      	movs	r2, #6
 800aefc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2206      	movs	r2, #6
 800af04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2201      	movs	r2, #1
 800af12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <tcp_alloc+0xf8>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800af1e:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <tcp_alloc+0xfc>)
 800af20:	781a      	ldrb	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800af2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4a08      	ldr	r2, [pc, #32]	; (800af54 <tcp_alloc+0x100>)
 800af34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4a07      	ldr	r2, [pc, #28]	; (800af58 <tcp_alloc+0x104>)
 800af3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	200098b4 	.word	0x200098b4
 800af50:	200098ca 	.word	0x200098ca
 800af54:	0800ac0d 	.word	0x0800ac0d
 800af58:	006ddd00 	.word	0x006ddd00

0800af5c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800af60:	2040      	movs	r0, #64	; 0x40
 800af62:	f7ff ff77 	bl	800ae54 <tcp_alloc>
 800af66:	4603      	mov	r3, r0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	611a      	str	r2, [r3, #16]
  }
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
	...

0800af90 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00e      	beq.n	800afbe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7d1b      	ldrb	r3, [r3, #20]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d106      	bne.n	800afb6 <tcp_recv+0x26>
 800afa8:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <tcp_recv+0x38>)
 800afaa:	f240 72df 	movw	r2, #2015	; 0x7df
 800afae:	4907      	ldr	r1, [pc, #28]	; (800afcc <tcp_recv+0x3c>)
 800afb0:	4807      	ldr	r0, [pc, #28]	; (800afd0 <tcp_recv+0x40>)
 800afb2:	f007 fe4b 	bl	8012c4c <iprintf>
    pcb->recv = recv;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800afbe:	bf00      	nop
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	08014910 	.word	0x08014910
 800afcc:	08014eac 	.word	0x08014eac
 800afd0:	08014954 	.word	0x08014954

0800afd4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00e      	beq.n	800b002 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7d1b      	ldrb	r3, [r3, #20]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d106      	bne.n	800affa <tcp_sent+0x26>
 800afec:	4b07      	ldr	r3, [pc, #28]	; (800b00c <tcp_sent+0x38>)
 800afee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800aff2:	4907      	ldr	r1, [pc, #28]	; (800b010 <tcp_sent+0x3c>)
 800aff4:	4807      	ldr	r0, [pc, #28]	; (800b014 <tcp_sent+0x40>)
 800aff6:	f007 fe29 	bl	8012c4c <iprintf>
    pcb->sent = sent;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	08014910 	.word	0x08014910
 800b010:	08014ed4 	.word	0x08014ed4
 800b014:	08014954 	.word	0x08014954

0800b018 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00e      	beq.n	800b046 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7d1b      	ldrb	r3, [r3, #20]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d106      	bne.n	800b03e <tcp_err+0x26>
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <tcp_err+0x38>)
 800b032:	f640 020d 	movw	r2, #2061	; 0x80d
 800b036:	4907      	ldr	r1, [pc, #28]	; (800b054 <tcp_err+0x3c>)
 800b038:	4807      	ldr	r0, [pc, #28]	; (800b058 <tcp_err+0x40>)
 800b03a:	f007 fe07 	bl	8012c4c <iprintf>
    pcb->errf = err;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	08014910 	.word	0x08014910
 800b054:	08014efc 	.word	0x08014efc
 800b058:	08014954 	.word	0x08014954

0800b05c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d008      	beq.n	800b07e <tcp_accept+0x22>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	7d1b      	ldrb	r3, [r3, #20]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d104      	bne.n	800b07e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	619a      	str	r2, [r3, #24]
  }
}
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
	...

0800b08c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d107      	bne.n	800b0b0 <tcp_poll+0x24>
 800b0a0:	4b0e      	ldr	r3, [pc, #56]	; (800b0dc <tcp_poll+0x50>)
 800b0a2:	f640 023d 	movw	r2, #2109	; 0x83d
 800b0a6:	490e      	ldr	r1, [pc, #56]	; (800b0e0 <tcp_poll+0x54>)
 800b0a8:	480e      	ldr	r0, [pc, #56]	; (800b0e4 <tcp_poll+0x58>)
 800b0aa:	f007 fdcf 	bl	8012c4c <iprintf>
 800b0ae:	e011      	b.n	800b0d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	7d1b      	ldrb	r3, [r3, #20]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d106      	bne.n	800b0c6 <tcp_poll+0x3a>
 800b0b8:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <tcp_poll+0x50>)
 800b0ba:	f640 023e 	movw	r2, #2110	; 0x83e
 800b0be:	490a      	ldr	r1, [pc, #40]	; (800b0e8 <tcp_poll+0x5c>)
 800b0c0:	4808      	ldr	r0, [pc, #32]	; (800b0e4 <tcp_poll+0x58>)
 800b0c2:	f007 fdc3 	bl	8012c4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	79fa      	ldrb	r2, [r7, #7]
 800b0d2:	775a      	strb	r2, [r3, #29]
}
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	08014910 	.word	0x08014910
 800b0e0:	08014f24 	.word	0x08014f24
 800b0e4:	08014954 	.word	0x08014954
 800b0e8:	08014f3c 	.word	0x08014f3c

0800b0ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d107      	bne.n	800b10a <tcp_pcb_purge+0x1e>
 800b0fa:	4b21      	ldr	r3, [pc, #132]	; (800b180 <tcp_pcb_purge+0x94>)
 800b0fc:	f640 0251 	movw	r2, #2129	; 0x851
 800b100:	4920      	ldr	r1, [pc, #128]	; (800b184 <tcp_pcb_purge+0x98>)
 800b102:	4821      	ldr	r0, [pc, #132]	; (800b188 <tcp_pcb_purge+0x9c>)
 800b104:	f007 fda2 	bl	8012c4c <iprintf>
 800b108:	e037      	b.n	800b17a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	7d1b      	ldrb	r3, [r3, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d033      	beq.n	800b17a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b116:	2b0a      	cmp	r3, #10
 800b118:	d02f      	beq.n	800b17a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d02b      	beq.n	800b17a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b126:	2b00      	cmp	r3, #0
 800b128:	d007      	beq.n	800b13a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe f8cc 	bl	80092cc <pbuf_free>
      pcb->refused_data = NULL;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d002      	beq.n	800b148 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f986 	bl	800b454 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b14e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fce1 	bl	800ab1c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff fcdc 	bl	800ab1c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	66da      	str	r2, [r3, #108]	; 0x6c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	08014910 	.word	0x08014910
 800b184:	08014f5c 	.word	0x08014f5c
 800b188:	08014954 	.word	0x08014954

0800b18c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d106      	bne.n	800b1aa <tcp_pcb_remove+0x1e>
 800b19c:	4b3e      	ldr	r3, [pc, #248]	; (800b298 <tcp_pcb_remove+0x10c>)
 800b19e:	f640 0283 	movw	r2, #2179	; 0x883
 800b1a2:	493e      	ldr	r1, [pc, #248]	; (800b29c <tcp_pcb_remove+0x110>)
 800b1a4:	483e      	ldr	r0, [pc, #248]	; (800b2a0 <tcp_pcb_remove+0x114>)
 800b1a6:	f007 fd51 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d106      	bne.n	800b1be <tcp_pcb_remove+0x32>
 800b1b0:	4b39      	ldr	r3, [pc, #228]	; (800b298 <tcp_pcb_remove+0x10c>)
 800b1b2:	f640 0284 	movw	r2, #2180	; 0x884
 800b1b6:	493b      	ldr	r1, [pc, #236]	; (800b2a4 <tcp_pcb_remove+0x118>)
 800b1b8:	4839      	ldr	r0, [pc, #228]	; (800b2a0 <tcp_pcb_remove+0x114>)
 800b1ba:	f007 fd47 	bl	8012c4c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d105      	bne.n	800b1d4 <tcp_pcb_remove+0x48>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e013      	b.n	800b1fc <tcp_pcb_remove+0x70>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	e00c      	b.n	800b1f6 <tcp_pcb_remove+0x6a>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d104      	bne.n	800b1f0 <tcp_pcb_remove+0x64>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	68da      	ldr	r2, [r3, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	60da      	str	r2, [r3, #12]
 800b1ee:	e005      	b.n	800b1fc <tcp_pcb_remove+0x70>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1ef      	bne.n	800b1dc <tcp_pcb_remove+0x50>
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2200      	movs	r2, #0
 800b200:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b202:	6838      	ldr	r0, [r7, #0]
 800b204:	f7ff ff72 	bl	800b0ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	7d1b      	ldrb	r3, [r3, #20]
 800b20c:	2b0a      	cmp	r3, #10
 800b20e:	d013      	beq.n	800b238 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b214:	2b01      	cmp	r3, #1
 800b216:	d00f      	beq.n	800b238 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	8b5b      	ldrh	r3, [r3, #26]
 800b21c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b220:	2b00      	cmp	r3, #0
 800b222:	d009      	beq.n	800b238 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	8b5b      	ldrh	r3, [r3, #26]
 800b228:	f043 0302 	orr.w	r3, r3, #2
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b232:	6838      	ldr	r0, [r7, #0]
 800b234:	f003 fbc6 	bl	800e9c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	7d1b      	ldrb	r3, [r3, #20]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d020      	beq.n	800b282 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d006      	beq.n	800b256 <tcp_pcb_remove+0xca>
 800b248:	4b13      	ldr	r3, [pc, #76]	; (800b298 <tcp_pcb_remove+0x10c>)
 800b24a:	f640 0293 	movw	r2, #2195	; 0x893
 800b24e:	4916      	ldr	r1, [pc, #88]	; (800b2a8 <tcp_pcb_remove+0x11c>)
 800b250:	4813      	ldr	r0, [pc, #76]	; (800b2a0 <tcp_pcb_remove+0x114>)
 800b252:	f007 fcfb 	bl	8012c4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d006      	beq.n	800b26c <tcp_pcb_remove+0xe0>
 800b25e:	4b0e      	ldr	r3, [pc, #56]	; (800b298 <tcp_pcb_remove+0x10c>)
 800b260:	f640 0294 	movw	r2, #2196	; 0x894
 800b264:	4911      	ldr	r1, [pc, #68]	; (800b2ac <tcp_pcb_remove+0x120>)
 800b266:	480e      	ldr	r0, [pc, #56]	; (800b2a0 <tcp_pcb_remove+0x114>)
 800b268:	f007 fcf0 	bl	8012c4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b270:	2b00      	cmp	r3, #0
 800b272:	d006      	beq.n	800b282 <tcp_pcb_remove+0xf6>
 800b274:	4b08      	ldr	r3, [pc, #32]	; (800b298 <tcp_pcb_remove+0x10c>)
 800b276:	f640 0296 	movw	r2, #2198	; 0x896
 800b27a:	490d      	ldr	r1, [pc, #52]	; (800b2b0 <tcp_pcb_remove+0x124>)
 800b27c:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <tcp_pcb_remove+0x114>)
 800b27e:	f007 fce5 	bl	8012c4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2200      	movs	r2, #0
 800b286:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2200      	movs	r2, #0
 800b28c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b28e:	bf00      	nop
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	08014910 	.word	0x08014910
 800b29c:	08014f78 	.word	0x08014f78
 800b2a0:	08014954 	.word	0x08014954
 800b2a4:	08014f94 	.word	0x08014f94
 800b2a8:	08014fb4 	.word	0x08014fb4
 800b2ac:	08014fcc 	.word	0x08014fcc
 800b2b0:	08014fe8 	.word	0x08014fe8

0800b2b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_next_iss+0x1c>
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <tcp_next_iss+0x38>)
 800b2c4:	f640 02af 	movw	r2, #2223	; 0x8af
 800b2c8:	4909      	ldr	r1, [pc, #36]	; (800b2f0 <tcp_next_iss+0x3c>)
 800b2ca:	480a      	ldr	r0, [pc, #40]	; (800b2f4 <tcp_next_iss+0x40>)
 800b2cc:	f007 fcbe 	bl	8012c4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b2d0:	4b09      	ldr	r3, [pc, #36]	; (800b2f8 <tcp_next_iss+0x44>)
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <tcp_next_iss+0x48>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4413      	add	r3, r2
 800b2da:	4a07      	ldr	r2, [pc, #28]	; (800b2f8 <tcp_next_iss+0x44>)
 800b2dc:	6013      	str	r3, [r2, #0]
  return iss;
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <tcp_next_iss+0x44>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	08014910 	.word	0x08014910
 800b2f0:	08015000 	.word	0x08015000
 800b2f4:	08014954 	.word	0x08014954
 800b2f8:	20000048 	.word	0x20000048
 800b2fc:	200098b4 	.word	0x200098b4

0800b300 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d106      	bne.n	800b322 <tcp_eff_send_mss_netif+0x22>
 800b314:	4b14      	ldr	r3, [pc, #80]	; (800b368 <tcp_eff_send_mss_netif+0x68>)
 800b316:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b31a:	4914      	ldr	r1, [pc, #80]	; (800b36c <tcp_eff_send_mss_netif+0x6c>)
 800b31c:	4814      	ldr	r0, [pc, #80]	; (800b370 <tcp_eff_send_mss_netif+0x70>)
 800b31e:	f007 fc95 	bl	8012c4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b328:	89fb      	ldrh	r3, [r7, #14]
 800b32a:	e019      	b.n	800b360 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b330:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b332:	8afb      	ldrh	r3, [r7, #22]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d012      	beq.n	800b35e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b338:	2328      	movs	r3, #40	; 0x28
 800b33a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b33c:	8afa      	ldrh	r2, [r7, #22]
 800b33e:	8abb      	ldrh	r3, [r7, #20]
 800b340:	429a      	cmp	r2, r3
 800b342:	d904      	bls.n	800b34e <tcp_eff_send_mss_netif+0x4e>
 800b344:	8afa      	ldrh	r2, [r7, #22]
 800b346:	8abb      	ldrh	r3, [r7, #20]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	e000      	b.n	800b350 <tcp_eff_send_mss_netif+0x50>
 800b34e:	2300      	movs	r3, #0
 800b350:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b352:	8a7a      	ldrh	r2, [r7, #18]
 800b354:	89fb      	ldrh	r3, [r7, #14]
 800b356:	4293      	cmp	r3, r2
 800b358:	bf28      	it	cs
 800b35a:	4613      	movcs	r3, r2
 800b35c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b35e:	89fb      	ldrh	r3, [r7, #14]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	08014910 	.word	0x08014910
 800b36c:	0801501c 	.word	0x0801501c
 800b370:	08014954 	.word	0x08014954

0800b374 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d119      	bne.n	800b3bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b388:	4b10      	ldr	r3, [pc, #64]	; (800b3cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b38a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b38e:	4910      	ldr	r1, [pc, #64]	; (800b3d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b390:	4810      	ldr	r0, [pc, #64]	; (800b3d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b392:	f007 fc5b 	bl	8012c4c <iprintf>

  while (pcb != NULL) {
 800b396:	e011      	b.n	800b3bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d108      	bne.n	800b3b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7fe fd26 	bl	8009dfc <tcp_abort>
      pcb = next;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	e002      	b.n	800b3bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1ea      	bne.n	800b398 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	08014910 	.word	0x08014910
 800b3d0:	08015044 	.word	0x08015044
 800b3d4:	08014954 	.word	0x08014954

0800b3d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d02a      	beq.n	800b43e <tcp_netif_ip_addr_changed+0x66>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d026      	beq.n	800b43e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b3f0:	4b15      	ldr	r3, [pc, #84]	; (800b448 <tcp_netif_ip_addr_changed+0x70>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff ffbc 	bl	800b374 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b3fc:	4b13      	ldr	r3, [pc, #76]	; (800b44c <tcp_netif_ip_addr_changed+0x74>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff ffb6 	bl	800b374 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d017      	beq.n	800b43e <tcp_netif_ip_addr_changed+0x66>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d013      	beq.n	800b43e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b416:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <tcp_netif_ip_addr_changed+0x78>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e00c      	b.n	800b438 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d103      	bne.n	800b432 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1ef      	bne.n	800b41e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b43e:	bf00      	nop
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200098c0 	.word	0x200098c0
 800b44c:	200098b8 	.word	0x200098b8
 800b450:	200098bc 	.word	0x200098bc

0800b454 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fb57 	bl	800ab1c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b08d      	sub	sp, #52	; 0x34
 800b480:	af04      	add	r7, sp, #16
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d105      	bne.n	800b498 <tcp_input+0x1c>
 800b48c:	4b9b      	ldr	r3, [pc, #620]	; (800b6fc <tcp_input+0x280>)
 800b48e:	2283      	movs	r2, #131	; 0x83
 800b490:	499b      	ldr	r1, [pc, #620]	; (800b700 <tcp_input+0x284>)
 800b492:	489c      	ldr	r0, [pc, #624]	; (800b704 <tcp_input+0x288>)
 800b494:	f007 fbda 	bl	8012c4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	4a9a      	ldr	r2, [pc, #616]	; (800b708 <tcp_input+0x28c>)
 800b49e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	895b      	ldrh	r3, [r3, #10]
 800b4a4:	2b13      	cmp	r3, #19
 800b4a6:	f240 83d1 	bls.w	800bc4c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b4aa:	4b98      	ldr	r3, [pc, #608]	; (800b70c <tcp_input+0x290>)
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	4a97      	ldr	r2, [pc, #604]	; (800b70c <tcp_input+0x290>)
 800b4b0:	6812      	ldr	r2, [r2, #0]
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f006 fc29 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f040 83c7 	bne.w	800bc50 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b4c2:	4b92      	ldr	r3, [pc, #584]	; (800b70c <tcp_input+0x290>)
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b4ca:	2be0      	cmp	r3, #224	; 0xe0
 800b4cc:	f000 83c0 	beq.w	800bc50 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b4d0:	4b8d      	ldr	r3, [pc, #564]	; (800b708 <tcp_input+0x28c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	899b      	ldrh	r3, [r3, #12]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fc fc44 	bl	8007d66 <lwip_htons>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	0b1b      	lsrs	r3, r3, #12
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b4ea:	7cbb      	ldrb	r3, [r7, #18]
 800b4ec:	2b13      	cmp	r3, #19
 800b4ee:	f240 83b1 	bls.w	800bc54 <tcp_input+0x7d8>
 800b4f2:	7cbb      	ldrb	r3, [r7, #18]
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	891b      	ldrh	r3, [r3, #8]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	f200 83aa 	bhi.w	800bc54 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b500:	7cbb      	ldrb	r3, [r7, #18]
 800b502:	b29b      	uxth	r3, r3
 800b504:	3b14      	subs	r3, #20
 800b506:	b29a      	uxth	r2, r3
 800b508:	4b81      	ldr	r3, [pc, #516]	; (800b710 <tcp_input+0x294>)
 800b50a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b50c:	4b81      	ldr	r3, [pc, #516]	; (800b714 <tcp_input+0x298>)
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	895a      	ldrh	r2, [r3, #10]
 800b516:	7cbb      	ldrb	r3, [r7, #18]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d309      	bcc.n	800b532 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b51e:	4b7c      	ldr	r3, [pc, #496]	; (800b710 <tcp_input+0x294>)
 800b520:	881a      	ldrh	r2, [r3, #0]
 800b522:	4b7d      	ldr	r3, [pc, #500]	; (800b718 <tcp_input+0x29c>)
 800b524:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b526:	7cbb      	ldrb	r3, [r7, #18]
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7fd fe48 	bl	80091c0 <pbuf_remove_header>
 800b530:	e04e      	b.n	800b5d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d105      	bne.n	800b546 <tcp_input+0xca>
 800b53a:	4b70      	ldr	r3, [pc, #448]	; (800b6fc <tcp_input+0x280>)
 800b53c:	22c2      	movs	r2, #194	; 0xc2
 800b53e:	4977      	ldr	r1, [pc, #476]	; (800b71c <tcp_input+0x2a0>)
 800b540:	4870      	ldr	r0, [pc, #448]	; (800b704 <tcp_input+0x288>)
 800b542:	f007 fb83 	bl	8012c4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b546:	2114      	movs	r1, #20
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7fd fe39 	bl	80091c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	895a      	ldrh	r2, [r3, #10]
 800b552:	4b71      	ldr	r3, [pc, #452]	; (800b718 <tcp_input+0x29c>)
 800b554:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b556:	4b6e      	ldr	r3, [pc, #440]	; (800b710 <tcp_input+0x294>)
 800b558:	881a      	ldrh	r2, [r3, #0]
 800b55a:	4b6f      	ldr	r3, [pc, #444]	; (800b718 <tcp_input+0x29c>)
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b562:	4b6d      	ldr	r3, [pc, #436]	; (800b718 <tcp_input+0x29c>)
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7fd fe29 	bl	80091c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	895b      	ldrh	r3, [r3, #10]
 800b574:	8a3a      	ldrh	r2, [r7, #16]
 800b576:	429a      	cmp	r2, r3
 800b578:	f200 836e 	bhi.w	800bc58 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	4a64      	ldr	r2, [pc, #400]	; (800b714 <tcp_input+0x298>)
 800b584:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	8a3a      	ldrh	r2, [r7, #16]
 800b58c:	4611      	mov	r1, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fd fe16 	bl	80091c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	891a      	ldrh	r2, [r3, #8]
 800b598:	8a3b      	ldrh	r3, [r7, #16]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d005      	beq.n	800b5b6 <tcp_input+0x13a>
 800b5aa:	4b54      	ldr	r3, [pc, #336]	; (800b6fc <tcp_input+0x280>)
 800b5ac:	22df      	movs	r2, #223	; 0xdf
 800b5ae:	495c      	ldr	r1, [pc, #368]	; (800b720 <tcp_input+0x2a4>)
 800b5b0:	4854      	ldr	r0, [pc, #336]	; (800b704 <tcp_input+0x288>)
 800b5b2:	f007 fb4b 	bl	8012c4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	891a      	ldrh	r2, [r3, #8]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	891b      	ldrh	r3, [r3, #8]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d005      	beq.n	800b5d0 <tcp_input+0x154>
 800b5c4:	4b4d      	ldr	r3, [pc, #308]	; (800b6fc <tcp_input+0x280>)
 800b5c6:	22e0      	movs	r2, #224	; 0xe0
 800b5c8:	4956      	ldr	r1, [pc, #344]	; (800b724 <tcp_input+0x2a8>)
 800b5ca:	484e      	ldr	r0, [pc, #312]	; (800b704 <tcp_input+0x288>)
 800b5cc:	f007 fb3e 	bl	8012c4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b5d0:	4b4d      	ldr	r3, [pc, #308]	; (800b708 <tcp_input+0x28c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	4a4b      	ldr	r2, [pc, #300]	; (800b708 <tcp_input+0x28c>)
 800b5da:	6814      	ldr	r4, [r2, #0]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fc fbc2 	bl	8007d66 <lwip_htons>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b5e6:	4b48      	ldr	r3, [pc, #288]	; (800b708 <tcp_input+0x28c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	885b      	ldrh	r3, [r3, #2]
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	4a46      	ldr	r2, [pc, #280]	; (800b708 <tcp_input+0x28c>)
 800b5f0:	6814      	ldr	r4, [r2, #0]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fc fbb7 	bl	8007d66 <lwip_htons>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b5fc:	4b42      	ldr	r3, [pc, #264]	; (800b708 <tcp_input+0x28c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	4a41      	ldr	r2, [pc, #260]	; (800b708 <tcp_input+0x28c>)
 800b604:	6814      	ldr	r4, [r2, #0]
 800b606:	4618      	mov	r0, r3
 800b608:	f7fc fbc2 	bl	8007d90 <lwip_htonl>
 800b60c:	4603      	mov	r3, r0
 800b60e:	6063      	str	r3, [r4, #4]
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	4a45      	ldr	r2, [pc, #276]	; (800b728 <tcp_input+0x2ac>)
 800b614:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b616:	4b3c      	ldr	r3, [pc, #240]	; (800b708 <tcp_input+0x28c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	4a3a      	ldr	r2, [pc, #232]	; (800b708 <tcp_input+0x28c>)
 800b61e:	6814      	ldr	r4, [r2, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f7fc fbb5 	bl	8007d90 <lwip_htonl>
 800b626:	4603      	mov	r3, r0
 800b628:	60a3      	str	r3, [r4, #8]
 800b62a:	68a3      	ldr	r3, [r4, #8]
 800b62c:	4a3f      	ldr	r2, [pc, #252]	; (800b72c <tcp_input+0x2b0>)
 800b62e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b630:	4b35      	ldr	r3, [pc, #212]	; (800b708 <tcp_input+0x28c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	89db      	ldrh	r3, [r3, #14]
 800b636:	b29b      	uxth	r3, r3
 800b638:	4a33      	ldr	r2, [pc, #204]	; (800b708 <tcp_input+0x28c>)
 800b63a:	6814      	ldr	r4, [r2, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fc fb92 	bl	8007d66 <lwip_htons>
 800b642:	4603      	mov	r3, r0
 800b644:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b646:	4b30      	ldr	r3, [pc, #192]	; (800b708 <tcp_input+0x28c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	899b      	ldrh	r3, [r3, #12]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fc fb89 	bl	8007d66 <lwip_htons>
 800b654:	4603      	mov	r3, r0
 800b656:	b2db      	uxtb	r3, r3
 800b658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	4b34      	ldr	r3, [pc, #208]	; (800b730 <tcp_input+0x2b4>)
 800b660:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	891a      	ldrh	r2, [r3, #8]
 800b666:	4b33      	ldr	r3, [pc, #204]	; (800b734 <tcp_input+0x2b8>)
 800b668:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b66a:	4b31      	ldr	r3, [pc, #196]	; (800b730 <tcp_input+0x2b4>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f003 0303 	and.w	r3, r3, #3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00c      	beq.n	800b690 <tcp_input+0x214>
    tcplen++;
 800b676:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <tcp_input+0x2b8>)
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	3301      	adds	r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <tcp_input+0x2b8>)
 800b680:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	891a      	ldrh	r2, [r3, #8]
 800b686:	4b2b      	ldr	r3, [pc, #172]	; (800b734 <tcp_input+0x2b8>)
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	f200 82e6 	bhi.w	800bc5c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b694:	4b28      	ldr	r3, [pc, #160]	; (800b738 <tcp_input+0x2bc>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	61fb      	str	r3, [r7, #28]
 800b69a:	e09d      	b.n	800b7d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	7d1b      	ldrb	r3, [r3, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d105      	bne.n	800b6b0 <tcp_input+0x234>
 800b6a4:	4b15      	ldr	r3, [pc, #84]	; (800b6fc <tcp_input+0x280>)
 800b6a6:	22fb      	movs	r2, #251	; 0xfb
 800b6a8:	4924      	ldr	r1, [pc, #144]	; (800b73c <tcp_input+0x2c0>)
 800b6aa:	4816      	ldr	r0, [pc, #88]	; (800b704 <tcp_input+0x288>)
 800b6ac:	f007 face 	bl	8012c4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	7d1b      	ldrb	r3, [r3, #20]
 800b6b4:	2b0a      	cmp	r3, #10
 800b6b6:	d105      	bne.n	800b6c4 <tcp_input+0x248>
 800b6b8:	4b10      	ldr	r3, [pc, #64]	; (800b6fc <tcp_input+0x280>)
 800b6ba:	22fc      	movs	r2, #252	; 0xfc
 800b6bc:	4920      	ldr	r1, [pc, #128]	; (800b740 <tcp_input+0x2c4>)
 800b6be:	4811      	ldr	r0, [pc, #68]	; (800b704 <tcp_input+0x288>)
 800b6c0:	f007 fac4 	bl	8012c4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	7d1b      	ldrb	r3, [r3, #20]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d105      	bne.n	800b6d8 <tcp_input+0x25c>
 800b6cc:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <tcp_input+0x280>)
 800b6ce:	22fd      	movs	r2, #253	; 0xfd
 800b6d0:	491c      	ldr	r1, [pc, #112]	; (800b744 <tcp_input+0x2c8>)
 800b6d2:	480c      	ldr	r0, [pc, #48]	; (800b704 <tcp_input+0x288>)
 800b6d4:	f007 faba 	bl	8012c4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	7a1b      	ldrb	r3, [r3, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d033      	beq.n	800b748 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	7a1a      	ldrb	r2, [r3, #8]
 800b6e4:	4b09      	ldr	r3, [pc, #36]	; (800b70c <tcp_input+0x290>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d029      	beq.n	800b748 <tcp_input+0x2cc>
      prev = pcb;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	61bb      	str	r3, [r7, #24]
      continue;
 800b6f8:	e06b      	b.n	800b7d2 <tcp_input+0x356>
 800b6fa:	bf00      	nop
 800b6fc:	08015078 	.word	0x08015078
 800b700:	080150ac 	.word	0x080150ac
 800b704:	080150c4 	.word	0x080150c4
 800b708:	200098dc 	.word	0x200098dc
 800b70c:	20006344 	.word	0x20006344
 800b710:	200098e0 	.word	0x200098e0
 800b714:	200098e4 	.word	0x200098e4
 800b718:	200098e2 	.word	0x200098e2
 800b71c:	080150ec 	.word	0x080150ec
 800b720:	080150fc 	.word	0x080150fc
 800b724:	08015108 	.word	0x08015108
 800b728:	200098ec 	.word	0x200098ec
 800b72c:	200098f0 	.word	0x200098f0
 800b730:	200098f8 	.word	0x200098f8
 800b734:	200098f6 	.word	0x200098f6
 800b738:	200098c0 	.word	0x200098c0
 800b73c:	08015128 	.word	0x08015128
 800b740:	08015150 	.word	0x08015150
 800b744:	0801517c 	.word	0x0801517c
    }

    if (pcb->remote_port == tcphdr->src &&
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	8b1a      	ldrh	r2, [r3, #24]
 800b74c:	4b72      	ldr	r3, [pc, #456]	; (800b918 <tcp_input+0x49c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	b29b      	uxth	r3, r3
 800b754:	429a      	cmp	r2, r3
 800b756:	d13a      	bne.n	800b7ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	8ada      	ldrh	r2, [r3, #22]
 800b75c:	4b6e      	ldr	r3, [pc, #440]	; (800b918 <tcp_input+0x49c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b764:	429a      	cmp	r2, r3
 800b766:	d132      	bne.n	800b7ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b6b      	ldr	r3, [pc, #428]	; (800b91c <tcp_input+0x4a0>)
 800b76e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b770:	429a      	cmp	r2, r3
 800b772:	d12c      	bne.n	800b7ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	4b68      	ldr	r3, [pc, #416]	; (800b91c <tcp_input+0x4a0>)
 800b77a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d126      	bne.n	800b7ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	69fa      	ldr	r2, [r7, #28]
 800b786:	429a      	cmp	r2, r3
 800b788:	d106      	bne.n	800b798 <tcp_input+0x31c>
 800b78a:	4b65      	ldr	r3, [pc, #404]	; (800b920 <tcp_input+0x4a4>)
 800b78c:	f240 120d 	movw	r2, #269	; 0x10d
 800b790:	4964      	ldr	r1, [pc, #400]	; (800b924 <tcp_input+0x4a8>)
 800b792:	4865      	ldr	r0, [pc, #404]	; (800b928 <tcp_input+0x4ac>)
 800b794:	f007 fa5a 	bl	8012c4c <iprintf>
      if (prev != NULL) {
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <tcp_input+0x338>
        prev->next = pcb->next;
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b7a6:	4b61      	ldr	r3, [pc, #388]	; (800b92c <tcp_input+0x4b0>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b7ae:	4a5f      	ldr	r2, [pc, #380]	; (800b92c <tcp_input+0x4b0>)
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	69fa      	ldr	r2, [r7, #28]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d111      	bne.n	800b7e2 <tcp_input+0x366>
 800b7be:	4b58      	ldr	r3, [pc, #352]	; (800b920 <tcp_input+0x4a4>)
 800b7c0:	f240 1215 	movw	r2, #277	; 0x115
 800b7c4:	495a      	ldr	r1, [pc, #360]	; (800b930 <tcp_input+0x4b4>)
 800b7c6:	4858      	ldr	r0, [pc, #352]	; (800b928 <tcp_input+0x4ac>)
 800b7c8:	f007 fa40 	bl	8012c4c <iprintf>
      break;
 800b7cc:	e009      	b.n	800b7e2 <tcp_input+0x366>
    }
    prev = pcb;
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	61fb      	str	r3, [r7, #28]
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f47f af5e 	bne.w	800b69c <tcp_input+0x220>
 800b7e0:	e000      	b.n	800b7e4 <tcp_input+0x368>
      break;
 800b7e2:	bf00      	nop
  }

  if (pcb == NULL) {
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f040 80aa 	bne.w	800b940 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7ec:	4b51      	ldr	r3, [pc, #324]	; (800b934 <tcp_input+0x4b8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	e03f      	b.n	800b874 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	7d1b      	ldrb	r3, [r3, #20]
 800b7f8:	2b0a      	cmp	r3, #10
 800b7fa:	d006      	beq.n	800b80a <tcp_input+0x38e>
 800b7fc:	4b48      	ldr	r3, [pc, #288]	; (800b920 <tcp_input+0x4a4>)
 800b7fe:	f240 121f 	movw	r2, #287	; 0x11f
 800b802:	494d      	ldr	r1, [pc, #308]	; (800b938 <tcp_input+0x4bc>)
 800b804:	4848      	ldr	r0, [pc, #288]	; (800b928 <tcp_input+0x4ac>)
 800b806:	f007 fa21 	bl	8012c4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	7a1b      	ldrb	r3, [r3, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d009      	beq.n	800b826 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	7a1a      	ldrb	r2, [r3, #8]
 800b816:	4b41      	ldr	r3, [pc, #260]	; (800b91c <tcp_input+0x4a0>)
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b81e:	3301      	adds	r3, #1
 800b820:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b822:	429a      	cmp	r2, r3
 800b824:	d122      	bne.n	800b86c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	8b1a      	ldrh	r2, [r3, #24]
 800b82a:	4b3b      	ldr	r3, [pc, #236]	; (800b918 <tcp_input+0x49c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	b29b      	uxth	r3, r3
 800b832:	429a      	cmp	r2, r3
 800b834:	d11b      	bne.n	800b86e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	8ada      	ldrh	r2, [r3, #22]
 800b83a:	4b37      	ldr	r3, [pc, #220]	; (800b918 <tcp_input+0x49c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	885b      	ldrh	r3, [r3, #2]
 800b840:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b842:	429a      	cmp	r2, r3
 800b844:	d113      	bne.n	800b86e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	4b34      	ldr	r3, [pc, #208]	; (800b91c <tcp_input+0x4a0>)
 800b84c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b84e:	429a      	cmp	r2, r3
 800b850:	d10d      	bne.n	800b86e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	4b31      	ldr	r3, [pc, #196]	; (800b91c <tcp_input+0x4a0>)
 800b858:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d107      	bne.n	800b86e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b85e:	69f8      	ldr	r0, [r7, #28]
 800b860:	f000 fb56 	bl	800bf10 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7fd fd31 	bl	80092cc <pbuf_free>
        return;
 800b86a:	e1fd      	b.n	800bc68 <tcp_input+0x7ec>
        continue;
 800b86c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1bc      	bne.n	800b7f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b87e:	4b2f      	ldr	r3, [pc, #188]	; (800b93c <tcp_input+0x4c0>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	617b      	str	r3, [r7, #20]
 800b884:	e02a      	b.n	800b8dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	7a1b      	ldrb	r3, [r3, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00c      	beq.n	800b8a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	7a1a      	ldrb	r2, [r3, #8]
 800b892:	4b22      	ldr	r3, [pc, #136]	; (800b91c <tcp_input+0x4a0>)
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b89a:	3301      	adds	r3, #1
 800b89c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d002      	beq.n	800b8a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	61bb      	str	r3, [r7, #24]
        continue;
 800b8a6:	e016      	b.n	800b8d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	8ada      	ldrh	r2, [r3, #22]
 800b8ac:	4b1a      	ldr	r3, [pc, #104]	; (800b918 <tcp_input+0x49c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d10c      	bne.n	800b8d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	4b17      	ldr	r3, [pc, #92]	; (800b91c <tcp_input+0x4a0>)
 800b8be:	695b      	ldr	r3, [r3, #20]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d00f      	beq.n	800b8e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00d      	beq.n	800b8e6 <tcp_input+0x46a>
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d009      	beq.n	800b8e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1d1      	bne.n	800b886 <tcp_input+0x40a>
 800b8e2:	e000      	b.n	800b8e6 <tcp_input+0x46a>
            break;
 800b8e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d029      	beq.n	800b940 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00a      	beq.n	800b908 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	68da      	ldr	r2, [r3, #12]
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b8fa:	4b10      	ldr	r3, [pc, #64]	; (800b93c <tcp_input+0x4c0>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b902:	4a0e      	ldr	r2, [pc, #56]	; (800b93c <tcp_input+0x4c0>)
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b908:	6978      	ldr	r0, [r7, #20]
 800b90a:	f000 fa03 	bl	800bd14 <tcp_listen_input>
      }
      pbuf_free(p);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7fd fcdc 	bl	80092cc <pbuf_free>
      return;
 800b914:	e1a8      	b.n	800bc68 <tcp_input+0x7ec>
 800b916:	bf00      	nop
 800b918:	200098dc 	.word	0x200098dc
 800b91c:	20006344 	.word	0x20006344
 800b920:	08015078 	.word	0x08015078
 800b924:	080151a4 	.word	0x080151a4
 800b928:	080150c4 	.word	0x080150c4
 800b92c:	200098c0 	.word	0x200098c0
 800b930:	080151d0 	.word	0x080151d0
 800b934:	200098c4 	.word	0x200098c4
 800b938:	080151fc 	.word	0x080151fc
 800b93c:	200098bc 	.word	0x200098bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 8158 	beq.w	800bbf8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b948:	4b95      	ldr	r3, [pc, #596]	; (800bba0 <tcp_input+0x724>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	891a      	ldrh	r2, [r3, #8]
 800b952:	4b93      	ldr	r3, [pc, #588]	; (800bba0 <tcp_input+0x724>)
 800b954:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b956:	4a92      	ldr	r2, [pc, #584]	; (800bba0 <tcp_input+0x724>)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b95c:	4b91      	ldr	r3, [pc, #580]	; (800bba4 <tcp_input+0x728>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a8f      	ldr	r2, [pc, #572]	; (800bba0 <tcp_input+0x724>)
 800b962:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b964:	4b90      	ldr	r3, [pc, #576]	; (800bba8 <tcp_input+0x72c>)
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b96a:	4b90      	ldr	r3, [pc, #576]	; (800bbac <tcp_input+0x730>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b970:	4b8f      	ldr	r3, [pc, #572]	; (800bbb0 <tcp_input+0x734>)
 800b972:	2200      	movs	r2, #0
 800b974:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b976:	4b8f      	ldr	r3, [pc, #572]	; (800bbb4 <tcp_input+0x738>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	f003 0308 	and.w	r3, r3, #8
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d006      	beq.n	800b990 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	7b5b      	ldrb	r3, [r3, #13]
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b994:	2b00      	cmp	r3, #0
 800b996:	d017      	beq.n	800b9c8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b998:	69f8      	ldr	r0, [r7, #28]
 800b99a:	f7ff f843 	bl	800aa24 <tcp_process_refused_data>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f113 0f0d 	cmn.w	r3, #13
 800b9a4:	d007      	beq.n	800b9b6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00c      	beq.n	800b9c8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b9ae:	4b82      	ldr	r3, [pc, #520]	; (800bbb8 <tcp_input+0x73c>)
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d008      	beq.n	800b9c8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f040 80e3 	bne.w	800bb86 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b9c0:	69f8      	ldr	r0, [r7, #28]
 800b9c2:	f003 fe05 	bl	800f5d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b9c6:	e0de      	b.n	800bb86 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b9c8:	4a7c      	ldr	r2, [pc, #496]	; (800bbbc <tcp_input+0x740>)
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b9ce:	69f8      	ldr	r0, [r7, #28]
 800b9d0:	f000 fb18 	bl	800c004 <tcp_process>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b9d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9dc:	f113 0f0d 	cmn.w	r3, #13
 800b9e0:	f000 80d3 	beq.w	800bb8a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b9e4:	4b71      	ldr	r3, [pc, #452]	; (800bbac <tcp_input+0x730>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	f003 0308 	and.w	r3, r3, #8
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d015      	beq.n	800ba1c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d008      	beq.n	800ba0c <tcp_input+0x590>
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba00:	69fa      	ldr	r2, [r7, #28]
 800ba02:	6912      	ldr	r2, [r2, #16]
 800ba04:	f06f 010d 	mvn.w	r1, #13
 800ba08:	4610      	mov	r0, r2
 800ba0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ba0c:	69f9      	ldr	r1, [r7, #28]
 800ba0e:	486c      	ldr	r0, [pc, #432]	; (800bbc0 <tcp_input+0x744>)
 800ba10:	f7ff fbbc 	bl	800b18c <tcp_pcb_remove>
        tcp_free(pcb);
 800ba14:	69f8      	ldr	r0, [r7, #28]
 800ba16:	f7fd ff09 	bl	800982c <tcp_free>
 800ba1a:	e0da      	b.n	800bbd2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ba20:	4b63      	ldr	r3, [pc, #396]	; (800bbb0 <tcp_input+0x734>)
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01d      	beq.n	800ba64 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ba28:	4b61      	ldr	r3, [pc, #388]	; (800bbb0 <tcp_input+0x734>)
 800ba2a:	881b      	ldrh	r3, [r3, #0]
 800ba2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00a      	beq.n	800ba4e <tcp_input+0x5d2>
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	6910      	ldr	r0, [r2, #16]
 800ba42:	89fa      	ldrh	r2, [r7, #14]
 800ba44:	69f9      	ldr	r1, [r7, #28]
 800ba46:	4798      	blx	r3
 800ba48:	4603      	mov	r3, r0
 800ba4a:	74fb      	strb	r3, [r7, #19]
 800ba4c:	e001      	b.n	800ba52 <tcp_input+0x5d6>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ba52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba56:	f113 0f0d 	cmn.w	r3, #13
 800ba5a:	f000 8098 	beq.w	800bb8e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ba5e:	4b54      	ldr	r3, [pc, #336]	; (800bbb0 <tcp_input+0x734>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ba64:	69f8      	ldr	r0, [r7, #28]
 800ba66:	f000 f915 	bl	800bc94 <tcp_input_delayed_close>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 8090 	bne.w	800bb92 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ba72:	4b4d      	ldr	r3, [pc, #308]	; (800bba8 <tcp_input+0x72c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d041      	beq.n	800bafe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d006      	beq.n	800ba90 <tcp_input+0x614>
 800ba82:	4b50      	ldr	r3, [pc, #320]	; (800bbc4 <tcp_input+0x748>)
 800ba84:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ba88:	494f      	ldr	r1, [pc, #316]	; (800bbc8 <tcp_input+0x74c>)
 800ba8a:	4850      	ldr	r0, [pc, #320]	; (800bbcc <tcp_input+0x750>)
 800ba8c:	f007 f8de 	bl	8012c4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	8b5b      	ldrh	r3, [r3, #26]
 800ba94:	f003 0310 	and.w	r3, r3, #16
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d008      	beq.n	800baae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ba9c:	4b42      	ldr	r3, [pc, #264]	; (800bba8 <tcp_input+0x72c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fd fc13 	bl	80092cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800baa6:	69f8      	ldr	r0, [r7, #28]
 800baa8:	f7fe f9a8 	bl	8009dfc <tcp_abort>
            goto aborted;
 800baac:	e091      	b.n	800bbd2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00c      	beq.n	800bad2 <tcp_input+0x656>
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	6918      	ldr	r0, [r3, #16]
 800bac2:	4b39      	ldr	r3, [pc, #228]	; (800bba8 <tcp_input+0x72c>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	2300      	movs	r3, #0
 800bac8:	69f9      	ldr	r1, [r7, #28]
 800baca:	47a0      	blx	r4
 800bacc:	4603      	mov	r3, r0
 800bace:	74fb      	strb	r3, [r7, #19]
 800bad0:	e008      	b.n	800bae4 <tcp_input+0x668>
 800bad2:	4b35      	ldr	r3, [pc, #212]	; (800bba8 <tcp_input+0x72c>)
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	2300      	movs	r3, #0
 800bad8:	69f9      	ldr	r1, [r7, #28]
 800bada:	2000      	movs	r0, #0
 800badc:	f7ff f896 	bl	800ac0c <tcp_recv_null>
 800bae0:	4603      	mov	r3, r0
 800bae2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bae8:	f113 0f0d 	cmn.w	r3, #13
 800baec:	d053      	beq.n	800bb96 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800baee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800baf6:	4b2c      	ldr	r3, [pc, #176]	; (800bba8 <tcp_input+0x72c>)
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bafe:	4b2b      	ldr	r3, [pc, #172]	; (800bbac <tcp_input+0x730>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	f003 0320 	and.w	r3, r3, #32
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d030      	beq.n	800bb6c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d009      	beq.n	800bb26 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb16:	7b5a      	ldrb	r2, [r3, #13]
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb1c:	f042 0220 	orr.w	r2, r2, #32
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	735a      	strb	r2, [r3, #13]
 800bb24:	e022      	b.n	800bb6c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb2e:	d005      	beq.n	800bb3c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb34:	3301      	adds	r3, #1
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00b      	beq.n	800bb5e <tcp_input+0x6e2>
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	6918      	ldr	r0, [r3, #16]
 800bb50:	2300      	movs	r3, #0
 800bb52:	2200      	movs	r2, #0
 800bb54:	69f9      	ldr	r1, [r7, #28]
 800bb56:	47a0      	blx	r4
 800bb58:	4603      	mov	r3, r0
 800bb5a:	74fb      	strb	r3, [r7, #19]
 800bb5c:	e001      	b.n	800bb62 <tcp_input+0x6e6>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bb62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb66:	f113 0f0d 	cmn.w	r3, #13
 800bb6a:	d016      	beq.n	800bb9a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bb6c:	4b13      	ldr	r3, [pc, #76]	; (800bbbc <tcp_input+0x740>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bb72:	69f8      	ldr	r0, [r7, #28]
 800bb74:	f000 f88e 	bl	800bc94 <tcp_input_delayed_close>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d128      	bne.n	800bbd0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bb7e:	69f8      	ldr	r0, [r7, #28]
 800bb80:	f002 ff20 	bl	800e9c4 <tcp_output>
 800bb84:	e025      	b.n	800bbd2 <tcp_input+0x756>
        goto aborted;
 800bb86:	bf00      	nop
 800bb88:	e023      	b.n	800bbd2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bb8a:	bf00      	nop
 800bb8c:	e021      	b.n	800bbd2 <tcp_input+0x756>
              goto aborted;
 800bb8e:	bf00      	nop
 800bb90:	e01f      	b.n	800bbd2 <tcp_input+0x756>
          goto aborted;
 800bb92:	bf00      	nop
 800bb94:	e01d      	b.n	800bbd2 <tcp_input+0x756>
            goto aborted;
 800bb96:	bf00      	nop
 800bb98:	e01b      	b.n	800bbd2 <tcp_input+0x756>
              goto aborted;
 800bb9a:	bf00      	nop
 800bb9c:	e019      	b.n	800bbd2 <tcp_input+0x756>
 800bb9e:	bf00      	nop
 800bba0:	200098cc 	.word	0x200098cc
 800bba4:	200098dc 	.word	0x200098dc
 800bba8:	200098fc 	.word	0x200098fc
 800bbac:	200098f9 	.word	0x200098f9
 800bbb0:	200098f4 	.word	0x200098f4
 800bbb4:	200098f8 	.word	0x200098f8
 800bbb8:	200098f6 	.word	0x200098f6
 800bbbc:	20009900 	.word	0x20009900
 800bbc0:	200098c0 	.word	0x200098c0
 800bbc4:	08015078 	.word	0x08015078
 800bbc8:	0801522c 	.word	0x0801522c
 800bbcc:	080150c4 	.word	0x080150c4
          goto aborted;
 800bbd0:	bf00      	nop
    tcp_input_pcb = NULL;
 800bbd2:	4b27      	ldr	r3, [pc, #156]	; (800bc70 <tcp_input+0x7f4>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bbd8:	4b26      	ldr	r3, [pc, #152]	; (800bc74 <tcp_input+0x7f8>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bbde:	4b26      	ldr	r3, [pc, #152]	; (800bc78 <tcp_input+0x7fc>)
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d03f      	beq.n	800bc66 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bbe6:	4b24      	ldr	r3, [pc, #144]	; (800bc78 <tcp_input+0x7fc>)
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fd fb6e 	bl	80092cc <pbuf_free>
      inseg.p = NULL;
 800bbf0:	4b21      	ldr	r3, [pc, #132]	; (800bc78 <tcp_input+0x7fc>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bbf6:	e036      	b.n	800bc66 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bbf8:	4b20      	ldr	r3, [pc, #128]	; (800bc7c <tcp_input+0x800>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	899b      	ldrh	r3, [r3, #12]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fc f8b0 	bl	8007d66 <lwip_htons>
 800bc06:	4603      	mov	r3, r0
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	f003 0304 	and.w	r3, r3, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d118      	bne.n	800bc44 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <tcp_input+0x804>)
 800bc14:	6819      	ldr	r1, [r3, #0]
 800bc16:	4b1b      	ldr	r3, [pc, #108]	; (800bc84 <tcp_input+0x808>)
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <tcp_input+0x80c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc22:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <tcp_input+0x800>)
 800bc24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc26:	885b      	ldrh	r3, [r3, #2]
 800bc28:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc2a:	4a14      	ldr	r2, [pc, #80]	; (800bc7c <tcp_input+0x800>)
 800bc2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc2e:	8812      	ldrh	r2, [r2, #0]
 800bc30:	b292      	uxth	r2, r2
 800bc32:	9202      	str	r2, [sp, #8]
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	4b15      	ldr	r3, [pc, #84]	; (800bc8c <tcp_input+0x810>)
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <tcp_input+0x814>)
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f003 fc74 	bl	800f52c <tcp_rst>
    pbuf_free(p);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7fd fb41 	bl	80092cc <pbuf_free>
  return;
 800bc4a:	e00c      	b.n	800bc66 <tcp_input+0x7ea>
    goto dropped;
 800bc4c:	bf00      	nop
 800bc4e:	e006      	b.n	800bc5e <tcp_input+0x7e2>
    goto dropped;
 800bc50:	bf00      	nop
 800bc52:	e004      	b.n	800bc5e <tcp_input+0x7e2>
    goto dropped;
 800bc54:	bf00      	nop
 800bc56:	e002      	b.n	800bc5e <tcp_input+0x7e2>
      goto dropped;
 800bc58:	bf00      	nop
 800bc5a:	e000      	b.n	800bc5e <tcp_input+0x7e2>
      goto dropped;
 800bc5c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fd fb34 	bl	80092cc <pbuf_free>
 800bc64:	e000      	b.n	800bc68 <tcp_input+0x7ec>
  return;
 800bc66:	bf00      	nop
}
 800bc68:	3724      	adds	r7, #36	; 0x24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd90      	pop	{r4, r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20009900 	.word	0x20009900
 800bc74:	200098fc 	.word	0x200098fc
 800bc78:	200098cc 	.word	0x200098cc
 800bc7c:	200098dc 	.word	0x200098dc
 800bc80:	200098f0 	.word	0x200098f0
 800bc84:	200098f6 	.word	0x200098f6
 800bc88:	200098ec 	.word	0x200098ec
 800bc8c:	20006354 	.word	0x20006354
 800bc90:	20006358 	.word	0x20006358

0800bc94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d106      	bne.n	800bcb0 <tcp_input_delayed_close+0x1c>
 800bca2:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <tcp_input_delayed_close+0x6c>)
 800bca4:	f240 225a 	movw	r2, #602	; 0x25a
 800bca8:	4916      	ldr	r1, [pc, #88]	; (800bd04 <tcp_input_delayed_close+0x70>)
 800bcaa:	4817      	ldr	r0, [pc, #92]	; (800bd08 <tcp_input_delayed_close+0x74>)
 800bcac:	f006 ffce 	bl	8012c4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bcb0:	4b16      	ldr	r3, [pc, #88]	; (800bd0c <tcp_input_delayed_close+0x78>)
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d01c      	beq.n	800bcf6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8b5b      	ldrh	r3, [r3, #26]
 800bcc0:	f003 0310 	and.w	r3, r3, #16
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10d      	bne.n	800bce4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d008      	beq.n	800bce4 <tcp_input_delayed_close+0x50>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6912      	ldr	r2, [r2, #16]
 800bcdc:	f06f 010e 	mvn.w	r1, #14
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	480a      	ldr	r0, [pc, #40]	; (800bd10 <tcp_input_delayed_close+0x7c>)
 800bce8:	f7ff fa50 	bl	800b18c <tcp_pcb_remove>
    tcp_free(pcb);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7fd fd9d 	bl	800982c <tcp_free>
    return 1;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	08015078 	.word	0x08015078
 800bd04:	08015248 	.word	0x08015248
 800bd08:	080150c4 	.word	0x080150c4
 800bd0c:	200098f9 	.word	0x200098f9
 800bd10:	200098c0 	.word	0x200098c0

0800bd14 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bd14:	b590      	push	{r4, r7, lr}
 800bd16:	b08b      	sub	sp, #44	; 0x2c
 800bd18:	af04      	add	r7, sp, #16
 800bd1a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bd1c:	4b6f      	ldr	r3, [pc, #444]	; (800bedc <tcp_listen_input+0x1c8>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f040 80d2 	bne.w	800bece <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d106      	bne.n	800bd3e <tcp_listen_input+0x2a>
 800bd30:	4b6b      	ldr	r3, [pc, #428]	; (800bee0 <tcp_listen_input+0x1cc>)
 800bd32:	f240 2281 	movw	r2, #641	; 0x281
 800bd36:	496b      	ldr	r1, [pc, #428]	; (800bee4 <tcp_listen_input+0x1d0>)
 800bd38:	486b      	ldr	r0, [pc, #428]	; (800bee8 <tcp_listen_input+0x1d4>)
 800bd3a:	f006 ff87 	bl	8012c4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bd3e:	4b67      	ldr	r3, [pc, #412]	; (800bedc <tcp_listen_input+0x1c8>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	f003 0310 	and.w	r3, r3, #16
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d019      	beq.n	800bd7e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd4a:	4b68      	ldr	r3, [pc, #416]	; (800beec <tcp_listen_input+0x1d8>)
 800bd4c:	6819      	ldr	r1, [r3, #0]
 800bd4e:	4b68      	ldr	r3, [pc, #416]	; (800bef0 <tcp_listen_input+0x1dc>)
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	461a      	mov	r2, r3
 800bd54:	4b67      	ldr	r3, [pc, #412]	; (800bef4 <tcp_listen_input+0x1e0>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd5a:	4b67      	ldr	r3, [pc, #412]	; (800bef8 <tcp_listen_input+0x1e4>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd5e:	885b      	ldrh	r3, [r3, #2]
 800bd60:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd62:	4a65      	ldr	r2, [pc, #404]	; (800bef8 <tcp_listen_input+0x1e4>)
 800bd64:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd66:	8812      	ldrh	r2, [r2, #0]
 800bd68:	b292      	uxth	r2, r2
 800bd6a:	9202      	str	r2, [sp, #8]
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	4b63      	ldr	r3, [pc, #396]	; (800befc <tcp_listen_input+0x1e8>)
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	4b63      	ldr	r3, [pc, #396]	; (800bf00 <tcp_listen_input+0x1ec>)
 800bd74:	4602      	mov	r2, r0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f003 fbd8 	bl	800f52c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bd7c:	e0a9      	b.n	800bed2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bd7e:	4b57      	ldr	r3, [pc, #348]	; (800bedc <tcp_listen_input+0x1c8>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 0302 	and.w	r3, r3, #2
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 80a3 	beq.w	800bed2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	7d5b      	ldrb	r3, [r3, #21]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff f85f 	bl	800ae54 <tcp_alloc>
 800bd96:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d111      	bne.n	800bdc2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <tcp_listen_input+0xa8>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	6910      	ldr	r0, [r2, #16]
 800bdae:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	4798      	blx	r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73bb      	strb	r3, [r7, #14]
      return;
 800bdba:	e08b      	b.n	800bed4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bdbc:	23f0      	movs	r3, #240	; 0xf0
 800bdbe:	73bb      	strb	r3, [r7, #14]
      return;
 800bdc0:	e088      	b.n	800bed4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bdc2:	4b50      	ldr	r3, [pc, #320]	; (800bf04 <tcp_listen_input+0x1f0>)
 800bdc4:	695a      	ldr	r2, [r3, #20]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bdca:	4b4e      	ldr	r3, [pc, #312]	; (800bf04 <tcp_listen_input+0x1f0>)
 800bdcc:	691a      	ldr	r2, [r3, #16]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	8ada      	ldrh	r2, [r3, #22]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bdda:	4b47      	ldr	r3, [pc, #284]	; (800bef8 <tcp_listen_input+0x1e4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2203      	movs	r2, #3
 800bdea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bdec:	4b41      	ldr	r3, [pc, #260]	; (800bef4 <tcp_listen_input+0x1e0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	f7ff fa58 	bl	800b2b4 <tcp_next_iss>
 800be04:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800be1e:	4b35      	ldr	r3, [pc, #212]	; (800bef4 <tcp_listen_input+0x1e0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	1e5a      	subs	r2, r3, #1
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	691a      	ldr	r2, [r3, #16]
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7a5b      	ldrb	r3, [r3, #9]
 800be3a:	f003 030c 	and.w	r3, r3, #12
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7a1a      	ldrb	r2, [r3, #8]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800be4c:	4b2e      	ldr	r3, [pc, #184]	; (800bf08 <tcp_listen_input+0x1f4>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	60da      	str	r2, [r3, #12]
 800be54:	4a2c      	ldr	r2, [pc, #176]	; (800bf08 <tcp_listen_input+0x1f4>)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	f003 fd29 	bl	800f8b0 <tcp_timer_needed>
 800be5e:	4b2b      	ldr	r3, [pc, #172]	; (800bf0c <tcp_listen_input+0x1f8>)
 800be60:	2201      	movs	r2, #1
 800be62:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800be64:	6978      	ldr	r0, [r7, #20]
 800be66:	f001 fd8f 	bl	800d988 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800be6a:	4b23      	ldr	r3, [pc, #140]	; (800bef8 <tcp_listen_input+0x1e4>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	89db      	ldrh	r3, [r3, #14]
 800be70:	b29a      	uxth	r2, r3
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4618      	mov	r0, r3
 800be8e:	f005 fca7 	bl	80117e0 <ip4_route>
 800be92:	4601      	mov	r1, r0
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	3304      	adds	r3, #4
 800be98:	461a      	mov	r2, r3
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff fa30 	bl	800b300 <tcp_eff_send_mss_netif>
 800bea0:	4603      	mov	r3, r0
 800bea2:	461a      	mov	r2, r3
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bea8:	2112      	movs	r1, #18
 800beaa:	6978      	ldr	r0, [r7, #20]
 800beac:	f002 fc9c 	bl	800e7e8 <tcp_enqueue_flags>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800beb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bebc:	2100      	movs	r1, #0
 800bebe:	6978      	ldr	r0, [r7, #20]
 800bec0:	f7fd fede 	bl	8009c80 <tcp_abandon>
      return;
 800bec4:	e006      	b.n	800bed4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bec6:	6978      	ldr	r0, [r7, #20]
 800bec8:	f002 fd7c 	bl	800e9c4 <tcp_output>
  return;
 800becc:	e001      	b.n	800bed2 <tcp_listen_input+0x1be>
    return;
 800bece:	bf00      	nop
 800bed0:	e000      	b.n	800bed4 <tcp_listen_input+0x1c0>
  return;
 800bed2:	bf00      	nop
}
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd90      	pop	{r4, r7, pc}
 800beda:	bf00      	nop
 800bedc:	200098f8 	.word	0x200098f8
 800bee0:	08015078 	.word	0x08015078
 800bee4:	08015270 	.word	0x08015270
 800bee8:	080150c4 	.word	0x080150c4
 800beec:	200098f0 	.word	0x200098f0
 800bef0:	200098f6 	.word	0x200098f6
 800bef4:	200098ec 	.word	0x200098ec
 800bef8:	200098dc 	.word	0x200098dc
 800befc:	20006354 	.word	0x20006354
 800bf00:	20006358 	.word	0x20006358
 800bf04:	20006344 	.word	0x20006344
 800bf08:	200098c0 	.word	0x200098c0
 800bf0c:	200098c8 	.word	0x200098c8

0800bf10 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af04      	add	r7, sp, #16
 800bf16:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bf18:	4b2f      	ldr	r3, [pc, #188]	; (800bfd8 <tcp_timewait_input+0xc8>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d153      	bne.n	800bfcc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <tcp_timewait_input+0x28>
 800bf2a:	4b2c      	ldr	r3, [pc, #176]	; (800bfdc <tcp_timewait_input+0xcc>)
 800bf2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bf30:	492b      	ldr	r1, [pc, #172]	; (800bfe0 <tcp_timewait_input+0xd0>)
 800bf32:	482c      	ldr	r0, [pc, #176]	; (800bfe4 <tcp_timewait_input+0xd4>)
 800bf34:	f006 fe8a 	bl	8012c4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bf38:	4b27      	ldr	r3, [pc, #156]	; (800bfd8 <tcp_timewait_input+0xc8>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 0302 	and.w	r3, r3, #2
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d02a      	beq.n	800bf9a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bf44:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <tcp_timewait_input+0xd8>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	db2d      	blt.n	800bfae <tcp_timewait_input+0x9e>
 800bf52:	4b25      	ldr	r3, [pc, #148]	; (800bfe8 <tcp_timewait_input+0xd8>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5a:	6879      	ldr	r1, [r7, #4]
 800bf5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf5e:	440b      	add	r3, r1
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	dc23      	bgt.n	800bfae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf66:	4b21      	ldr	r3, [pc, #132]	; (800bfec <tcp_timewait_input+0xdc>)
 800bf68:	6819      	ldr	r1, [r3, #0]
 800bf6a:	4b21      	ldr	r3, [pc, #132]	; (800bff0 <tcp_timewait_input+0xe0>)
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	4b1d      	ldr	r3, [pc, #116]	; (800bfe8 <tcp_timewait_input+0xd8>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf76:	4b1f      	ldr	r3, [pc, #124]	; (800bff4 <tcp_timewait_input+0xe4>)
 800bf78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf7a:	885b      	ldrh	r3, [r3, #2]
 800bf7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf7e:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <tcp_timewait_input+0xe4>)
 800bf80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf82:	8812      	ldrh	r2, [r2, #0]
 800bf84:	b292      	uxth	r2, r2
 800bf86:	9202      	str	r2, [sp, #8]
 800bf88:	9301      	str	r3, [sp, #4]
 800bf8a:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <tcp_timewait_input+0xe8>)
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	4b1b      	ldr	r3, [pc, #108]	; (800bffc <tcp_timewait_input+0xec>)
 800bf90:	4602      	mov	r2, r0
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f003 faca 	bl	800f52c <tcp_rst>
      return;
 800bf98:	e01b      	b.n	800bfd2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bf9a:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <tcp_timewait_input+0xc8>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bfa6:	4b16      	ldr	r3, [pc, #88]	; (800c000 <tcp_timewait_input+0xf0>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bfae:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <tcp_timewait_input+0xe0>)
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00c      	beq.n	800bfd0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	8b5b      	ldrh	r3, [r3, #26]
 800bfba:	f043 0302 	orr.w	r3, r3, #2
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f002 fcfd 	bl	800e9c4 <tcp_output>
  }
  return;
 800bfca:	e001      	b.n	800bfd0 <tcp_timewait_input+0xc0>
    return;
 800bfcc:	bf00      	nop
 800bfce:	e000      	b.n	800bfd2 <tcp_timewait_input+0xc2>
  return;
 800bfd0:	bf00      	nop
}
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	200098f8 	.word	0x200098f8
 800bfdc:	08015078 	.word	0x08015078
 800bfe0:	08015290 	.word	0x08015290
 800bfe4:	080150c4 	.word	0x080150c4
 800bfe8:	200098ec 	.word	0x200098ec
 800bfec:	200098f0 	.word	0x200098f0
 800bff0:	200098f6 	.word	0x200098f6
 800bff4:	200098dc 	.word	0x200098dc
 800bff8:	20006354 	.word	0x20006354
 800bffc:	20006358 	.word	0x20006358
 800c000:	200098b4 	.word	0x200098b4

0800c004 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c004:	b590      	push	{r4, r7, lr}
 800c006:	b08d      	sub	sp, #52	; 0x34
 800c008:	af04      	add	r7, sp, #16
 800c00a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_process+0x24>
 800c01a:	4b9d      	ldr	r3, [pc, #628]	; (800c290 <tcp_process+0x28c>)
 800c01c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c020:	499c      	ldr	r1, [pc, #624]	; (800c294 <tcp_process+0x290>)
 800c022:	489d      	ldr	r0, [pc, #628]	; (800c298 <tcp_process+0x294>)
 800c024:	f006 fe12 	bl	8012c4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c028:	4b9c      	ldr	r3, [pc, #624]	; (800c29c <tcp_process+0x298>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	f003 0304 	and.w	r3, r3, #4
 800c030:	2b00      	cmp	r3, #0
 800c032:	d04e      	beq.n	800c0d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7d1b      	ldrb	r3, [r3, #20]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d108      	bne.n	800c04e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c040:	4b97      	ldr	r3, [pc, #604]	; (800c2a0 <tcp_process+0x29c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d123      	bne.n	800c090 <tcp_process+0x8c>
        acceptable = 1;
 800c048:	2301      	movs	r3, #1
 800c04a:	76fb      	strb	r3, [r7, #27]
 800c04c:	e020      	b.n	800c090 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c052:	4b94      	ldr	r3, [pc, #592]	; (800c2a4 <tcp_process+0x2a0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d102      	bne.n	800c060 <tcp_process+0x5c>
        acceptable = 1;
 800c05a:	2301      	movs	r3, #1
 800c05c:	76fb      	strb	r3, [r7, #27]
 800c05e:	e017      	b.n	800c090 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c060:	4b90      	ldr	r3, [pc, #576]	; (800c2a4 <tcp_process+0x2a0>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	db10      	blt.n	800c090 <tcp_process+0x8c>
 800c06e:	4b8d      	ldr	r3, [pc, #564]	; (800c2a4 <tcp_process+0x2a0>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c07a:	440b      	add	r3, r1
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dc06      	bgt.n	800c090 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	8b5b      	ldrh	r3, [r3, #26]
 800c086:	f043 0302 	orr.w	r3, r3, #2
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c090:	7efb      	ldrb	r3, [r7, #27]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d01b      	beq.n	800c0ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7d1b      	ldrb	r3, [r3, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <tcp_process+0xa8>
 800c09e:	4b7c      	ldr	r3, [pc, #496]	; (800c290 <tcp_process+0x28c>)
 800c0a0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c0a4:	4980      	ldr	r1, [pc, #512]	; (800c2a8 <tcp_process+0x2a4>)
 800c0a6:	487c      	ldr	r0, [pc, #496]	; (800c298 <tcp_process+0x294>)
 800c0a8:	f006 fdd0 	bl	8012c4c <iprintf>
      recv_flags |= TF_RESET;
 800c0ac:	4b7f      	ldr	r3, [pc, #508]	; (800c2ac <tcp_process+0x2a8>)
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f043 0308 	orr.w	r3, r3, #8
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	4b7d      	ldr	r3, [pc, #500]	; (800c2ac <tcp_process+0x2a8>)
 800c0b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	8b5b      	ldrh	r3, [r3, #26]
 800c0be:	f023 0301 	bic.w	r3, r3, #1
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c0c8:	f06f 030d 	mvn.w	r3, #13
 800c0cc:	e37a      	b.n	800c7c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e378      	b.n	800c7c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c0d2:	4b72      	ldr	r3, [pc, #456]	; (800c29c <tcp_process+0x298>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d010      	beq.n	800c100 <tcp_process+0xfc>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7d1b      	ldrb	r3, [r3, #20]
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d00c      	beq.n	800c100 <tcp_process+0xfc>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d008      	beq.n	800c100 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8b5b      	ldrh	r3, [r3, #26]
 800c0f2:	f043 0302 	orr.w	r3, r3, #2
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e361      	b.n	800c7c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8b5b      	ldrh	r3, [r3, #26]
 800c104:	f003 0310 	and.w	r3, r3, #16
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c10c:	4b68      	ldr	r3, [pc, #416]	; (800c2b0 <tcp_process+0x2ac>)
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f001 fc2f 	bl	800d988 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	7d1b      	ldrb	r3, [r3, #20]
 800c12e:	3b02      	subs	r3, #2
 800c130:	2b07      	cmp	r3, #7
 800c132:	f200 8337 	bhi.w	800c7a4 <tcp_process+0x7a0>
 800c136:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <tcp_process+0x138>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c15d 	.word	0x0800c15d
 800c140:	0800c38d 	.word	0x0800c38d
 800c144:	0800c505 	.word	0x0800c505
 800c148:	0800c52f 	.word	0x0800c52f
 800c14c:	0800c653 	.word	0x0800c653
 800c150:	0800c505 	.word	0x0800c505
 800c154:	0800c6df 	.word	0x0800c6df
 800c158:	0800c76f 	.word	0x0800c76f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c15c:	4b4f      	ldr	r3, [pc, #316]	; (800c29c <tcp_process+0x298>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0310 	and.w	r3, r3, #16
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 80e4 	beq.w	800c332 <tcp_process+0x32e>
 800c16a:	4b4c      	ldr	r3, [pc, #304]	; (800c29c <tcp_process+0x298>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 80dd 	beq.w	800c332 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c17c:	1c5a      	adds	r2, r3, #1
 800c17e:	4b48      	ldr	r3, [pc, #288]	; (800c2a0 <tcp_process+0x29c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	f040 80d5 	bne.w	800c332 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c188:	4b46      	ldr	r3, [pc, #280]	; (800c2a4 <tcp_process+0x2a0>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c19a:	4b41      	ldr	r3, [pc, #260]	; (800c2a0 <tcp_process+0x29c>)
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c1a2:	4b44      	ldr	r3, [pc, #272]	; (800c2b4 <tcp_process+0x2b0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	89db      	ldrh	r3, [r3, #14]
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c1bc:	4b39      	ldr	r3, [pc, #228]	; (800c2a4 <tcp_process+0x2a0>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	1e5a      	subs	r2, r3, #1
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f005 fb03 	bl	80117e0 <ip4_route>
 800c1da:	4601      	mov	r1, r0
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f7ff f88c 	bl	800b300 <tcp_eff_send_mss_netif>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1f4:	009a      	lsls	r2, r3, #2
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	f241 111c 	movw	r1, #4380	; 0x111c
 800c200:	428b      	cmp	r3, r1
 800c202:	bf38      	it	cc
 800c204:	460b      	movcc	r3, r1
 800c206:	429a      	cmp	r2, r3
 800c208:	d204      	bcs.n	800c214 <tcp_process+0x210>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	b29b      	uxth	r3, r3
 800c212:	e00d      	b.n	800c230 <tcp_process+0x22c>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c21e:	4293      	cmp	r3, r2
 800c220:	d904      	bls.n	800c22c <tcp_process+0x228>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	b29b      	uxth	r3, r3
 800c22a:	e001      	b.n	800c230 <tcp_process+0x22c>
 800c22c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d106      	bne.n	800c24e <tcp_process+0x24a>
 800c240:	4b13      	ldr	r3, [pc, #76]	; (800c290 <tcp_process+0x28c>)
 800c242:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c246:	491c      	ldr	r1, [pc, #112]	; (800c2b8 <tcp_process+0x2b4>)
 800c248:	4813      	ldr	r0, [pc, #76]	; (800c298 <tcp_process+0x294>)
 800c24a:	f006 fcff 	bl	8012c4c <iprintf>
        --pcb->snd_queuelen;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c254:	3b01      	subs	r3, #1
 800c256:	b29a      	uxth	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c262:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d12a      	bne.n	800c2c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c26e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <tcp_process+0x280>
 800c276:	4b06      	ldr	r3, [pc, #24]	; (800c290 <tcp_process+0x28c>)
 800c278:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c27c:	490f      	ldr	r1, [pc, #60]	; (800c2bc <tcp_process+0x2b8>)
 800c27e:	4806      	ldr	r0, [pc, #24]	; (800c298 <tcp_process+0x294>)
 800c280:	f006 fce4 	bl	8012c4c <iprintf>
          pcb->unsent = rseg->next;
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c28c:	e01c      	b.n	800c2c8 <tcp_process+0x2c4>
 800c28e:	bf00      	nop
 800c290:	08015078 	.word	0x08015078
 800c294:	080152b0 	.word	0x080152b0
 800c298:	080150c4 	.word	0x080150c4
 800c29c:	200098f8 	.word	0x200098f8
 800c2a0:	200098f0 	.word	0x200098f0
 800c2a4:	200098ec 	.word	0x200098ec
 800c2a8:	080152cc 	.word	0x080152cc
 800c2ac:	200098f9 	.word	0x200098f9
 800c2b0:	200098b4 	.word	0x200098b4
 800c2b4:	200098dc 	.word	0x200098dc
 800c2b8:	080152ec 	.word	0x080152ec
 800c2bc:	08015304 	.word	0x08015304
        } else {
          pcb->unacked = rseg->next;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c2c8:	69f8      	ldr	r0, [r7, #28]
 800c2ca:	f7fe fc3c 	bl	800ab46 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d104      	bne.n	800c2e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2dc:	861a      	strh	r2, [r3, #48]	; 0x30
 800c2de:	e006      	b.n	800c2ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <tcp_process+0x30a>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	6910      	ldr	r0, [r2, #16]
 800c302:	2200      	movs	r2, #0
 800c304:	6879      	ldr	r1, [r7, #4]
 800c306:	4798      	blx	r3
 800c308:	4603      	mov	r3, r0
 800c30a:	76bb      	strb	r3, [r7, #26]
 800c30c:	e001      	b.n	800c312 <tcp_process+0x30e>
 800c30e:	2300      	movs	r3, #0
 800c310:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c312:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c316:	f113 0f0d 	cmn.w	r3, #13
 800c31a:	d102      	bne.n	800c322 <tcp_process+0x31e>
          return ERR_ABRT;
 800c31c:	f06f 030c 	mvn.w	r3, #12
 800c320:	e250      	b.n	800c7c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	8b5b      	ldrh	r3, [r3, #26]
 800c326:	f043 0302 	orr.w	r3, r3, #2
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c330:	e23a      	b.n	800c7a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c332:	4b98      	ldr	r3, [pc, #608]	; (800c594 <tcp_process+0x590>)
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	f003 0310 	and.w	r3, r3, #16
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8234 	beq.w	800c7a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c340:	4b95      	ldr	r3, [pc, #596]	; (800c598 <tcp_process+0x594>)
 800c342:	6819      	ldr	r1, [r3, #0]
 800c344:	4b95      	ldr	r3, [pc, #596]	; (800c59c <tcp_process+0x598>)
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	4b95      	ldr	r3, [pc, #596]	; (800c5a0 <tcp_process+0x59c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c350:	4b94      	ldr	r3, [pc, #592]	; (800c5a4 <tcp_process+0x5a0>)
 800c352:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c354:	885b      	ldrh	r3, [r3, #2]
 800c356:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c358:	4a92      	ldr	r2, [pc, #584]	; (800c5a4 <tcp_process+0x5a0>)
 800c35a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c35c:	8812      	ldrh	r2, [r2, #0]
 800c35e:	b292      	uxth	r2, r2
 800c360:	9202      	str	r2, [sp, #8]
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	4b90      	ldr	r3, [pc, #576]	; (800c5a8 <tcp_process+0x5a4>)
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	4b90      	ldr	r3, [pc, #576]	; (800c5ac <tcp_process+0x5a8>)
 800c36a:	4602      	mov	r2, r0
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f003 f8dd 	bl	800f52c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c378:	2b05      	cmp	r3, #5
 800c37a:	f200 8215 	bhi.w	800c7a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f002 fea7 	bl	800f0d8 <tcp_rexmit_rto>
      break;
 800c38a:	e20d      	b.n	800c7a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c38c:	4b81      	ldr	r3, [pc, #516]	; (800c594 <tcp_process+0x590>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	f003 0310 	and.w	r3, r3, #16
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 80a1 	beq.w	800c4dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c39a:	4b7f      	ldr	r3, [pc, #508]	; (800c598 <tcp_process+0x594>)
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	db7e      	blt.n	800c4a8 <tcp_process+0x4a4>
 800c3aa:	4b7b      	ldr	r3, [pc, #492]	; (800c598 <tcp_process+0x594>)
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dc77      	bgt.n	800c4a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d102      	bne.n	800c3cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c3c6:	23fa      	movs	r3, #250	; 0xfa
 800c3c8:	76bb      	strb	r3, [r7, #26]
 800c3ca:	e01d      	b.n	800c408 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <tcp_process+0x3e0>
 800c3d6:	4b76      	ldr	r3, [pc, #472]	; (800c5b0 <tcp_process+0x5ac>)
 800c3d8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c3dc:	4975      	ldr	r1, [pc, #468]	; (800c5b4 <tcp_process+0x5b0>)
 800c3de:	4876      	ldr	r0, [pc, #472]	; (800c5b8 <tcp_process+0x5b4>)
 800c3e0:	f006 fc34 	bl	8012c4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00a      	beq.n	800c404 <tcp_process+0x400>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6910      	ldr	r0, [r2, #16]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	4798      	blx	r3
 800c3fe:	4603      	mov	r3, r0
 800c400:	76bb      	strb	r3, [r7, #26]
 800c402:	e001      	b.n	800c408 <tcp_process+0x404>
 800c404:	23f0      	movs	r3, #240	; 0xf0
 800c406:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c408:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00a      	beq.n	800c426 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c410:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c414:	f113 0f0d 	cmn.w	r3, #13
 800c418:	d002      	beq.n	800c420 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fd fcee 	bl	8009dfc <tcp_abort>
            }
            return ERR_ABRT;
 800c420:	f06f 030c 	mvn.w	r3, #12
 800c424:	e1ce      	b.n	800c7c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fae0 	bl	800c9ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c42c:	4b63      	ldr	r3, [pc, #396]	; (800c5bc <tcp_process+0x5b8>)
 800c42e:	881b      	ldrh	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d005      	beq.n	800c440 <tcp_process+0x43c>
            recv_acked--;
 800c434:	4b61      	ldr	r3, [pc, #388]	; (800c5bc <tcp_process+0x5b8>)
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	3b01      	subs	r3, #1
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	4b5f      	ldr	r3, [pc, #380]	; (800c5bc <tcp_process+0x5b8>)
 800c43e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c444:	009a      	lsls	r2, r3, #2
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c450:	428b      	cmp	r3, r1
 800c452:	bf38      	it	cc
 800c454:	460b      	movcc	r3, r1
 800c456:	429a      	cmp	r2, r3
 800c458:	d204      	bcs.n	800c464 <tcp_process+0x460>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	b29b      	uxth	r3, r3
 800c462:	e00d      	b.n	800c480 <tcp_process+0x47c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c46e:	4293      	cmp	r3, r2
 800c470:	d904      	bls.n	800c47c <tcp_process+0x478>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	b29b      	uxth	r3, r3
 800c47a:	e001      	b.n	800c480 <tcp_process+0x47c>
 800c47c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c486:	4b4e      	ldr	r3, [pc, #312]	; (800c5c0 <tcp_process+0x5bc>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f003 0320 	and.w	r3, r3, #32
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d037      	beq.n	800c502 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8b5b      	ldrh	r3, [r3, #26]
 800c496:	f043 0302 	orr.w	r3, r3, #2
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2207      	movs	r2, #7
 800c4a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c4a6:	e02c      	b.n	800c502 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4a8:	4b3b      	ldr	r3, [pc, #236]	; (800c598 <tcp_process+0x594>)
 800c4aa:	6819      	ldr	r1, [r3, #0]
 800c4ac:	4b3b      	ldr	r3, [pc, #236]	; (800c59c <tcp_process+0x598>)
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4b3b      	ldr	r3, [pc, #236]	; (800c5a0 <tcp_process+0x59c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4b8:	4b3a      	ldr	r3, [pc, #232]	; (800c5a4 <tcp_process+0x5a0>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4bc:	885b      	ldrh	r3, [r3, #2]
 800c4be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4c0:	4a38      	ldr	r2, [pc, #224]	; (800c5a4 <tcp_process+0x5a0>)
 800c4c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4c4:	8812      	ldrh	r2, [r2, #0]
 800c4c6:	b292      	uxth	r2, r2
 800c4c8:	9202      	str	r2, [sp, #8]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	4b36      	ldr	r3, [pc, #216]	; (800c5a8 <tcp_process+0x5a4>)
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	4b36      	ldr	r3, [pc, #216]	; (800c5ac <tcp_process+0x5a8>)
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f003 f829 	bl	800f52c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c4da:	e167      	b.n	800c7ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c4dc:	4b2d      	ldr	r3, [pc, #180]	; (800c594 <tcp_process+0x590>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	f003 0302 	and.w	r3, r3, #2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 8161 	beq.w	800c7ac <tcp_process+0x7a8>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	1e5a      	subs	r2, r3, #1
 800c4f0:	4b2b      	ldr	r3, [pc, #172]	; (800c5a0 <tcp_process+0x59c>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	f040 8159 	bne.w	800c7ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f002 fe0e 	bl	800f11c <tcp_rexmit>
      break;
 800c500:	e154      	b.n	800c7ac <tcp_process+0x7a8>
 800c502:	e153      	b.n	800c7ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fa71 	bl	800c9ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c50a:	4b2d      	ldr	r3, [pc, #180]	; (800c5c0 <tcp_process+0x5bc>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 814c 	beq.w	800c7b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	8b5b      	ldrh	r3, [r3, #26]
 800c51c:	f043 0302 	orr.w	r3, r3, #2
 800c520:	b29a      	uxth	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2207      	movs	r2, #7
 800c52a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c52c:	e140      	b.n	800c7b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fa5c 	bl	800c9ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c534:	4b22      	ldr	r3, [pc, #136]	; (800c5c0 <tcp_process+0x5bc>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f003 0320 	and.w	r3, r3, #32
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d071      	beq.n	800c624 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c540:	4b14      	ldr	r3, [pc, #80]	; (800c594 <tcp_process+0x590>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	f003 0310 	and.w	r3, r3, #16
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d060      	beq.n	800c60e <tcp_process+0x60a>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c550:	4b11      	ldr	r3, [pc, #68]	; (800c598 <tcp_process+0x594>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	429a      	cmp	r2, r3
 800c556:	d15a      	bne.n	800c60e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d156      	bne.n	800c60e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	8b5b      	ldrh	r3, [r3, #26]
 800c564:	f043 0302 	orr.w	r3, r3, #2
 800c568:	b29a      	uxth	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7fe fdbc 	bl	800b0ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c574:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <tcp_process+0x5c0>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d105      	bne.n	800c58a <tcp_process+0x586>
 800c57e:	4b11      	ldr	r3, [pc, #68]	; (800c5c4 <tcp_process+0x5c0>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	4a0f      	ldr	r2, [pc, #60]	; (800c5c4 <tcp_process+0x5c0>)
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	e02e      	b.n	800c5e8 <tcp_process+0x5e4>
 800c58a:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <tcp_process+0x5c0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	e027      	b.n	800c5e2 <tcp_process+0x5de>
 800c592:	bf00      	nop
 800c594:	200098f8 	.word	0x200098f8
 800c598:	200098f0 	.word	0x200098f0
 800c59c:	200098f6 	.word	0x200098f6
 800c5a0:	200098ec 	.word	0x200098ec
 800c5a4:	200098dc 	.word	0x200098dc
 800c5a8:	20006354 	.word	0x20006354
 800c5ac:	20006358 	.word	0x20006358
 800c5b0:	08015078 	.word	0x08015078
 800c5b4:	08015318 	.word	0x08015318
 800c5b8:	080150c4 	.word	0x080150c4
 800c5bc:	200098f4 	.word	0x200098f4
 800c5c0:	200098f9 	.word	0x200098f9
 800c5c4:	200098c0 	.word	0x200098c0
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d104      	bne.n	800c5dc <tcp_process+0x5d8>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68da      	ldr	r2, [r3, #12]
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	60da      	str	r2, [r3, #12]
 800c5da:	e005      	b.n	800c5e8 <tcp_process+0x5e4>
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	617b      	str	r3, [r7, #20]
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1ef      	bne.n	800c5c8 <tcp_process+0x5c4>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	60da      	str	r2, [r3, #12]
 800c5ee:	4b77      	ldr	r3, [pc, #476]	; (800c7cc <tcp_process+0x7c8>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	220a      	movs	r2, #10
 800c5f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c5fa:	4b75      	ldr	r3, [pc, #468]	; (800c7d0 <tcp_process+0x7cc>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	60da      	str	r2, [r3, #12]
 800c602:	4a73      	ldr	r2, [pc, #460]	; (800c7d0 <tcp_process+0x7cc>)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	f003 f952 	bl	800f8b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c60c:	e0d2      	b.n	800c7b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	8b5b      	ldrh	r3, [r3, #26]
 800c612:	f043 0302 	orr.w	r3, r3, #2
 800c616:	b29a      	uxth	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2208      	movs	r2, #8
 800c620:	751a      	strb	r2, [r3, #20]
      break;
 800c622:	e0c7      	b.n	800c7b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c624:	4b6b      	ldr	r3, [pc, #428]	; (800c7d4 <tcp_process+0x7d0>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	f003 0310 	and.w	r3, r3, #16
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80c1 	beq.w	800c7b4 <tcp_process+0x7b0>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c636:	4b68      	ldr	r3, [pc, #416]	; (800c7d8 <tcp_process+0x7d4>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	f040 80ba 	bne.w	800c7b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c644:	2b00      	cmp	r3, #0
 800c646:	f040 80b5 	bne.w	800c7b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2206      	movs	r2, #6
 800c64e:	751a      	strb	r2, [r3, #20]
      break;
 800c650:	e0b0      	b.n	800c7b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f9ca 	bl	800c9ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c658:	4b60      	ldr	r3, [pc, #384]	; (800c7dc <tcp_process+0x7d8>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 0320 	and.w	r3, r3, #32
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 80a9 	beq.w	800c7b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	8b5b      	ldrh	r3, [r3, #26]
 800c66a:	f043 0302 	orr.w	r3, r3, #2
 800c66e:	b29a      	uxth	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7fe fd39 	bl	800b0ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c67a:	4b59      	ldr	r3, [pc, #356]	; (800c7e0 <tcp_process+0x7dc>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d105      	bne.n	800c690 <tcp_process+0x68c>
 800c684:	4b56      	ldr	r3, [pc, #344]	; (800c7e0 <tcp_process+0x7dc>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	4a55      	ldr	r2, [pc, #340]	; (800c7e0 <tcp_process+0x7dc>)
 800c68c:	6013      	str	r3, [r2, #0]
 800c68e:	e013      	b.n	800c6b8 <tcp_process+0x6b4>
 800c690:	4b53      	ldr	r3, [pc, #332]	; (800c7e0 <tcp_process+0x7dc>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	613b      	str	r3, [r7, #16]
 800c696:	e00c      	b.n	800c6b2 <tcp_process+0x6ae>
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d104      	bne.n	800c6ac <tcp_process+0x6a8>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	60da      	str	r2, [r3, #12]
 800c6aa:	e005      	b.n	800c6b8 <tcp_process+0x6b4>
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1ef      	bne.n	800c698 <tcp_process+0x694>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	60da      	str	r2, [r3, #12]
 800c6be:	4b43      	ldr	r3, [pc, #268]	; (800c7cc <tcp_process+0x7c8>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	220a      	movs	r2, #10
 800c6c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c6ca:	4b41      	ldr	r3, [pc, #260]	; (800c7d0 <tcp_process+0x7cc>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	60da      	str	r2, [r3, #12]
 800c6d2:	4a3f      	ldr	r2, [pc, #252]	; (800c7d0 <tcp_process+0x7cc>)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	f003 f8ea 	bl	800f8b0 <tcp_timer_needed>
      }
      break;
 800c6dc:	e06c      	b.n	800c7b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f984 	bl	800c9ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c6e4:	4b3b      	ldr	r3, [pc, #236]	; (800c7d4 <tcp_process+0x7d0>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	f003 0310 	and.w	r3, r3, #16
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d065      	beq.n	800c7bc <tcp_process+0x7b8>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6f4:	4b38      	ldr	r3, [pc, #224]	; (800c7d8 <tcp_process+0x7d4>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d15f      	bne.n	800c7bc <tcp_process+0x7b8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c700:	2b00      	cmp	r3, #0
 800c702:	d15b      	bne.n	800c7bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7fe fcf1 	bl	800b0ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c70a:	4b35      	ldr	r3, [pc, #212]	; (800c7e0 <tcp_process+0x7dc>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	429a      	cmp	r2, r3
 800c712:	d105      	bne.n	800c720 <tcp_process+0x71c>
 800c714:	4b32      	ldr	r3, [pc, #200]	; (800c7e0 <tcp_process+0x7dc>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	4a31      	ldr	r2, [pc, #196]	; (800c7e0 <tcp_process+0x7dc>)
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	e013      	b.n	800c748 <tcp_process+0x744>
 800c720:	4b2f      	ldr	r3, [pc, #188]	; (800c7e0 <tcp_process+0x7dc>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	e00c      	b.n	800c742 <tcp_process+0x73e>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d104      	bne.n	800c73c <tcp_process+0x738>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68da      	ldr	r2, [r3, #12]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	60da      	str	r2, [r3, #12]
 800c73a:	e005      	b.n	800c748 <tcp_process+0x744>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	60fb      	str	r3, [r7, #12]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1ef      	bne.n	800c728 <tcp_process+0x724>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	4b1f      	ldr	r3, [pc, #124]	; (800c7cc <tcp_process+0x7c8>)
 800c750:	2201      	movs	r2, #1
 800c752:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	220a      	movs	r2, #10
 800c758:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c75a:	4b1d      	ldr	r3, [pc, #116]	; (800c7d0 <tcp_process+0x7cc>)
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60da      	str	r2, [r3, #12]
 800c762:	4a1b      	ldr	r2, [pc, #108]	; (800c7d0 <tcp_process+0x7cc>)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	f003 f8a2 	bl	800f8b0 <tcp_timer_needed>
      }
      break;
 800c76c:	e026      	b.n	800c7bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f93c 	bl	800c9ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c774:	4b17      	ldr	r3, [pc, #92]	; (800c7d4 <tcp_process+0x7d0>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f003 0310 	and.w	r3, r3, #16
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d01f      	beq.n	800c7c0 <tcp_process+0x7bc>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c784:	4b14      	ldr	r3, [pc, #80]	; (800c7d8 <tcp_process+0x7d4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d119      	bne.n	800c7c0 <tcp_process+0x7bc>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d115      	bne.n	800c7c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c794:	4b11      	ldr	r3, [pc, #68]	; (800c7dc <tcp_process+0x7d8>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	f043 0310 	orr.w	r3, r3, #16
 800c79c:	b2da      	uxtb	r2, r3
 800c79e:	4b0f      	ldr	r3, [pc, #60]	; (800c7dc <tcp_process+0x7d8>)
 800c7a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c7a2:	e00d      	b.n	800c7c0 <tcp_process+0x7bc>
    default:
      break;
 800c7a4:	bf00      	nop
 800c7a6:	e00c      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7a8:	bf00      	nop
 800c7aa:	e00a      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7ac:	bf00      	nop
 800c7ae:	e008      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7b0:	bf00      	nop
 800c7b2:	e006      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7b4:	bf00      	nop
 800c7b6:	e004      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7b8:	bf00      	nop
 800c7ba:	e002      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7bc:	bf00      	nop
 800c7be:	e000      	b.n	800c7c2 <tcp_process+0x7be>
      break;
 800c7c0:	bf00      	nop
  }
  return ERR_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3724      	adds	r7, #36	; 0x24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd90      	pop	{r4, r7, pc}
 800c7cc:	200098c8 	.word	0x200098c8
 800c7d0:	200098c4 	.word	0x200098c4
 800c7d4:	200098f8 	.word	0x200098f8
 800c7d8:	200098f0 	.word	0x200098f0
 800c7dc:	200098f9 	.word	0x200098f9
 800c7e0:	200098c0 	.word	0x200098c0

0800c7e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d106      	bne.n	800c802 <tcp_oos_insert_segment+0x1e>
 800c7f4:	4b3b      	ldr	r3, [pc, #236]	; (800c8e4 <tcp_oos_insert_segment+0x100>)
 800c7f6:	f240 421f 	movw	r2, #1055	; 0x41f
 800c7fa:	493b      	ldr	r1, [pc, #236]	; (800c8e8 <tcp_oos_insert_segment+0x104>)
 800c7fc:	483b      	ldr	r0, [pc, #236]	; (800c8ec <tcp_oos_insert_segment+0x108>)
 800c7fe:	f006 fa25 	bl	8012c4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	899b      	ldrh	r3, [r3, #12]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fb faab 	bl	8007d66 <lwip_htons>
 800c810:	4603      	mov	r3, r0
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d028      	beq.n	800c86e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c81c:	6838      	ldr	r0, [r7, #0]
 800c81e:	f7fe f97d 	bl	800ab1c <tcp_segs_free>
    next = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	603b      	str	r3, [r7, #0]
 800c826:	e056      	b.n	800c8d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	899b      	ldrh	r3, [r3, #12]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	4618      	mov	r0, r3
 800c832:	f7fb fa98 	bl	8007d66 <lwip_htons>
 800c836:	4603      	mov	r3, r0
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00d      	beq.n	800c85e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	899b      	ldrh	r3, [r3, #12]
 800c848:	b29c      	uxth	r4, r3
 800c84a:	2001      	movs	r0, #1
 800c84c:	f7fb fa8b 	bl	8007d66 <lwip_htons>
 800c850:	4603      	mov	r3, r0
 800c852:	461a      	mov	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	4322      	orrs	r2, r4
 800c85a:	b292      	uxth	r2, r2
 800c85c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7fe f96c 	bl	800ab46 <tcp_seg_free>
    while (next &&
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00e      	beq.n	800c892 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	891b      	ldrh	r3, [r3, #8]
 800c878:	461a      	mov	r2, r3
 800c87a:	4b1d      	ldr	r3, [pc, #116]	; (800c8f0 <tcp_oos_insert_segment+0x10c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	441a      	add	r2, r3
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	8909      	ldrh	r1, [r1, #8]
 800c88a:	440b      	add	r3, r1
 800c88c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c88e:	2b00      	cmp	r3, #0
 800c890:	daca      	bge.n	800c828 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d01e      	beq.n	800c8d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	891b      	ldrh	r3, [r3, #8]
 800c89c:	461a      	mov	r2, r3
 800c89e:	4b14      	ldr	r3, [pc, #80]	; (800c8f0 <tcp_oos_insert_segment+0x10c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	441a      	add	r2, r3
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	dd12      	ble.n	800c8d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <tcp_oos_insert_segment+0x10c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	891b      	ldrh	r3, [r3, #8]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7fc fb75 	bl	8008fc0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	601a      	str	r2, [r3, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd90      	pop	{r4, r7, pc}
 800c8e4:	08015078 	.word	0x08015078
 800c8e8:	08015338 	.word	0x08015338
 800c8ec:	080150c4 	.word	0x080150c4
 800c8f0:	200098ec 	.word	0x200098ec

0800c8f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c8f4:	b5b0      	push	{r4, r5, r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c902:	e03e      	b.n	800c982 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4618      	mov	r0, r3
 800c914:	f7fc fd62 	bl	80093dc <pbuf_clen>
 800c918:	4603      	mov	r3, r0
 800c91a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c922:	8a7a      	ldrh	r2, [r7, #18]
 800c924:	429a      	cmp	r2, r3
 800c926:	d906      	bls.n	800c936 <tcp_free_acked_segments+0x42>
 800c928:	4b2a      	ldr	r3, [pc, #168]	; (800c9d4 <tcp_free_acked_segments+0xe0>)
 800c92a:	f240 4257 	movw	r2, #1111	; 0x457
 800c92e:	492a      	ldr	r1, [pc, #168]	; (800c9d8 <tcp_free_acked_segments+0xe4>)
 800c930:	482a      	ldr	r0, [pc, #168]	; (800c9dc <tcp_free_acked_segments+0xe8>)
 800c932:	f006 f98b 	bl	8012c4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c93c:	8a7b      	ldrh	r3, [r7, #18]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	b29a      	uxth	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	891a      	ldrh	r2, [r3, #8]
 800c94c:	4b24      	ldr	r3, [pc, #144]	; (800c9e0 <tcp_free_acked_segments+0xec>)
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	4413      	add	r3, r2
 800c952:	b29a      	uxth	r2, r3
 800c954:	4b22      	ldr	r3, [pc, #136]	; (800c9e0 <tcp_free_acked_segments+0xec>)
 800c956:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c958:	6978      	ldr	r0, [r7, #20]
 800c95a:	f7fe f8f4 	bl	800ab46 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00c      	beq.n	800c982 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d109      	bne.n	800c982 <tcp_free_acked_segments+0x8e>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d106      	bne.n	800c982 <tcp_free_acked_segments+0x8e>
 800c974:	4b17      	ldr	r3, [pc, #92]	; (800c9d4 <tcp_free_acked_segments+0xe0>)
 800c976:	f240 4261 	movw	r2, #1121	; 0x461
 800c97a:	491a      	ldr	r1, [pc, #104]	; (800c9e4 <tcp_free_acked_segments+0xf0>)
 800c97c:	4817      	ldr	r0, [pc, #92]	; (800c9dc <tcp_free_acked_segments+0xe8>)
 800c97e:	f006 f965 	bl	8012c4c <iprintf>
  while (seg_list != NULL &&
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d020      	beq.n	800c9ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fb f9fe 	bl	8007d90 <lwip_htonl>
 800c994:	4604      	mov	r4, r0
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	891b      	ldrh	r3, [r3, #8]
 800c99a:	461d      	mov	r5, r3
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	899b      	ldrh	r3, [r3, #12]
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fb f9de 	bl	8007d66 <lwip_htons>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <tcp_free_acked_segments+0xc6>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e000      	b.n	800c9bc <tcp_free_acked_segments+0xc8>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	442b      	add	r3, r5
 800c9be:	18e2      	adds	r2, r4, r3
 800c9c0:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <tcp_free_acked_segments+0xf4>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd9c      	ble.n	800c904 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c9d4:	08015078 	.word	0x08015078
 800c9d8:	08015360 	.word	0x08015360
 800c9dc:	080150c4 	.word	0x080150c4
 800c9e0:	200098f4 	.word	0x200098f4
 800c9e4:	08015388 	.word	0x08015388
 800c9e8:	200098f0 	.word	0x200098f0

0800c9ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c9ec:	b5b0      	push	{r4, r5, r7, lr}
 800c9ee:	b094      	sub	sp, #80	; 0x50
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <tcp_receive+0x20>
 800c9fe:	4b91      	ldr	r3, [pc, #580]	; (800cc44 <tcp_receive+0x258>)
 800ca00:	f240 427b 	movw	r2, #1147	; 0x47b
 800ca04:	4990      	ldr	r1, [pc, #576]	; (800cc48 <tcp_receive+0x25c>)
 800ca06:	4891      	ldr	r0, [pc, #580]	; (800cc4c <tcp_receive+0x260>)
 800ca08:	f006 f920 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	d806      	bhi.n	800ca22 <tcp_receive+0x36>
 800ca14:	4b8b      	ldr	r3, [pc, #556]	; (800cc44 <tcp_receive+0x258>)
 800ca16:	f240 427c 	movw	r2, #1148	; 0x47c
 800ca1a:	498d      	ldr	r1, [pc, #564]	; (800cc50 <tcp_receive+0x264>)
 800ca1c:	488b      	ldr	r0, [pc, #556]	; (800cc4c <tcp_receive+0x260>)
 800ca1e:	f006 f915 	bl	8012c4c <iprintf>

  if (flags & TCP_ACK) {
 800ca22:	4b8c      	ldr	r3, [pc, #560]	; (800cc54 <tcp_receive+0x268>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	f003 0310 	and.w	r3, r3, #16
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 8264 	beq.w	800cef8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca36:	461a      	mov	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca3c:	4413      	add	r3, r2
 800ca3e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca44:	4b84      	ldr	r3, [pc, #528]	; (800cc58 <tcp_receive+0x26c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	db1b      	blt.n	800ca86 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca52:	4b81      	ldr	r3, [pc, #516]	; (800cc58 <tcp_receive+0x26c>)
 800ca54:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d106      	bne.n	800ca68 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca5e:	4b7f      	ldr	r3, [pc, #508]	; (800cc5c <tcp_receive+0x270>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	db0e      	blt.n	800ca86 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca6c:	4b7b      	ldr	r3, [pc, #492]	; (800cc5c <tcp_receive+0x270>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d125      	bne.n	800cac0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ca74:	4b7a      	ldr	r3, [pc, #488]	; (800cc60 <tcp_receive+0x274>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	89db      	ldrh	r3, [r3, #14]
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d91c      	bls.n	800cac0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ca86:	4b76      	ldr	r3, [pc, #472]	; (800cc60 <tcp_receive+0x274>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	89db      	ldrh	r3, [r3, #14]
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d205      	bcs.n	800cab0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cab0:	4b69      	ldr	r3, [pc, #420]	; (800cc58 <tcp_receive+0x26c>)
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cab8:	4b68      	ldr	r3, [pc, #416]	; (800cc5c <tcp_receive+0x270>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cac0:	4b66      	ldr	r3, [pc, #408]	; (800cc5c <tcp_receive+0x270>)
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	2b00      	cmp	r3, #0
 800cacc:	dc58      	bgt.n	800cb80 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cace:	4b65      	ldr	r3, [pc, #404]	; (800cc64 <tcp_receive+0x278>)
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d14b      	bne.n	800cb6e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cae0:	4413      	add	r3, r2
 800cae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d142      	bne.n	800cb6e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800caee:	2b00      	cmp	r3, #0
 800caf0:	db3d      	blt.n	800cb6e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caf6:	4b59      	ldr	r3, [pc, #356]	; (800cc5c <tcp_receive+0x270>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d137      	bne.n	800cb6e <tcp_receive+0x182>
              found_dupack = 1;
 800cafe:	2301      	movs	r3, #1
 800cb00:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb08:	2bff      	cmp	r3, #255	; 0xff
 800cb0a:	d007      	beq.n	800cb1c <tcp_receive+0x130>
                ++pcb->dupacks;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb12:	3301      	adds	r3, #1
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d91b      	bls.n	800cb5e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb30:	4413      	add	r3, r2
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d30a      	bcc.n	800cb54 <tcp_receive+0x168>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb48:	4413      	add	r3, r2
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb52:	e004      	b.n	800cb5e <tcp_receive+0x172>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d902      	bls.n	800cb6e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f002 fb43 	bl	800f1f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cb6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f040 8161 	bne.w	800ce38 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb7e:	e15b      	b.n	800ce38 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb80:	4b36      	ldr	r3, [pc, #216]	; (800cc5c <tcp_receive+0x270>)
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f2c0 814e 	blt.w	800ce2e <tcp_receive+0x442>
 800cb92:	4b32      	ldr	r3, [pc, #200]	; (800cc5c <tcp_receive+0x270>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f300 8146 	bgt.w	800ce2e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8b5b      	ldrh	r3, [r3, #26]
 800cba6:	f003 0304 	and.w	r3, r3, #4
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d010      	beq.n	800cbd0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b5b      	ldrh	r3, [r3, #26]
 800cbb2:	f023 0304 	bic.w	r3, r3, #4
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cbde:	10db      	asrs	r3, r3, #3
 800cbe0:	b21b      	sxth	r3, r3
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	4413      	add	r3, r2
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	b21a      	sxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cbf8:	4b18      	ldr	r3, [pc, #96]	; (800cc5c <tcp_receive+0x270>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cc10:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <tcp_receive+0x270>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	7d1b      	ldrb	r3, [r3, #20]
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	f240 8097 	bls.w	800cd50 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d245      	bcs.n	800ccbe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	8b5b      	ldrh	r3, [r3, #26]
 800cc36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d014      	beq.n	800cc68 <tcp_receive+0x27c>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e013      	b.n	800cc6a <tcp_receive+0x27e>
 800cc42:	bf00      	nop
 800cc44:	08015078 	.word	0x08015078
 800cc48:	080153a8 	.word	0x080153a8
 800cc4c:	080150c4 	.word	0x080150c4
 800cc50:	080153c4 	.word	0x080153c4
 800cc54:	200098f8 	.word	0x200098f8
 800cc58:	200098ec 	.word	0x200098ec
 800cc5c:	200098f0 	.word	0x200098f0
 800cc60:	200098dc 	.word	0x200098dc
 800cc64:	200098f6 	.word	0x200098f6
 800cc68:	2302      	movs	r3, #2
 800cc6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cc6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc78:	fb12 f303 	smulbb	r3, r2, r3
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc80:	4293      	cmp	r3, r2
 800cc82:	bf28      	it	cs
 800cc84:	4613      	movcs	r3, r2
 800cc86:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cc90:	4413      	add	r3, r2
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d309      	bcc.n	800ccb2 <tcp_receive+0x2c6>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cca4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cca6:	4413      	add	r3, r2
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ccb0:	e04e      	b.n	800cd50 <tcp_receive+0x364>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ccbc:	e048      	b.n	800cd50 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ccc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccc6:	4413      	add	r3, r2
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d309      	bcc.n	800cce8 <tcp_receive+0x2fc>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ccda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccdc:	4413      	add	r3, r2
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cce6:	e004      	b.n	800ccf2 <tcp_receive+0x306>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d326      	bcc.n	800cd50 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd22:	4413      	add	r3, r2
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d30a      	bcc.n	800cd46 <tcp_receive+0x35a>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cd44:	e004      	b.n	800cd50 <tcp_receive+0x364>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd58:	4a98      	ldr	r2, [pc, #608]	; (800cfbc <tcp_receive+0x5d0>)
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff fdca 	bl	800c8f4 <tcp_free_acked_segments>
 800cd60:	4602      	mov	r2, r0
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd6e:	4a94      	ldr	r2, [pc, #592]	; (800cfc0 <tcp_receive+0x5d4>)
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fdbf 	bl	800c8f4 <tcp_free_acked_segments>
 800cd76:	4602      	mov	r2, r0
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d104      	bne.n	800cd8e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd8a:	861a      	strh	r2, [r3, #48]	; 0x30
 800cd8c:	e002      	b.n	800cd94 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d103      	bne.n	800cdaa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cdb0:	4b84      	ldr	r3, [pc, #528]	; (800cfc4 <tcp_receive+0x5d8>)
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	8b5b      	ldrh	r3, [r3, #26]
 800cdc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d035      	beq.n	800ce36 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d118      	bne.n	800ce04 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fa ffd2 	bl	8007d90 <lwip_htonl>
 800cdec:	4603      	mov	r3, r0
 800cdee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc20      	bgt.n	800ce36 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	8b5b      	ldrh	r3, [r3, #26]
 800cdf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ce02:	e018      	b.n	800ce36 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fa ffbd 	bl	8007d90 <lwip_htonl>
 800ce16:	4603      	mov	r3, r0
 800ce18:	1ae3      	subs	r3, r4, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dc0b      	bgt.n	800ce36 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	8b5b      	ldrh	r3, [r3, #26]
 800ce22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ce2c:	e003      	b.n	800ce36 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f002 fbce 	bl	800f5d0 <tcp_send_empty_ack>
 800ce34:	e000      	b.n	800ce38 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ce36:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d05b      	beq.n	800cef8 <tcp_receive+0x50c>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce44:	4b60      	ldr	r3, [pc, #384]	; (800cfc8 <tcp_receive+0x5dc>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	da54      	bge.n	800cef8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ce4e:	4b5f      	ldr	r3, [pc, #380]	; (800cfcc <tcp_receive+0x5e0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ce62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ce6c:	10db      	asrs	r3, r3, #3
 800ce6e:	b21b      	sxth	r3, r3
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ce86:	4413      	add	r3, r2
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	b21a      	sxth	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ce90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	da05      	bge.n	800cea4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ce98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ce9c:	425b      	negs	r3, r3
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cea4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ceae:	109b      	asrs	r3, r3, #2
 800ceb0:	b21b      	sxth	r3, r3
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cec8:	4413      	add	r3, r2
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	b21a      	sxth	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ced8:	10db      	asrs	r3, r3, #3
 800ceda:	b21b      	sxth	r3, r3
 800cedc:	b29a      	uxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	4413      	add	r3, r2
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	b21a      	sxth	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cef8:	4b35      	ldr	r3, [pc, #212]	; (800cfd0 <tcp_receive+0x5e4>)
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 84e2 	beq.w	800d8c6 <tcp_receive+0xeda>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7d1b      	ldrb	r3, [r3, #20]
 800cf06:	2b06      	cmp	r3, #6
 800cf08:	f200 84dd 	bhi.w	800d8c6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf10:	4b30      	ldr	r3, [pc, #192]	; (800cfd4 <tcp_receive+0x5e8>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	3b01      	subs	r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f2c0 808f 	blt.w	800d03c <tcp_receive+0x650>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf22:	4b2b      	ldr	r3, [pc, #172]	; (800cfd0 <tcp_receive+0x5e4>)
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	4619      	mov	r1, r3
 800cf28:	4b2a      	ldr	r3, [pc, #168]	; (800cfd4 <tcp_receive+0x5e8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	440b      	add	r3, r1
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	3301      	adds	r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f300 8082 	bgt.w	800d03c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cf38:	4b27      	ldr	r3, [pc, #156]	; (800cfd8 <tcp_receive+0x5ec>)
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf42:	4b24      	ldr	r3, [pc, #144]	; (800cfd4 <tcp_receive+0x5e8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cf4a:	4b23      	ldr	r3, [pc, #140]	; (800cfd8 <tcp_receive+0x5ec>)
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <tcp_receive+0x574>
 800cf52:	4b22      	ldr	r3, [pc, #136]	; (800cfdc <tcp_receive+0x5f0>)
 800cf54:	f240 5294 	movw	r2, #1428	; 0x594
 800cf58:	4921      	ldr	r1, [pc, #132]	; (800cfe0 <tcp_receive+0x5f4>)
 800cf5a:	4822      	ldr	r0, [pc, #136]	; (800cfe4 <tcp_receive+0x5f8>)
 800cf5c:	f005 fe76 	bl	8012c4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d906      	bls.n	800cf78 <tcp_receive+0x58c>
 800cf6a:	4b1c      	ldr	r3, [pc, #112]	; (800cfdc <tcp_receive+0x5f0>)
 800cf6c:	f240 5295 	movw	r2, #1429	; 0x595
 800cf70:	491d      	ldr	r1, [pc, #116]	; (800cfe8 <tcp_receive+0x5fc>)
 800cf72:	481c      	ldr	r0, [pc, #112]	; (800cfe4 <tcp_receive+0x5f8>)
 800cf74:	f005 fe6a 	bl	8012c4c <iprintf>
      off = (u16_t)off32;
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cf7e:	4b16      	ldr	r3, [pc, #88]	; (800cfd8 <tcp_receive+0x5ec>)
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	891b      	ldrh	r3, [r3, #8]
 800cf84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d906      	bls.n	800cf9a <tcp_receive+0x5ae>
 800cf8c:	4b13      	ldr	r3, [pc, #76]	; (800cfdc <tcp_receive+0x5f0>)
 800cf8e:	f240 5297 	movw	r2, #1431	; 0x597
 800cf92:	4916      	ldr	r1, [pc, #88]	; (800cfec <tcp_receive+0x600>)
 800cf94:	4813      	ldr	r0, [pc, #76]	; (800cfe4 <tcp_receive+0x5f8>)
 800cf96:	f005 fe59 	bl	8012c4c <iprintf>
      inseg.len -= off;
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <tcp_receive+0x5ec>)
 800cf9c:	891a      	ldrh	r2, [r3, #8]
 800cf9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <tcp_receive+0x5ec>)
 800cfa8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cfaa:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <tcp_receive+0x5ec>)
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	891a      	ldrh	r2, [r3, #8]
 800cfb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cfb8:	e02a      	b.n	800d010 <tcp_receive+0x624>
 800cfba:	bf00      	nop
 800cfbc:	080153e0 	.word	0x080153e0
 800cfc0:	080153e8 	.word	0x080153e8
 800cfc4:	200098f4 	.word	0x200098f4
 800cfc8:	200098f0 	.word	0x200098f0
 800cfcc:	200098b4 	.word	0x200098b4
 800cfd0:	200098f6 	.word	0x200098f6
 800cfd4:	200098ec 	.word	0x200098ec
 800cfd8:	200098cc 	.word	0x200098cc
 800cfdc:	08015078 	.word	0x08015078
 800cfe0:	080153f0 	.word	0x080153f0
 800cfe4:	080150c4 	.word	0x080150c4
 800cfe8:	08015400 	.word	0x08015400
 800cfec:	08015410 	.word	0x08015410
        off -= p->len;
 800cff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cff2:	895b      	ldrh	r3, [r3, #10]
 800cff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d000:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d002:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d006:	2200      	movs	r2, #0
 800d008:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d012:	895b      	ldrh	r3, [r3, #10]
 800d014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d018:	429a      	cmp	r2, r3
 800d01a:	d8e9      	bhi.n	800cff0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d01c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d020:	4619      	mov	r1, r3
 800d022:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d024:	f7fc f8cc 	bl	80091c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	4a91      	ldr	r2, [pc, #580]	; (800d274 <tcp_receive+0x888>)
 800d02e:	6013      	str	r3, [r2, #0]
 800d030:	4b91      	ldr	r3, [pc, #580]	; (800d278 <tcp_receive+0x88c>)
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	4a8f      	ldr	r2, [pc, #572]	; (800d274 <tcp_receive+0x888>)
 800d036:	6812      	ldr	r2, [r2, #0]
 800d038:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d03a:	e00d      	b.n	800d058 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d03c:	4b8d      	ldr	r3, [pc, #564]	; (800d274 <tcp_receive+0x888>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	da06      	bge.n	800d058 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	8b5b      	ldrh	r3, [r3, #26]
 800d04e:	f043 0302 	orr.w	r3, r3, #2
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d058:	4b86      	ldr	r3, [pc, #536]	; (800d274 <tcp_receive+0x888>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	f2c0 842a 	blt.w	800d8bc <tcp_receive+0xed0>
 800d068:	4b82      	ldr	r3, [pc, #520]	; (800d274 <tcp_receive+0x888>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	6879      	ldr	r1, [r7, #4]
 800d072:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d074:	440b      	add	r3, r1
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	3301      	adds	r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f300 841e 	bgt.w	800d8bc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d084:	4b7b      	ldr	r3, [pc, #492]	; (800d274 <tcp_receive+0x888>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	429a      	cmp	r2, r3
 800d08a:	f040 829a 	bne.w	800d5c2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d08e:	4b7a      	ldr	r3, [pc, #488]	; (800d278 <tcp_receive+0x88c>)
 800d090:	891c      	ldrh	r4, [r3, #8]
 800d092:	4b79      	ldr	r3, [pc, #484]	; (800d278 <tcp_receive+0x88c>)
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	899b      	ldrh	r3, [r3, #12]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fa fe63 	bl	8007d66 <lwip_htons>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	f003 0303 	and.w	r3, r3, #3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <tcp_receive+0x6c4>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <tcp_receive+0x6c6>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	4423      	add	r3, r4
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	4b71      	ldr	r3, [pc, #452]	; (800d27c <tcp_receive+0x890>)
 800d0b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0be:	4b6f      	ldr	r3, [pc, #444]	; (800d27c <tcp_receive+0x890>)
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d275      	bcs.n	800d1b2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d0c6:	4b6c      	ldr	r3, [pc, #432]	; (800d278 <tcp_receive+0x88c>)
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	899b      	ldrh	r3, [r3, #12]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fa fe49 	bl	8007d66 <lwip_htons>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	f003 0301 	and.w	r3, r3, #1
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d01f      	beq.n	800d120 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d0e0:	4b65      	ldr	r3, [pc, #404]	; (800d278 <tcp_receive+0x88c>)
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	899b      	ldrh	r3, [r3, #12]
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	b21b      	sxth	r3, r3
 800d0ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d0ee:	b21c      	sxth	r4, r3
 800d0f0:	4b61      	ldr	r3, [pc, #388]	; (800d278 <tcp_receive+0x88c>)
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	899b      	ldrh	r3, [r3, #12]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fa fe34 	bl	8007d66 <lwip_htons>
 800d0fe:	4603      	mov	r3, r0
 800d100:	b2db      	uxtb	r3, r3
 800d102:	b29b      	uxth	r3, r3
 800d104:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fa fe2b 	bl	8007d66 <lwip_htons>
 800d110:	4603      	mov	r3, r0
 800d112:	b21b      	sxth	r3, r3
 800d114:	4323      	orrs	r3, r4
 800d116:	b21a      	sxth	r2, r3
 800d118:	4b57      	ldr	r3, [pc, #348]	; (800d278 <tcp_receive+0x88c>)
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	b292      	uxth	r2, r2
 800d11e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d124:	4b54      	ldr	r3, [pc, #336]	; (800d278 <tcp_receive+0x88c>)
 800d126:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d128:	4b53      	ldr	r3, [pc, #332]	; (800d278 <tcp_receive+0x88c>)
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	899b      	ldrh	r3, [r3, #12]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	4618      	mov	r0, r3
 800d132:	f7fa fe18 	bl	8007d66 <lwip_htons>
 800d136:	4603      	mov	r3, r0
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d005      	beq.n	800d14e <tcp_receive+0x762>
            inseg.len -= 1;
 800d142:	4b4d      	ldr	r3, [pc, #308]	; (800d278 <tcp_receive+0x88c>)
 800d144:	891b      	ldrh	r3, [r3, #8]
 800d146:	3b01      	subs	r3, #1
 800d148:	b29a      	uxth	r2, r3
 800d14a:	4b4b      	ldr	r3, [pc, #300]	; (800d278 <tcp_receive+0x88c>)
 800d14c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d14e:	4b4a      	ldr	r3, [pc, #296]	; (800d278 <tcp_receive+0x88c>)
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	4a49      	ldr	r2, [pc, #292]	; (800d278 <tcp_receive+0x88c>)
 800d154:	8912      	ldrh	r2, [r2, #8]
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fb ff31 	bl	8008fc0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d15e:	4b46      	ldr	r3, [pc, #280]	; (800d278 <tcp_receive+0x88c>)
 800d160:	891c      	ldrh	r4, [r3, #8]
 800d162:	4b45      	ldr	r3, [pc, #276]	; (800d278 <tcp_receive+0x88c>)
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	899b      	ldrh	r3, [r3, #12]
 800d168:	b29b      	uxth	r3, r3
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fa fdfb 	bl	8007d66 <lwip_htons>
 800d170:	4603      	mov	r3, r0
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0303 	and.w	r3, r3, #3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <tcp_receive+0x794>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <tcp_receive+0x796>
 800d180:	2300      	movs	r3, #0
 800d182:	4423      	add	r3, r4
 800d184:	b29a      	uxth	r2, r3
 800d186:	4b3d      	ldr	r3, [pc, #244]	; (800d27c <tcp_receive+0x890>)
 800d188:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d18a:	4b3c      	ldr	r3, [pc, #240]	; (800d27c <tcp_receive+0x890>)
 800d18c:	881b      	ldrh	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	4b38      	ldr	r3, [pc, #224]	; (800d274 <tcp_receive+0x888>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	441a      	add	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d19e:	440b      	add	r3, r1
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d006      	beq.n	800d1b2 <tcp_receive+0x7c6>
 800d1a4:	4b36      	ldr	r3, [pc, #216]	; (800d280 <tcp_receive+0x894>)
 800d1a6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d1aa:	4936      	ldr	r1, [pc, #216]	; (800d284 <tcp_receive+0x898>)
 800d1ac:	4836      	ldr	r0, [pc, #216]	; (800d288 <tcp_receive+0x89c>)
 800d1ae:	f005 fd4d 	bl	8012c4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 80e7 	beq.w	800d38a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d1bc:	4b2e      	ldr	r3, [pc, #184]	; (800d278 <tcp_receive+0x88c>)
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	899b      	ldrh	r3, [r3, #12]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fa fdce 	bl	8007d66 <lwip_htons>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d010      	beq.n	800d1f8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d1d6:	e00a      	b.n	800d1ee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7fd fcac 	bl	800ab46 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1f0      	bne.n	800d1d8 <tcp_receive+0x7ec>
 800d1f6:	e0c8      	b.n	800d38a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d1fe:	e052      	b.n	800d2a6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	899b      	ldrh	r3, [r3, #12]
 800d206:	b29b      	uxth	r3, r3
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fa fdac 	bl	8007d66 <lwip_htons>
 800d20e:	4603      	mov	r3, r0
 800d210:	b2db      	uxtb	r3, r3
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d03d      	beq.n	800d296 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d21a:	4b17      	ldr	r3, [pc, #92]	; (800d278 <tcp_receive+0x88c>)
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	899b      	ldrh	r3, [r3, #12]
 800d220:	b29b      	uxth	r3, r3
 800d222:	4618      	mov	r0, r3
 800d224:	f7fa fd9f 	bl	8007d66 <lwip_htons>
 800d228:	4603      	mov	r3, r0
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d230:	2b00      	cmp	r3, #0
 800d232:	d130      	bne.n	800d296 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d234:	4b10      	ldr	r3, [pc, #64]	; (800d278 <tcp_receive+0x88c>)
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	899b      	ldrh	r3, [r3, #12]
 800d23a:	b29c      	uxth	r4, r3
 800d23c:	2001      	movs	r0, #1
 800d23e:	f7fa fd92 	bl	8007d66 <lwip_htons>
 800d242:	4603      	mov	r3, r0
 800d244:	461a      	mov	r2, r3
 800d246:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <tcp_receive+0x88c>)
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	4322      	orrs	r2, r4
 800d24c:	b292      	uxth	r2, r2
 800d24e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d250:	4b09      	ldr	r3, [pc, #36]	; (800d278 <tcp_receive+0x88c>)
 800d252:	891c      	ldrh	r4, [r3, #8]
 800d254:	4b08      	ldr	r3, [pc, #32]	; (800d278 <tcp_receive+0x88c>)
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	899b      	ldrh	r3, [r3, #12]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fa fd82 	bl	8007d66 <lwip_htons>
 800d262:	4603      	mov	r3, r0
 800d264:	b2db      	uxtb	r3, r3
 800d266:	f003 0303 	and.w	r3, r3, #3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00e      	beq.n	800d28c <tcp_receive+0x8a0>
 800d26e:	2301      	movs	r3, #1
 800d270:	e00d      	b.n	800d28e <tcp_receive+0x8a2>
 800d272:	bf00      	nop
 800d274:	200098ec 	.word	0x200098ec
 800d278:	200098cc 	.word	0x200098cc
 800d27c:	200098f6 	.word	0x200098f6
 800d280:	08015078 	.word	0x08015078
 800d284:	08015420 	.word	0x08015420
 800d288:	080150c4 	.word	0x080150c4
 800d28c:	2300      	movs	r3, #0
 800d28e:	4423      	add	r3, r4
 800d290:	b29a      	uxth	r2, r3
 800d292:	4b98      	ldr	r3, [pc, #608]	; (800d4f4 <tcp_receive+0xb08>)
 800d294:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d298:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d2a0:	6938      	ldr	r0, [r7, #16]
 800d2a2:	f7fd fc50 	bl	800ab46 <tcp_seg_free>
            while (next &&
 800d2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00e      	beq.n	800d2ca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d2ac:	4b91      	ldr	r3, [pc, #580]	; (800d4f4 <tcp_receive+0xb08>)
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4b91      	ldr	r3, [pc, #580]	; (800d4f8 <tcp_receive+0xb0c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	441a      	add	r2, r3
 800d2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d2c0:	8909      	ldrh	r1, [r1, #8]
 800d2c2:	440b      	add	r3, r1
 800d2c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	da9a      	bge.n	800d200 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d059      	beq.n	800d384 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d2d0:	4b88      	ldr	r3, [pc, #544]	; (800d4f4 <tcp_receive+0xb08>)
 800d2d2:	881b      	ldrh	r3, [r3, #0]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	4b88      	ldr	r3, [pc, #544]	; (800d4f8 <tcp_receive+0xb0c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	441a      	add	r2, r3
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	dd4d      	ble.n	800d384 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	4b81      	ldr	r3, [pc, #516]	; (800d4f8 <tcp_receive+0xb0c>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	4b80      	ldr	r3, [pc, #512]	; (800d4fc <tcp_receive+0xb10>)
 800d2fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d2fe:	4b7f      	ldr	r3, [pc, #508]	; (800d4fc <tcp_receive+0xb10>)
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	899b      	ldrh	r3, [r3, #12]
 800d304:	b29b      	uxth	r3, r3
 800d306:	4618      	mov	r0, r3
 800d308:	f7fa fd2d 	bl	8007d66 <lwip_htons>
 800d30c:	4603      	mov	r3, r0
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b00      	cmp	r3, #0
 800d316:	d005      	beq.n	800d324 <tcp_receive+0x938>
                inseg.len -= 1;
 800d318:	4b78      	ldr	r3, [pc, #480]	; (800d4fc <tcp_receive+0xb10>)
 800d31a:	891b      	ldrh	r3, [r3, #8]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	b29a      	uxth	r2, r3
 800d320:	4b76      	ldr	r3, [pc, #472]	; (800d4fc <tcp_receive+0xb10>)
 800d322:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d324:	4b75      	ldr	r3, [pc, #468]	; (800d4fc <tcp_receive+0xb10>)
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	4a74      	ldr	r2, [pc, #464]	; (800d4fc <tcp_receive+0xb10>)
 800d32a:	8912      	ldrh	r2, [r2, #8]
 800d32c:	4611      	mov	r1, r2
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fb fe46 	bl	8008fc0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d334:	4b71      	ldr	r3, [pc, #452]	; (800d4fc <tcp_receive+0xb10>)
 800d336:	891c      	ldrh	r4, [r3, #8]
 800d338:	4b70      	ldr	r3, [pc, #448]	; (800d4fc <tcp_receive+0xb10>)
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	899b      	ldrh	r3, [r3, #12]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	4618      	mov	r0, r3
 800d342:	f7fa fd10 	bl	8007d66 <lwip_htons>
 800d346:	4603      	mov	r3, r0
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	f003 0303 	and.w	r3, r3, #3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <tcp_receive+0x96a>
 800d352:	2301      	movs	r3, #1
 800d354:	e000      	b.n	800d358 <tcp_receive+0x96c>
 800d356:	2300      	movs	r3, #0
 800d358:	4423      	add	r3, r4
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	4b65      	ldr	r3, [pc, #404]	; (800d4f4 <tcp_receive+0xb08>)
 800d35e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d360:	4b64      	ldr	r3, [pc, #400]	; (800d4f4 <tcp_receive+0xb08>)
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	4b64      	ldr	r3, [pc, #400]	; (800d4f8 <tcp_receive+0xb0c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	441a      	add	r2, r3
 800d36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d006      	beq.n	800d384 <tcp_receive+0x998>
 800d376:	4b62      	ldr	r3, [pc, #392]	; (800d500 <tcp_receive+0xb14>)
 800d378:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d37c:	4961      	ldr	r1, [pc, #388]	; (800d504 <tcp_receive+0xb18>)
 800d37e:	4862      	ldr	r0, [pc, #392]	; (800d508 <tcp_receive+0xb1c>)
 800d380:	f005 fc64 	bl	8012c4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d388:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d38a:	4b5a      	ldr	r3, [pc, #360]	; (800d4f4 <tcp_receive+0xb08>)
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	4b59      	ldr	r3, [pc, #356]	; (800d4f8 <tcp_receive+0xb0c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	441a      	add	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d39e:	4b55      	ldr	r3, [pc, #340]	; (800d4f4 <tcp_receive+0xb08>)
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d206      	bcs.n	800d3b4 <tcp_receive+0x9c8>
 800d3a6:	4b56      	ldr	r3, [pc, #344]	; (800d500 <tcp_receive+0xb14>)
 800d3a8:	f240 6207 	movw	r2, #1543	; 0x607
 800d3ac:	4957      	ldr	r1, [pc, #348]	; (800d50c <tcp_receive+0xb20>)
 800d3ae:	4856      	ldr	r0, [pc, #344]	; (800d508 <tcp_receive+0xb1c>)
 800d3b0:	f005 fc4c 	bl	8012c4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3b8:	4b4e      	ldr	r3, [pc, #312]	; (800d4f4 <tcp_receive+0xb08>)
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7fc fe99 	bl	800a0fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d3ca:	4b4c      	ldr	r3, [pc, #304]	; (800d4fc <tcp_receive+0xb10>)
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	891b      	ldrh	r3, [r3, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d006      	beq.n	800d3e2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d3d4:	4b49      	ldr	r3, [pc, #292]	; (800d4fc <tcp_receive+0xb10>)
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	4a4d      	ldr	r2, [pc, #308]	; (800d510 <tcp_receive+0xb24>)
 800d3da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d3dc:	4b47      	ldr	r3, [pc, #284]	; (800d4fc <tcp_receive+0xb10>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d3e2:	4b46      	ldr	r3, [pc, #280]	; (800d4fc <tcp_receive+0xb10>)
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	899b      	ldrh	r3, [r3, #12]
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fa fcbb 	bl	8007d66 <lwip_htons>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 80b8 	beq.w	800d56e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d3fe:	4b45      	ldr	r3, [pc, #276]	; (800d514 <tcp_receive+0xb28>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f043 0320 	orr.w	r3, r3, #32
 800d406:	b2da      	uxtb	r2, r3
 800d408:	4b42      	ldr	r3, [pc, #264]	; (800d514 <tcp_receive+0xb28>)
 800d40a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d40c:	e0af      	b.n	800d56e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d412:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	4a36      	ldr	r2, [pc, #216]	; (800d4f8 <tcp_receive+0xb0c>)
 800d41e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	891b      	ldrh	r3, [r3, #8]
 800d424:	461c      	mov	r4, r3
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	899b      	ldrh	r3, [r3, #12]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fa fc99 	bl	8007d66 <lwip_htons>
 800d434:	4603      	mov	r3, r0
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f003 0303 	and.w	r3, r3, #3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <tcp_receive+0xa58>
 800d440:	2301      	movs	r3, #1
 800d442:	e000      	b.n	800d446 <tcp_receive+0xa5a>
 800d444:	2300      	movs	r3, #0
 800d446:	191a      	adds	r2, r3, r4
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44c:	441a      	add	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d456:	461c      	mov	r4, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	891b      	ldrh	r3, [r3, #8]
 800d45c:	461d      	mov	r5, r3
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	899b      	ldrh	r3, [r3, #12]
 800d464:	b29b      	uxth	r3, r3
 800d466:	4618      	mov	r0, r3
 800d468:	f7fa fc7d 	bl	8007d66 <lwip_htons>
 800d46c:	4603      	mov	r3, r0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	f003 0303 	and.w	r3, r3, #3
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <tcp_receive+0xa90>
 800d478:	2301      	movs	r3, #1
 800d47a:	e000      	b.n	800d47e <tcp_receive+0xa92>
 800d47c:	2300      	movs	r3, #0
 800d47e:	442b      	add	r3, r5
 800d480:	429c      	cmp	r4, r3
 800d482:	d206      	bcs.n	800d492 <tcp_receive+0xaa6>
 800d484:	4b1e      	ldr	r3, [pc, #120]	; (800d500 <tcp_receive+0xb14>)
 800d486:	f240 622b 	movw	r2, #1579	; 0x62b
 800d48a:	4923      	ldr	r1, [pc, #140]	; (800d518 <tcp_receive+0xb2c>)
 800d48c:	481e      	ldr	r0, [pc, #120]	; (800d508 <tcp_receive+0xb1c>)
 800d48e:	f005 fbdd 	bl	8012c4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	461c      	mov	r4, r3
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	899b      	ldrh	r3, [r3, #12]
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fa fc60 	bl	8007d66 <lwip_htons>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f003 0303 	and.w	r3, r3, #3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <tcp_receive+0xaca>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e000      	b.n	800d4b8 <tcp_receive+0xacc>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	1919      	adds	r1, r3, r4
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4be:	b28b      	uxth	r3, r1
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7fc fe17 	bl	800a0fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	891b      	ldrh	r3, [r3, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d028      	beq.n	800d52a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d4d8:	4b0d      	ldr	r3, [pc, #52]	; (800d510 <tcp_receive+0xb24>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d01d      	beq.n	800d51c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d4e0:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <tcp_receive+0xb24>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fb ffb0 	bl	8009450 <pbuf_cat>
 800d4f0:	e018      	b.n	800d524 <tcp_receive+0xb38>
 800d4f2:	bf00      	nop
 800d4f4:	200098f6 	.word	0x200098f6
 800d4f8:	200098ec 	.word	0x200098ec
 800d4fc:	200098cc 	.word	0x200098cc
 800d500:	08015078 	.word	0x08015078
 800d504:	08015458 	.word	0x08015458
 800d508:	080150c4 	.word	0x080150c4
 800d50c:	08015494 	.word	0x08015494
 800d510:	200098fc 	.word	0x200098fc
 800d514:	200098f9 	.word	0x200098f9
 800d518:	080154b4 	.word	0x080154b4
            } else {
              recv_data = cseg->p;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	4a70      	ldr	r2, [pc, #448]	; (800d6e4 <tcp_receive+0xcf8>)
 800d522:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	2200      	movs	r2, #0
 800d528:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	899b      	ldrh	r3, [r3, #12]
 800d530:	b29b      	uxth	r3, r3
 800d532:	4618      	mov	r0, r3
 800d534:	f7fa fc17 	bl	8007d66 <lwip_htons>
 800d538:	4603      	mov	r3, r0
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	f003 0301 	and.w	r3, r3, #1
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00d      	beq.n	800d560 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d544:	4b68      	ldr	r3, [pc, #416]	; (800d6e8 <tcp_receive+0xcfc>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	f043 0320 	orr.w	r3, r3, #32
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	4b66      	ldr	r3, [pc, #408]	; (800d6e8 <tcp_receive+0xcfc>)
 800d550:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7d1b      	ldrb	r3, [r3, #20]
 800d556:	2b04      	cmp	r3, #4
 800d558:	d102      	bne.n	800d560 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2207      	movs	r2, #7
 800d55e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d568:	68b8      	ldr	r0, [r7, #8]
 800d56a:	f7fd faec 	bl	800ab46 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d572:	2b00      	cmp	r3, #0
 800d574:	d008      	beq.n	800d588 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d582:	429a      	cmp	r2, r3
 800d584:	f43f af43 	beq.w	800d40e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	8b5b      	ldrh	r3, [r3, #26]
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00e      	beq.n	800d5b2 <tcp_receive+0xbc6>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	8b5b      	ldrh	r3, [r3, #26]
 800d598:	f023 0301 	bic.w	r3, r3, #1
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	835a      	strh	r2, [r3, #26]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	8b5b      	ldrh	r3, [r3, #26]
 800d5a6:	f043 0302 	orr.w	r3, r3, #2
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d5b0:	e188      	b.n	800d8c4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8b5b      	ldrh	r3, [r3, #26]
 800d5b6:	f043 0301 	orr.w	r3, r3, #1
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d5c0:	e180      	b.n	800d8c4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d5ca:	4848      	ldr	r0, [pc, #288]	; (800d6ec <tcp_receive+0xd00>)
 800d5cc:	f7fd faf2 	bl	800abb4 <tcp_seg_copy>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	675a      	str	r2, [r3, #116]	; 0x74
 800d5d6:	e16d      	b.n	800d8b4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5e2:	e157      	b.n	800d894 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	4b41      	ldr	r3, [pc, #260]	; (800d6f0 <tcp_receive+0xd04>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d11d      	bne.n	800d62e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d5f2:	4b3e      	ldr	r3, [pc, #248]	; (800d6ec <tcp_receive+0xd00>)
 800d5f4:	891a      	ldrh	r2, [r3, #8]
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	891b      	ldrh	r3, [r3, #8]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	f240 814f 	bls.w	800d89e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d600:	483a      	ldr	r0, [pc, #232]	; (800d6ec <tcp_receive+0xd00>)
 800d602:	f7fd fad7 	bl	800abb4 <tcp_seg_copy>
 800d606:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 8149 	beq.w	800d8a2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <tcp_receive+0xc32>
                    prev->next = cseg;
 800d616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d618:	697a      	ldr	r2, [r7, #20]
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	e002      	b.n	800d624 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d626:	6978      	ldr	r0, [r7, #20]
 800d628:	f7ff f8dc 	bl	800c7e4 <tcp_oos_insert_segment>
                }
                break;
 800d62c:	e139      	b.n	800d8a2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d630:	2b00      	cmp	r3, #0
 800d632:	d117      	bne.n	800d664 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d634:	4b2e      	ldr	r3, [pc, #184]	; (800d6f0 <tcp_receive+0xd04>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	2b00      	cmp	r3, #0
 800d642:	da57      	bge.n	800d6f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d644:	4829      	ldr	r0, [pc, #164]	; (800d6ec <tcp_receive+0xd00>)
 800d646:	f7fd fab5 	bl	800abb4 <tcp_seg_copy>
 800d64a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8129 	beq.w	800d8a6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	69ba      	ldr	r2, [r7, #24]
 800d658:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d65a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d65c:	69b8      	ldr	r0, [r7, #24]
 800d65e:	f7ff f8c1 	bl	800c7e4 <tcp_oos_insert_segment>
                  }
                  break;
 800d662:	e120      	b.n	800d8a6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d664:	4b22      	ldr	r3, [pc, #136]	; (800d6f0 <tcp_receive+0xd04>)
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	3b01      	subs	r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	db3e      	blt.n	800d6f4 <tcp_receive+0xd08>
 800d676:	4b1e      	ldr	r3, [pc, #120]	; (800d6f0 <tcp_receive+0xd04>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	3301      	adds	r3, #1
 800d684:	2b00      	cmp	r3, #0
 800d686:	dc35      	bgt.n	800d6f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d688:	4818      	ldr	r0, [pc, #96]	; (800d6ec <tcp_receive+0xd00>)
 800d68a:	f7fd fa93 	bl	800abb4 <tcp_seg_copy>
 800d68e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 8109 	beq.w	800d8aa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6a0:	8912      	ldrh	r2, [r2, #8]
 800d6a2:	441a      	add	r2, r3
 800d6a4:	4b12      	ldr	r3, [pc, #72]	; (800d6f0 <tcp_receive+0xd04>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	dd12      	ble.n	800d6d4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d6ae:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <tcp_receive+0xd04>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	1ad3      	subs	r3, r2, r3
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f7fb fc76 	bl	8008fc0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d6:	69fa      	ldr	r2, [r7, #28]
 800d6d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d6da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6dc:	69f8      	ldr	r0, [r7, #28]
 800d6de:	f7ff f881 	bl	800c7e4 <tcp_oos_insert_segment>
                  }
                  break;
 800d6e2:	e0e2      	b.n	800d8aa <tcp_receive+0xebe>
 800d6e4:	200098fc 	.word	0x200098fc
 800d6e8:	200098f9 	.word	0x200098f9
 800d6ec:	200098cc 	.word	0x200098cc
 800d6f0:	200098ec 	.word	0x200098ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f040 80c6 	bne.w	800d88e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d702:	4b80      	ldr	r3, [pc, #512]	; (800d904 <tcp_receive+0xf18>)
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f340 80bd 	ble.w	800d88e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	899b      	ldrh	r3, [r3, #12]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fa fb22 	bl	8007d66 <lwip_htons>
 800d722:	4603      	mov	r3, r0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f040 80bf 	bne.w	800d8ae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d730:	4875      	ldr	r0, [pc, #468]	; (800d908 <tcp_receive+0xf1c>)
 800d732:	f7fd fa3f 	bl	800abb4 <tcp_seg_copy>
 800d736:	4602      	mov	r2, r0
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 80b6 	beq.w	800d8b2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d74e:	8912      	ldrh	r2, [r2, #8]
 800d750:	441a      	add	r2, r3
 800d752:	4b6c      	ldr	r3, [pc, #432]	; (800d904 <tcp_receive+0xf18>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	2b00      	cmp	r3, #0
 800d75a:	dd12      	ble.n	800d782 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d75c:	4b69      	ldr	r3, [pc, #420]	; (800d904 <tcp_receive+0xf18>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	b29a      	uxth	r2, r3
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d770:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7fb fc1f 	bl	8008fc0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d782:	4b62      	ldr	r3, [pc, #392]	; (800d90c <tcp_receive+0xf20>)
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	4b5e      	ldr	r3, [pc, #376]	; (800d904 <tcp_receive+0xf18>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	441a      	add	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d796:	440b      	add	r3, r1
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	f340 8089 	ble.w	800d8b2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	899b      	ldrh	r3, [r3, #12]
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fa fadb 	bl	8007d66 <lwip_htons>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d022      	beq.n	800d802 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	899b      	ldrh	r3, [r3, #12]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	b21b      	sxth	r3, r3
 800d7c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d7cc:	b21c      	sxth	r4, r3
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	899b      	ldrh	r3, [r3, #12]
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fa fac4 	bl	8007d66 <lwip_htons>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fa fabb 	bl	8007d66 <lwip_htons>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	b21b      	sxth	r3, r3
 800d7f4:	4323      	orrs	r3, r4
 800d7f6:	b21a      	sxth	r2, r3
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	b292      	uxth	r2, r2
 800d800:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d806:	b29a      	uxth	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d80c:	4413      	add	r3, r2
 800d80e:	b299      	uxth	r1, r3
 800d810:	4b3c      	ldr	r3, [pc, #240]	; (800d904 <tcp_receive+0xf18>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	b29a      	uxth	r2, r3
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	1a8a      	subs	r2, r1, r2
 800d81c:	b292      	uxth	r2, r2
 800d81e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	891b      	ldrh	r3, [r3, #8]
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f7fb fbc6 	bl	8008fc0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	891c      	ldrh	r4, [r3, #8]
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	899b      	ldrh	r3, [r3, #12]
 800d842:	b29b      	uxth	r3, r3
 800d844:	4618      	mov	r0, r3
 800d846:	f7fa fa8e 	bl	8007d66 <lwip_htons>
 800d84a:	4603      	mov	r3, r0
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 0303 	and.w	r3, r3, #3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <tcp_receive+0xe6e>
 800d856:	2301      	movs	r3, #1
 800d858:	e000      	b.n	800d85c <tcp_receive+0xe70>
 800d85a:	2300      	movs	r3, #0
 800d85c:	4423      	add	r3, r4
 800d85e:	b29a      	uxth	r2, r3
 800d860:	4b2a      	ldr	r3, [pc, #168]	; (800d90c <tcp_receive+0xf20>)
 800d862:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d864:	4b29      	ldr	r3, [pc, #164]	; (800d90c <tcp_receive+0xf20>)
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	4b26      	ldr	r3, [pc, #152]	; (800d904 <tcp_receive+0xf18>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	441a      	add	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	6879      	ldr	r1, [r7, #4]
 800d876:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d878:	440b      	add	r3, r1
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d019      	beq.n	800d8b2 <tcp_receive+0xec6>
 800d87e:	4b24      	ldr	r3, [pc, #144]	; (800d910 <tcp_receive+0xf24>)
 800d880:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d884:	4923      	ldr	r1, [pc, #140]	; (800d914 <tcp_receive+0xf28>)
 800d886:	4824      	ldr	r0, [pc, #144]	; (800d918 <tcp_receive+0xf2c>)
 800d888:	f005 f9e0 	bl	8012c4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d88c:	e011      	b.n	800d8b2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	63bb      	str	r3, [r7, #56]	; 0x38
 800d894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d896:	2b00      	cmp	r3, #0
 800d898:	f47f aea4 	bne.w	800d5e4 <tcp_receive+0xbf8>
 800d89c:	e00a      	b.n	800d8b4 <tcp_receive+0xec8>
                break;
 800d89e:	bf00      	nop
 800d8a0:	e008      	b.n	800d8b4 <tcp_receive+0xec8>
                break;
 800d8a2:	bf00      	nop
 800d8a4:	e006      	b.n	800d8b4 <tcp_receive+0xec8>
                  break;
 800d8a6:	bf00      	nop
 800d8a8:	e004      	b.n	800d8b4 <tcp_receive+0xec8>
                  break;
 800d8aa:	bf00      	nop
 800d8ac:	e002      	b.n	800d8b4 <tcp_receive+0xec8>
                  break;
 800d8ae:	bf00      	nop
 800d8b0:	e000      	b.n	800d8b4 <tcp_receive+0xec8>
                break;
 800d8b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f001 fe8b 	bl	800f5d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d8ba:	e003      	b.n	800d8c4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f001 fe87 	bl	800f5d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d8c2:	e01a      	b.n	800d8fa <tcp_receive+0xf0e>
 800d8c4:	e019      	b.n	800d8fa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d8c6:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <tcp_receive+0xf18>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	db0a      	blt.n	800d8ea <tcp_receive+0xefe>
 800d8d4:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <tcp_receive+0xf18>)
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d8e0:	440b      	add	r3, r1
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	dd07      	ble.n	800d8fa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	8b5b      	ldrh	r3, [r3, #26]
 800d8ee:	f043 0302 	orr.w	r3, r3, #2
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d8f8:	e7ff      	b.n	800d8fa <tcp_receive+0xf0e>
 800d8fa:	bf00      	nop
 800d8fc:	3750      	adds	r7, #80	; 0x50
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bdb0      	pop	{r4, r5, r7, pc}
 800d902:	bf00      	nop
 800d904:	200098ec 	.word	0x200098ec
 800d908:	200098cc 	.word	0x200098cc
 800d90c:	200098f6 	.word	0x200098f6
 800d910:	08015078 	.word	0x08015078
 800d914:	08015420 	.word	0x08015420
 800d918:	080150c4 	.word	0x080150c4

0800d91c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d922:	4b15      	ldr	r3, [pc, #84]	; (800d978 <tcp_get_next_optbyte+0x5c>)
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	1c5a      	adds	r2, r3, #1
 800d928:	b291      	uxth	r1, r2
 800d92a:	4a13      	ldr	r2, [pc, #76]	; (800d978 <tcp_get_next_optbyte+0x5c>)
 800d92c:	8011      	strh	r1, [r2, #0]
 800d92e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d930:	4b12      	ldr	r3, [pc, #72]	; (800d97c <tcp_get_next_optbyte+0x60>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d004      	beq.n	800d942 <tcp_get_next_optbyte+0x26>
 800d938:	4b11      	ldr	r3, [pc, #68]	; (800d980 <tcp_get_next_optbyte+0x64>)
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	88fa      	ldrh	r2, [r7, #6]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d208      	bcs.n	800d954 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d942:	4b10      	ldr	r3, [pc, #64]	; (800d984 <tcp_get_next_optbyte+0x68>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	3314      	adds	r3, #20
 800d948:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d94a:	88fb      	ldrh	r3, [r7, #6]
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	4413      	add	r3, r2
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	e00b      	b.n	800d96c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	b2da      	uxtb	r2, r3
 800d958:	4b09      	ldr	r3, [pc, #36]	; (800d980 <tcp_get_next_optbyte+0x64>)
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d962:	4b06      	ldr	r3, [pc, #24]	; (800d97c <tcp_get_next_optbyte+0x60>)
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	797b      	ldrb	r3, [r7, #5]
 800d968:	4413      	add	r3, r2
 800d96a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr
 800d978:	200098e8 	.word	0x200098e8
 800d97c:	200098e4 	.word	0x200098e4
 800d980:	200098e2 	.word	0x200098e2
 800d984:	200098dc 	.word	0x200098dc

0800d988 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d106      	bne.n	800d9a4 <tcp_parseopt+0x1c>
 800d996:	4b32      	ldr	r3, [pc, #200]	; (800da60 <tcp_parseopt+0xd8>)
 800d998:	f240 727d 	movw	r2, #1917	; 0x77d
 800d99c:	4931      	ldr	r1, [pc, #196]	; (800da64 <tcp_parseopt+0xdc>)
 800d99e:	4832      	ldr	r0, [pc, #200]	; (800da68 <tcp_parseopt+0xe0>)
 800d9a0:	f005 f954 	bl	8012c4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d9a4:	4b31      	ldr	r3, [pc, #196]	; (800da6c <tcp_parseopt+0xe4>)
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d055      	beq.n	800da58 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d9ac:	4b30      	ldr	r3, [pc, #192]	; (800da70 <tcp_parseopt+0xe8>)
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	801a      	strh	r2, [r3, #0]
 800d9b2:	e045      	b.n	800da40 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d9b4:	f7ff ffb2 	bl	800d91c <tcp_get_next_optbyte>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d9bc:	7bfb      	ldrb	r3, [r7, #15]
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d006      	beq.n	800d9d0 <tcp_parseopt+0x48>
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	dc2b      	bgt.n	800da1e <tcp_parseopt+0x96>
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d041      	beq.n	800da4e <tcp_parseopt+0xc6>
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d127      	bne.n	800da1e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d9ce:	e037      	b.n	800da40 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d9d0:	f7ff ffa4 	bl	800d91c <tcp_get_next_optbyte>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d13b      	bne.n	800da52 <tcp_parseopt+0xca>
 800d9da:	4b25      	ldr	r3, [pc, #148]	; (800da70 <tcp_parseopt+0xe8>)
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	4a22      	ldr	r2, [pc, #136]	; (800da6c <tcp_parseopt+0xe4>)
 800d9e2:	8812      	ldrh	r2, [r2, #0]
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	da34      	bge.n	800da52 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d9e8:	f7ff ff98 	bl	800d91c <tcp_get_next_optbyte>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	021b      	lsls	r3, r3, #8
 800d9f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d9f4:	f7ff ff92 	bl	800d91c <tcp_get_next_optbyte>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	89bb      	ldrh	r3, [r7, #12]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800da02:	89bb      	ldrh	r3, [r7, #12]
 800da04:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800da08:	d804      	bhi.n	800da14 <tcp_parseopt+0x8c>
 800da0a:	89bb      	ldrh	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <tcp_parseopt+0x8c>
 800da10:	89ba      	ldrh	r2, [r7, #12]
 800da12:	e001      	b.n	800da18 <tcp_parseopt+0x90>
 800da14:	f44f 7206 	mov.w	r2, #536	; 0x218
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800da1c:	e010      	b.n	800da40 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800da1e:	f7ff ff7d 	bl	800d91c <tcp_get_next_optbyte>
 800da22:	4603      	mov	r3, r0
 800da24:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800da26:	7afb      	ldrb	r3, [r7, #11]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d914      	bls.n	800da56 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800da2c:	7afb      	ldrb	r3, [r7, #11]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	4b0f      	ldr	r3, [pc, #60]	; (800da70 <tcp_parseopt+0xe8>)
 800da32:	881b      	ldrh	r3, [r3, #0]
 800da34:	4413      	add	r3, r2
 800da36:	b29b      	uxth	r3, r3
 800da38:	3b02      	subs	r3, #2
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <tcp_parseopt+0xe8>)
 800da3e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800da40:	4b0b      	ldr	r3, [pc, #44]	; (800da70 <tcp_parseopt+0xe8>)
 800da42:	881a      	ldrh	r2, [r3, #0]
 800da44:	4b09      	ldr	r3, [pc, #36]	; (800da6c <tcp_parseopt+0xe4>)
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d3b3      	bcc.n	800d9b4 <tcp_parseopt+0x2c>
 800da4c:	e004      	b.n	800da58 <tcp_parseopt+0xd0>
          return;
 800da4e:	bf00      	nop
 800da50:	e002      	b.n	800da58 <tcp_parseopt+0xd0>
            return;
 800da52:	bf00      	nop
 800da54:	e000      	b.n	800da58 <tcp_parseopt+0xd0>
            return;
 800da56:	bf00      	nop
      }
    }
  }
}
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	08015078 	.word	0x08015078
 800da64:	080154dc 	.word	0x080154dc
 800da68:	080150c4 	.word	0x080150c4
 800da6c:	200098e0 	.word	0x200098e0
 800da70:	200098e8 	.word	0x200098e8

0800da74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800da74:	b480      	push	{r7}
 800da76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800da78:	4b05      	ldr	r3, [pc, #20]	; (800da90 <tcp_trigger_input_pcb_close+0x1c>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	f043 0310 	orr.w	r3, r3, #16
 800da80:	b2da      	uxtb	r2, r3
 800da82:	4b03      	ldr	r3, [pc, #12]	; (800da90 <tcp_trigger_input_pcb_close+0x1c>)
 800da84:	701a      	strb	r2, [r3, #0]
}
 800da86:	bf00      	nop
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	200098f9 	.word	0x200098f9

0800da94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <tcp_route+0x28>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	7a1b      	ldrb	r3, [r3, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d006      	beq.n	800dabc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	7a1b      	ldrb	r3, [r3, #8]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fb f8aa 	bl	8008c0c <netif_get_by_index>
 800dab8:	4603      	mov	r3, r0
 800daba:	e003      	b.n	800dac4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f003 fe8f 	bl	80117e0 <ip4_route>
 800dac2:	4603      	mov	r3, r0
  }
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dacc:	b590      	push	{r4, r7, lr}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	4613      	mov	r3, r2
 800dada:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d105      	bne.n	800daee <tcp_create_segment+0x22>
 800dae2:	4b44      	ldr	r3, [pc, #272]	; (800dbf4 <tcp_create_segment+0x128>)
 800dae4:	22a3      	movs	r2, #163	; 0xa3
 800dae6:	4944      	ldr	r1, [pc, #272]	; (800dbf8 <tcp_create_segment+0x12c>)
 800dae8:	4844      	ldr	r0, [pc, #272]	; (800dbfc <tcp_create_segment+0x130>)
 800daea:	f005 f8af 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d105      	bne.n	800db00 <tcp_create_segment+0x34>
 800daf4:	4b3f      	ldr	r3, [pc, #252]	; (800dbf4 <tcp_create_segment+0x128>)
 800daf6:	22a4      	movs	r2, #164	; 0xa4
 800daf8:	4941      	ldr	r1, [pc, #260]	; (800dc00 <tcp_create_segment+0x134>)
 800dafa:	4840      	ldr	r0, [pc, #256]	; (800dbfc <tcp_create_segment+0x130>)
 800dafc:	f005 f8a6 	bl	8012c4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	b2db      	uxtb	r3, r3
 800db08:	f003 0304 	and.w	r3, r3, #4
 800db0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800db0e:	2003      	movs	r0, #3
 800db10:	f7fa fd7e 	bl	8008610 <memp_malloc>
 800db14:	6138      	str	r0, [r7, #16]
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d104      	bne.n	800db26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800db1c:	68b8      	ldr	r0, [r7, #8]
 800db1e:	f7fb fbd5 	bl	80092cc <pbuf_free>
    return NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	e061      	b.n	800dbea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800db2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	891a      	ldrh	r2, [r3, #8]
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	b29b      	uxth	r3, r3
 800db42:	429a      	cmp	r2, r3
 800db44:	d205      	bcs.n	800db52 <tcp_create_segment+0x86>
 800db46:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <tcp_create_segment+0x128>)
 800db48:	22b0      	movs	r2, #176	; 0xb0
 800db4a:	492e      	ldr	r1, [pc, #184]	; (800dc04 <tcp_create_segment+0x138>)
 800db4c:	482b      	ldr	r0, [pc, #172]	; (800dbfc <tcp_create_segment+0x130>)
 800db4e:	f005 f87d 	bl	8012c4c <iprintf>
  seg->len = p->tot_len - optlen;
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	891a      	ldrh	r2, [r3, #8]
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800db62:	2114      	movs	r1, #20
 800db64:	68b8      	ldr	r0, [r7, #8]
 800db66:	f7fb fb1b 	bl	80091a0 <pbuf_add_header>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800db70:	6938      	ldr	r0, [r7, #16]
 800db72:	f7fc ffe8 	bl	800ab46 <tcp_seg_free>
    return NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	e037      	b.n	800dbea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	8ada      	ldrh	r2, [r3, #22]
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	68dc      	ldr	r4, [r3, #12]
 800db8c:	4610      	mov	r0, r2
 800db8e:	f7fa f8ea 	bl	8007d66 <lwip_htons>
 800db92:	4603      	mov	r3, r0
 800db94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	8b1a      	ldrh	r2, [r3, #24]
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	68dc      	ldr	r4, [r3, #12]
 800db9e:	4610      	mov	r0, r2
 800dba0:	f7fa f8e1 	bl	8007d66 <lwip_htons>
 800dba4:	4603      	mov	r3, r0
 800dba6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	68dc      	ldr	r4, [r3, #12]
 800dbac:	6838      	ldr	r0, [r7, #0]
 800dbae:	f7fa f8ef 	bl	8007d90 <lwip_htonl>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	089b      	lsrs	r3, r3, #2
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	3305      	adds	r3, #5
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	031b      	lsls	r3, r3, #12
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	79fb      	ldrb	r3, [r7, #7]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	68dc      	ldr	r4, [r3, #12]
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	f7fa f8c7 	bl	8007d66 <lwip_htons>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	749a      	strb	r2, [r3, #18]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	74da      	strb	r2, [r3, #19]
  return seg;
 800dbe8:	693b      	ldr	r3, [r7, #16]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	371c      	adds	r7, #28
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd90      	pop	{r4, r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	080154f8 	.word	0x080154f8
 800dbf8:	0801552c 	.word	0x0801552c
 800dbfc:	0801554c 	.word	0x0801554c
 800dc00:	08015574 	.word	0x08015574
 800dc04:	08015598 	.word	0x08015598

0800dc08 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	607b      	str	r3, [r7, #4]
 800dc10:	4603      	mov	r3, r0
 800dc12:	73fb      	strb	r3, [r7, #15]
 800dc14:	460b      	mov	r3, r1
 800dc16:	81bb      	strh	r3, [r7, #12]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800dc1c:	89bb      	ldrh	r3, [r7, #12]
 800dc1e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d105      	bne.n	800dc32 <tcp_pbuf_prealloc+0x2a>
 800dc26:	4b30      	ldr	r3, [pc, #192]	; (800dce8 <tcp_pbuf_prealloc+0xe0>)
 800dc28:	22e8      	movs	r2, #232	; 0xe8
 800dc2a:	4930      	ldr	r1, [pc, #192]	; (800dcec <tcp_pbuf_prealloc+0xe4>)
 800dc2c:	4830      	ldr	r0, [pc, #192]	; (800dcf0 <tcp_pbuf_prealloc+0xe8>)
 800dc2e:	f005 f80d 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d105      	bne.n	800dc44 <tcp_pbuf_prealloc+0x3c>
 800dc38:	4b2b      	ldr	r3, [pc, #172]	; (800dce8 <tcp_pbuf_prealloc+0xe0>)
 800dc3a:	22e9      	movs	r2, #233	; 0xe9
 800dc3c:	492d      	ldr	r1, [pc, #180]	; (800dcf4 <tcp_pbuf_prealloc+0xec>)
 800dc3e:	482c      	ldr	r0, [pc, #176]	; (800dcf0 <tcp_pbuf_prealloc+0xe8>)
 800dc40:	f005 f804 	bl	8012c4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800dc44:	89ba      	ldrh	r2, [r7, #12]
 800dc46:	897b      	ldrh	r3, [r7, #10]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d221      	bcs.n	800dc90 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dc4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc50:	f003 0302 	and.w	r3, r3, #2
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d111      	bne.n	800dc7c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800dc58:	6a3b      	ldr	r3, [r7, #32]
 800dc5a:	8b5b      	ldrh	r3, [r3, #26]
 800dc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d115      	bne.n	800dc90 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800dc64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d007      	beq.n	800dc7c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800dc6c:	6a3b      	ldr	r3, [r7, #32]
 800dc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d103      	bne.n	800dc7c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d009      	beq.n	800dc90 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800dc7c:	89bb      	ldrh	r3, [r7, #12]
 800dc7e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800dc82:	f023 0203 	bic.w	r2, r3, #3
 800dc86:	897b      	ldrh	r3, [r7, #10]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bf28      	it	cs
 800dc8c:	4613      	movcs	r3, r2
 800dc8e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800dc90:	8af9      	ldrh	r1, [r7, #22]
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fb f833 	bl	8008d04 <pbuf_alloc>
 800dc9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e019      	b.n	800dcde <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d006      	beq.n	800dcc0 <tcp_pbuf_prealloc+0xb8>
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	; (800dce8 <tcp_pbuf_prealloc+0xe0>)
 800dcb4:	f240 120b 	movw	r2, #267	; 0x10b
 800dcb8:	490f      	ldr	r1, [pc, #60]	; (800dcf8 <tcp_pbuf_prealloc+0xf0>)
 800dcba:	480d      	ldr	r0, [pc, #52]	; (800dcf0 <tcp_pbuf_prealloc+0xe8>)
 800dcbc:	f004 ffc6 	bl	8012c4c <iprintf>
  *oversize = p->len - length;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	895a      	ldrh	r2, [r3, #10]
 800dcc4:	89bb      	ldrh	r3, [r7, #12]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	89ba      	ldrh	r2, [r7, #12]
 800dcd2:	811a      	strh	r2, [r3, #8]
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	891a      	ldrh	r2, [r3, #8]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	815a      	strh	r2, [r3, #10]
  return p;
 800dcdc:	693b      	ldr	r3, [r7, #16]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	080154f8 	.word	0x080154f8
 800dcec:	080155b0 	.word	0x080155b0
 800dcf0:	0801554c 	.word	0x0801554c
 800dcf4:	080155d4 	.word	0x080155d4
 800dcf8:	080155f4 	.word	0x080155f4

0800dcfc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <tcp_write_checks+0x20>
 800dd0e:	4b33      	ldr	r3, [pc, #204]	; (800dddc <tcp_write_checks+0xe0>)
 800dd10:	f240 1233 	movw	r2, #307	; 0x133
 800dd14:	4932      	ldr	r1, [pc, #200]	; (800dde0 <tcp_write_checks+0xe4>)
 800dd16:	4833      	ldr	r0, [pc, #204]	; (800dde4 <tcp_write_checks+0xe8>)
 800dd18:	f004 ff98 	bl	8012c4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	7d1b      	ldrb	r3, [r3, #20]
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	d00e      	beq.n	800dd42 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800dd28:	2b07      	cmp	r3, #7
 800dd2a:	d00a      	beq.n	800dd42 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d006      	beq.n	800dd42 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d002      	beq.n	800dd42 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800dd3c:	f06f 030a 	mvn.w	r3, #10
 800dd40:	e048      	b.n	800ddd4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800dd42:	887b      	ldrh	r3, [r7, #2]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <tcp_write_checks+0x50>
    return ERR_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e043      	b.n	800ddd4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd52:	887a      	ldrh	r2, [r7, #2]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d909      	bls.n	800dd6c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	8b5b      	ldrh	r3, [r3, #26]
 800dd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800dd66:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6a:	e033      	b.n	800ddd4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd72:	2b08      	cmp	r3, #8
 800dd74:	d909      	bls.n	800dd8a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	8b5b      	ldrh	r3, [r3, #26]
 800dd7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800dd84:	f04f 33ff 	mov.w	r3, #4294967295
 800dd88:	e024      	b.n	800ddd4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00f      	beq.n	800ddb4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d11a      	bne.n	800ddd2 <tcp_write_checks+0xd6>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d116      	bne.n	800ddd2 <tcp_write_checks+0xd6>
 800dda4:	4b0d      	ldr	r3, [pc, #52]	; (800dddc <tcp_write_checks+0xe0>)
 800dda6:	f240 1255 	movw	r2, #341	; 0x155
 800ddaa:	490f      	ldr	r1, [pc, #60]	; (800dde8 <tcp_write_checks+0xec>)
 800ddac:	480d      	ldr	r0, [pc, #52]	; (800dde4 <tcp_write_checks+0xe8>)
 800ddae:	f004 ff4d 	bl	8012c4c <iprintf>
 800ddb2:	e00e      	b.n	800ddd2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d103      	bne.n	800ddc4 <tcp_write_checks+0xc8>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d006      	beq.n	800ddd2 <tcp_write_checks+0xd6>
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <tcp_write_checks+0xe0>)
 800ddc6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ddca:	4908      	ldr	r1, [pc, #32]	; (800ddec <tcp_write_checks+0xf0>)
 800ddcc:	4805      	ldr	r0, [pc, #20]	; (800dde4 <tcp_write_checks+0xe8>)
 800ddce:	f004 ff3d 	bl	8012c4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	080154f8 	.word	0x080154f8
 800dde0:	08015608 	.word	0x08015608
 800dde4:	0801554c 	.word	0x0801554c
 800dde8:	08015628 	.word	0x08015628
 800ddec:	08015664 	.word	0x08015664

0800ddf0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b09b      	sub	sp, #108	; 0x6c
 800ddf4:	af04      	add	r7, sp, #16
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	460b      	mov	r3, r1
 800de00:	80fb      	strh	r3, [r7, #6]
 800de02:	4613      	mov	r3, r2
 800de04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800de06:	2300      	movs	r3, #0
 800de08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	653b      	str	r3, [r7, #80]	; 0x50
 800de0e:	2300      	movs	r3, #0
 800de10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de12:	2300      	movs	r3, #0
 800de14:	64bb      	str	r3, [r7, #72]	; 0x48
 800de16:	2300      	movs	r3, #0
 800de18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800de1a:	2300      	movs	r3, #0
 800de1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800de20:	2300      	movs	r3, #0
 800de22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d109      	bne.n	800de4c <tcp_write+0x5c>
 800de38:	4ba4      	ldr	r3, [pc, #656]	; (800e0cc <tcp_write+0x2dc>)
 800de3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800de3e:	49a4      	ldr	r1, [pc, #656]	; (800e0d0 <tcp_write+0x2e0>)
 800de40:	48a4      	ldr	r0, [pc, #656]	; (800e0d4 <tcp_write+0x2e4>)
 800de42:	f004 ff03 	bl	8012c4c <iprintf>
 800de46:	f06f 030f 	mvn.w	r3, #15
 800de4a:	e32a      	b.n	800e4a2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de52:	085b      	lsrs	r3, r3, #1
 800de54:	b29a      	uxth	r2, r3
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de5a:	4293      	cmp	r3, r2
 800de5c:	bf28      	it	cs
 800de5e:	4613      	movcs	r3, r2
 800de60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800de62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de64:	2b00      	cmp	r3, #0
 800de66:	d102      	bne.n	800de6e <tcp_write+0x7e>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de6c:	e000      	b.n	800de70 <tcp_write+0x80>
 800de6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de70:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d109      	bne.n	800de8c <tcp_write+0x9c>
 800de78:	4b94      	ldr	r3, [pc, #592]	; (800e0cc <tcp_write+0x2dc>)
 800de7a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800de7e:	4996      	ldr	r1, [pc, #600]	; (800e0d8 <tcp_write+0x2e8>)
 800de80:	4894      	ldr	r0, [pc, #592]	; (800e0d4 <tcp_write+0x2e4>)
 800de82:	f004 fee3 	bl	8012c4c <iprintf>
 800de86:	f06f 030f 	mvn.w	r3, #15
 800de8a:	e30a      	b.n	800e4a2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	4619      	mov	r1, r3
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f7ff ff33 	bl	800dcfc <tcp_write_checks>
 800de96:	4603      	mov	r3, r0
 800de98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800de9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <tcp_write+0xba>
    return err;
 800dea4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dea8:	e2fb      	b.n	800e4a2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800deb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800deb4:	2300      	movs	r3, #0
 800deb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f000 80f6 	beq.w	800e0b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec8:	653b      	str	r3, [r7, #80]	; 0x50
 800deca:	e002      	b.n	800ded2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800decc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ded2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1f8      	bne.n	800decc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800deda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dedc:	7a9b      	ldrb	r3, [r3, #10]
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	f003 0304 	and.w	r3, r3, #4
 800dee6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dee8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800deea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deec:	891b      	ldrh	r3, [r3, #8]
 800deee:	4619      	mov	r1, r3
 800def0:	8c3b      	ldrh	r3, [r7, #32]
 800def2:	440b      	add	r3, r1
 800def4:	429a      	cmp	r2, r3
 800def6:	da06      	bge.n	800df06 <tcp_write+0x116>
 800def8:	4b74      	ldr	r3, [pc, #464]	; (800e0cc <tcp_write+0x2dc>)
 800defa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800defe:	4977      	ldr	r1, [pc, #476]	; (800e0dc <tcp_write+0x2ec>)
 800df00:	4874      	ldr	r0, [pc, #464]	; (800e0d4 <tcp_write+0x2e4>)
 800df02:	f004 fea3 	bl	8012c4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800df06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df08:	891a      	ldrh	r2, [r3, #8]
 800df0a:	8c3b      	ldrh	r3, [r7, #32]
 800df0c:	4413      	add	r3, r2
 800df0e:	b29b      	uxth	r3, r3
 800df10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df1c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800df1e:	8a7b      	ldrh	r3, [r7, #18]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d026      	beq.n	800df72 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800df24:	8a7b      	ldrh	r3, [r7, #18]
 800df26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800df28:	429a      	cmp	r2, r3
 800df2a:	d206      	bcs.n	800df3a <tcp_write+0x14a>
 800df2c:	4b67      	ldr	r3, [pc, #412]	; (800e0cc <tcp_write+0x2dc>)
 800df2e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800df32:	496b      	ldr	r1, [pc, #428]	; (800e0e0 <tcp_write+0x2f0>)
 800df34:	4867      	ldr	r0, [pc, #412]	; (800e0d4 <tcp_write+0x2e4>)
 800df36:	f004 fe89 	bl	8012c4c <iprintf>
      seg = last_unsent;
 800df3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800df3e:	8a7b      	ldrh	r3, [r7, #18]
 800df40:	88fa      	ldrh	r2, [r7, #6]
 800df42:	4293      	cmp	r3, r2
 800df44:	bf28      	it	cs
 800df46:	4613      	movcs	r3, r2
 800df48:	b29b      	uxth	r3, r3
 800df4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800df4c:	4293      	cmp	r3, r2
 800df4e:	bf28      	it	cs
 800df50:	4613      	movcs	r3, r2
 800df52:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800df54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df5a:	4413      	add	r3, r2
 800df5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800df60:	8a7a      	ldrh	r2, [r7, #18]
 800df62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	b29b      	uxth	r3, r3
 800df68:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800df6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800df6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800df72:	8a7b      	ldrh	r3, [r7, #18]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00b      	beq.n	800df90 <tcp_write+0x1a0>
 800df78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df7c:	88fb      	ldrh	r3, [r7, #6]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d006      	beq.n	800df90 <tcp_write+0x1a0>
 800df82:	4b52      	ldr	r3, [pc, #328]	; (800e0cc <tcp_write+0x2dc>)
 800df84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df88:	4956      	ldr	r1, [pc, #344]	; (800e0e4 <tcp_write+0x2f4>)
 800df8a:	4852      	ldr	r0, [pc, #328]	; (800e0d4 <tcp_write+0x2e4>)
 800df8c:	f004 fe5e 	bl	8012c4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800df90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df94:	88fb      	ldrh	r3, [r7, #6]
 800df96:	429a      	cmp	r2, r3
 800df98:	f080 8167 	bcs.w	800e26a <tcp_write+0x47a>
 800df9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 8163 	beq.w	800e26a <tcp_write+0x47a>
 800dfa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfa6:	891b      	ldrh	r3, [r3, #8]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 815e 	beq.w	800e26a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dfae:	88fa      	ldrh	r2, [r7, #6]
 800dfb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfb4:	1ad2      	subs	r2, r2, r3
 800dfb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	bfa8      	it	ge
 800dfbc:	4613      	movge	r3, r2
 800dfbe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800dfc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfc2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dfc4:	797b      	ldrb	r3, [r7, #5]
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d027      	beq.n	800e01e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dfce:	f107 0012 	add.w	r0, r7, #18
 800dfd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dfd4:	8bf9      	ldrh	r1, [r7, #30]
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	9302      	str	r3, [sp, #8]
 800dfda:	797b      	ldrb	r3, [r7, #5]
 800dfdc:	9301      	str	r3, [sp, #4]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f7ff fe0f 	bl	800dc08 <tcp_pbuf_prealloc>
 800dfea:	6578      	str	r0, [r7, #84]	; 0x54
 800dfec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 8225 	beq.w	800e43e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dff6:	6858      	ldr	r0, [r3, #4]
 800dff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	4413      	add	r3, r2
 800e000:	8bfa      	ldrh	r2, [r7, #30]
 800e002:	4619      	mov	r1, r3
 800e004:	f004 fe0c 	bl	8012c20 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e008:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e00a:	f7fb f9e7 	bl	80093dc <pbuf_clen>
 800e00e:	4603      	mov	r3, r0
 800e010:	461a      	mov	r2, r3
 800e012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e016:	4413      	add	r3, r2
 800e018:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e01c:	e041      	b.n	800e0a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	637b      	str	r3, [r7, #52]	; 0x34
 800e024:	e002      	b.n	800e02c <tcp_write+0x23c>
 800e026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	637b      	str	r3, [r7, #52]	; 0x34
 800e02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1f8      	bne.n	800e026 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e036:	7b1b      	ldrb	r3, [r3, #12]
 800e038:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d115      	bne.n	800e06c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e046:	8952      	ldrh	r2, [r2, #10]
 800e048:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d10d      	bne.n	800e06c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e054:	2b00      	cmp	r3, #0
 800e056:	d006      	beq.n	800e066 <tcp_write+0x276>
 800e058:	4b1c      	ldr	r3, [pc, #112]	; (800e0cc <tcp_write+0x2dc>)
 800e05a:	f240 2231 	movw	r2, #561	; 0x231
 800e05e:	4922      	ldr	r1, [pc, #136]	; (800e0e8 <tcp_write+0x2f8>)
 800e060:	481c      	ldr	r0, [pc, #112]	; (800e0d4 <tcp_write+0x2e4>)
 800e062:	f004 fdf3 	bl	8012c4c <iprintf>
          extendlen = seglen;
 800e066:	8bfb      	ldrh	r3, [r7, #30]
 800e068:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e06a:	e01a      	b.n	800e0a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e06c:	8bfb      	ldrh	r3, [r7, #30]
 800e06e:	2201      	movs	r2, #1
 800e070:	4619      	mov	r1, r3
 800e072:	2000      	movs	r0, #0
 800e074:	f7fa fe46 	bl	8008d04 <pbuf_alloc>
 800e078:	6578      	str	r0, [r7, #84]	; 0x54
 800e07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f000 81e0 	beq.w	800e442 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e082:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e086:	68ba      	ldr	r2, [r7, #8]
 800e088:	441a      	add	r2, r3
 800e08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e08c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e08e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e090:	f7fb f9a4 	bl	80093dc <pbuf_clen>
 800e094:	4603      	mov	r3, r0
 800e096:	461a      	mov	r2, r3
 800e098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e09c:	4413      	add	r3, r2
 800e09e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e0a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0a6:	8bfb      	ldrh	r3, [r7, #30]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e0ae:	e0dc      	b.n	800e26a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f000 80d7 	beq.w	800e26a <tcp_write+0x47a>
 800e0bc:	4b03      	ldr	r3, [pc, #12]	; (800e0cc <tcp_write+0x2dc>)
 800e0be:	f240 224a 	movw	r2, #586	; 0x24a
 800e0c2:	490a      	ldr	r1, [pc, #40]	; (800e0ec <tcp_write+0x2fc>)
 800e0c4:	4803      	ldr	r0, [pc, #12]	; (800e0d4 <tcp_write+0x2e4>)
 800e0c6:	f004 fdc1 	bl	8012c4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e0ca:	e0ce      	b.n	800e26a <tcp_write+0x47a>
 800e0cc:	080154f8 	.word	0x080154f8
 800e0d0:	08015698 	.word	0x08015698
 800e0d4:	0801554c 	.word	0x0801554c
 800e0d8:	080156b0 	.word	0x080156b0
 800e0dc:	080156e4 	.word	0x080156e4
 800e0e0:	080156fc 	.word	0x080156fc
 800e0e4:	0801571c 	.word	0x0801571c
 800e0e8:	0801573c 	.word	0x0801573c
 800e0ec:	08015768 	.word	0x08015768
    struct pbuf *p;
    u16_t left = len - pos;
 800e0f0:	88fa      	ldrh	r2, [r7, #6]
 800e0f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e0fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e106:	8b7a      	ldrh	r2, [r7, #26]
 800e108:	8bbb      	ldrh	r3, [r7, #28]
 800e10a:	4293      	cmp	r3, r2
 800e10c:	bf28      	it	cs
 800e10e:	4613      	movcs	r3, r2
 800e110:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e112:	797b      	ldrb	r3, [r7, #5]
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d036      	beq.n	800e18a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e11c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e120:	b29a      	uxth	r2, r3
 800e122:	8b3b      	ldrh	r3, [r7, #24]
 800e124:	4413      	add	r3, r2
 800e126:	b299      	uxth	r1, r3
 800e128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	bf0c      	ite	eq
 800e12e:	2301      	moveq	r3, #1
 800e130:	2300      	movne	r3, #0
 800e132:	b2db      	uxtb	r3, r3
 800e134:	f107 0012 	add.w	r0, r7, #18
 800e138:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e13a:	9302      	str	r3, [sp, #8]
 800e13c:	797b      	ldrb	r3, [r7, #5]
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	4603      	mov	r3, r0
 800e146:	2036      	movs	r0, #54	; 0x36
 800e148:	f7ff fd5e 	bl	800dc08 <tcp_pbuf_prealloc>
 800e14c:	6338      	str	r0, [r7, #48]	; 0x30
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 8178 	beq.w	800e446 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	895b      	ldrh	r3, [r3, #10]
 800e15a:	8b3a      	ldrh	r2, [r7, #24]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d906      	bls.n	800e16e <tcp_write+0x37e>
 800e160:	4b8c      	ldr	r3, [pc, #560]	; (800e394 <tcp_write+0x5a4>)
 800e162:	f240 2266 	movw	r2, #614	; 0x266
 800e166:	498c      	ldr	r1, [pc, #560]	; (800e398 <tcp_write+0x5a8>)
 800e168:	488c      	ldr	r0, [pc, #560]	; (800e39c <tcp_write+0x5ac>)
 800e16a:	f004 fd6f 	bl	8012c4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e170:	685a      	ldr	r2, [r3, #4]
 800e172:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e176:	18d0      	adds	r0, r2, r3
 800e178:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	4413      	add	r3, r2
 800e180:	8b3a      	ldrh	r2, [r7, #24]
 800e182:	4619      	mov	r1, r3
 800e184:	f004 fd4c 	bl	8012c20 <memcpy>
 800e188:	e02f      	b.n	800e1ea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e18a:	8a7b      	ldrh	r3, [r7, #18]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <tcp_write+0x3ae>
 800e190:	4b80      	ldr	r3, [pc, #512]	; (800e394 <tcp_write+0x5a4>)
 800e192:	f240 2271 	movw	r2, #625	; 0x271
 800e196:	4982      	ldr	r1, [pc, #520]	; (800e3a0 <tcp_write+0x5b0>)
 800e198:	4880      	ldr	r0, [pc, #512]	; (800e39c <tcp_write+0x5ac>)
 800e19a:	f004 fd57 	bl	8012c4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e19e:	8b3b      	ldrh	r3, [r7, #24]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	2036      	movs	r0, #54	; 0x36
 800e1a6:	f7fa fdad 	bl	8008d04 <pbuf_alloc>
 800e1aa:	6178      	str	r0, [r7, #20]
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 814b 	beq.w	800e44a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e1b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	441a      	add	r2, r3
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e1c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	2036      	movs	r0, #54	; 0x36
 800e1ce:	f7fa fd99 	bl	8008d04 <pbuf_alloc>
 800e1d2:	6338      	str	r0, [r7, #48]	; 0x30
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d103      	bne.n	800e1e2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e1da:	6978      	ldr	r0, [r7, #20]
 800e1dc:	f7fb f876 	bl	80092cc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e1e0:	e136      	b.n	800e450 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e1e2:	6979      	ldr	r1, [r7, #20]
 800e1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1e6:	f7fb f933 	bl	8009450 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e1ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1ec:	f7fb f8f6 	bl	80093dc <pbuf_clen>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e1f8:	4413      	add	r3, r2
 800e1fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e1fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e202:	2b09      	cmp	r3, #9
 800e204:	d903      	bls.n	800e20e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e208:	f7fb f860 	bl	80092cc <pbuf_free>
      goto memerr;
 800e20c:	e120      	b.n	800e450 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e216:	441a      	add	r2, r3
 800e218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	4613      	mov	r3, r2
 800e220:	2200      	movs	r2, #0
 800e222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	f7ff fc51 	bl	800dacc <tcp_create_segment>
 800e22a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 810d 	beq.w	800e44e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e236:	2b00      	cmp	r3, #0
 800e238:	d102      	bne.n	800e240 <tcp_write+0x450>
      queue = seg;
 800e23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e23c:	647b      	str	r3, [r7, #68]	; 0x44
 800e23e:	e00c      	b.n	800e25a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e242:	2b00      	cmp	r3, #0
 800e244:	d106      	bne.n	800e254 <tcp_write+0x464>
 800e246:	4b53      	ldr	r3, [pc, #332]	; (800e394 <tcp_write+0x5a4>)
 800e248:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e24c:	4955      	ldr	r1, [pc, #340]	; (800e3a4 <tcp_write+0x5b4>)
 800e24e:	4853      	ldr	r0, [pc, #332]	; (800e39c <tcp_write+0x5ac>)
 800e250:	f004 fcfc 	bl	8012c4c <iprintf>
      prev_seg->next = seg;
 800e254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e258:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e25c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e25e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e262:	8b3b      	ldrh	r3, [r7, #24]
 800e264:	4413      	add	r3, r2
 800e266:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e26a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e26e:	88fb      	ldrh	r3, [r7, #6]
 800e270:	429a      	cmp	r2, r3
 800e272:	f4ff af3d 	bcc.w	800e0f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e276:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d02c      	beq.n	800e2d6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e282:	e01e      	b.n	800e2c2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	891a      	ldrh	r2, [r3, #8]
 800e288:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e28a:	4413      	add	r3, r2
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d110      	bne.n	800e2bc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a0:	8952      	ldrh	r2, [r2, #10]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e2a6:	68b9      	ldr	r1, [r7, #8]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f004 fcb9 	bl	8012c20 <memcpy>
        p->len += oversize_used;
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	895a      	ldrh	r2, [r3, #10]
 800e2b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e2b4:	4413      	add	r3, r2
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1dd      	bne.n	800e284 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800e2c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ca:	891a      	ldrh	r2, [r3, #8]
 800e2cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e2ce:	4413      	add	r3, r2
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e2d6:	8a7a      	ldrh	r2, [r7, #18]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d018      	beq.n	800e316 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d106      	bne.n	800e2f8 <tcp_write+0x508>
 800e2ea:	4b2a      	ldr	r3, [pc, #168]	; (800e394 <tcp_write+0x5a4>)
 800e2ec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e2f0:	492d      	ldr	r1, [pc, #180]	; (800e3a8 <tcp_write+0x5b8>)
 800e2f2:	482a      	ldr	r0, [pc, #168]	; (800e39c <tcp_write+0x5ac>)
 800e2f4:	f004 fcaa 	bl	8012c4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fb f8a6 	bl	8009450 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e306:	891a      	ldrh	r2, [r3, #8]
 800e308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e30a:	891b      	ldrh	r3, [r3, #8]
 800e30c:	4413      	add	r3, r2
 800e30e:	b29a      	uxth	r2, r3
 800e310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e312:	811a      	strh	r2, [r3, #8]
 800e314:	e037      	b.n	800e386 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800e316:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d034      	beq.n	800e386 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <tcp_write+0x53a>
 800e322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <tcp_write+0x548>
 800e32a:	4b1a      	ldr	r3, [pc, #104]	; (800e394 <tcp_write+0x5a4>)
 800e32c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e330:	491e      	ldr	r1, [pc, #120]	; (800e3ac <tcp_write+0x5bc>)
 800e332:	481a      	ldr	r0, [pc, #104]	; (800e39c <tcp_write+0x5ac>)
 800e334:	f004 fc8a 	bl	8012c4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e33e:	e009      	b.n	800e354 <tcp_write+0x564>
      p->tot_len += extendlen;
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	891a      	ldrh	r2, [r3, #8]
 800e344:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e346:	4413      	add	r3, r2
 800e348:	b29a      	uxth	r2, r3
 800e34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1f1      	bne.n	800e340 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	891a      	ldrh	r2, [r3, #8]
 800e360:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e362:	4413      	add	r3, r2
 800e364:	b29a      	uxth	r2, r3
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	895a      	ldrh	r2, [r3, #10]
 800e36e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e370:	4413      	add	r3, r2
 800e372:	b29a      	uxth	r2, r3
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e37a:	891a      	ldrh	r2, [r3, #8]
 800e37c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e37e:	4413      	add	r3, r2
 800e380:	b29a      	uxth	r2, r3
 800e382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e384:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d111      	bne.n	800e3b0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e390:	66da      	str	r2, [r3, #108]	; 0x6c
 800e392:	e010      	b.n	800e3b6 <tcp_write+0x5c6>
 800e394:	080154f8 	.word	0x080154f8
 800e398:	08015798 	.word	0x08015798
 800e39c:	0801554c 	.word	0x0801554c
 800e3a0:	080157d8 	.word	0x080157d8
 800e3a4:	080157e8 	.word	0x080157e8
 800e3a8:	080157fc 	.word	0x080157fc
 800e3ac:	08015834 	.word	0x08015834
  } else {
    last_unsent->next = queue;
 800e3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3ba:	88fb      	ldrh	r3, [r7, #6]
 800e3bc:	441a      	add	r2, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e3c8:	88fb      	ldrh	r3, [r7, #6]
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e3da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00e      	beq.n	800e406 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10a      	bne.n	800e406 <tcp_write+0x616>
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <tcp_write+0x616>
 800e3f8:	4b2c      	ldr	r3, [pc, #176]	; (800e4ac <tcp_write+0x6bc>)
 800e3fa:	f240 3212 	movw	r2, #786	; 0x312
 800e3fe:	492c      	ldr	r1, [pc, #176]	; (800e4b0 <tcp_write+0x6c0>)
 800e400:	482c      	ldr	r0, [pc, #176]	; (800e4b4 <tcp_write+0x6c4>)
 800e402:	f004 fc23 	bl	8012c4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d016      	beq.n	800e43a <tcp_write+0x64a>
 800e40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d012      	beq.n	800e43a <tcp_write+0x64a>
 800e414:	797b      	ldrb	r3, [r7, #5]
 800e416:	f003 0302 	and.w	r3, r3, #2
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10d      	bne.n	800e43a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	899b      	ldrh	r3, [r3, #12]
 800e424:	b29c      	uxth	r4, r3
 800e426:	2008      	movs	r0, #8
 800e428:	f7f9 fc9d 	bl	8007d66 <lwip_htons>
 800e42c:	4603      	mov	r3, r0
 800e42e:	461a      	mov	r2, r3
 800e430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	4322      	orrs	r2, r4
 800e436:	b292      	uxth	r2, r2
 800e438:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	e031      	b.n	800e4a2 <tcp_write+0x6b2>
          goto memerr;
 800e43e:	bf00      	nop
 800e440:	e006      	b.n	800e450 <tcp_write+0x660>
            goto memerr;
 800e442:	bf00      	nop
 800e444:	e004      	b.n	800e450 <tcp_write+0x660>
        goto memerr;
 800e446:	bf00      	nop
 800e448:	e002      	b.n	800e450 <tcp_write+0x660>
        goto memerr;
 800e44a:	bf00      	nop
 800e44c:	e000      	b.n	800e450 <tcp_write+0x660>
      goto memerr;
 800e44e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	8b5b      	ldrh	r3, [r3, #26]
 800e454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e458:	b29a      	uxth	r2, r3
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e45e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800e464:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e466:	f7fa ff31 	bl	80092cc <pbuf_free>
  }
  if (queue != NULL) {
 800e46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <tcp_write+0x686>
    tcp_segs_free(queue);
 800e470:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e472:	f7fc fb53 	bl	800ab1c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00e      	beq.n	800e49e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10a      	bne.n	800e49e <tcp_write+0x6ae>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d106      	bne.n	800e49e <tcp_write+0x6ae>
 800e490:	4b06      	ldr	r3, [pc, #24]	; (800e4ac <tcp_write+0x6bc>)
 800e492:	f240 3227 	movw	r2, #807	; 0x327
 800e496:	4906      	ldr	r1, [pc, #24]	; (800e4b0 <tcp_write+0x6c0>)
 800e498:	4806      	ldr	r0, [pc, #24]	; (800e4b4 <tcp_write+0x6c4>)
 800e49a:	f004 fbd7 	bl	8012c4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e49e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	375c      	adds	r7, #92	; 0x5c
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd90      	pop	{r4, r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	080154f8 	.word	0x080154f8
 800e4b0:	0801586c 	.word	0x0801586c
 800e4b4:	0801554c 	.word	0x0801554c

0800e4b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e4b8:	b590      	push	{r4, r7, lr}
 800e4ba:	b08b      	sub	sp, #44	; 0x2c
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	61fb      	str	r3, [r7, #28]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <tcp_split_unsent_seg+0x2c>
 800e4d6:	4b95      	ldr	r3, [pc, #596]	; (800e72c <tcp_split_unsent_seg+0x274>)
 800e4d8:	f240 324b 	movw	r2, #843	; 0x34b
 800e4dc:	4994      	ldr	r1, [pc, #592]	; (800e730 <tcp_split_unsent_seg+0x278>)
 800e4de:	4895      	ldr	r0, [pc, #596]	; (800e734 <tcp_split_unsent_seg+0x27c>)
 800e4e0:	f004 fbb4 	bl	8012c4c <iprintf>

  useg = pcb->unsent;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d102      	bne.n	800e4f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f4:	e116      	b.n	800e724 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e4f6:	887b      	ldrh	r3, [r7, #2]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d109      	bne.n	800e510 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e4fc:	4b8b      	ldr	r3, [pc, #556]	; (800e72c <tcp_split_unsent_seg+0x274>)
 800e4fe:	f240 3253 	movw	r2, #851	; 0x353
 800e502:	498d      	ldr	r1, [pc, #564]	; (800e738 <tcp_split_unsent_seg+0x280>)
 800e504:	488b      	ldr	r0, [pc, #556]	; (800e734 <tcp_split_unsent_seg+0x27c>)
 800e506:	f004 fba1 	bl	8012c4c <iprintf>
    return ERR_VAL;
 800e50a:	f06f 0305 	mvn.w	r3, #5
 800e50e:	e109      	b.n	800e724 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	891b      	ldrh	r3, [r3, #8]
 800e514:	887a      	ldrh	r2, [r7, #2]
 800e516:	429a      	cmp	r2, r3
 800e518:	d301      	bcc.n	800e51e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e102      	b.n	800e724 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e522:	887a      	ldrh	r2, [r7, #2]
 800e524:	429a      	cmp	r2, r3
 800e526:	d906      	bls.n	800e536 <tcp_split_unsent_seg+0x7e>
 800e528:	4b80      	ldr	r3, [pc, #512]	; (800e72c <tcp_split_unsent_seg+0x274>)
 800e52a:	f240 325b 	movw	r2, #859	; 0x35b
 800e52e:	4983      	ldr	r1, [pc, #524]	; (800e73c <tcp_split_unsent_seg+0x284>)
 800e530:	4880      	ldr	r0, [pc, #512]	; (800e734 <tcp_split_unsent_seg+0x27c>)
 800e532:	f004 fb8b 	bl	8012c4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	891b      	ldrh	r3, [r3, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <tcp_split_unsent_seg+0x94>
 800e53e:	4b7b      	ldr	r3, [pc, #492]	; (800e72c <tcp_split_unsent_seg+0x274>)
 800e540:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e544:	497e      	ldr	r1, [pc, #504]	; (800e740 <tcp_split_unsent_seg+0x288>)
 800e546:	487b      	ldr	r0, [pc, #492]	; (800e734 <tcp_split_unsent_seg+0x27c>)
 800e548:	f004 fb80 	bl	8012c4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	7a9b      	ldrb	r3, [r3, #10]
 800e550:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	b2db      	uxtb	r3, r3
 800e558:	f003 0304 	and.w	r3, r3, #4
 800e55c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	891a      	ldrh	r2, [r3, #8]
 800e562:	887b      	ldrh	r3, [r7, #2]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	89bb      	ldrh	r3, [r7, #12]
 800e56e:	4413      	add	r3, r2
 800e570:	b29b      	uxth	r3, r3
 800e572:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e576:	4619      	mov	r1, r3
 800e578:	2036      	movs	r0, #54	; 0x36
 800e57a:	f7fa fbc3 	bl	8008d04 <pbuf_alloc>
 800e57e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 80b7 	beq.w	800e6f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	891a      	ldrh	r2, [r3, #8]
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	891b      	ldrh	r3, [r3, #8]
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	b29a      	uxth	r2, r3
 800e596:	887b      	ldrh	r3, [r7, #2]
 800e598:	4413      	add	r3, r2
 800e59a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	6858      	ldr	r0, [r3, #4]
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	685a      	ldr	r2, [r3, #4]
 800e5a4:	7bbb      	ldrb	r3, [r7, #14]
 800e5a6:	18d1      	adds	r1, r2, r3
 800e5a8:	897b      	ldrh	r3, [r7, #10]
 800e5aa:	89ba      	ldrh	r2, [r7, #12]
 800e5ac:	f7fb f888 	bl	80096c0 <pbuf_copy_partial>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	89bb      	ldrh	r3, [r7, #12]
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	f040 809f 	bne.w	800e6fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	899b      	ldrh	r3, [r3, #12]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7f9 fbce 	bl	8007d66 <lwip_htons>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e5d8:	7efb      	ldrb	r3, [r7, #27]
 800e5da:	f003 0308 	and.w	r3, r3, #8
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d007      	beq.n	800e5f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e5e2:	7efb      	ldrb	r3, [r7, #27]
 800e5e4:	f023 0308 	bic.w	r3, r3, #8
 800e5e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e5ea:	7ebb      	ldrb	r3, [r7, #26]
 800e5ec:	f043 0308 	orr.w	r3, r3, #8
 800e5f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e5f2:	7efb      	ldrb	r3, [r7, #27]
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d007      	beq.n	800e60c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e5fc:	7efb      	ldrb	r3, [r7, #27]
 800e5fe:	f023 0301 	bic.w	r3, r3, #1
 800e602:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e604:	7ebb      	ldrb	r3, [r7, #26]
 800e606:	f043 0301 	orr.w	r3, r3, #1
 800e60a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	4618      	mov	r0, r3
 800e614:	f7f9 fbbc 	bl	8007d90 <lwip_htonl>
 800e618:	4602      	mov	r2, r0
 800e61a:	887b      	ldrh	r3, [r7, #2]
 800e61c:	18d1      	adds	r1, r2, r3
 800e61e:	7eba      	ldrb	r2, [r7, #26]
 800e620:	7bfb      	ldrb	r3, [r7, #15]
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	460b      	mov	r3, r1
 800e626:	6939      	ldr	r1, [r7, #16]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff fa4f 	bl	800dacc <tcp_create_segment>
 800e62e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d063      	beq.n	800e6fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fa fece 	bl	80093dc <pbuf_clen>
 800e640:	4603      	mov	r3, r0
 800e642:	461a      	mov	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e64a:	1a9b      	subs	r3, r3, r2
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	6858      	ldr	r0, [r3, #4]
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	891a      	ldrh	r2, [r3, #8]
 800e65e:	89bb      	ldrh	r3, [r7, #12]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	b29b      	uxth	r3, r3
 800e664:	4619      	mov	r1, r3
 800e666:	f7fa fcab 	bl	8008fc0 <pbuf_realloc>
  useg->len -= remainder;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	891a      	ldrh	r2, [r3, #8]
 800e66e:	89bb      	ldrh	r3, [r7, #12]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	b29a      	uxth	r2, r3
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	899b      	ldrh	r3, [r3, #12]
 800e67e:	b29c      	uxth	r4, r3
 800e680:	7efb      	ldrb	r3, [r7, #27]
 800e682:	b29b      	uxth	r3, r3
 800e684:	4618      	mov	r0, r3
 800e686:	f7f9 fb6e 	bl	8007d66 <lwip_htons>
 800e68a:	4603      	mov	r3, r0
 800e68c:	461a      	mov	r2, r3
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	4322      	orrs	r2, r4
 800e694:	b292      	uxth	r2, r2
 800e696:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fa fe9d 	bl	80093dc <pbuf_clen>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6ac:	4413      	add	r3, r2
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fa fe8e 	bl	80093dc <pbuf_clen>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6ca:	4413      	add	r3, r2
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d103      	bne.n	800e6f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	e016      	b.n	800e724 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e6f6:	bf00      	nop
 800e6f8:	e002      	b.n	800e700 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e6fa:	bf00      	nop
 800e6fc:	e000      	b.n	800e700 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e6fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d006      	beq.n	800e714 <tcp_split_unsent_seg+0x25c>
 800e706:	4b09      	ldr	r3, [pc, #36]	; (800e72c <tcp_split_unsent_seg+0x274>)
 800e708:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e70c:	490d      	ldr	r1, [pc, #52]	; (800e744 <tcp_split_unsent_seg+0x28c>)
 800e70e:	4809      	ldr	r0, [pc, #36]	; (800e734 <tcp_split_unsent_seg+0x27c>)
 800e710:	f004 fa9c 	bl	8012c4c <iprintf>
  if (p != NULL) {
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e71a:	6938      	ldr	r0, [r7, #16]
 800e71c:	f7fa fdd6 	bl	80092cc <pbuf_free>
  }

  return ERR_MEM;
 800e720:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e724:	4618      	mov	r0, r3
 800e726:	3724      	adds	r7, #36	; 0x24
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd90      	pop	{r4, r7, pc}
 800e72c:	080154f8 	.word	0x080154f8
 800e730:	0801588c 	.word	0x0801588c
 800e734:	0801554c 	.word	0x0801554c
 800e738:	080158b0 	.word	0x080158b0
 800e73c:	080158d4 	.word	0x080158d4
 800e740:	080158e4 	.word	0x080158e4
 800e744:	080158f4 	.word	0x080158f4

0800e748 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e748:	b590      	push	{r4, r7, lr}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <tcp_send_fin+0x1c>
 800e756:	4b21      	ldr	r3, [pc, #132]	; (800e7dc <tcp_send_fin+0x94>)
 800e758:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e75c:	4920      	ldr	r1, [pc, #128]	; (800e7e0 <tcp_send_fin+0x98>)
 800e75e:	4821      	ldr	r0, [pc, #132]	; (800e7e4 <tcp_send_fin+0x9c>)
 800e760:	f004 fa74 	bl	8012c4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d02e      	beq.n	800e7ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e770:	60fb      	str	r3, [r7, #12]
 800e772:	e002      	b.n	800e77a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1f8      	bne.n	800e774 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	899b      	ldrh	r3, [r3, #12]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f9 faeb 	bl	8007d66 <lwip_htons>
 800e790:	4603      	mov	r3, r0
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f003 0307 	and.w	r3, r3, #7
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d116      	bne.n	800e7ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	899b      	ldrh	r3, [r3, #12]
 800e7a2:	b29c      	uxth	r4, r3
 800e7a4:	2001      	movs	r0, #1
 800e7a6:	f7f9 fade 	bl	8007d66 <lwip_htons>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	4322      	orrs	r2, r4
 800e7b4:	b292      	uxth	r2, r2
 800e7b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	8b5b      	ldrh	r3, [r3, #26]
 800e7bc:	f043 0320 	orr.w	r3, r3, #32
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e004      	b.n	800e7d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 f80b 	bl	800e7e8 <tcp_enqueue_flags>
 800e7d2:	4603      	mov	r3, r0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd90      	pop	{r4, r7, pc}
 800e7dc:	080154f8 	.word	0x080154f8
 800e7e0:	08015900 	.word	0x08015900
 800e7e4:	0801554c 	.word	0x0801554c

0800e7e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08a      	sub	sp, #40	; 0x28
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	f003 0303 	and.w	r3, r3, #3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d106      	bne.n	800e814 <tcp_enqueue_flags+0x2c>
 800e806:	4b67      	ldr	r3, [pc, #412]	; (800e9a4 <tcp_enqueue_flags+0x1bc>)
 800e808:	f240 4211 	movw	r2, #1041	; 0x411
 800e80c:	4966      	ldr	r1, [pc, #408]	; (800e9a8 <tcp_enqueue_flags+0x1c0>)
 800e80e:	4867      	ldr	r0, [pc, #412]	; (800e9ac <tcp_enqueue_flags+0x1c4>)
 800e810:	f004 fa1c 	bl	8012c4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <tcp_enqueue_flags+0x40>
 800e81a:	4b62      	ldr	r3, [pc, #392]	; (800e9a4 <tcp_enqueue_flags+0x1bc>)
 800e81c:	f240 4213 	movw	r2, #1043	; 0x413
 800e820:	4963      	ldr	r1, [pc, #396]	; (800e9b0 <tcp_enqueue_flags+0x1c8>)
 800e822:	4862      	ldr	r0, [pc, #392]	; (800e9ac <tcp_enqueue_flags+0x1c4>)
 800e824:	f004 fa12 	bl	8012c4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	f003 0302 	and.w	r3, r3, #2
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e832:	2301      	movs	r3, #1
 800e834:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e836:	7ffb      	ldrb	r3, [r7, #31]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	f003 0304 	and.w	r3, r3, #4
 800e840:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e842:	7dfb      	ldrb	r3, [r7, #23]
 800e844:	b29b      	uxth	r3, r3
 800e846:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e84a:	4619      	mov	r1, r3
 800e84c:	2036      	movs	r0, #54	; 0x36
 800e84e:	f7fa fa59 	bl	8008d04 <pbuf_alloc>
 800e852:	6138      	str	r0, [r7, #16]
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d109      	bne.n	800e86e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	8b5b      	ldrh	r3, [r3, #26]
 800e85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e862:	b29a      	uxth	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e868:	f04f 33ff 	mov.w	r3, #4294967295
 800e86c:	e095      	b.n	800e99a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	895a      	ldrh	r2, [r3, #10]
 800e872:	7dfb      	ldrb	r3, [r7, #23]
 800e874:	b29b      	uxth	r3, r3
 800e876:	429a      	cmp	r2, r3
 800e878:	d206      	bcs.n	800e888 <tcp_enqueue_flags+0xa0>
 800e87a:	4b4a      	ldr	r3, [pc, #296]	; (800e9a4 <tcp_enqueue_flags+0x1bc>)
 800e87c:	f240 4239 	movw	r2, #1081	; 0x439
 800e880:	494c      	ldr	r1, [pc, #304]	; (800e9b4 <tcp_enqueue_flags+0x1cc>)
 800e882:	484a      	ldr	r0, [pc, #296]	; (800e9ac <tcp_enqueue_flags+0x1c4>)
 800e884:	f004 f9e2 	bl	8012c4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e88c:	78fa      	ldrb	r2, [r7, #3]
 800e88e:	7ffb      	ldrb	r3, [r7, #31]
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	460b      	mov	r3, r1
 800e894:	6939      	ldr	r1, [r7, #16]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff f918 	bl	800dacc <tcp_create_segment>
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d109      	bne.n	800e8b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	8b5b      	ldrh	r3, [r3, #26]
 800e8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b6:	e070      	b.n	800e99a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	f003 0303 	and.w	r3, r3, #3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d006      	beq.n	800e8d2 <tcp_enqueue_flags+0xea>
 800e8c4:	4b37      	ldr	r3, [pc, #220]	; (800e9a4 <tcp_enqueue_flags+0x1bc>)
 800e8c6:	f240 4242 	movw	r2, #1090	; 0x442
 800e8ca:	493b      	ldr	r1, [pc, #236]	; (800e9b8 <tcp_enqueue_flags+0x1d0>)
 800e8cc:	4837      	ldr	r0, [pc, #220]	; (800e9ac <tcp_enqueue_flags+0x1c4>)
 800e8ce:	f004 f9bd 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	891b      	ldrh	r3, [r3, #8]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d006      	beq.n	800e8e8 <tcp_enqueue_flags+0x100>
 800e8da:	4b32      	ldr	r3, [pc, #200]	; (800e9a4 <tcp_enqueue_flags+0x1bc>)
 800e8dc:	f240 4243 	movw	r2, #1091	; 0x443
 800e8e0:	4936      	ldr	r1, [pc, #216]	; (800e9bc <tcp_enqueue_flags+0x1d4>)
 800e8e2:	4832      	ldr	r0, [pc, #200]	; (800e9ac <tcp_enqueue_flags+0x1c4>)
 800e8e4:	f004 f9b2 	bl	8012c4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d103      	bne.n	800e8f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	66da      	str	r2, [r3, #108]	; 0x6c
 800e8f6:	e00d      	b.n	800e914 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8fc:	61bb      	str	r3, [r7, #24]
 800e8fe:	e002      	b.n	800e906 <tcp_enqueue_flags+0x11e>
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	61bb      	str	r3, [r7, #24]
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1f8      	bne.n	800e900 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e91c:	78fb      	ldrb	r3, [r7, #3]
 800e91e:	f003 0302 	and.w	r3, r3, #2
 800e922:	2b00      	cmp	r3, #0
 800e924:	d104      	bne.n	800e930 <tcp_enqueue_flags+0x148>
 800e926:	78fb      	ldrb	r3, [r7, #3]
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d004      	beq.n	800e93a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e934:	1c5a      	adds	r2, r3, #1
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e93a:	78fb      	ldrb	r3, [r7, #3]
 800e93c:	f003 0301 	and.w	r3, r3, #1
 800e940:	2b00      	cmp	r3, #0
 800e942:	d006      	beq.n	800e952 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	8b5b      	ldrh	r3, [r3, #26]
 800e948:	f043 0320 	orr.w	r3, r3, #32
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	4618      	mov	r0, r3
 800e958:	f7fa fd40 	bl	80093dc <pbuf_clen>
 800e95c:	4603      	mov	r3, r0
 800e95e:	461a      	mov	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e966:	4413      	add	r3, r2
 800e968:	b29a      	uxth	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00e      	beq.n	800e998 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <tcp_enqueue_flags+0x1b0>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <tcp_enqueue_flags+0x1b0>
 800e98a:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <tcp_enqueue_flags+0x1bc>)
 800e98c:	f240 4265 	movw	r2, #1125	; 0x465
 800e990:	490b      	ldr	r1, [pc, #44]	; (800e9c0 <tcp_enqueue_flags+0x1d8>)
 800e992:	4806      	ldr	r0, [pc, #24]	; (800e9ac <tcp_enqueue_flags+0x1c4>)
 800e994:	f004 f95a 	bl	8012c4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3720      	adds	r7, #32
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	080154f8 	.word	0x080154f8
 800e9a8:	0801591c 	.word	0x0801591c
 800e9ac:	0801554c 	.word	0x0801554c
 800e9b0:	08015974 	.word	0x08015974
 800e9b4:	08015994 	.word	0x08015994
 800e9b8:	080159d0 	.word	0x080159d0
 800e9bc:	080159e8 	.word	0x080159e8
 800e9c0:	08015a14 	.word	0x08015a14

0800e9c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e9c4:	b5b0      	push	{r4, r5, r7, lr}
 800e9c6:	b08a      	sub	sp, #40	; 0x28
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d106      	bne.n	800e9e0 <tcp_output+0x1c>
 800e9d2:	4b8a      	ldr	r3, [pc, #552]	; (800ebfc <tcp_output+0x238>)
 800e9d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e9d8:	4989      	ldr	r1, [pc, #548]	; (800ec00 <tcp_output+0x23c>)
 800e9da:	488a      	ldr	r0, [pc, #552]	; (800ec04 <tcp_output+0x240>)
 800e9dc:	f004 f936 	bl	8012c4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	7d1b      	ldrb	r3, [r3, #20]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d106      	bne.n	800e9f6 <tcp_output+0x32>
 800e9e8:	4b84      	ldr	r3, [pc, #528]	; (800ebfc <tcp_output+0x238>)
 800e9ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e9ee:	4986      	ldr	r1, [pc, #536]	; (800ec08 <tcp_output+0x244>)
 800e9f0:	4884      	ldr	r0, [pc, #528]	; (800ec04 <tcp_output+0x240>)
 800e9f2:	f004 f92b 	bl	8012c4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e9f6:	4b85      	ldr	r3, [pc, #532]	; (800ec0c <tcp_output+0x248>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d101      	bne.n	800ea04 <tcp_output+0x40>
    return ERR_OK;
 800ea00:	2300      	movs	r3, #0
 800ea02:	e1ce      	b.n	800eda2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea10:	4293      	cmp	r3, r2
 800ea12:	bf28      	it	cs
 800ea14:	4613      	movcs	r3, r2
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d10b      	bne.n	800ea3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	8b5b      	ldrh	r3, [r3, #26]
 800ea2a:	f003 0302 	and.w	r3, r3, #2
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 81aa 	beq.w	800ed88 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fdcb 	bl	800f5d0 <tcp_send_empty_ack>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	e1b1      	b.n	800eda2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3304      	adds	r3, #4
 800ea44:	461a      	mov	r2, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff f824 	bl	800da94 <tcp_route>
 800ea4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <tcp_output+0x96>
    return ERR_RTE;
 800ea54:	f06f 0303 	mvn.w	r3, #3
 800ea58:	e1a3      	b.n	800eda2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <tcp_output+0xa4>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d111      	bne.n	800ea8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <tcp_output+0xb0>
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	3304      	adds	r3, #4
 800ea72:	e000      	b.n	800ea76 <tcp_output+0xb2>
 800ea74:	2300      	movs	r3, #0
 800ea76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <tcp_output+0xc0>
      return ERR_RTE;
 800ea7e:	f06f 0303 	mvn.w	r3, #3
 800ea82:	e18e      	b.n	800eda2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7f9 f97c 	bl	8007d90 <lwip_htonl>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea9e:	1ad3      	subs	r3, r2, r3
 800eaa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaa2:	8912      	ldrh	r2, [r2, #8]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d227      	bcs.n	800eafc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eab2:	461a      	mov	r2, r3
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d114      	bne.n	800eae4 <tcp_output+0x120>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d110      	bne.n	800eae4 <tcp_output+0x120>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10b      	bne.n	800eae4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8b5b      	ldrh	r3, [r3, #26]
 800eae8:	f003 0302 	and.w	r3, r3, #2
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 814d 	beq.w	800ed8c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fd6c 	bl	800f5d0 <tcp_send_empty_ack>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	e152      	b.n	800eda2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 811c 	beq.w	800ed4a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800eb12:	e002      	b.n	800eb1a <tcp_output+0x156>
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	623b      	str	r3, [r7, #32]
 800eb1a:	6a3b      	ldr	r3, [r7, #32]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1f8      	bne.n	800eb14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800eb22:	e112      	b.n	800ed4a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	899b      	ldrh	r3, [r3, #12]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f9 f91a 	bl	8007d66 <lwip_htons>
 800eb32:	4603      	mov	r3, r0
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	f003 0304 	and.w	r3, r3, #4
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d006      	beq.n	800eb4c <tcp_output+0x188>
 800eb3e:	4b2f      	ldr	r3, [pc, #188]	; (800ebfc <tcp_output+0x238>)
 800eb40:	f240 5236 	movw	r2, #1334	; 0x536
 800eb44:	4932      	ldr	r1, [pc, #200]	; (800ec10 <tcp_output+0x24c>)
 800eb46:	482f      	ldr	r0, [pc, #188]	; (800ec04 <tcp_output+0x240>)
 800eb48:	f004 f880 	bl	8012c4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01f      	beq.n	800eb94 <tcp_output+0x1d0>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	8b5b      	ldrh	r3, [r3, #26]
 800eb58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d119      	bne.n	800eb94 <tcp_output+0x1d0>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00b      	beq.n	800eb80 <tcp_output+0x1bc>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d110      	bne.n	800eb94 <tcp_output+0x1d0>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb76:	891a      	ldrh	r2, [r3, #8]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d209      	bcs.n	800eb94 <tcp_output+0x1d0>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d004      	beq.n	800eb94 <tcp_output+0x1d0>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb90:	2b08      	cmp	r3, #8
 800eb92:	d901      	bls.n	800eb98 <tcp_output+0x1d4>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e000      	b.n	800eb9a <tcp_output+0x1d6>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d106      	bne.n	800ebac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	8b5b      	ldrh	r3, [r3, #26]
 800eba2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 80e4 	beq.w	800ed74 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7d1b      	ldrb	r3, [r3, #20]
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d00d      	beq.n	800ebd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	899b      	ldrh	r3, [r3, #12]
 800ebba:	b29c      	uxth	r4, r3
 800ebbc:	2010      	movs	r0, #16
 800ebbe:	f7f9 f8d2 	bl	8007d66 <lwip_htons>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	4322      	orrs	r2, r4
 800ebcc:	b292      	uxth	r2, r2
 800ebce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ebd0:	697a      	ldr	r2, [r7, #20]
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebd6:	f000 f909 	bl	800edec <tcp_output_segment>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ebde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d016      	beq.n	800ec14 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	8b5b      	ldrh	r3, [r3, #26]
 800ebea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	835a      	strh	r2, [r3, #26]
      return err;
 800ebf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebf8:	e0d3      	b.n	800eda2 <tcp_output+0x3de>
 800ebfa:	bf00      	nop
 800ebfc:	080154f8 	.word	0x080154f8
 800ec00:	08015a3c 	.word	0x08015a3c
 800ec04:	0801554c 	.word	0x0801554c
 800ec08:	08015a54 	.word	0x08015a54
 800ec0c:	20009900 	.word	0x20009900
 800ec10:	08015a7c 	.word	0x08015a7c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	7d1b      	ldrb	r3, [r3, #20]
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d006      	beq.n	800ec32 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	8b5b      	ldrh	r3, [r3, #26]
 800ec28:	f023 0303 	bic.w	r3, r3, #3
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ec32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7f9 f8a9 	bl	8007d90 <lwip_htonl>
 800ec3e:	4604      	mov	r4, r0
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	891b      	ldrh	r3, [r3, #8]
 800ec44:	461d      	mov	r5, r3
 800ec46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	899b      	ldrh	r3, [r3, #12]
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7f9 f889 	bl	8007d66 <lwip_htons>
 800ec54:	4603      	mov	r3, r0
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	f003 0303 	and.w	r3, r3, #3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d001      	beq.n	800ec64 <tcp_output+0x2a0>
 800ec60:	2301      	movs	r3, #1
 800ec62:	e000      	b.n	800ec66 <tcp_output+0x2a2>
 800ec64:	2300      	movs	r3, #0
 800ec66:	442b      	add	r3, r5
 800ec68:	4423      	add	r3, r4
 800ec6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	da02      	bge.n	800ec7e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	68ba      	ldr	r2, [r7, #8]
 800ec7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec80:	891b      	ldrh	r3, [r3, #8]
 800ec82:	461c      	mov	r4, r3
 800ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	899b      	ldrh	r3, [r3, #12]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7f9 f86a 	bl	8007d66 <lwip_htons>
 800ec92:	4603      	mov	r3, r0
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	f003 0303 	and.w	r3, r3, #3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <tcp_output+0x2de>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e000      	b.n	800eca4 <tcp_output+0x2e0>
 800eca2:	2300      	movs	r3, #0
 800eca4:	4423      	add	r3, r4
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d049      	beq.n	800ed3e <tcp_output+0x37a>
      seg->next = NULL;
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	2200      	movs	r2, #0
 800ecae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d105      	bne.n	800ecc4 <tcp_output+0x300>
        pcb->unacked = seg;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecbc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc0:	623b      	str	r3, [r7, #32]
 800ecc2:	e03f      	b.n	800ed44 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f9 f860 	bl	8007d90 <lwip_htonl>
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	6a3b      	ldr	r3, [r7, #32]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f9 f859 	bl	8007d90 <lwip_htonl>
 800ecde:	4603      	mov	r3, r0
 800ece0:	1ae3      	subs	r3, r4, r3
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	da24      	bge.n	800ed30 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	3370      	adds	r3, #112	; 0x70
 800ecea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ecec:	e002      	b.n	800ecf4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d011      	beq.n	800ed20 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f9 f843 	bl	8007d90 <lwip_htonl>
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7f9 f83c 	bl	8007d90 <lwip_htonl>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	dbe6      	blt.n	800ecee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	e009      	b.n	800ed44 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ed30:	6a3b      	ldr	r3, [r7, #32]
 800ed32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	623b      	str	r3, [r7, #32]
 800ed3c:	e002      	b.n	800ed44 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ed3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed40:	f7fb ff01 	bl	800ab46 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ed4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d012      	beq.n	800ed76 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7f9 f81a 	bl	8007d90 <lwip_htonl>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed66:	8912      	ldrh	r2, [r2, #8]
 800ed68:	4413      	add	r3, r2
  while (seg != NULL &&
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	f4bf aed9 	bcs.w	800eb24 <tcp_output+0x160>
 800ed72:	e000      	b.n	800ed76 <tcp_output+0x3b2>
      break;
 800ed74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d108      	bne.n	800ed90 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ed86:	e004      	b.n	800ed92 <tcp_output+0x3ce>
    goto output_done;
 800ed88:	bf00      	nop
 800ed8a:	e002      	b.n	800ed92 <tcp_output+0x3ce>
    goto output_done;
 800ed8c:	bf00      	nop
 800ed8e:	e000      	b.n	800ed92 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ed90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	8b5b      	ldrh	r3, [r3, #26]
 800ed96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3728      	adds	r7, #40	; 0x28
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bdb0      	pop	{r4, r5, r7, pc}
 800edaa:	bf00      	nop

0800edac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d106      	bne.n	800edc8 <tcp_output_segment_busy+0x1c>
 800edba:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <tcp_output_segment_busy+0x34>)
 800edbc:	f240 529a 	movw	r2, #1434	; 0x59a
 800edc0:	4908      	ldr	r1, [pc, #32]	; (800ede4 <tcp_output_segment_busy+0x38>)
 800edc2:	4809      	ldr	r0, [pc, #36]	; (800ede8 <tcp_output_segment_busy+0x3c>)
 800edc4:	f003 ff42 	bl	8012c4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	7b9b      	ldrb	r3, [r3, #14]
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d001      	beq.n	800edd6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800edd2:	2301      	movs	r3, #1
 800edd4:	e000      	b.n	800edd8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	080154f8 	.word	0x080154f8
 800ede4:	08015a94 	.word	0x08015a94
 800ede8:	0801554c 	.word	0x0801554c

0800edec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800edec:	b5b0      	push	{r4, r5, r7, lr}
 800edee:	b08c      	sub	sp, #48	; 0x30
 800edf0:	af04      	add	r7, sp, #16
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d106      	bne.n	800ee0c <tcp_output_segment+0x20>
 800edfe:	4b63      	ldr	r3, [pc, #396]	; (800ef8c <tcp_output_segment+0x1a0>)
 800ee00:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ee04:	4962      	ldr	r1, [pc, #392]	; (800ef90 <tcp_output_segment+0x1a4>)
 800ee06:	4863      	ldr	r0, [pc, #396]	; (800ef94 <tcp_output_segment+0x1a8>)
 800ee08:	f003 ff20 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d106      	bne.n	800ee20 <tcp_output_segment+0x34>
 800ee12:	4b5e      	ldr	r3, [pc, #376]	; (800ef8c <tcp_output_segment+0x1a0>)
 800ee14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ee18:	495f      	ldr	r1, [pc, #380]	; (800ef98 <tcp_output_segment+0x1ac>)
 800ee1a:	485e      	ldr	r0, [pc, #376]	; (800ef94 <tcp_output_segment+0x1a8>)
 800ee1c:	f003 ff16 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <tcp_output_segment+0x48>
 800ee26:	4b59      	ldr	r3, [pc, #356]	; (800ef8c <tcp_output_segment+0x1a0>)
 800ee28:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ee2c:	495b      	ldr	r1, [pc, #364]	; (800ef9c <tcp_output_segment+0x1b0>)
 800ee2e:	4859      	ldr	r0, [pc, #356]	; (800ef94 <tcp_output_segment+0x1a8>)
 800ee30:	f003 ff0c 	bl	8012c4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7ff ffb9 	bl	800edac <tcp_output_segment_busy>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ee40:	2300      	movs	r3, #0
 800ee42:	e09f      	b.n	800ef84 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	68dc      	ldr	r4, [r3, #12]
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7f8 ff9f 	bl	8007d90 <lwip_htonl>
 800ee52:	4603      	mov	r3, r0
 800ee54:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	68dc      	ldr	r4, [r3, #12]
 800ee5e:	4610      	mov	r0, r2
 800ee60:	f7f8 ff81 	bl	8007d66 <lwip_htons>
 800ee64:	4603      	mov	r3, r0
 800ee66:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ee70:	441a      	add	r2, r3
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	3314      	adds	r3, #20
 800ee7c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	7a9b      	ldrb	r3, [r3, #10]
 800ee82:	f003 0301 	and.w	r3, r3, #1
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d015      	beq.n	800eeb6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	461a      	mov	r2, r3
 800ee90:	6879      	ldr	r1, [r7, #4]
 800ee92:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ee96:	f7fc fa33 	bl	800b300 <tcp_eff_send_mss_netif>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ee9e:	8b7b      	ldrh	r3, [r7, #26]
 800eea0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7f8 ff73 	bl	8007d90 <lwip_htonl>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	601a      	str	r2, [r3, #0]
    opts += 1;
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	da02      	bge.n	800eec6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	2200      	movs	r2, #0
 800eec4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d10c      	bne.n	800eee8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800eece:	4b34      	ldr	r3, [pc, #208]	; (800efa0 <tcp_output_segment+0x1b4>)
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f8 ff57 	bl	8007d90 <lwip_htonl>
 800eee2:	4602      	mov	r2, r0
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68da      	ldr	r2, [r3, #12]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	8959      	ldrh	r1, [r3, #10]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	8b3a      	ldrh	r2, [r7, #24]
 800ef02:	1a8a      	subs	r2, r1, r2
 800ef04:	b292      	uxth	r2, r2
 800ef06:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	8919      	ldrh	r1, [r3, #8]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	8b3a      	ldrh	r2, [r7, #24]
 800ef14:	1a8a      	subs	r2, r1, r2
 800ef16:	b292      	uxth	r2, r2
 800ef18:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	68d2      	ldr	r2, [r2, #12]
 800ef22:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	741a      	strb	r2, [r3, #16]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	f103 0214 	add.w	r2, r3, #20
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	7a9b      	ldrb	r3, [r3, #10]
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	f003 0304 	and.w	r3, r3, #4
 800ef42:	4413      	add	r3, r2
 800ef44:	69fa      	ldr	r2, [r7, #28]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d006      	beq.n	800ef58 <tcp_output_segment+0x16c>
 800ef4a:	4b10      	ldr	r3, [pc, #64]	; (800ef8c <tcp_output_segment+0x1a0>)
 800ef4c:	f240 621c 	movw	r2, #1564	; 0x61c
 800ef50:	4914      	ldr	r1, [pc, #80]	; (800efa4 <tcp_output_segment+0x1b8>)
 800ef52:	4810      	ldr	r0, [pc, #64]	; (800ef94 <tcp_output_segment+0x1a8>)
 800ef54:	f003 fe7a 	bl	8012c4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6858      	ldr	r0, [r3, #4]
 800ef5c:	68b9      	ldr	r1, [r7, #8]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	1d1c      	adds	r4, r3, #4
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	7add      	ldrb	r5, [r3, #11]
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	7a9b      	ldrb	r3, [r3, #10]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	9202      	str	r2, [sp, #8]
 800ef6e:	2206      	movs	r2, #6
 800ef70:	9201      	str	r2, [sp, #4]
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	462b      	mov	r3, r5
 800ef76:	4622      	mov	r2, r4
 800ef78:	f002 fdf0 	bl	8011b5c <ip4_output_if>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ef80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3720      	adds	r7, #32
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef8c:	080154f8 	.word	0x080154f8
 800ef90:	08015abc 	.word	0x08015abc
 800ef94:	0801554c 	.word	0x0801554c
 800ef98:	08015adc 	.word	0x08015adc
 800ef9c:	08015afc 	.word	0x08015afc
 800efa0:	200098b4 	.word	0x200098b4
 800efa4:	08015b20 	.word	0x08015b20

0800efa8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800efa8:	b5b0      	push	{r4, r5, r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d106      	bne.n	800efc4 <tcp_rexmit_rto_prepare+0x1c>
 800efb6:	4b31      	ldr	r3, [pc, #196]	; (800f07c <tcp_rexmit_rto_prepare+0xd4>)
 800efb8:	f240 6263 	movw	r2, #1635	; 0x663
 800efbc:	4930      	ldr	r1, [pc, #192]	; (800f080 <tcp_rexmit_rto_prepare+0xd8>)
 800efbe:	4831      	ldr	r0, [pc, #196]	; (800f084 <tcp_rexmit_rto_prepare+0xdc>)
 800efc0:	f003 fe44 	bl	8012c4c <iprintf>

  if (pcb->unacked == NULL) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d102      	bne.n	800efd2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800efcc:	f06f 0305 	mvn.w	r3, #5
 800efd0:	e050      	b.n	800f074 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	e00b      	b.n	800eff2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7ff fee6 	bl	800edac <tcp_output_segment_busy>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d002      	beq.n	800efec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800efe6:	f06f 0305 	mvn.w	r3, #5
 800efea:	e043      	b.n	800f074 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	60fb      	str	r3, [r7, #12]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1ef      	bne.n	800efda <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f7ff fed6 	bl	800edac <tcp_output_segment_busy>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f006:	f06f 0305 	mvn.w	r3, #5
 800f00a:	e033      	b.n	800f074 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	8b5b      	ldrh	r3, [r3, #26]
 800f026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	4618      	mov	r0, r3
 800f038:	f7f8 feaa 	bl	8007d90 <lwip_htonl>
 800f03c:	4604      	mov	r4, r0
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	891b      	ldrh	r3, [r3, #8]
 800f042:	461d      	mov	r5, r3
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	899b      	ldrh	r3, [r3, #12]
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7f8 fe8a 	bl	8007d66 <lwip_htons>
 800f052:	4603      	mov	r3, r0
 800f054:	b2db      	uxtb	r3, r3
 800f056:	f003 0303 	and.w	r3, r3, #3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d001      	beq.n	800f062 <tcp_rexmit_rto_prepare+0xba>
 800f05e:	2301      	movs	r3, #1
 800f060:	e000      	b.n	800f064 <tcp_rexmit_rto_prepare+0xbc>
 800f062:	2300      	movs	r3, #0
 800f064:	442b      	add	r3, r5
 800f066:	18e2      	adds	r2, r4, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bdb0      	pop	{r4, r5, r7, pc}
 800f07c:	080154f8 	.word	0x080154f8
 800f080:	08015b34 	.word	0x08015b34
 800f084:	0801554c 	.word	0x0801554c

0800f088 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_rexmit_rto_commit+0x1c>
 800f096:	4b0d      	ldr	r3, [pc, #52]	; (800f0cc <tcp_rexmit_rto_commit+0x44>)
 800f098:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f09c:	490c      	ldr	r1, [pc, #48]	; (800f0d0 <tcp_rexmit_rto_commit+0x48>)
 800f09e:	480d      	ldr	r0, [pc, #52]	; (800f0d4 <tcp_rexmit_rto_commit+0x4c>)
 800f0a0:	f003 fdd4 	bl	8012c4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0aa:	2bff      	cmp	r3, #255	; 0xff
 800f0ac:	d007      	beq.n	800f0be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	b2da      	uxtb	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff fc80 	bl	800e9c4 <tcp_output>
}
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	080154f8 	.word	0x080154f8
 800f0d0:	08015b58 	.word	0x08015b58
 800f0d4:	0801554c 	.word	0x0801554c

0800f0d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <tcp_rexmit_rto+0x1c>
 800f0e6:	4b0a      	ldr	r3, [pc, #40]	; (800f110 <tcp_rexmit_rto+0x38>)
 800f0e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f0ec:	4909      	ldr	r1, [pc, #36]	; (800f114 <tcp_rexmit_rto+0x3c>)
 800f0ee:	480a      	ldr	r0, [pc, #40]	; (800f118 <tcp_rexmit_rto+0x40>)
 800f0f0:	f003 fdac 	bl	8012c4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7ff ff57 	bl	800efa8 <tcp_rexmit_rto_prepare>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d102      	bne.n	800f106 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff ffc1 	bl	800f088 <tcp_rexmit_rto_commit>
  }
}
 800f106:	bf00      	nop
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	080154f8 	.word	0x080154f8
 800f114:	08015b7c 	.word	0x08015b7c
 800f118:	0801554c 	.word	0x0801554c

0800f11c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f11c:	b590      	push	{r4, r7, lr}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d106      	bne.n	800f138 <tcp_rexmit+0x1c>
 800f12a:	4b2f      	ldr	r3, [pc, #188]	; (800f1e8 <tcp_rexmit+0xcc>)
 800f12c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f130:	492e      	ldr	r1, [pc, #184]	; (800f1ec <tcp_rexmit+0xd0>)
 800f132:	482f      	ldr	r0, [pc, #188]	; (800f1f0 <tcp_rexmit+0xd4>)
 800f134:	f003 fd8a 	bl	8012c4c <iprintf>

  if (pcb->unacked == NULL) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f140:	f06f 0305 	mvn.w	r3, #5
 800f144:	e04c      	b.n	800f1e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f14a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f14c:	68b8      	ldr	r0, [r7, #8]
 800f14e:	f7ff fe2d 	bl	800edac <tcp_output_segment_busy>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f158:	f06f 0305 	mvn.w	r3, #5
 800f15c:	e040      	b.n	800f1e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	336c      	adds	r3, #108	; 0x6c
 800f16a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f16c:	e002      	b.n	800f174 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d011      	beq.n	800f1a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	4618      	mov	r0, r3
 800f186:	f7f8 fe03 	bl	8007d90 <lwip_htonl>
 800f18a:	4604      	mov	r4, r0
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	f7f8 fdfc 	bl	8007d90 <lwip_htonl>
 800f198:	4603      	mov	r3, r0
 800f19a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	dbe6      	blt.n	800f16e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d103      	bne.n	800f1be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1c4:	2bff      	cmp	r3, #255	; 0xff
 800f1c6:	d007      	beq.n	800f1d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	b2da      	uxtb	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f1de:	2300      	movs	r3, #0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3714      	adds	r7, #20
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd90      	pop	{r4, r7, pc}
 800f1e8:	080154f8 	.word	0x080154f8
 800f1ec:	08015b98 	.word	0x08015b98
 800f1f0:	0801554c 	.word	0x0801554c

0800f1f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d106      	bne.n	800f210 <tcp_rexmit_fast+0x1c>
 800f202:	4b2a      	ldr	r3, [pc, #168]	; (800f2ac <tcp_rexmit_fast+0xb8>)
 800f204:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f208:	4929      	ldr	r1, [pc, #164]	; (800f2b0 <tcp_rexmit_fast+0xbc>)
 800f20a:	482a      	ldr	r0, [pc, #168]	; (800f2b4 <tcp_rexmit_fast+0xc0>)
 800f20c:	f003 fd1e 	bl	8012c4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f214:	2b00      	cmp	r3, #0
 800f216:	d044      	beq.n	800f2a2 <tcp_rexmit_fast+0xae>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	8b5b      	ldrh	r3, [r3, #26]
 800f21c:	f003 0304 	and.w	r3, r3, #4
 800f220:	2b00      	cmp	r3, #0
 800f222:	d13e      	bne.n	800f2a2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff ff79 	bl	800f11c <tcp_rexmit>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d138      	bne.n	800f2a2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f23c:	4293      	cmp	r3, r2
 800f23e:	bf28      	it	cs
 800f240:	4613      	movcs	r3, r2
 800f242:	b29b      	uxth	r3, r3
 800f244:	0fda      	lsrs	r2, r3, #31
 800f246:	4413      	add	r3, r2
 800f248:	105b      	asrs	r3, r3, #1
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f258:	461a      	mov	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f25e:	005b      	lsls	r3, r3, #1
 800f260:	429a      	cmp	r2, r3
 800f262:	d206      	bcs.n	800f272 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f27c:	4619      	mov	r1, r3
 800f27e:	0049      	lsls	r1, r1, #1
 800f280:	440b      	add	r3, r1
 800f282:	b29b      	uxth	r3, r3
 800f284:	4413      	add	r3, r2
 800f286:	b29a      	uxth	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	8b5b      	ldrh	r3, [r3, #26]
 800f292:	f043 0304 	orr.w	r3, r3, #4
 800f296:	b29a      	uxth	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f2a2:	bf00      	nop
 800f2a4:	3708      	adds	r7, #8
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	080154f8 	.word	0x080154f8
 800f2b0:	08015bb0 	.word	0x08015bb0
 800f2b4:	0801554c 	.word	0x0801554c

0800f2b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b086      	sub	sp, #24
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	607b      	str	r3, [r7, #4]
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	817b      	strh	r3, [r7, #10]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f2ca:	897a      	ldrh	r2, [r7, #10]
 800f2cc:	893b      	ldrh	r3, [r7, #8]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	3314      	adds	r3, #20
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2da:	4619      	mov	r1, r3
 800f2dc:	2022      	movs	r0, #34	; 0x22
 800f2de:	f7f9 fd11 	bl	8008d04 <pbuf_alloc>
 800f2e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d04d      	beq.n	800f386 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f2ea:	897b      	ldrh	r3, [r7, #10]
 800f2ec:	3313      	adds	r3, #19
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	8952      	ldrh	r2, [r2, #10]
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	db06      	blt.n	800f304 <tcp_output_alloc_header_common+0x4c>
 800f2f6:	4b26      	ldr	r3, [pc, #152]	; (800f390 <tcp_output_alloc_header_common+0xd8>)
 800f2f8:	f240 7223 	movw	r2, #1827	; 0x723
 800f2fc:	4925      	ldr	r1, [pc, #148]	; (800f394 <tcp_output_alloc_header_common+0xdc>)
 800f2fe:	4826      	ldr	r0, [pc, #152]	; (800f398 <tcp_output_alloc_header_common+0xe0>)
 800f300:	f003 fca4 	bl	8012c4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f30a:	8c3b      	ldrh	r3, [r7, #32]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7f8 fd2a 	bl	8007d66 <lwip_htons>
 800f312:	4603      	mov	r3, r0
 800f314:	461a      	mov	r2, r3
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f31a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7f8 fd22 	bl	8007d66 <lwip_htons>
 800f322:	4603      	mov	r3, r0
 800f324:	461a      	mov	r2, r3
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f7f8 fd2d 	bl	8007d90 <lwip_htonl>
 800f336:	4602      	mov	r2, r0
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f33c:	897b      	ldrh	r3, [r7, #10]
 800f33e:	089b      	lsrs	r3, r3, #2
 800f340:	b29b      	uxth	r3, r3
 800f342:	3305      	adds	r3, #5
 800f344:	b29b      	uxth	r3, r3
 800f346:	031b      	lsls	r3, r3, #12
 800f348:	b29a      	uxth	r2, r3
 800f34a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4313      	orrs	r3, r2
 800f352:	b29b      	uxth	r3, r3
 800f354:	4618      	mov	r0, r3
 800f356:	f7f8 fd06 	bl	8007d66 <lwip_htons>
 800f35a:	4603      	mov	r3, r0
 800f35c:	461a      	mov	r2, r3
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f362:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f364:	4618      	mov	r0, r3
 800f366:	f7f8 fcfe 	bl	8007d66 <lwip_htons>
 800f36a:	4603      	mov	r3, r0
 800f36c:	461a      	mov	r2, r3
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	2200      	movs	r2, #0
 800f376:	741a      	strb	r2, [r3, #16]
 800f378:	2200      	movs	r2, #0
 800f37a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	2200      	movs	r2, #0
 800f380:	749a      	strb	r2, [r3, #18]
 800f382:	2200      	movs	r2, #0
 800f384:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f386:	697b      	ldr	r3, [r7, #20]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3718      	adds	r7, #24
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	080154f8 	.word	0x080154f8
 800f394:	08015bd0 	.word	0x08015bd0
 800f398:	0801554c 	.word	0x0801554c

0800f39c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f39c:	b5b0      	push	{r4, r5, r7, lr}
 800f39e:	b08a      	sub	sp, #40	; 0x28
 800f3a0:	af04      	add	r7, sp, #16
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	607b      	str	r3, [r7, #4]
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	817b      	strh	r3, [r7, #10]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d106      	bne.n	800f3c2 <tcp_output_alloc_header+0x26>
 800f3b4:	4b15      	ldr	r3, [pc, #84]	; (800f40c <tcp_output_alloc_header+0x70>)
 800f3b6:	f240 7242 	movw	r2, #1858	; 0x742
 800f3ba:	4915      	ldr	r1, [pc, #84]	; (800f410 <tcp_output_alloc_header+0x74>)
 800f3bc:	4815      	ldr	r0, [pc, #84]	; (800f414 <tcp_output_alloc_header+0x78>)
 800f3be:	f003 fc45 	bl	8012c4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	8adb      	ldrh	r3, [r3, #22]
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	8b12      	ldrh	r2, [r2, #24]
 800f3ce:	68f9      	ldr	r1, [r7, #12]
 800f3d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f3d2:	893d      	ldrh	r5, [r7, #8]
 800f3d4:	897c      	ldrh	r4, [r7, #10]
 800f3d6:	9103      	str	r1, [sp, #12]
 800f3d8:	2110      	movs	r1, #16
 800f3da:	9102      	str	r1, [sp, #8]
 800f3dc:	9201      	str	r2, [sp, #4]
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	462a      	mov	r2, r5
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	f7ff ff67 	bl	800f2b8 <tcp_output_alloc_header_common>
 800f3ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d006      	beq.n	800f400 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f3fa:	441a      	add	r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f400:	697b      	ldr	r3, [r7, #20]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bdb0      	pop	{r4, r5, r7, pc}
 800f40a:	bf00      	nop
 800f40c:	080154f8 	.word	0x080154f8
 800f410:	08015c00 	.word	0x08015c00
 800f414:	0801554c 	.word	0x0801554c

0800f418 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b088      	sub	sp, #32
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	4611      	mov	r1, r2
 800f424:	461a      	mov	r2, r3
 800f426:	460b      	mov	r3, r1
 800f428:	71fb      	strb	r3, [r7, #7]
 800f42a:	4613      	mov	r3, r2
 800f42c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d106      	bne.n	800f446 <tcp_output_fill_options+0x2e>
 800f438:	4b13      	ldr	r3, [pc, #76]	; (800f488 <tcp_output_fill_options+0x70>)
 800f43a:	f240 7256 	movw	r2, #1878	; 0x756
 800f43e:	4913      	ldr	r1, [pc, #76]	; (800f48c <tcp_output_fill_options+0x74>)
 800f440:	4813      	ldr	r0, [pc, #76]	; (800f490 <tcp_output_fill_options+0x78>)
 800f442:	f003 fc03 	bl	8012c4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	3314      	adds	r3, #20
 800f450:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	f103 0214 	add.w	r2, r3, #20
 800f458:	8bfb      	ldrh	r3, [r7, #30]
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4619      	mov	r1, r3
 800f45e:	79fb      	ldrb	r3, [r7, #7]
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	f003 0304 	and.w	r3, r3, #4
 800f466:	440b      	add	r3, r1
 800f468:	4413      	add	r3, r2
 800f46a:	697a      	ldr	r2, [r7, #20]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d006      	beq.n	800f47e <tcp_output_fill_options+0x66>
 800f470:	4b05      	ldr	r3, [pc, #20]	; (800f488 <tcp_output_fill_options+0x70>)
 800f472:	f240 7275 	movw	r2, #1909	; 0x775
 800f476:	4907      	ldr	r1, [pc, #28]	; (800f494 <tcp_output_fill_options+0x7c>)
 800f478:	4805      	ldr	r0, [pc, #20]	; (800f490 <tcp_output_fill_options+0x78>)
 800f47a:	f003 fbe7 	bl	8012c4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f47e:	bf00      	nop
 800f480:	3720      	adds	r7, #32
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	080154f8 	.word	0x080154f8
 800f48c:	08015c28 	.word	0x08015c28
 800f490:	0801554c 	.word	0x0801554c
 800f494:	08015b20 	.word	0x08015b20

0800f498 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08a      	sub	sp, #40	; 0x28
 800f49c:	af04      	add	r7, sp, #16
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
 800f4a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d106      	bne.n	800f4ba <tcp_output_control_segment+0x22>
 800f4ac:	4b1c      	ldr	r3, [pc, #112]	; (800f520 <tcp_output_control_segment+0x88>)
 800f4ae:	f240 7287 	movw	r2, #1927	; 0x787
 800f4b2:	491c      	ldr	r1, [pc, #112]	; (800f524 <tcp_output_control_segment+0x8c>)
 800f4b4:	481c      	ldr	r0, [pc, #112]	; (800f528 <tcp_output_control_segment+0x90>)
 800f4b6:	f003 fbc9 	bl	8012c4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	6879      	ldr	r1, [r7, #4]
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f7fe fae8 	bl	800da94 <tcp_route>
 800f4c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d102      	bne.n	800f4d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f4cc:	23fc      	movs	r3, #252	; 0xfc
 800f4ce:	75fb      	strb	r3, [r7, #23]
 800f4d0:	e01c      	b.n	800f50c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d006      	beq.n	800f4e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	7adb      	ldrb	r3, [r3, #11]
 800f4dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	7a9b      	ldrb	r3, [r3, #10]
 800f4e2:	757b      	strb	r3, [r7, #21]
 800f4e4:	e003      	b.n	800f4ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f4e6:	23ff      	movs	r3, #255	; 0xff
 800f4e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f4ee:	7dba      	ldrb	r2, [r7, #22]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	9302      	str	r3, [sp, #8]
 800f4f4:	2306      	movs	r3, #6
 800f4f6:	9301      	str	r3, [sp, #4]
 800f4f8:	7d7b      	ldrb	r3, [r7, #21]
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	6879      	ldr	r1, [r7, #4]
 800f502:	68b8      	ldr	r0, [r7, #8]
 800f504:	f002 fb2a 	bl	8011b5c <ip4_output_if>
 800f508:	4603      	mov	r3, r0
 800f50a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f50c:	68b8      	ldr	r0, [r7, #8]
 800f50e:	f7f9 fedd 	bl	80092cc <pbuf_free>
  return err;
 800f512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	080154f8 	.word	0x080154f8
 800f524:	08015c50 	.word	0x08015c50
 800f528:	0801554c 	.word	0x0801554c

0800f52c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f52c:	b590      	push	{r4, r7, lr}
 800f52e:	b08b      	sub	sp, #44	; 0x2c
 800f530:	af04      	add	r7, sp, #16
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
 800f538:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d106      	bne.n	800f54e <tcp_rst+0x22>
 800f540:	4b1f      	ldr	r3, [pc, #124]	; (800f5c0 <tcp_rst+0x94>)
 800f542:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f546:	491f      	ldr	r1, [pc, #124]	; (800f5c4 <tcp_rst+0x98>)
 800f548:	481f      	ldr	r0, [pc, #124]	; (800f5c8 <tcp_rst+0x9c>)
 800f54a:	f003 fb7f 	bl	8012c4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	2b00      	cmp	r3, #0
 800f552:	d106      	bne.n	800f562 <tcp_rst+0x36>
 800f554:	4b1a      	ldr	r3, [pc, #104]	; (800f5c0 <tcp_rst+0x94>)
 800f556:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f55a:	491c      	ldr	r1, [pc, #112]	; (800f5cc <tcp_rst+0xa0>)
 800f55c:	481a      	ldr	r0, [pc, #104]	; (800f5c8 <tcp_rst+0x9c>)
 800f55e:	f003 fb75 	bl	8012c4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f562:	2300      	movs	r3, #0
 800f564:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f566:	f246 0308 	movw	r3, #24584	; 0x6008
 800f56a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f56c:	7dfb      	ldrb	r3, [r7, #23]
 800f56e:	b29c      	uxth	r4, r3
 800f570:	68b8      	ldr	r0, [r7, #8]
 800f572:	f7f8 fc0d 	bl	8007d90 <lwip_htonl>
 800f576:	4602      	mov	r2, r0
 800f578:	8abb      	ldrh	r3, [r7, #20]
 800f57a:	9303      	str	r3, [sp, #12]
 800f57c:	2314      	movs	r3, #20
 800f57e:	9302      	str	r3, [sp, #8]
 800f580:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f582:	9301      	str	r3, [sp, #4]
 800f584:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	4613      	mov	r3, r2
 800f58a:	2200      	movs	r2, #0
 800f58c:	4621      	mov	r1, r4
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff fe92 	bl	800f2b8 <tcp_output_alloc_header_common>
 800f594:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00c      	beq.n	800f5b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f59c:	7dfb      	ldrb	r3, [r7, #23]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	6939      	ldr	r1, [r7, #16]
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f7ff ff38 	bl	800f418 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	6939      	ldr	r1, [r7, #16]
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f7ff ff72 	bl	800f498 <tcp_output_control_segment>
 800f5b4:	e000      	b.n	800f5b8 <tcp_rst+0x8c>
    return;
 800f5b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd90      	pop	{r4, r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	080154f8 	.word	0x080154f8
 800f5c4:	08015c7c 	.word	0x08015c7c
 800f5c8:	0801554c 	.word	0x0801554c
 800f5cc:	08015c98 	.word	0x08015c98

0800f5d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f5d0:	b590      	push	{r4, r7, lr}
 800f5d2:	b087      	sub	sp, #28
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d106      	bne.n	800f5f4 <tcp_send_empty_ack+0x24>
 800f5e6:	4b28      	ldr	r3, [pc, #160]	; (800f688 <tcp_send_empty_ack+0xb8>)
 800f5e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f5ec:	4927      	ldr	r1, [pc, #156]	; (800f68c <tcp_send_empty_ack+0xbc>)
 800f5ee:	4828      	ldr	r0, [pc, #160]	; (800f690 <tcp_send_empty_ack+0xc0>)
 800f5f0:	f003 fb2c 	bl	8012c4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	f003 0304 	and.w	r3, r3, #4
 800f5fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f600:	7d7b      	ldrb	r3, [r7, #21]
 800f602:	b29c      	uxth	r4, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f608:	4618      	mov	r0, r3
 800f60a:	f7f8 fbc1 	bl	8007d90 <lwip_htonl>
 800f60e:	4603      	mov	r3, r0
 800f610:	2200      	movs	r2, #0
 800f612:	4621      	mov	r1, r4
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7ff fec1 	bl	800f39c <tcp_output_alloc_header>
 800f61a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d109      	bne.n	800f636 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	8b5b      	ldrh	r3, [r3, #26]
 800f626:	f043 0303 	orr.w	r3, r3, #3
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f630:	f06f 0301 	mvn.w	r3, #1
 800f634:	e023      	b.n	800f67e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f636:	7dbb      	ldrb	r3, [r7, #22]
 800f638:	7dfa      	ldrb	r2, [r7, #23]
 800f63a:	6939      	ldr	r1, [r7, #16]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff feeb 	bl	800f418 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3304      	adds	r3, #4
 800f648:	6939      	ldr	r1, [r7, #16]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff ff24 	bl	800f498 <tcp_output_control_segment>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d007      	beq.n	800f66c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8b5b      	ldrh	r3, [r3, #26]
 800f660:	f043 0303 	orr.w	r3, r3, #3
 800f664:	b29a      	uxth	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	835a      	strh	r2, [r3, #26]
 800f66a:	e006      	b.n	800f67a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	8b5b      	ldrh	r3, [r3, #26]
 800f670:	f023 0303 	bic.w	r3, r3, #3
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	371c      	adds	r7, #28
 800f682:	46bd      	mov	sp, r7
 800f684:	bd90      	pop	{r4, r7, pc}
 800f686:	bf00      	nop
 800f688:	080154f8 	.word	0x080154f8
 800f68c:	08015cb4 	.word	0x08015cb4
 800f690:	0801554c 	.word	0x0801554c

0800f694 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f694:	b590      	push	{r4, r7, lr}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f69c:	2300      	movs	r3, #0
 800f69e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d106      	bne.n	800f6b4 <tcp_keepalive+0x20>
 800f6a6:	4b18      	ldr	r3, [pc, #96]	; (800f708 <tcp_keepalive+0x74>)
 800f6a8:	f640 0224 	movw	r2, #2084	; 0x824
 800f6ac:	4917      	ldr	r1, [pc, #92]	; (800f70c <tcp_keepalive+0x78>)
 800f6ae:	4818      	ldr	r0, [pc, #96]	; (800f710 <tcp_keepalive+0x7c>)
 800f6b0:	f003 facc 	bl	8012c4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f6b4:	7dfb      	ldrb	r3, [r7, #23]
 800f6b6:	b29c      	uxth	r4, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7f8 fb66 	bl	8007d90 <lwip_htonl>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7ff fe66 	bl	800f39c <tcp_output_alloc_header>
 800f6d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d102      	bne.n	800f6de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6dc:	e010      	b.n	800f700 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f6de:	7dfb      	ldrb	r3, [r7, #23]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	6939      	ldr	r1, [r7, #16]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7ff fe97 	bl	800f418 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	6939      	ldr	r1, [r7, #16]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7ff fed0 	bl	800f498 <tcp_output_control_segment>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f6fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f700:	4618      	mov	r0, r3
 800f702:	371c      	adds	r7, #28
 800f704:	46bd      	mov	sp, r7
 800f706:	bd90      	pop	{r4, r7, pc}
 800f708:	080154f8 	.word	0x080154f8
 800f70c:	08015cd4 	.word	0x08015cd4
 800f710:	0801554c 	.word	0x0801554c

0800f714 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f714:	b590      	push	{r4, r7, lr}
 800f716:	b08b      	sub	sp, #44	; 0x2c
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f71c:	2300      	movs	r3, #0
 800f71e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d106      	bne.n	800f736 <tcp_zero_window_probe+0x22>
 800f728:	4b4c      	ldr	r3, [pc, #304]	; (800f85c <tcp_zero_window_probe+0x148>)
 800f72a:	f640 024f 	movw	r2, #2127	; 0x84f
 800f72e:	494c      	ldr	r1, [pc, #304]	; (800f860 <tcp_zero_window_probe+0x14c>)
 800f730:	484c      	ldr	r0, [pc, #304]	; (800f864 <tcp_zero_window_probe+0x150>)
 800f732:	f003 fa8b 	bl	8012c4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f73a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f73c:	6a3b      	ldr	r3, [r7, #32]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d101      	bne.n	800f746 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f742:	2300      	movs	r3, #0
 800f744:	e086      	b.n	800f854 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f74c:	2bff      	cmp	r3, #255	; 0xff
 800f74e:	d007      	beq.n	800f760 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f756:	3301      	adds	r3, #1
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f760:	6a3b      	ldr	r3, [r7, #32]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	899b      	ldrh	r3, [r3, #12]
 800f766:	b29b      	uxth	r3, r3
 800f768:	4618      	mov	r0, r3
 800f76a:	f7f8 fafc 	bl	8007d66 <lwip_htons>
 800f76e:	4603      	mov	r3, r0
 800f770:	b2db      	uxtb	r3, r3
 800f772:	f003 0301 	and.w	r3, r3, #1
 800f776:	2b00      	cmp	r3, #0
 800f778:	d005      	beq.n	800f786 <tcp_zero_window_probe+0x72>
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	891b      	ldrh	r3, [r3, #8]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <tcp_zero_window_probe+0x72>
 800f782:	2301      	movs	r3, #1
 800f784:	e000      	b.n	800f788 <tcp_zero_window_probe+0x74>
 800f786:	2300      	movs	r3, #0
 800f788:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f78a:	7ffb      	ldrb	r3, [r7, #31]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	bf0c      	ite	eq
 800f790:	2301      	moveq	r3, #1
 800f792:	2300      	movne	r3, #0
 800f794:	b2db      	uxtb	r3, r3
 800f796:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f79c:	b299      	uxth	r1, r3
 800f79e:	6a3b      	ldr	r3, [r7, #32]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	8bba      	ldrh	r2, [r7, #28]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff fdf8 	bl	800f39c <tcp_output_alloc_header>
 800f7ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d102      	bne.n	800f7ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b8:	e04c      	b.n	800f854 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f7c0:	7ffb      	ldrb	r3, [r7, #31]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d011      	beq.n	800f7ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	899b      	ldrh	r3, [r3, #12]
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	b21b      	sxth	r3, r3
 800f7ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7d2:	b21c      	sxth	r4, r3
 800f7d4:	2011      	movs	r0, #17
 800f7d6:	f7f8 fac6 	bl	8007d66 <lwip_htons>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	b21b      	sxth	r3, r3
 800f7de:	4323      	orrs	r3, r4
 800f7e0:	b21b      	sxth	r3, r3
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	819a      	strh	r2, [r3, #12]
 800f7e8:	e010      	b.n	800f80c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	3314      	adds	r3, #20
 800f7f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f7f2:	6a3b      	ldr	r3, [r7, #32]
 800f7f4:	6858      	ldr	r0, [r3, #4]
 800f7f6:	6a3b      	ldr	r3, [r7, #32]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	891a      	ldrh	r2, [r3, #8]
 800f7fc:	6a3b      	ldr	r3, [r7, #32]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	1ad3      	subs	r3, r2, r3
 800f802:	b29b      	uxth	r3, r3
 800f804:	2201      	movs	r2, #1
 800f806:	6939      	ldr	r1, [r7, #16]
 800f808:	f7f9 ff5a 	bl	80096c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f80c:	6a3b      	ldr	r3, [r7, #32]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	4618      	mov	r0, r3
 800f814:	f7f8 fabc 	bl	8007d90 <lwip_htonl>
 800f818:	4603      	mov	r3, r0
 800f81a:	3301      	adds	r3, #1
 800f81c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	da02      	bge.n	800f830 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f834:	2200      	movs	r2, #0
 800f836:	69b9      	ldr	r1, [r7, #24]
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7ff fded 	bl	800f418 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	3304      	adds	r3, #4
 800f844:	69b9      	ldr	r1, [r7, #24]
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff fe26 	bl	800f498 <tcp_output_control_segment>
 800f84c:	4603      	mov	r3, r0
 800f84e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f850:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f854:	4618      	mov	r0, r3
 800f856:	372c      	adds	r7, #44	; 0x2c
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd90      	pop	{r4, r7, pc}
 800f85c:	080154f8 	.word	0x080154f8
 800f860:	08015cf0 	.word	0x08015cf0
 800f864:	0801554c 	.word	0x0801554c

0800f868 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f870:	f7fa f814 	bl	800989c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f874:	4b0a      	ldr	r3, [pc, #40]	; (800f8a0 <tcpip_tcp_timer+0x38>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d103      	bne.n	800f884 <tcpip_tcp_timer+0x1c>
 800f87c:	4b09      	ldr	r3, [pc, #36]	; (800f8a4 <tcpip_tcp_timer+0x3c>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d005      	beq.n	800f890 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f884:	2200      	movs	r2, #0
 800f886:	4908      	ldr	r1, [pc, #32]	; (800f8a8 <tcpip_tcp_timer+0x40>)
 800f888:	20fa      	movs	r0, #250	; 0xfa
 800f88a:	f000 f8f3 	bl	800fa74 <sys_timeout>
 800f88e:	e003      	b.n	800f898 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f890:	4b06      	ldr	r3, [pc, #24]	; (800f8ac <tcpip_tcp_timer+0x44>)
 800f892:	2200      	movs	r2, #0
 800f894:	601a      	str	r2, [r3, #0]
  }
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	200098c0 	.word	0x200098c0
 800f8a4:	200098c4 	.word	0x200098c4
 800f8a8:	0800f869 	.word	0x0800f869
 800f8ac:	2000990c 	.word	0x2000990c

0800f8b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f8b4:	4b0a      	ldr	r3, [pc, #40]	; (800f8e0 <tcp_timer_needed+0x30>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d10f      	bne.n	800f8dc <tcp_timer_needed+0x2c>
 800f8bc:	4b09      	ldr	r3, [pc, #36]	; (800f8e4 <tcp_timer_needed+0x34>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d103      	bne.n	800f8cc <tcp_timer_needed+0x1c>
 800f8c4:	4b08      	ldr	r3, [pc, #32]	; (800f8e8 <tcp_timer_needed+0x38>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d007      	beq.n	800f8dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f8cc:	4b04      	ldr	r3, [pc, #16]	; (800f8e0 <tcp_timer_needed+0x30>)
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	4905      	ldr	r1, [pc, #20]	; (800f8ec <tcp_timer_needed+0x3c>)
 800f8d6:	20fa      	movs	r0, #250	; 0xfa
 800f8d8:	f000 f8cc 	bl	800fa74 <sys_timeout>
  }
}
 800f8dc:	bf00      	nop
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	2000990c 	.word	0x2000990c
 800f8e4:	200098c0 	.word	0x200098c0
 800f8e8:	200098c4 	.word	0x200098c4
 800f8ec:	0800f869 	.word	0x0800f869

0800f8f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f8fc:	2006      	movs	r0, #6
 800f8fe:	f7f8 fe87 	bl	8008610 <memp_malloc>
 800f902:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d109      	bne.n	800f91e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d151      	bne.n	800f9b4 <sys_timeout_abs+0xc4>
 800f910:	4b2a      	ldr	r3, [pc, #168]	; (800f9bc <sys_timeout_abs+0xcc>)
 800f912:	22be      	movs	r2, #190	; 0xbe
 800f914:	492a      	ldr	r1, [pc, #168]	; (800f9c0 <sys_timeout_abs+0xd0>)
 800f916:	482b      	ldr	r0, [pc, #172]	; (800f9c4 <sys_timeout_abs+0xd4>)
 800f918:	f003 f998 	bl	8012c4c <iprintf>
    return;
 800f91c:	e04a      	b.n	800f9b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	2200      	movs	r2, #0
 800f922:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f936:	4b24      	ldr	r3, [pc, #144]	; (800f9c8 <sys_timeout_abs+0xd8>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d103      	bne.n	800f946 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f93e:	4a22      	ldr	r2, [pc, #136]	; (800f9c8 <sys_timeout_abs+0xd8>)
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	6013      	str	r3, [r2, #0]
    return;
 800f944:	e037      	b.n	800f9b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	4b1f      	ldr	r3, [pc, #124]	; (800f9c8 <sys_timeout_abs+0xd8>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	0fdb      	lsrs	r3, r3, #31
 800f954:	f003 0301 	and.w	r3, r3, #1
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d007      	beq.n	800f96e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f95e:	4b1a      	ldr	r3, [pc, #104]	; (800f9c8 <sys_timeout_abs+0xd8>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f966:	4a18      	ldr	r2, [pc, #96]	; (800f9c8 <sys_timeout_abs+0xd8>)
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	e023      	b.n	800f9b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f96e:	4b16      	ldr	r3, [pc, #88]	; (800f9c8 <sys_timeout_abs+0xd8>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	617b      	str	r3, [r7, #20]
 800f974:	e01a      	b.n	800f9ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00b      	beq.n	800f996 <sys_timeout_abs+0xa6>
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	0fdb      	lsrs	r3, r3, #31
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b00      	cmp	r3, #0
 800f994:	d007      	beq.n	800f9a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	601a      	str	r2, [r3, #0]
        break;
 800f9a4:	e007      	b.n	800f9b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	617b      	str	r3, [r7, #20]
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1e1      	bne.n	800f976 <sys_timeout_abs+0x86>
 800f9b2:	e000      	b.n	800f9b6 <sys_timeout_abs+0xc6>
    return;
 800f9b4:	bf00      	nop
      }
    }
  }
}
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	08015d14 	.word	0x08015d14
 800f9c0:	08015d48 	.word	0x08015d48
 800f9c4:	08015d88 	.word	0x08015d88
 800f9c8:	20009904 	.word	0x20009904

0800f9cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	4798      	blx	r3

  now = sys_now();
 800f9de:	f7f5 fd35 	bl	800544c <sys_now>
 800f9e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	4b0f      	ldr	r3, [pc, #60]	; (800fa28 <lwip_cyclic_timer+0x5c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	0fdb      	lsrs	r3, r3, #31
 800f9f8:	f003 0301 	and.w	r3, r3, #1
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d009      	beq.n	800fa16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	4413      	add	r3, r2
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	4907      	ldr	r1, [pc, #28]	; (800fa2c <lwip_cyclic_timer+0x60>)
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7ff ff6e 	bl	800f8f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fa14:	e004      	b.n	800fa20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	4904      	ldr	r1, [pc, #16]	; (800fa2c <lwip_cyclic_timer+0x60>)
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7ff ff68 	bl	800f8f0 <sys_timeout_abs>
}
 800fa20:	bf00      	nop
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	20009908 	.word	0x20009908
 800fa2c:	0800f9cd 	.word	0x0800f9cd

0800fa30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fa36:	2301      	movs	r3, #1
 800fa38:	607b      	str	r3, [r7, #4]
 800fa3a:	e00e      	b.n	800fa5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fa3c:	4a0b      	ldr	r2, [pc, #44]	; (800fa6c <sys_timeouts_init+0x3c>)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	4a08      	ldr	r2, [pc, #32]	; (800fa6c <sys_timeouts_init+0x3c>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4908      	ldr	r1, [pc, #32]	; (800fa70 <sys_timeouts_init+0x40>)
 800fa50:	f000 f810 	bl	800fa74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3301      	adds	r3, #1
 800fa58:	607b      	str	r3, [r7, #4]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d9ed      	bls.n	800fa3c <sys_timeouts_init+0xc>
  }
}
 800fa60:	bf00      	nop
 800fa62:	bf00      	nop
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	0801696c 	.word	0x0801696c
 800fa70:	0800f9cd 	.word	0x0800f9cd

0800fa74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa86:	d306      	bcc.n	800fa96 <sys_timeout+0x22>
 800fa88:	4b0a      	ldr	r3, [pc, #40]	; (800fab4 <sys_timeout+0x40>)
 800fa8a:	f240 1229 	movw	r2, #297	; 0x129
 800fa8e:	490a      	ldr	r1, [pc, #40]	; (800fab8 <sys_timeout+0x44>)
 800fa90:	480a      	ldr	r0, [pc, #40]	; (800fabc <sys_timeout+0x48>)
 800fa92:	f003 f8db 	bl	8012c4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fa96:	f7f5 fcd9 	bl	800544c <sys_now>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	4413      	add	r3, r2
 800faa0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	68b9      	ldr	r1, [r7, #8]
 800faa6:	6978      	ldr	r0, [r7, #20]
 800faa8:	f7ff ff22 	bl	800f8f0 <sys_timeout_abs>
#endif
}
 800faac:	bf00      	nop
 800faae:	3718      	adds	r7, #24
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	08015d14 	.word	0x08015d14
 800fab8:	08015db0 	.word	0x08015db0
 800fabc:	08015d88 	.word	0x08015d88

0800fac0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fac6:	f7f5 fcc1 	bl	800544c <sys_now>
 800faca:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800facc:	4b1a      	ldr	r3, [pc, #104]	; (800fb38 <sys_check_timeouts+0x78>)
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d001      	beq.n	800fada <sys_check_timeouts+0x1a>
 800fad6:	f7f9 f8bf 	bl	8008c58 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800fada:	4b18      	ldr	r3, [pc, #96]	; (800fb3c <sys_check_timeouts+0x7c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d022      	beq.n	800fb2c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	0fdb      	lsrs	r3, r3, #31
 800faf0:	f003 0301 	and.w	r3, r3, #1
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d11a      	bne.n	800fb30 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a0f      	ldr	r2, [pc, #60]	; (800fb3c <sys_check_timeouts+0x7c>)
 800fb00:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	4a0b      	ldr	r2, [pc, #44]	; (800fb40 <sys_check_timeouts+0x80>)
 800fb14:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fb16:	68b9      	ldr	r1, [r7, #8]
 800fb18:	2006      	movs	r0, #6
 800fb1a:	f7f8 fdc5 	bl	80086a8 <memp_free>
    if (handler != NULL) {
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d0d3      	beq.n	800facc <sys_check_timeouts+0xc>
      handler(arg);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6838      	ldr	r0, [r7, #0]
 800fb28:	4798      	blx	r3
  do {
 800fb2a:	e7cf      	b.n	800facc <sys_check_timeouts+0xc>
      return;
 800fb2c:	bf00      	nop
 800fb2e:	e000      	b.n	800fb32 <sys_check_timeouts+0x72>
      return;
 800fb30:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	200098b1 	.word	0x200098b1
 800fb3c:	20009904 	.word	0x20009904
 800fb40:	20009908 	.word	0x20009908

0800fb44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fb48:	f003 f898 	bl	8012c7c <rand>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	4b01      	ldr	r3, [pc, #4]	; (800fb64 <udp_init+0x20>)
 800fb5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fb60:	bf00      	nop
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	2000004c 	.word	0x2000004c

0800fb68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fb72:	4b17      	ldr	r3, [pc, #92]	; (800fbd0 <udp_new_port+0x68>)
 800fb74:	881b      	ldrh	r3, [r3, #0]
 800fb76:	1c5a      	adds	r2, r3, #1
 800fb78:	b291      	uxth	r1, r2
 800fb7a:	4a15      	ldr	r2, [pc, #84]	; (800fbd0 <udp_new_port+0x68>)
 800fb7c:	8011      	strh	r1, [r2, #0]
 800fb7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d103      	bne.n	800fb8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fb86:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <udp_new_port+0x68>)
 800fb88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fb8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb8e:	4b11      	ldr	r3, [pc, #68]	; (800fbd4 <udp_new_port+0x6c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	e011      	b.n	800fbba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	8a5a      	ldrh	r2, [r3, #18]
 800fb9a:	4b0d      	ldr	r3, [pc, #52]	; (800fbd0 <udp_new_port+0x68>)
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d108      	bne.n	800fbb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fba2:	88fb      	ldrh	r3, [r7, #6]
 800fba4:	3301      	adds	r3, #1
 800fba6:	80fb      	strh	r3, [r7, #6]
 800fba8:	88fb      	ldrh	r3, [r7, #6]
 800fbaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fbae:	d3e0      	bcc.n	800fb72 <udp_new_port+0xa>
        return 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e007      	b.n	800fbc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	603b      	str	r3, [r7, #0]
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1ea      	bne.n	800fb96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fbc0:	4b03      	ldr	r3, [pc, #12]	; (800fbd0 <udp_new_port+0x68>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	2000004c 	.word	0x2000004c
 800fbd4:	20009910 	.word	0x20009910

0800fbd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d105      	bne.n	800fbf8 <udp_input_local_match+0x20>
 800fbec:	4b27      	ldr	r3, [pc, #156]	; (800fc8c <udp_input_local_match+0xb4>)
 800fbee:	2287      	movs	r2, #135	; 0x87
 800fbf0:	4927      	ldr	r1, [pc, #156]	; (800fc90 <udp_input_local_match+0xb8>)
 800fbf2:	4828      	ldr	r0, [pc, #160]	; (800fc94 <udp_input_local_match+0xbc>)
 800fbf4:	f003 f82a 	bl	8012c4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d105      	bne.n	800fc0a <udp_input_local_match+0x32>
 800fbfe:	4b23      	ldr	r3, [pc, #140]	; (800fc8c <udp_input_local_match+0xb4>)
 800fc00:	2288      	movs	r2, #136	; 0x88
 800fc02:	4925      	ldr	r1, [pc, #148]	; (800fc98 <udp_input_local_match+0xc0>)
 800fc04:	4823      	ldr	r0, [pc, #140]	; (800fc94 <udp_input_local_match+0xbc>)
 800fc06:	f003 f821 	bl	8012c4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	7a1b      	ldrb	r3, [r3, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00b      	beq.n	800fc2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	7a1a      	ldrb	r2, [r3, #8]
 800fc16:	4b21      	ldr	r3, [pc, #132]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc1e:	3301      	adds	r3, #1
 800fc20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d001      	beq.n	800fc2a <udp_input_local_match+0x52>
    return 0;
 800fc26:	2300      	movs	r3, #0
 800fc28:	e02b      	b.n	800fc82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d018      	beq.n	800fc62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d013      	beq.n	800fc5e <udp_input_local_match+0x86>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00f      	beq.n	800fc5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fc3e:	4b17      	ldr	r3, [pc, #92]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc46:	d00a      	beq.n	800fc5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	4b13      	ldr	r3, [pc, #76]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc4e:	695b      	ldr	r3, [r3, #20]
 800fc50:	405a      	eors	r2, r3
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	3308      	adds	r3, #8
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d110      	bne.n	800fc80 <udp_input_local_match+0xa8>
          return 1;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e00f      	b.n	800fc82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <udp_input_local_match+0xa4>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d005      	beq.n	800fc7c <udp_input_local_match+0xa4>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc76:	695b      	ldr	r3, [r3, #20]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d101      	bne.n	800fc80 <udp_input_local_match+0xa8>
        return 1;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e000      	b.n	800fc82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08015dfc 	.word	0x08015dfc
 800fc90:	08015e2c 	.word	0x08015e2c
 800fc94:	08015e50 	.word	0x08015e50
 800fc98:	08015e78 	.word	0x08015e78
 800fc9c:	20006344 	.word	0x20006344

0800fca0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fca0:	b590      	push	{r4, r7, lr}
 800fca2:	b08d      	sub	sp, #52	; 0x34
 800fca4:	af02      	add	r7, sp, #8
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d105      	bne.n	800fcc0 <udp_input+0x20>
 800fcb4:	4b7c      	ldr	r3, [pc, #496]	; (800fea8 <udp_input+0x208>)
 800fcb6:	22cf      	movs	r2, #207	; 0xcf
 800fcb8:	497c      	ldr	r1, [pc, #496]	; (800feac <udp_input+0x20c>)
 800fcba:	487d      	ldr	r0, [pc, #500]	; (800feb0 <udp_input+0x210>)
 800fcbc:	f002 ffc6 	bl	8012c4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d105      	bne.n	800fcd2 <udp_input+0x32>
 800fcc6:	4b78      	ldr	r3, [pc, #480]	; (800fea8 <udp_input+0x208>)
 800fcc8:	22d0      	movs	r2, #208	; 0xd0
 800fcca:	497a      	ldr	r1, [pc, #488]	; (800feb4 <udp_input+0x214>)
 800fccc:	4878      	ldr	r0, [pc, #480]	; (800feb0 <udp_input+0x210>)
 800fcce:	f002 ffbd 	bl	8012c4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	895b      	ldrh	r3, [r3, #10]
 800fcd6:	2b07      	cmp	r3, #7
 800fcd8:	d803      	bhi.n	800fce2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7f9 faf6 	bl	80092cc <pbuf_free>
    goto end;
 800fce0:	e0de      	b.n	800fea0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fce8:	4b73      	ldr	r3, [pc, #460]	; (800feb8 <udp_input+0x218>)
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	4a72      	ldr	r2, [pc, #456]	; (800feb8 <udp_input+0x218>)
 800fcee:	6812      	ldr	r2, [r2, #0]
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f002 f80a 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7f8 f82f 	bl	8007d66 <lwip_htons>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	885b      	ldrh	r3, [r3, #2]
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7f8 f827 	bl	8007d66 <lwip_htons>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fd20:	2300      	movs	r3, #0
 800fd22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd28:	4b64      	ldr	r3, [pc, #400]	; (800febc <udp_input+0x21c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	627b      	str	r3, [r7, #36]	; 0x24
 800fd2e:	e054      	b.n	800fdda <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	8a5b      	ldrh	r3, [r3, #18]
 800fd34:	89fa      	ldrh	r2, [r7, #14]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d14a      	bne.n	800fdd0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fd3a:	7cfb      	ldrb	r3, [r7, #19]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd42:	f7ff ff49 	bl	800fbd8 <udp_input_local_match>
 800fd46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d041      	beq.n	800fdd0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	7c1b      	ldrb	r3, [r3, #16]
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d11d      	bne.n	800fd94 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d102      	bne.n	800fd64 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	61fb      	str	r3, [r7, #28]
 800fd62:	e017      	b.n	800fd94 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fd64:	7cfb      	ldrb	r3, [r7, #19]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d014      	beq.n	800fd94 <udp_input+0xf4>
 800fd6a:	4b53      	ldr	r3, [pc, #332]	; (800feb8 <udp_input+0x218>)
 800fd6c:	695b      	ldr	r3, [r3, #20]
 800fd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd72:	d10f      	bne.n	800fd94 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d008      	beq.n	800fd94 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d101      	bne.n	800fd94 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	8a9b      	ldrh	r3, [r3, #20]
 800fd98:	8a3a      	ldrh	r2, [r7, #16]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d118      	bne.n	800fdd0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d005      	beq.n	800fdb2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	685a      	ldr	r2, [r3, #4]
 800fdaa:	4b43      	ldr	r3, [pc, #268]	; (800feb8 <udp_input+0x218>)
 800fdac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d10e      	bne.n	800fdd0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fdb2:	6a3b      	ldr	r3, [r7, #32]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d014      	beq.n	800fde2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdba:	68da      	ldr	r2, [r3, #12]
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fdc0:	4b3e      	ldr	r3, [pc, #248]	; (800febc <udp_input+0x21c>)
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fdc8:	4a3c      	ldr	r2, [pc, #240]	; (800febc <udp_input+0x21c>)
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fdce:	e008      	b.n	800fde2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	627b      	str	r3, [r7, #36]	; 0x24
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1a7      	bne.n	800fd30 <udp_input+0x90>
 800fde0:	e000      	b.n	800fde4 <udp_input+0x144>
        break;
 800fde2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d101      	bne.n	800fdee <udp_input+0x14e>
    pcb = uncon_pcb;
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <udp_input+0x15a>
    for_us = 1;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	76fb      	strb	r3, [r7, #27]
 800fdf8:	e00a      	b.n	800fe10 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	4b2d      	ldr	r3, [pc, #180]	; (800feb8 <udp_input+0x218>)
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	bf0c      	ite	eq
 800fe08:	2301      	moveq	r3, #1
 800fe0a:	2300      	movne	r3, #0
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fe10:	7efb      	ldrb	r3, [r7, #27]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d041      	beq.n	800fe9a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fe16:	2108      	movs	r1, #8
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7f9 f9d1 	bl	80091c0 <pbuf_remove_header>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00a      	beq.n	800fe3a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fe24:	4b20      	ldr	r3, [pc, #128]	; (800fea8 <udp_input+0x208>)
 800fe26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fe2a:	4925      	ldr	r1, [pc, #148]	; (800fec0 <udp_input+0x220>)
 800fe2c:	4820      	ldr	r0, [pc, #128]	; (800feb0 <udp_input+0x210>)
 800fe2e:	f002 ff0d 	bl	8012c4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f7f9 fa4a 	bl	80092cc <pbuf_free>
      goto end;
 800fe38:	e032      	b.n	800fea0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d012      	beq.n	800fe66 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	699b      	ldr	r3, [r3, #24]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00a      	beq.n	800fe5e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fe48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4a:	699c      	ldr	r4, [r3, #24]
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	69d8      	ldr	r0, [r3, #28]
 800fe50:	8a3b      	ldrh	r3, [r7, #16]
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	4b1b      	ldr	r3, [pc, #108]	; (800fec4 <udp_input+0x224>)
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe5a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fe5c:	e021      	b.n	800fea2 <udp_input+0x202>
        pbuf_free(p);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7f9 fa34 	bl	80092cc <pbuf_free>
        goto end;
 800fe64:	e01c      	b.n	800fea0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fe66:	7cfb      	ldrb	r3, [r7, #19]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d112      	bne.n	800fe92 <udp_input+0x1f2>
 800fe6c:	4b12      	ldr	r3, [pc, #72]	; (800feb8 <udp_input+0x218>)
 800fe6e:	695b      	ldr	r3, [r3, #20]
 800fe70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe74:	2be0      	cmp	r3, #224	; 0xe0
 800fe76:	d00c      	beq.n	800fe92 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fe78:	4b0f      	ldr	r3, [pc, #60]	; (800feb8 <udp_input+0x218>)
 800fe7a:	899b      	ldrh	r3, [r3, #12]
 800fe7c:	3308      	adds	r3, #8
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	b21b      	sxth	r3, r3
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7f9 fa0e 	bl	80092a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fe8a:	2103      	movs	r1, #3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f001 fc1d 	bl	80116cc <icmp_dest_unreach>
      pbuf_free(p);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7f9 fa1a 	bl	80092cc <pbuf_free>
  return;
 800fe98:	e003      	b.n	800fea2 <udp_input+0x202>
    pbuf_free(p);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7f9 fa16 	bl	80092cc <pbuf_free>
  return;
 800fea0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fea2:	372c      	adds	r7, #44	; 0x2c
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd90      	pop	{r4, r7, pc}
 800fea8:	08015dfc 	.word	0x08015dfc
 800feac:	08015ea0 	.word	0x08015ea0
 800feb0:	08015e50 	.word	0x08015e50
 800feb4:	08015eb8 	.word	0x08015eb8
 800feb8:	20006344 	.word	0x20006344
 800febc:	20009910 	.word	0x20009910
 800fec0:	08015ed4 	.word	0x08015ed4
 800fec4:	20006354 	.word	0x20006354

0800fec8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d109      	bne.n	800feec <udp_send+0x24>
 800fed8:	4b11      	ldr	r3, [pc, #68]	; (800ff20 <udp_send+0x58>)
 800feda:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fede:	4911      	ldr	r1, [pc, #68]	; (800ff24 <udp_send+0x5c>)
 800fee0:	4811      	ldr	r0, [pc, #68]	; (800ff28 <udp_send+0x60>)
 800fee2:	f002 feb3 	bl	8012c4c <iprintf>
 800fee6:	f06f 030f 	mvn.w	r3, #15
 800feea:	e015      	b.n	800ff18 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d109      	bne.n	800ff06 <udp_send+0x3e>
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <udp_send+0x58>)
 800fef4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fef8:	490c      	ldr	r1, [pc, #48]	; (800ff2c <udp_send+0x64>)
 800fefa:	480b      	ldr	r0, [pc, #44]	; (800ff28 <udp_send+0x60>)
 800fefc:	f002 fea6 	bl	8012c4c <iprintf>
 800ff00:	f06f 030f 	mvn.w	r3, #15
 800ff04:	e008      	b.n	800ff18 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	1d1a      	adds	r2, r3, #4
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8a9b      	ldrh	r3, [r3, #20]
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f80d 	bl	800ff30 <udp_sendto>
 800ff16:	4603      	mov	r3, r0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	08015dfc 	.word	0x08015dfc
 800ff24:	08015ef0 	.word	0x08015ef0
 800ff28:	08015e50 	.word	0x08015e50
 800ff2c:	08015f08 	.word	0x08015f08

0800ff30 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b088      	sub	sp, #32
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d109      	bne.n	800ff58 <udp_sendto+0x28>
 800ff44:	4b23      	ldr	r3, [pc, #140]	; (800ffd4 <udp_sendto+0xa4>)
 800ff46:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff4a:	4923      	ldr	r1, [pc, #140]	; (800ffd8 <udp_sendto+0xa8>)
 800ff4c:	4823      	ldr	r0, [pc, #140]	; (800ffdc <udp_sendto+0xac>)
 800ff4e:	f002 fe7d 	bl	8012c4c <iprintf>
 800ff52:	f06f 030f 	mvn.w	r3, #15
 800ff56:	e038      	b.n	800ffca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d109      	bne.n	800ff72 <udp_sendto+0x42>
 800ff5e:	4b1d      	ldr	r3, [pc, #116]	; (800ffd4 <udp_sendto+0xa4>)
 800ff60:	f240 2219 	movw	r2, #537	; 0x219
 800ff64:	491e      	ldr	r1, [pc, #120]	; (800ffe0 <udp_sendto+0xb0>)
 800ff66:	481d      	ldr	r0, [pc, #116]	; (800ffdc <udp_sendto+0xac>)
 800ff68:	f002 fe70 	bl	8012c4c <iprintf>
 800ff6c:	f06f 030f 	mvn.w	r3, #15
 800ff70:	e02b      	b.n	800ffca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d109      	bne.n	800ff8c <udp_sendto+0x5c>
 800ff78:	4b16      	ldr	r3, [pc, #88]	; (800ffd4 <udp_sendto+0xa4>)
 800ff7a:	f240 221a 	movw	r2, #538	; 0x21a
 800ff7e:	4919      	ldr	r1, [pc, #100]	; (800ffe4 <udp_sendto+0xb4>)
 800ff80:	4816      	ldr	r0, [pc, #88]	; (800ffdc <udp_sendto+0xac>)
 800ff82:	f002 fe63 	bl	8012c4c <iprintf>
 800ff86:	f06f 030f 	mvn.w	r3, #15
 800ff8a:	e01e      	b.n	800ffca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	7a1b      	ldrb	r3, [r3, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d006      	beq.n	800ffa2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	7a1b      	ldrb	r3, [r3, #8]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7f8 fe37 	bl	8008c0c <netif_get_by_index>
 800ff9e:	6178      	str	r0, [r7, #20]
 800ffa0:	e003      	b.n	800ffaa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f001 fc1c 	bl	80117e0 <ip4_route>
 800ffa8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ffb0:	f06f 0303 	mvn.w	r3, #3
 800ffb4:	e009      	b.n	800ffca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ffb6:	887a      	ldrh	r2, [r7, #2]
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	68b9      	ldr	r1, [r7, #8]
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f000 f810 	bl	800ffe8 <udp_sendto_if>
 800ffc8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	08015dfc 	.word	0x08015dfc
 800ffd8:	08015f20 	.word	0x08015f20
 800ffdc:	08015e50 	.word	0x08015e50
 800ffe0:	08015f38 	.word	0x08015f38
 800ffe4:	08015f54 	.word	0x08015f54

0800ffe8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af02      	add	r7, sp, #8
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d109      	bne.n	8010010 <udp_sendto_if+0x28>
 800fffc:	4b2e      	ldr	r3, [pc, #184]	; (80100b8 <udp_sendto_if+0xd0>)
 800fffe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010002:	492e      	ldr	r1, [pc, #184]	; (80100bc <udp_sendto_if+0xd4>)
 8010004:	482e      	ldr	r0, [pc, #184]	; (80100c0 <udp_sendto_if+0xd8>)
 8010006:	f002 fe21 	bl	8012c4c <iprintf>
 801000a:	f06f 030f 	mvn.w	r3, #15
 801000e:	e04f      	b.n	80100b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d109      	bne.n	801002a <udp_sendto_if+0x42>
 8010016:	4b28      	ldr	r3, [pc, #160]	; (80100b8 <udp_sendto_if+0xd0>)
 8010018:	f240 2281 	movw	r2, #641	; 0x281
 801001c:	4929      	ldr	r1, [pc, #164]	; (80100c4 <udp_sendto_if+0xdc>)
 801001e:	4828      	ldr	r0, [pc, #160]	; (80100c0 <udp_sendto_if+0xd8>)
 8010020:	f002 fe14 	bl	8012c4c <iprintf>
 8010024:	f06f 030f 	mvn.w	r3, #15
 8010028:	e042      	b.n	80100b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d109      	bne.n	8010044 <udp_sendto_if+0x5c>
 8010030:	4b21      	ldr	r3, [pc, #132]	; (80100b8 <udp_sendto_if+0xd0>)
 8010032:	f240 2282 	movw	r2, #642	; 0x282
 8010036:	4924      	ldr	r1, [pc, #144]	; (80100c8 <udp_sendto_if+0xe0>)
 8010038:	4821      	ldr	r0, [pc, #132]	; (80100c0 <udp_sendto_if+0xd8>)
 801003a:	f002 fe07 	bl	8012c4c <iprintf>
 801003e:	f06f 030f 	mvn.w	r3, #15
 8010042:	e035      	b.n	80100b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010044:	6a3b      	ldr	r3, [r7, #32]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d109      	bne.n	801005e <udp_sendto_if+0x76>
 801004a:	4b1b      	ldr	r3, [pc, #108]	; (80100b8 <udp_sendto_if+0xd0>)
 801004c:	f240 2283 	movw	r2, #643	; 0x283
 8010050:	491e      	ldr	r1, [pc, #120]	; (80100cc <udp_sendto_if+0xe4>)
 8010052:	481b      	ldr	r0, [pc, #108]	; (80100c0 <udp_sendto_if+0xd8>)
 8010054:	f002 fdfa 	bl	8012c4c <iprintf>
 8010058:	f06f 030f 	mvn.w	r3, #15
 801005c:	e028      	b.n	80100b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <udp_sendto_if+0x90>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d005      	beq.n	8010078 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010074:	2be0      	cmp	r3, #224	; 0xe0
 8010076:	d103      	bne.n	8010080 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	3304      	adds	r3, #4
 801007c:	617b      	str	r3, [r7, #20]
 801007e:	e00b      	b.n	8010098 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	6a3b      	ldr	r3, [r7, #32]
 8010086:	3304      	adds	r3, #4
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d002      	beq.n	8010094 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801008e:	f06f 0303 	mvn.w	r3, #3
 8010092:	e00d      	b.n	80100b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010098:	887a      	ldrh	r2, [r7, #2]
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	4613      	mov	r3, r2
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	68b9      	ldr	r1, [r7, #8]
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f000 f811 	bl	80100d0 <udp_sendto_if_src>
 80100ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3718      	adds	r7, #24
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	08015dfc 	.word	0x08015dfc
 80100bc:	08015f70 	.word	0x08015f70
 80100c0:	08015e50 	.word	0x08015e50
 80100c4:	08015f8c 	.word	0x08015f8c
 80100c8:	08015fa8 	.word	0x08015fa8
 80100cc:	08015fc8 	.word	0x08015fc8

080100d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b08c      	sub	sp, #48	; 0x30
 80100d4:	af04      	add	r7, sp, #16
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
 80100dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d109      	bne.n	80100f8 <udp_sendto_if_src+0x28>
 80100e4:	4b65      	ldr	r3, [pc, #404]	; (801027c <udp_sendto_if_src+0x1ac>)
 80100e6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80100ea:	4965      	ldr	r1, [pc, #404]	; (8010280 <udp_sendto_if_src+0x1b0>)
 80100ec:	4865      	ldr	r0, [pc, #404]	; (8010284 <udp_sendto_if_src+0x1b4>)
 80100ee:	f002 fdad 	bl	8012c4c <iprintf>
 80100f2:	f06f 030f 	mvn.w	r3, #15
 80100f6:	e0bc      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d109      	bne.n	8010112 <udp_sendto_if_src+0x42>
 80100fe:	4b5f      	ldr	r3, [pc, #380]	; (801027c <udp_sendto_if_src+0x1ac>)
 8010100:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010104:	4960      	ldr	r1, [pc, #384]	; (8010288 <udp_sendto_if_src+0x1b8>)
 8010106:	485f      	ldr	r0, [pc, #380]	; (8010284 <udp_sendto_if_src+0x1b4>)
 8010108:	f002 fda0 	bl	8012c4c <iprintf>
 801010c:	f06f 030f 	mvn.w	r3, #15
 8010110:	e0af      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d109      	bne.n	801012c <udp_sendto_if_src+0x5c>
 8010118:	4b58      	ldr	r3, [pc, #352]	; (801027c <udp_sendto_if_src+0x1ac>)
 801011a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801011e:	495b      	ldr	r1, [pc, #364]	; (801028c <udp_sendto_if_src+0x1bc>)
 8010120:	4858      	ldr	r0, [pc, #352]	; (8010284 <udp_sendto_if_src+0x1b4>)
 8010122:	f002 fd93 	bl	8012c4c <iprintf>
 8010126:	f06f 030f 	mvn.w	r3, #15
 801012a:	e0a2      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d109      	bne.n	8010146 <udp_sendto_if_src+0x76>
 8010132:	4b52      	ldr	r3, [pc, #328]	; (801027c <udp_sendto_if_src+0x1ac>)
 8010134:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010138:	4955      	ldr	r1, [pc, #340]	; (8010290 <udp_sendto_if_src+0x1c0>)
 801013a:	4852      	ldr	r0, [pc, #328]	; (8010284 <udp_sendto_if_src+0x1b4>)
 801013c:	f002 fd86 	bl	8012c4c <iprintf>
 8010140:	f06f 030f 	mvn.w	r3, #15
 8010144:	e095      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010148:	2b00      	cmp	r3, #0
 801014a:	d109      	bne.n	8010160 <udp_sendto_if_src+0x90>
 801014c:	4b4b      	ldr	r3, [pc, #300]	; (801027c <udp_sendto_if_src+0x1ac>)
 801014e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010152:	4950      	ldr	r1, [pc, #320]	; (8010294 <udp_sendto_if_src+0x1c4>)
 8010154:	484b      	ldr	r0, [pc, #300]	; (8010284 <udp_sendto_if_src+0x1b4>)
 8010156:	f002 fd79 	bl	8012c4c <iprintf>
 801015a:	f06f 030f 	mvn.w	r3, #15
 801015e:	e088      	b.n	8010272 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	8a5b      	ldrh	r3, [r3, #18]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d10f      	bne.n	8010188 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010168:	68f9      	ldr	r1, [r7, #12]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	8a5b      	ldrh	r3, [r3, #18]
 801016e:	461a      	mov	r2, r3
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f000 f893 	bl	801029c <udp_bind>
 8010176:	4603      	mov	r3, r0
 8010178:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801017a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010182:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010186:	e074      	b.n	8010272 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	891b      	ldrh	r3, [r3, #8]
 801018c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010190:	4293      	cmp	r3, r2
 8010192:	d902      	bls.n	801019a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010194:	f04f 33ff 	mov.w	r3, #4294967295
 8010198:	e06b      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801019a:	2108      	movs	r1, #8
 801019c:	68b8      	ldr	r0, [r7, #8]
 801019e:	f7f8 ffff 	bl	80091a0 <pbuf_add_header>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d015      	beq.n	80101d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80101a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101ac:	2108      	movs	r1, #8
 80101ae:	2022      	movs	r0, #34	; 0x22
 80101b0:	f7f8 fda8 	bl	8008d04 <pbuf_alloc>
 80101b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d102      	bne.n	80101c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80101bc:	f04f 33ff 	mov.w	r3, #4294967295
 80101c0:	e057      	b.n	8010272 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	891b      	ldrh	r3, [r3, #8]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d006      	beq.n	80101d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80101ca:	68b9      	ldr	r1, [r7, #8]
 80101cc:	69f8      	ldr	r0, [r7, #28]
 80101ce:	f7f9 f995 	bl	80094fc <pbuf_chain>
 80101d2:	e001      	b.n	80101d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	895b      	ldrh	r3, [r3, #10]
 80101dc:	2b07      	cmp	r3, #7
 80101de:	d806      	bhi.n	80101ee <udp_sendto_if_src+0x11e>
 80101e0:	4b26      	ldr	r3, [pc, #152]	; (801027c <udp_sendto_if_src+0x1ac>)
 80101e2:	f240 320d 	movw	r2, #781	; 0x30d
 80101e6:	492c      	ldr	r1, [pc, #176]	; (8010298 <udp_sendto_if_src+0x1c8>)
 80101e8:	4826      	ldr	r0, [pc, #152]	; (8010284 <udp_sendto_if_src+0x1b4>)
 80101ea:	f002 fd2f 	bl	8012c4c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	8a5b      	ldrh	r3, [r3, #18]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f7 fdb4 	bl	8007d66 <lwip_htons>
 80101fe:	4603      	mov	r3, r0
 8010200:	461a      	mov	r2, r3
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010206:	887b      	ldrh	r3, [r7, #2]
 8010208:	4618      	mov	r0, r3
 801020a:	f7f7 fdac 	bl	8007d66 <lwip_htons>
 801020e:	4603      	mov	r3, r0
 8010210:	461a      	mov	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	2200      	movs	r2, #0
 801021a:	719a      	strb	r2, [r3, #6]
 801021c:	2200      	movs	r2, #0
 801021e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	4618      	mov	r0, r3
 8010226:	f7f7 fd9e 	bl	8007d66 <lwip_htons>
 801022a:	4603      	mov	r3, r0
 801022c:	461a      	mov	r2, r3
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010232:	2311      	movs	r3, #17
 8010234:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	7adb      	ldrb	r3, [r3, #11]
 801023a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	7a9b      	ldrb	r3, [r3, #10]
 8010240:	7cb9      	ldrb	r1, [r7, #18]
 8010242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010244:	9202      	str	r2, [sp, #8]
 8010246:	7cfa      	ldrb	r2, [r7, #19]
 8010248:	9201      	str	r2, [sp, #4]
 801024a:	9300      	str	r3, [sp, #0]
 801024c:	460b      	mov	r3, r1
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010252:	69f8      	ldr	r0, [r7, #28]
 8010254:	f001 fcac 	bl	8011bb0 <ip4_output_if_src>
 8010258:	4603      	mov	r3, r0
 801025a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	429a      	cmp	r2, r3
 8010262:	d004      	beq.n	801026e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010264:	69f8      	ldr	r0, [r7, #28]
 8010266:	f7f9 f831 	bl	80092cc <pbuf_free>
    q = NULL;
 801026a:	2300      	movs	r3, #0
 801026c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801026e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3720      	adds	r7, #32
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	08015dfc 	.word	0x08015dfc
 8010280:	08015fe8 	.word	0x08015fe8
 8010284:	08015e50 	.word	0x08015e50
 8010288:	08016008 	.word	0x08016008
 801028c:	08016028 	.word	0x08016028
 8010290:	0801604c 	.word	0x0801604c
 8010294:	08016070 	.word	0x08016070
 8010298:	08016094 	.word	0x08016094

0801029c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b086      	sub	sp, #24
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	4613      	mov	r3, r2
 80102a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d101      	bne.n	80102b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80102b0:	4b39      	ldr	r3, [pc, #228]	; (8010398 <udp_bind+0xfc>)
 80102b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d109      	bne.n	80102ce <udp_bind+0x32>
 80102ba:	4b38      	ldr	r3, [pc, #224]	; (801039c <udp_bind+0x100>)
 80102bc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80102c0:	4937      	ldr	r1, [pc, #220]	; (80103a0 <udp_bind+0x104>)
 80102c2:	4838      	ldr	r0, [pc, #224]	; (80103a4 <udp_bind+0x108>)
 80102c4:	f002 fcc2 	bl	8012c4c <iprintf>
 80102c8:	f06f 030f 	mvn.w	r3, #15
 80102cc:	e060      	b.n	8010390 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80102ce:	2300      	movs	r3, #0
 80102d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80102d2:	4b35      	ldr	r3, [pc, #212]	; (80103a8 <udp_bind+0x10c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e009      	b.n	80102ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d102      	bne.n	80102e8 <udp_bind+0x4c>
      rebind = 1;
 80102e2:	2301      	movs	r3, #1
 80102e4:	74fb      	strb	r3, [r7, #19]
      break;
 80102e6:	e005      	b.n	80102f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1f2      	bne.n	80102da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80102f4:	88fb      	ldrh	r3, [r7, #6]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d109      	bne.n	801030e <udp_bind+0x72>
    port = udp_new_port();
 80102fa:	f7ff fc35 	bl	800fb68 <udp_new_port>
 80102fe:	4603      	mov	r3, r0
 8010300:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010302:	88fb      	ldrh	r3, [r7, #6]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d12c      	bne.n	8010362 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010308:	f06f 0307 	mvn.w	r3, #7
 801030c:	e040      	b.n	8010390 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801030e:	4b26      	ldr	r3, [pc, #152]	; (80103a8 <udp_bind+0x10c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	617b      	str	r3, [r7, #20]
 8010314:	e022      	b.n	801035c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	429a      	cmp	r2, r3
 801031c:	d01b      	beq.n	8010356 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	8a5b      	ldrh	r3, [r3, #18]
 8010322:	88fa      	ldrh	r2, [r7, #6]
 8010324:	429a      	cmp	r2, r3
 8010326:	d116      	bne.n	8010356 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010330:	429a      	cmp	r2, r3
 8010332:	d00d      	beq.n	8010350 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00a      	beq.n	8010350 <udp_bind+0xb4>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d006      	beq.n	8010350 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010342:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010344:	2b00      	cmp	r3, #0
 8010346:	d003      	beq.n	8010350 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010350:	f06f 0307 	mvn.w	r3, #7
 8010354:	e01c      	b.n	8010390 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	617b      	str	r3, [r7, #20]
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1d9      	bne.n	8010316 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <udp_bind+0xd2>
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	e000      	b.n	8010370 <udp_bind+0xd4>
 801036e:	2300      	movs	r3, #0
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	88fa      	ldrh	r2, [r7, #6]
 8010378:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801037a:	7cfb      	ldrb	r3, [r7, #19]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d106      	bne.n	801038e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010380:	4b09      	ldr	r3, [pc, #36]	; (80103a8 <udp_bind+0x10c>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010388:	4a07      	ldr	r2, [pc, #28]	; (80103a8 <udp_bind+0x10c>)
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3718      	adds	r7, #24
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	08016984 	.word	0x08016984
 801039c:	08015dfc 	.word	0x08015dfc
 80103a0:	080160c4 	.word	0x080160c4
 80103a4:	08015e50 	.word	0x08015e50
 80103a8:	20009910 	.word	0x20009910

080103ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b086      	sub	sp, #24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	4613      	mov	r3, r2
 80103b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d109      	bne.n	80103d4 <udp_connect+0x28>
 80103c0:	4b2c      	ldr	r3, [pc, #176]	; (8010474 <udp_connect+0xc8>)
 80103c2:	f240 4235 	movw	r2, #1077	; 0x435
 80103c6:	492c      	ldr	r1, [pc, #176]	; (8010478 <udp_connect+0xcc>)
 80103c8:	482c      	ldr	r0, [pc, #176]	; (801047c <udp_connect+0xd0>)
 80103ca:	f002 fc3f 	bl	8012c4c <iprintf>
 80103ce:	f06f 030f 	mvn.w	r3, #15
 80103d2:	e04b      	b.n	801046c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d109      	bne.n	80103ee <udp_connect+0x42>
 80103da:	4b26      	ldr	r3, [pc, #152]	; (8010474 <udp_connect+0xc8>)
 80103dc:	f240 4236 	movw	r2, #1078	; 0x436
 80103e0:	4927      	ldr	r1, [pc, #156]	; (8010480 <udp_connect+0xd4>)
 80103e2:	4826      	ldr	r0, [pc, #152]	; (801047c <udp_connect+0xd0>)
 80103e4:	f002 fc32 	bl	8012c4c <iprintf>
 80103e8:	f06f 030f 	mvn.w	r3, #15
 80103ec:	e03e      	b.n	801046c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	8a5b      	ldrh	r3, [r3, #18]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d10f      	bne.n	8010416 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80103f6:	68f9      	ldr	r1, [r7, #12]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	8a5b      	ldrh	r3, [r3, #18]
 80103fc:	461a      	mov	r2, r3
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7ff ff4c 	bl	801029c <udp_bind>
 8010404:	4603      	mov	r3, r0
 8010406:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010408:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <udp_connect+0x6a>
      return err;
 8010410:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010414:	e02a      	b.n	801046c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <udp_connect+0x76>
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	e000      	b.n	8010424 <udp_connect+0x78>
 8010422:	2300      	movs	r3, #0
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	88fa      	ldrh	r2, [r7, #6]
 801042c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	7c1b      	ldrb	r3, [r3, #16]
 8010432:	f043 0304 	orr.w	r3, r3, #4
 8010436:	b2da      	uxtb	r2, r3
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801043c:	4b11      	ldr	r3, [pc, #68]	; (8010484 <udp_connect+0xd8>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	617b      	str	r3, [r7, #20]
 8010442:	e008      	b.n	8010456 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	429a      	cmp	r2, r3
 801044a:	d101      	bne.n	8010450 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801044c:	2300      	movs	r3, #0
 801044e:	e00d      	b.n	801046c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	617b      	str	r3, [r7, #20]
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1f3      	bne.n	8010444 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <udp_connect+0xd8>)
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010464:	4a07      	ldr	r2, [pc, #28]	; (8010484 <udp_connect+0xd8>)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	08015dfc 	.word	0x08015dfc
 8010478:	080160dc 	.word	0x080160dc
 801047c:	08015e50 	.word	0x08015e50
 8010480:	080160f8 	.word	0x080160f8
 8010484:	20009910 	.word	0x20009910

08010488 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d107      	bne.n	80104a6 <udp_disconnect+0x1e>
 8010496:	4b0d      	ldr	r3, [pc, #52]	; (80104cc <udp_disconnect+0x44>)
 8010498:	f240 426a 	movw	r2, #1130	; 0x46a
 801049c:	490c      	ldr	r1, [pc, #48]	; (80104d0 <udp_disconnect+0x48>)
 801049e:	480d      	ldr	r0, [pc, #52]	; (80104d4 <udp_disconnect+0x4c>)
 80104a0:	f002 fbd4 	bl	8012c4c <iprintf>
 80104a4:	e00f      	b.n	80104c6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	7c1b      	ldrb	r3, [r3, #16]
 80104bc:	f023 0304 	bic.w	r3, r3, #4
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	741a      	strb	r2, [r3, #16]
}
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	08015dfc 	.word	0x08015dfc
 80104d0:	08016114 	.word	0x08016114
 80104d4:	08015e50 	.word	0x08015e50

080104d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d107      	bne.n	80104fa <udp_recv+0x22>
 80104ea:	4b08      	ldr	r3, [pc, #32]	; (801050c <udp_recv+0x34>)
 80104ec:	f240 428a 	movw	r2, #1162	; 0x48a
 80104f0:	4907      	ldr	r1, [pc, #28]	; (8010510 <udp_recv+0x38>)
 80104f2:	4808      	ldr	r0, [pc, #32]	; (8010514 <udp_recv+0x3c>)
 80104f4:	f002 fbaa 	bl	8012c4c <iprintf>
 80104f8:	e005      	b.n	8010506 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	68ba      	ldr	r2, [r7, #8]
 80104fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	61da      	str	r2, [r3, #28]
}
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	08015dfc 	.word	0x08015dfc
 8010510:	08016130 	.word	0x08016130
 8010514:	08015e50 	.word	0x08015e50

08010518 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d107      	bne.n	8010536 <udp_remove+0x1e>
 8010526:	4b19      	ldr	r3, [pc, #100]	; (801058c <udp_remove+0x74>)
 8010528:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801052c:	4918      	ldr	r1, [pc, #96]	; (8010590 <udp_remove+0x78>)
 801052e:	4819      	ldr	r0, [pc, #100]	; (8010594 <udp_remove+0x7c>)
 8010530:	f002 fb8c 	bl	8012c4c <iprintf>
 8010534:	e026      	b.n	8010584 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010536:	4b18      	ldr	r3, [pc, #96]	; (8010598 <udp_remove+0x80>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	429a      	cmp	r2, r3
 801053e:	d105      	bne.n	801054c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010540:	4b15      	ldr	r3, [pc, #84]	; (8010598 <udp_remove+0x80>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	4a14      	ldr	r2, [pc, #80]	; (8010598 <udp_remove+0x80>)
 8010548:	6013      	str	r3, [r2, #0]
 801054a:	e017      	b.n	801057c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801054c:	4b12      	ldr	r3, [pc, #72]	; (8010598 <udp_remove+0x80>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	e010      	b.n	8010576 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d009      	beq.n	8010570 <udp_remove+0x58>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d104      	bne.n	8010570 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68da      	ldr	r2, [r3, #12]
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	60da      	str	r2, [r3, #12]
        break;
 801056e:	e005      	b.n	801057c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	60fb      	str	r3, [r7, #12]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1eb      	bne.n	8010554 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801057c:	6879      	ldr	r1, [r7, #4]
 801057e:	2000      	movs	r0, #0
 8010580:	f7f8 f892 	bl	80086a8 <memp_free>
}
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	08015dfc 	.word	0x08015dfc
 8010590:	08016148 	.word	0x08016148
 8010594:	08015e50 	.word	0x08015e50
 8010598:	20009910 	.word	0x20009910

0801059c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80105a2:	2000      	movs	r0, #0
 80105a4:	f7f8 f834 	bl	8008610 <memp_malloc>
 80105a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d007      	beq.n	80105c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80105b0:	2220      	movs	r2, #32
 80105b2:	2100      	movs	r1, #0
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f002 fb41 	bl	8012c3c <memset>
    pcb->ttl = UDP_TTL;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	22ff      	movs	r2, #255	; 0xff
 80105be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80105c0:	687b      	ldr	r3, [r7, #4]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
	...

080105cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d01e      	beq.n	801061a <udp_netif_ip_addr_changed+0x4e>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d01a      	beq.n	801061a <udp_netif_ip_addr_changed+0x4e>
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d017      	beq.n	801061a <udp_netif_ip_addr_changed+0x4e>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d013      	beq.n	801061a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80105f2:	4b0d      	ldr	r3, [pc, #52]	; (8010628 <udp_netif_ip_addr_changed+0x5c>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	60fb      	str	r3, [r7, #12]
 80105f8:	e00c      	b.n	8010614 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	429a      	cmp	r2, r3
 8010604:	d103      	bne.n	801060e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1ef      	bne.n	80105fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801061a:	bf00      	nop
 801061c:	3714      	adds	r7, #20
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	20009910 	.word	0x20009910

0801062c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010634:	4915      	ldr	r1, [pc, #84]	; (801068c <etharp_free_entry+0x60>)
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	4613      	mov	r3, r2
 801063a:	005b      	lsls	r3, r3, #1
 801063c:	4413      	add	r3, r2
 801063e:	00db      	lsls	r3, r3, #3
 8010640:	440b      	add	r3, r1
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d013      	beq.n	8010670 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010648:	4910      	ldr	r1, [pc, #64]	; (801068c <etharp_free_entry+0x60>)
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	4613      	mov	r3, r2
 801064e:	005b      	lsls	r3, r3, #1
 8010650:	4413      	add	r3, r2
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	440b      	add	r3, r1
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4618      	mov	r0, r3
 801065a:	f7f8 fe37 	bl	80092cc <pbuf_free>
    arp_table[i].q = NULL;
 801065e:	490b      	ldr	r1, [pc, #44]	; (801068c <etharp_free_entry+0x60>)
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	4613      	mov	r3, r2
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	4413      	add	r3, r2
 8010668:	00db      	lsls	r3, r3, #3
 801066a:	440b      	add	r3, r1
 801066c:	2200      	movs	r2, #0
 801066e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010670:	4906      	ldr	r1, [pc, #24]	; (801068c <etharp_free_entry+0x60>)
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	4613      	mov	r3, r2
 8010676:	005b      	lsls	r3, r3, #1
 8010678:	4413      	add	r3, r2
 801067a:	00db      	lsls	r3, r3, #3
 801067c:	440b      	add	r3, r1
 801067e:	3314      	adds	r3, #20
 8010680:	2200      	movs	r2, #0
 8010682:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010684:	bf00      	nop
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	20009914 	.word	0x20009914

08010690 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010696:	2300      	movs	r3, #0
 8010698:	607b      	str	r3, [r7, #4]
 801069a:	e096      	b.n	80107ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801069c:	494f      	ldr	r1, [pc, #316]	; (80107dc <etharp_tmr+0x14c>)
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	4613      	mov	r3, r2
 80106a2:	005b      	lsls	r3, r3, #1
 80106a4:	4413      	add	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	440b      	add	r3, r1
 80106aa:	3314      	adds	r3, #20
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80106b0:	78fb      	ldrb	r3, [r7, #3]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f000 8086 	beq.w	80107c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80106b8:	4948      	ldr	r1, [pc, #288]	; (80107dc <etharp_tmr+0x14c>)
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	4613      	mov	r3, r2
 80106be:	005b      	lsls	r3, r3, #1
 80106c0:	4413      	add	r3, r2
 80106c2:	00db      	lsls	r3, r3, #3
 80106c4:	440b      	add	r3, r1
 80106c6:	3312      	adds	r3, #18
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	3301      	adds	r3, #1
 80106cc:	b298      	uxth	r0, r3
 80106ce:	4943      	ldr	r1, [pc, #268]	; (80107dc <etharp_tmr+0x14c>)
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	4613      	mov	r3, r2
 80106d4:	005b      	lsls	r3, r3, #1
 80106d6:	4413      	add	r3, r2
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	440b      	add	r3, r1
 80106dc:	3312      	adds	r3, #18
 80106de:	4602      	mov	r2, r0
 80106e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80106e2:	493e      	ldr	r1, [pc, #248]	; (80107dc <etharp_tmr+0x14c>)
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	4613      	mov	r3, r2
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	4413      	add	r3, r2
 80106ec:	00db      	lsls	r3, r3, #3
 80106ee:	440b      	add	r3, r1
 80106f0:	3312      	adds	r3, #18
 80106f2:	881b      	ldrh	r3, [r3, #0]
 80106f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80106f8:	d215      	bcs.n	8010726 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80106fa:	4938      	ldr	r1, [pc, #224]	; (80107dc <etharp_tmr+0x14c>)
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	4613      	mov	r3, r2
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	4413      	add	r3, r2
 8010704:	00db      	lsls	r3, r3, #3
 8010706:	440b      	add	r3, r1
 8010708:	3314      	adds	r3, #20
 801070a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801070c:	2b01      	cmp	r3, #1
 801070e:	d10e      	bne.n	801072e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010710:	4932      	ldr	r1, [pc, #200]	; (80107dc <etharp_tmr+0x14c>)
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	4613      	mov	r3, r2
 8010716:	005b      	lsls	r3, r3, #1
 8010718:	4413      	add	r3, r2
 801071a:	00db      	lsls	r3, r3, #3
 801071c:	440b      	add	r3, r1
 801071e:	3312      	adds	r3, #18
 8010720:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010722:	2b04      	cmp	r3, #4
 8010724:	d903      	bls.n	801072e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f7ff ff80 	bl	801062c <etharp_free_entry>
 801072c:	e04a      	b.n	80107c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801072e:	492b      	ldr	r1, [pc, #172]	; (80107dc <etharp_tmr+0x14c>)
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	4613      	mov	r3, r2
 8010734:	005b      	lsls	r3, r3, #1
 8010736:	4413      	add	r3, r2
 8010738:	00db      	lsls	r3, r3, #3
 801073a:	440b      	add	r3, r1
 801073c:	3314      	adds	r3, #20
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2b03      	cmp	r3, #3
 8010742:	d10a      	bne.n	801075a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010744:	4925      	ldr	r1, [pc, #148]	; (80107dc <etharp_tmr+0x14c>)
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	4613      	mov	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4413      	add	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	440b      	add	r3, r1
 8010752:	3314      	adds	r3, #20
 8010754:	2204      	movs	r2, #4
 8010756:	701a      	strb	r2, [r3, #0]
 8010758:	e034      	b.n	80107c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801075a:	4920      	ldr	r1, [pc, #128]	; (80107dc <etharp_tmr+0x14c>)
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	4613      	mov	r3, r2
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	4413      	add	r3, r2
 8010764:	00db      	lsls	r3, r3, #3
 8010766:	440b      	add	r3, r1
 8010768:	3314      	adds	r3, #20
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	2b04      	cmp	r3, #4
 801076e:	d10a      	bne.n	8010786 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010770:	491a      	ldr	r1, [pc, #104]	; (80107dc <etharp_tmr+0x14c>)
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4613      	mov	r3, r2
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	4413      	add	r3, r2
 801077a:	00db      	lsls	r3, r3, #3
 801077c:	440b      	add	r3, r1
 801077e:	3314      	adds	r3, #20
 8010780:	2202      	movs	r2, #2
 8010782:	701a      	strb	r2, [r3, #0]
 8010784:	e01e      	b.n	80107c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010786:	4915      	ldr	r1, [pc, #84]	; (80107dc <etharp_tmr+0x14c>)
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	4613      	mov	r3, r2
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4413      	add	r3, r2
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	440b      	add	r3, r1
 8010794:	3314      	adds	r3, #20
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d113      	bne.n	80107c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801079c:	490f      	ldr	r1, [pc, #60]	; (80107dc <etharp_tmr+0x14c>)
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	4613      	mov	r3, r2
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	4413      	add	r3, r2
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	440b      	add	r3, r1
 80107aa:	3308      	adds	r3, #8
 80107ac:	6818      	ldr	r0, [r3, #0]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	4613      	mov	r3, r2
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	4413      	add	r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	4a08      	ldr	r2, [pc, #32]	; (80107dc <etharp_tmr+0x14c>)
 80107ba:	4413      	add	r3, r2
 80107bc:	3304      	adds	r3, #4
 80107be:	4619      	mov	r1, r3
 80107c0:	f000 fe6e 	bl	80114a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3301      	adds	r3, #1
 80107c8:	607b      	str	r3, [r7, #4]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b09      	cmp	r3, #9
 80107ce:	f77f af65 	ble.w	801069c <etharp_tmr+0xc>
      }
    }
  }
}
 80107d2:	bf00      	nop
 80107d4:	bf00      	nop
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	20009914 	.word	0x20009914

080107e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b08a      	sub	sp, #40	; 0x28
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	460b      	mov	r3, r1
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80107ee:	230a      	movs	r3, #10
 80107f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80107f2:	230a      	movs	r3, #10
 80107f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80107f6:	230a      	movs	r3, #10
 80107f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80107fe:	230a      	movs	r3, #10
 8010800:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	83bb      	strh	r3, [r7, #28]
 8010806:	2300      	movs	r3, #0
 8010808:	837b      	strh	r3, [r7, #26]
 801080a:	2300      	movs	r3, #0
 801080c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801080e:	2300      	movs	r3, #0
 8010810:	843b      	strh	r3, [r7, #32]
 8010812:	e0ae      	b.n	8010972 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010818:	49a6      	ldr	r1, [pc, #664]	; (8010ab4 <etharp_find_entry+0x2d4>)
 801081a:	4613      	mov	r3, r2
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	4413      	add	r3, r2
 8010820:	00db      	lsls	r3, r3, #3
 8010822:	440b      	add	r3, r1
 8010824:	3314      	adds	r3, #20
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801082a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801082e:	2b0a      	cmp	r3, #10
 8010830:	d105      	bne.n	801083e <etharp_find_entry+0x5e>
 8010832:	7dfb      	ldrb	r3, [r7, #23]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d102      	bne.n	801083e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010838:	8c3b      	ldrh	r3, [r7, #32]
 801083a:	847b      	strh	r3, [r7, #34]	; 0x22
 801083c:	e095      	b.n	801096a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801083e:	7dfb      	ldrb	r3, [r7, #23]
 8010840:	2b00      	cmp	r3, #0
 8010842:	f000 8092 	beq.w	801096a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010846:	7dfb      	ldrb	r3, [r7, #23]
 8010848:	2b01      	cmp	r3, #1
 801084a:	d009      	beq.n	8010860 <etharp_find_entry+0x80>
 801084c:	7dfb      	ldrb	r3, [r7, #23]
 801084e:	2b01      	cmp	r3, #1
 8010850:	d806      	bhi.n	8010860 <etharp_find_entry+0x80>
 8010852:	4b99      	ldr	r3, [pc, #612]	; (8010ab8 <etharp_find_entry+0x2d8>)
 8010854:	f240 1223 	movw	r2, #291	; 0x123
 8010858:	4998      	ldr	r1, [pc, #608]	; (8010abc <etharp_find_entry+0x2dc>)
 801085a:	4899      	ldr	r0, [pc, #612]	; (8010ac0 <etharp_find_entry+0x2e0>)
 801085c:	f002 f9f6 	bl	8012c4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d020      	beq.n	80108a8 <etharp_find_entry+0xc8>
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6819      	ldr	r1, [r3, #0]
 801086a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801086e:	4891      	ldr	r0, [pc, #580]	; (8010ab4 <etharp_find_entry+0x2d4>)
 8010870:	4613      	mov	r3, r2
 8010872:	005b      	lsls	r3, r3, #1
 8010874:	4413      	add	r3, r2
 8010876:	00db      	lsls	r3, r3, #3
 8010878:	4403      	add	r3, r0
 801087a:	3304      	adds	r3, #4
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4299      	cmp	r1, r3
 8010880:	d112      	bne.n	80108a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d00c      	beq.n	80108a2 <etharp_find_entry+0xc2>
 8010888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801088c:	4989      	ldr	r1, [pc, #548]	; (8010ab4 <etharp_find_entry+0x2d4>)
 801088e:	4613      	mov	r3, r2
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	4413      	add	r3, r2
 8010894:	00db      	lsls	r3, r3, #3
 8010896:	440b      	add	r3, r1
 8010898:	3308      	adds	r3, #8
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d102      	bne.n	80108a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80108a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80108a6:	e100      	b.n	8010aaa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80108a8:	7dfb      	ldrb	r3, [r7, #23]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d140      	bne.n	8010930 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80108ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108b2:	4980      	ldr	r1, [pc, #512]	; (8010ab4 <etharp_find_entry+0x2d4>)
 80108b4:	4613      	mov	r3, r2
 80108b6:	005b      	lsls	r3, r3, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	440b      	add	r3, r1
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d01a      	beq.n	80108fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80108c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108c8:	497a      	ldr	r1, [pc, #488]	; (8010ab4 <etharp_find_entry+0x2d4>)
 80108ca:	4613      	mov	r3, r2
 80108cc:	005b      	lsls	r3, r3, #1
 80108ce:	4413      	add	r3, r2
 80108d0:	00db      	lsls	r3, r3, #3
 80108d2:	440b      	add	r3, r1
 80108d4:	3312      	adds	r3, #18
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	8bba      	ldrh	r2, [r7, #28]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d845      	bhi.n	801096a <etharp_find_entry+0x18a>
            old_queue = i;
 80108de:	8c3b      	ldrh	r3, [r7, #32]
 80108e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80108e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108e6:	4973      	ldr	r1, [pc, #460]	; (8010ab4 <etharp_find_entry+0x2d4>)
 80108e8:	4613      	mov	r3, r2
 80108ea:	005b      	lsls	r3, r3, #1
 80108ec:	4413      	add	r3, r2
 80108ee:	00db      	lsls	r3, r3, #3
 80108f0:	440b      	add	r3, r1
 80108f2:	3312      	adds	r3, #18
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	83bb      	strh	r3, [r7, #28]
 80108f8:	e037      	b.n	801096a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80108fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108fe:	496d      	ldr	r1, [pc, #436]	; (8010ab4 <etharp_find_entry+0x2d4>)
 8010900:	4613      	mov	r3, r2
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	4413      	add	r3, r2
 8010906:	00db      	lsls	r3, r3, #3
 8010908:	440b      	add	r3, r1
 801090a:	3312      	adds	r3, #18
 801090c:	881b      	ldrh	r3, [r3, #0]
 801090e:	8b7a      	ldrh	r2, [r7, #26]
 8010910:	429a      	cmp	r2, r3
 8010912:	d82a      	bhi.n	801096a <etharp_find_entry+0x18a>
            old_pending = i;
 8010914:	8c3b      	ldrh	r3, [r7, #32]
 8010916:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801091c:	4965      	ldr	r1, [pc, #404]	; (8010ab4 <etharp_find_entry+0x2d4>)
 801091e:	4613      	mov	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4413      	add	r3, r2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	440b      	add	r3, r1
 8010928:	3312      	adds	r3, #18
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	837b      	strh	r3, [r7, #26]
 801092e:	e01c      	b.n	801096a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d919      	bls.n	801096a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801093a:	495e      	ldr	r1, [pc, #376]	; (8010ab4 <etharp_find_entry+0x2d4>)
 801093c:	4613      	mov	r3, r2
 801093e:	005b      	lsls	r3, r3, #1
 8010940:	4413      	add	r3, r2
 8010942:	00db      	lsls	r3, r3, #3
 8010944:	440b      	add	r3, r1
 8010946:	3312      	adds	r3, #18
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	8b3a      	ldrh	r2, [r7, #24]
 801094c:	429a      	cmp	r2, r3
 801094e:	d80c      	bhi.n	801096a <etharp_find_entry+0x18a>
            old_stable = i;
 8010950:	8c3b      	ldrh	r3, [r7, #32]
 8010952:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010954:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010958:	4956      	ldr	r1, [pc, #344]	; (8010ab4 <etharp_find_entry+0x2d4>)
 801095a:	4613      	mov	r3, r2
 801095c:	005b      	lsls	r3, r3, #1
 801095e:	4413      	add	r3, r2
 8010960:	00db      	lsls	r3, r3, #3
 8010962:	440b      	add	r3, r1
 8010964:	3312      	adds	r3, #18
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801096a:	8c3b      	ldrh	r3, [r7, #32]
 801096c:	3301      	adds	r3, #1
 801096e:	b29b      	uxth	r3, r3
 8010970:	843b      	strh	r3, [r7, #32]
 8010972:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010976:	2b09      	cmp	r3, #9
 8010978:	f77f af4c 	ble.w	8010814 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801097c:	7afb      	ldrb	r3, [r7, #11]
 801097e:	f003 0302 	and.w	r3, r3, #2
 8010982:	2b00      	cmp	r3, #0
 8010984:	d108      	bne.n	8010998 <etharp_find_entry+0x1b8>
 8010986:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801098a:	2b0a      	cmp	r3, #10
 801098c:	d107      	bne.n	801099e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801098e:	7afb      	ldrb	r3, [r7, #11]
 8010990:	f003 0301 	and.w	r3, r3, #1
 8010994:	2b00      	cmp	r3, #0
 8010996:	d102      	bne.n	801099e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010998:	f04f 33ff 	mov.w	r3, #4294967295
 801099c:	e085      	b.n	8010aaa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801099e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80109a2:	2b09      	cmp	r3, #9
 80109a4:	dc02      	bgt.n	80109ac <etharp_find_entry+0x1cc>
    i = empty;
 80109a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109a8:	843b      	strh	r3, [r7, #32]
 80109aa:	e039      	b.n	8010a20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80109ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80109b0:	2b09      	cmp	r3, #9
 80109b2:	dc14      	bgt.n	80109de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80109b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80109b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109bc:	493d      	ldr	r1, [pc, #244]	; (8010ab4 <etharp_find_entry+0x2d4>)
 80109be:	4613      	mov	r3, r2
 80109c0:	005b      	lsls	r3, r3, #1
 80109c2:	4413      	add	r3, r2
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	440b      	add	r3, r1
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d018      	beq.n	8010a00 <etharp_find_entry+0x220>
 80109ce:	4b3a      	ldr	r3, [pc, #232]	; (8010ab8 <etharp_find_entry+0x2d8>)
 80109d0:	f240 126d 	movw	r2, #365	; 0x16d
 80109d4:	493b      	ldr	r1, [pc, #236]	; (8010ac4 <etharp_find_entry+0x2e4>)
 80109d6:	483a      	ldr	r0, [pc, #232]	; (8010ac0 <etharp_find_entry+0x2e0>)
 80109d8:	f002 f938 	bl	8012c4c <iprintf>
 80109dc:	e010      	b.n	8010a00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80109de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80109e2:	2b09      	cmp	r3, #9
 80109e4:	dc02      	bgt.n	80109ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80109e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109e8:	843b      	strh	r3, [r7, #32]
 80109ea:	e009      	b.n	8010a00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80109ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80109f0:	2b09      	cmp	r3, #9
 80109f2:	dc02      	bgt.n	80109fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80109f4:	8bfb      	ldrh	r3, [r7, #30]
 80109f6:	843b      	strh	r3, [r7, #32]
 80109f8:	e002      	b.n	8010a00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80109fa:	f04f 33ff 	mov.w	r3, #4294967295
 80109fe:	e054      	b.n	8010aaa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a04:	2b09      	cmp	r3, #9
 8010a06:	dd06      	ble.n	8010a16 <etharp_find_entry+0x236>
 8010a08:	4b2b      	ldr	r3, [pc, #172]	; (8010ab8 <etharp_find_entry+0x2d8>)
 8010a0a:	f240 127f 	movw	r2, #383	; 0x17f
 8010a0e:	492e      	ldr	r1, [pc, #184]	; (8010ac8 <etharp_find_entry+0x2e8>)
 8010a10:	482b      	ldr	r0, [pc, #172]	; (8010ac0 <etharp_find_entry+0x2e0>)
 8010a12:	f002 f91b 	bl	8012c4c <iprintf>
    etharp_free_entry(i);
 8010a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7ff fe06 	bl	801062c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a24:	2b09      	cmp	r3, #9
 8010a26:	dd06      	ble.n	8010a36 <etharp_find_entry+0x256>
 8010a28:	4b23      	ldr	r3, [pc, #140]	; (8010ab8 <etharp_find_entry+0x2d8>)
 8010a2a:	f240 1283 	movw	r2, #387	; 0x183
 8010a2e:	4926      	ldr	r1, [pc, #152]	; (8010ac8 <etharp_find_entry+0x2e8>)
 8010a30:	4823      	ldr	r0, [pc, #140]	; (8010ac0 <etharp_find_entry+0x2e0>)
 8010a32:	f002 f90b 	bl	8012c4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a3a:	491e      	ldr	r1, [pc, #120]	; (8010ab4 <etharp_find_entry+0x2d4>)
 8010a3c:	4613      	mov	r3, r2
 8010a3e:	005b      	lsls	r3, r3, #1
 8010a40:	4413      	add	r3, r2
 8010a42:	00db      	lsls	r3, r3, #3
 8010a44:	440b      	add	r3, r1
 8010a46:	3314      	adds	r3, #20
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d006      	beq.n	8010a5c <etharp_find_entry+0x27c>
 8010a4e:	4b1a      	ldr	r3, [pc, #104]	; (8010ab8 <etharp_find_entry+0x2d8>)
 8010a50:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010a54:	491d      	ldr	r1, [pc, #116]	; (8010acc <etharp_find_entry+0x2ec>)
 8010a56:	481a      	ldr	r0, [pc, #104]	; (8010ac0 <etharp_find_entry+0x2e0>)
 8010a58:	f002 f8f8 	bl	8012c4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00b      	beq.n	8010a7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010a62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6819      	ldr	r1, [r3, #0]
 8010a6a:	4812      	ldr	r0, [pc, #72]	; (8010ab4 <etharp_find_entry+0x2d4>)
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	4403      	add	r3, r0
 8010a76:	3304      	adds	r3, #4
 8010a78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010a7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a7e:	490d      	ldr	r1, [pc, #52]	; (8010ab4 <etharp_find_entry+0x2d4>)
 8010a80:	4613      	mov	r3, r2
 8010a82:	005b      	lsls	r3, r3, #1
 8010a84:	4413      	add	r3, r2
 8010a86:	00db      	lsls	r3, r3, #3
 8010a88:	440b      	add	r3, r1
 8010a8a:	3312      	adds	r3, #18
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a94:	4907      	ldr	r1, [pc, #28]	; (8010ab4 <etharp_find_entry+0x2d4>)
 8010a96:	4613      	mov	r3, r2
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	4413      	add	r3, r2
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	440b      	add	r3, r1
 8010aa0:	3308      	adds	r3, #8
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010aa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3728      	adds	r7, #40	; 0x28
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	20009914 	.word	0x20009914
 8010ab8:	08016160 	.word	0x08016160
 8010abc:	08016198 	.word	0x08016198
 8010ac0:	080161d8 	.word	0x080161d8
 8010ac4:	08016200 	.word	0x08016200
 8010ac8:	08016218 	.word	0x08016218
 8010acc:	0801622c 	.word	0x0801622c

08010ad0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b088      	sub	sp, #32
 8010ad4:	af02      	add	r7, sp, #8
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ae4:	2b06      	cmp	r3, #6
 8010ae6:	d006      	beq.n	8010af6 <etharp_update_arp_entry+0x26>
 8010ae8:	4b48      	ldr	r3, [pc, #288]	; (8010c0c <etharp_update_arp_entry+0x13c>)
 8010aea:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010aee:	4948      	ldr	r1, [pc, #288]	; (8010c10 <etharp_update_arp_entry+0x140>)
 8010af0:	4848      	ldr	r0, [pc, #288]	; (8010c14 <etharp_update_arp_entry+0x144>)
 8010af2:	f002 f8ab 	bl	8012c4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d012      	beq.n	8010b22 <etharp_update_arp_entry+0x52>
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d00e      	beq.n	8010b22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	68f9      	ldr	r1, [r7, #12]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f001 f8fe 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 8010b10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d105      	bne.n	8010b22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b1e:	2be0      	cmp	r3, #224	; 0xe0
 8010b20:	d102      	bne.n	8010b28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b22:	f06f 030f 	mvn.w	r3, #15
 8010b26:	e06c      	b.n	8010c02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010b28:	78fb      	ldrb	r3, [r7, #3]
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	68b8      	ldr	r0, [r7, #8]
 8010b30:	f7ff fe56 	bl	80107e0 <etharp_find_entry>
 8010b34:	4603      	mov	r3, r0
 8010b36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010b38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	da02      	bge.n	8010b46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010b40:	8afb      	ldrh	r3, [r7, #22]
 8010b42:	b25b      	sxtb	r3, r3
 8010b44:	e05d      	b.n	8010c02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010b46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b4a:	4933      	ldr	r1, [pc, #204]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	4413      	add	r3, r2
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	440b      	add	r3, r1
 8010b56:	3314      	adds	r3, #20
 8010b58:	2202      	movs	r2, #2
 8010b5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010b5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b60:	492d      	ldr	r1, [pc, #180]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010b62:	4613      	mov	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3308      	adds	r3, #8
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010b72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b76:	4613      	mov	r3, r2
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	3308      	adds	r3, #8
 8010b80:	4a25      	ldr	r2, [pc, #148]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010b82:	4413      	add	r3, r2
 8010b84:	3304      	adds	r3, #4
 8010b86:	2206      	movs	r2, #6
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f002 f848 	bl	8012c20 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010b90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b94:	4920      	ldr	r1, [pc, #128]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	440b      	add	r3, r1
 8010ba0:	3312      	adds	r3, #18
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010ba6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010baa:	491b      	ldr	r1, [pc, #108]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d021      	beq.n	8010c00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010bbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010bc0:	4915      	ldr	r1, [pc, #84]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	440b      	add	r3, r1
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010bd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010bd4:	4910      	ldr	r1, [pc, #64]	; (8010c18 <etharp_update_arp_entry+0x148>)
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	4413      	add	r3, r2
 8010bdc:	00db      	lsls	r3, r3, #3
 8010bde:	440b      	add	r3, r1
 8010be0:	2200      	movs	r2, #0
 8010be2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6939      	ldr	r1, [r7, #16]
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f001 ff97 	bl	8012b28 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010bfa:	6938      	ldr	r0, [r7, #16]
 8010bfc:	f7f8 fb66 	bl	80092cc <pbuf_free>
  }
  return ERR_OK;
 8010c00:	2300      	movs	r3, #0
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3718      	adds	r7, #24
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	08016160 	.word	0x08016160
 8010c10:	08016258 	.word	0x08016258
 8010c14:	080161d8 	.word	0x080161d8
 8010c18:	20009914 	.word	0x20009914

08010c1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c24:	2300      	movs	r3, #0
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	e01e      	b.n	8010c68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010c2a:	4913      	ldr	r1, [pc, #76]	; (8010c78 <etharp_cleanup_netif+0x5c>)
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	005b      	lsls	r3, r3, #1
 8010c32:	4413      	add	r3, r2
 8010c34:	00db      	lsls	r3, r3, #3
 8010c36:	440b      	add	r3, r1
 8010c38:	3314      	adds	r3, #20
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010c3e:	7afb      	ldrb	r3, [r7, #11]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00e      	beq.n	8010c62 <etharp_cleanup_netif+0x46>
 8010c44:	490c      	ldr	r1, [pc, #48]	; (8010c78 <etharp_cleanup_netif+0x5c>)
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	4613      	mov	r3, r2
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	00db      	lsls	r3, r3, #3
 8010c50:	440b      	add	r3, r1
 8010c52:	3308      	adds	r3, #8
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d102      	bne.n	8010c62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7ff fce5 	bl	801062c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	3301      	adds	r3, #1
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2b09      	cmp	r3, #9
 8010c6c:	dddd      	ble.n	8010c2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010c6e:	bf00      	nop
 8010c70:	bf00      	nop
 8010c72:	3710      	adds	r7, #16
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	20009914 	.word	0x20009914

08010c7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010c7c:	b5b0      	push	{r4, r5, r7, lr}
 8010c7e:	b08a      	sub	sp, #40	; 0x28
 8010c80:	af04      	add	r7, sp, #16
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d107      	bne.n	8010c9c <etharp_input+0x20>
 8010c8c:	4b3d      	ldr	r3, [pc, #244]	; (8010d84 <etharp_input+0x108>)
 8010c8e:	f240 228a 	movw	r2, #650	; 0x28a
 8010c92:	493d      	ldr	r1, [pc, #244]	; (8010d88 <etharp_input+0x10c>)
 8010c94:	483d      	ldr	r0, [pc, #244]	; (8010d8c <etharp_input+0x110>)
 8010c96:	f001 ffd9 	bl	8012c4c <iprintf>
 8010c9a:	e06f      	b.n	8010d7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	881b      	ldrh	r3, [r3, #0]
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cac:	d10c      	bne.n	8010cc8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010cb2:	2b06      	cmp	r3, #6
 8010cb4:	d108      	bne.n	8010cc8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010cba:	2b04      	cmp	r3, #4
 8010cbc:	d104      	bne.n	8010cc8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	885b      	ldrh	r3, [r3, #2]
 8010cc2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010cc4:	2b08      	cmp	r3, #8
 8010cc6:	d003      	beq.n	8010cd0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7f8 faff 	bl	80092cc <pbuf_free>
    return;
 8010cce:	e055      	b.n	8010d7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	330e      	adds	r3, #14
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	3318      	adds	r3, #24
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	3304      	adds	r3, #4
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d102      	bne.n	8010cf0 <etharp_input+0x74>
    for_us = 0;
 8010cea:	2300      	movs	r3, #0
 8010cec:	75fb      	strb	r3, [r7, #23]
 8010cee:	e009      	b.n	8010d04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010cf0:	68ba      	ldr	r2, [r7, #8]
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	3304      	adds	r3, #4
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	bf0c      	ite	eq
 8010cfc:	2301      	moveq	r3, #1
 8010cfe:	2300      	movne	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	f103 0208 	add.w	r2, r3, #8
 8010d0a:	7dfb      	ldrb	r3, [r7, #23]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <etharp_input+0x98>
 8010d10:	2301      	movs	r3, #1
 8010d12:	e000      	b.n	8010d16 <etharp_input+0x9a>
 8010d14:	2302      	movs	r3, #2
 8010d16:	f107 010c 	add.w	r1, r7, #12
 8010d1a:	6838      	ldr	r0, [r7, #0]
 8010d1c:	f7ff fed8 	bl	8010ad0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	88db      	ldrh	r3, [r3, #6]
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d2a:	d003      	beq.n	8010d34 <etharp_input+0xb8>
 8010d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d30:	d01e      	beq.n	8010d70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010d32:	e020      	b.n	8010d76 <etharp_input+0xfa>
      if (for_us) {
 8010d34:	7dfb      	ldrb	r3, [r7, #23]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d01c      	beq.n	8010d74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010d50:	693a      	ldr	r2, [r7, #16]
 8010d52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010d54:	2102      	movs	r1, #2
 8010d56:	9103      	str	r1, [sp, #12]
 8010d58:	f107 010c 	add.w	r1, r7, #12
 8010d5c:	9102      	str	r1, [sp, #8]
 8010d5e:	9201      	str	r2, [sp, #4]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	462b      	mov	r3, r5
 8010d64:	4622      	mov	r2, r4
 8010d66:	4601      	mov	r1, r0
 8010d68:	6838      	ldr	r0, [r7, #0]
 8010d6a:	f000 faeb 	bl	8011344 <etharp_raw>
      break;
 8010d6e:	e001      	b.n	8010d74 <etharp_input+0xf8>
      break;
 8010d70:	bf00      	nop
 8010d72:	e000      	b.n	8010d76 <etharp_input+0xfa>
      break;
 8010d74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f7f8 faa8 	bl	80092cc <pbuf_free>
}
 8010d7c:	3718      	adds	r7, #24
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bdb0      	pop	{r4, r5, r7, pc}
 8010d82:	bf00      	nop
 8010d84:	08016160 	.word	0x08016160
 8010d88:	080162b0 	.word	0x080162b0
 8010d8c:	080161d8 	.word	0x080161d8

08010d90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af02      	add	r7, sp, #8
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010d9e:	79fa      	ldrb	r2, [r7, #7]
 8010da0:	4944      	ldr	r1, [pc, #272]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010da2:	4613      	mov	r3, r2
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	4413      	add	r3, r2
 8010da8:	00db      	lsls	r3, r3, #3
 8010daa:	440b      	add	r3, r1
 8010dac:	3314      	adds	r3, #20
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d806      	bhi.n	8010dc2 <etharp_output_to_arp_index+0x32>
 8010db4:	4b40      	ldr	r3, [pc, #256]	; (8010eb8 <etharp_output_to_arp_index+0x128>)
 8010db6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010dba:	4940      	ldr	r1, [pc, #256]	; (8010ebc <etharp_output_to_arp_index+0x12c>)
 8010dbc:	4840      	ldr	r0, [pc, #256]	; (8010ec0 <etharp_output_to_arp_index+0x130>)
 8010dbe:	f001 ff45 	bl	8012c4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010dc2:	79fa      	ldrb	r2, [r7, #7]
 8010dc4:	493b      	ldr	r1, [pc, #236]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	4413      	add	r3, r2
 8010dcc:	00db      	lsls	r3, r3, #3
 8010dce:	440b      	add	r3, r1
 8010dd0:	3314      	adds	r3, #20
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	2b02      	cmp	r3, #2
 8010dd6:	d153      	bne.n	8010e80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010dd8:	79fa      	ldrb	r2, [r7, #7]
 8010dda:	4936      	ldr	r1, [pc, #216]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010ddc:	4613      	mov	r3, r2
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	4413      	add	r3, r2
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	440b      	add	r3, r1
 8010de6:	3312      	adds	r3, #18
 8010de8:	881b      	ldrh	r3, [r3, #0]
 8010dea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010dee:	d919      	bls.n	8010e24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010df0:	79fa      	ldrb	r2, [r7, #7]
 8010df2:	4613      	mov	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	00db      	lsls	r3, r3, #3
 8010dfa:	4a2e      	ldr	r2, [pc, #184]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010dfc:	4413      	add	r3, r2
 8010dfe:	3304      	adds	r3, #4
 8010e00:	4619      	mov	r1, r3
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f000 fb4c 	bl	80114a0 <etharp_request>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d138      	bne.n	8010e80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e0e:	79fa      	ldrb	r2, [r7, #7]
 8010e10:	4928      	ldr	r1, [pc, #160]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010e12:	4613      	mov	r3, r2
 8010e14:	005b      	lsls	r3, r3, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	440b      	add	r3, r1
 8010e1c:	3314      	adds	r3, #20
 8010e1e:	2203      	movs	r2, #3
 8010e20:	701a      	strb	r2, [r3, #0]
 8010e22:	e02d      	b.n	8010e80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010e24:	79fa      	ldrb	r2, [r7, #7]
 8010e26:	4923      	ldr	r1, [pc, #140]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010e28:	4613      	mov	r3, r2
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	4413      	add	r3, r2
 8010e2e:	00db      	lsls	r3, r3, #3
 8010e30:	440b      	add	r3, r1
 8010e32:	3312      	adds	r3, #18
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010e3a:	d321      	bcc.n	8010e80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e3c:	79fa      	ldrb	r2, [r7, #7]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	4413      	add	r3, r2
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	4a1b      	ldr	r2, [pc, #108]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010e48:	4413      	add	r3, r2
 8010e4a:	1d19      	adds	r1, r3, #4
 8010e4c:	79fa      	ldrb	r2, [r7, #7]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	4413      	add	r3, r2
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	3308      	adds	r3, #8
 8010e58:	4a16      	ldr	r2, [pc, #88]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010e5a:	4413      	add	r3, r2
 8010e5c:	3304      	adds	r3, #4
 8010e5e:	461a      	mov	r2, r3
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f000 fafb 	bl	801145c <etharp_request_dst>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d109      	bne.n	8010e80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e6c:	79fa      	ldrb	r2, [r7, #7]
 8010e6e:	4911      	ldr	r1, [pc, #68]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010e70:	4613      	mov	r3, r2
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	4413      	add	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	440b      	add	r3, r1
 8010e7a:	3314      	adds	r3, #20
 8010e7c:	2203      	movs	r2, #3
 8010e7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010e86:	79fa      	ldrb	r2, [r7, #7]
 8010e88:	4613      	mov	r3, r2
 8010e8a:	005b      	lsls	r3, r3, #1
 8010e8c:	4413      	add	r3, r2
 8010e8e:	00db      	lsls	r3, r3, #3
 8010e90:	3308      	adds	r3, #8
 8010e92:	4a08      	ldr	r2, [pc, #32]	; (8010eb4 <etharp_output_to_arp_index+0x124>)
 8010e94:	4413      	add	r3, r2
 8010e96:	3304      	adds	r3, #4
 8010e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e9c:	9200      	str	r2, [sp, #0]
 8010e9e:	460a      	mov	r2, r1
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f001 fe40 	bl	8012b28 <ethernet_output>
 8010ea8:	4603      	mov	r3, r0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	20009914 	.word	0x20009914
 8010eb8:	08016160 	.word	0x08016160
 8010ebc:	080162d0 	.word	0x080162d0
 8010ec0:	080161d8 	.word	0x080161d8

08010ec4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b08a      	sub	sp, #40	; 0x28
 8010ec8:	af02      	add	r7, sp, #8
 8010eca:	60f8      	str	r0, [r7, #12]
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d106      	bne.n	8010ee8 <etharp_output+0x24>
 8010eda:	4b73      	ldr	r3, [pc, #460]	; (80110a8 <etharp_output+0x1e4>)
 8010edc:	f240 321e 	movw	r2, #798	; 0x31e
 8010ee0:	4972      	ldr	r1, [pc, #456]	; (80110ac <etharp_output+0x1e8>)
 8010ee2:	4873      	ldr	r0, [pc, #460]	; (80110b0 <etharp_output+0x1ec>)
 8010ee4:	f001 feb2 	bl	8012c4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <etharp_output+0x38>
 8010eee:	4b6e      	ldr	r3, [pc, #440]	; (80110a8 <etharp_output+0x1e4>)
 8010ef0:	f240 321f 	movw	r2, #799	; 0x31f
 8010ef4:	496f      	ldr	r1, [pc, #444]	; (80110b4 <etharp_output+0x1f0>)
 8010ef6:	486e      	ldr	r0, [pc, #440]	; (80110b0 <etharp_output+0x1ec>)
 8010ef8:	f001 fea8 	bl	8012c4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d106      	bne.n	8010f10 <etharp_output+0x4c>
 8010f02:	4b69      	ldr	r3, [pc, #420]	; (80110a8 <etharp_output+0x1e4>)
 8010f04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010f08:	496b      	ldr	r1, [pc, #428]	; (80110b8 <etharp_output+0x1f4>)
 8010f0a:	4869      	ldr	r0, [pc, #420]	; (80110b0 <etharp_output+0x1ec>)
 8010f0c:	f001 fe9e 	bl	8012c4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68f9      	ldr	r1, [r7, #12]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 fef8 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d002      	beq.n	8010f28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010f22:	4b66      	ldr	r3, [pc, #408]	; (80110bc <etharp_output+0x1f8>)
 8010f24:	61fb      	str	r3, [r7, #28]
 8010f26:	e0af      	b.n	8011088 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f30:	2be0      	cmp	r3, #224	; 0xe0
 8010f32:	d118      	bne.n	8010f66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010f34:	2301      	movs	r3, #1
 8010f36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010f3c:	235e      	movs	r3, #94	; 0x5e
 8010f3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	3301      	adds	r3, #1
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	3302      	adds	r3, #2
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	3303      	adds	r3, #3
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010f5e:	f107 0310 	add.w	r3, r7, #16
 8010f62:	61fb      	str	r3, [r7, #28]
 8010f64:	e090      	b.n	8011088 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	3304      	adds	r3, #4
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	405a      	eors	r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3308      	adds	r3, #8
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4013      	ands	r3, r2
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d012      	beq.n	8010fa4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d00b      	beq.n	8010fa4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	330c      	adds	r3, #12
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	330c      	adds	r3, #12
 8010f9a:	61bb      	str	r3, [r7, #24]
 8010f9c:	e002      	b.n	8010fa4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010f9e:	f06f 0303 	mvn.w	r3, #3
 8010fa2:	e07d      	b.n	80110a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010fa4:	4b46      	ldr	r3, [pc, #280]	; (80110c0 <etharp_output+0x1fc>)
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	4a46      	ldr	r2, [pc, #280]	; (80110c4 <etharp_output+0x200>)
 8010fac:	460b      	mov	r3, r1
 8010fae:	005b      	lsls	r3, r3, #1
 8010fb0:	440b      	add	r3, r1
 8010fb2:	00db      	lsls	r3, r3, #3
 8010fb4:	4413      	add	r3, r2
 8010fb6:	3314      	adds	r3, #20
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d925      	bls.n	801100a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010fbe:	4b40      	ldr	r3, [pc, #256]	; (80110c0 <etharp_output+0x1fc>)
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	4a3f      	ldr	r2, [pc, #252]	; (80110c4 <etharp_output+0x200>)
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	440b      	add	r3, r1
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	4413      	add	r3, r2
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d117      	bne.n	801100a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	681a      	ldr	r2, [r3, #0]
 8010fde:	4b38      	ldr	r3, [pc, #224]	; (80110c0 <etharp_output+0x1fc>)
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	4937      	ldr	r1, [pc, #220]	; (80110c4 <etharp_output+0x200>)
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	4403      	add	r3, r0
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	440b      	add	r3, r1
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d108      	bne.n	801100a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010ff8:	4b31      	ldr	r3, [pc, #196]	; (80110c0 <etharp_output+0x1fc>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	68b9      	ldr	r1, [r7, #8]
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f7ff fec5 	bl	8010d90 <etharp_output_to_arp_index>
 8011006:	4603      	mov	r3, r0
 8011008:	e04a      	b.n	80110a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801100a:	2300      	movs	r3, #0
 801100c:	75fb      	strb	r3, [r7, #23]
 801100e:	e031      	b.n	8011074 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011010:	7dfa      	ldrb	r2, [r7, #23]
 8011012:	492c      	ldr	r1, [pc, #176]	; (80110c4 <etharp_output+0x200>)
 8011014:	4613      	mov	r3, r2
 8011016:	005b      	lsls	r3, r3, #1
 8011018:	4413      	add	r3, r2
 801101a:	00db      	lsls	r3, r3, #3
 801101c:	440b      	add	r3, r1
 801101e:	3314      	adds	r3, #20
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d923      	bls.n	801106e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011026:	7dfa      	ldrb	r2, [r7, #23]
 8011028:	4926      	ldr	r1, [pc, #152]	; (80110c4 <etharp_output+0x200>)
 801102a:	4613      	mov	r3, r2
 801102c:	005b      	lsls	r3, r3, #1
 801102e:	4413      	add	r3, r2
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	440b      	add	r3, r1
 8011034:	3308      	adds	r3, #8
 8011036:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	429a      	cmp	r2, r3
 801103c:	d117      	bne.n	801106e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	6819      	ldr	r1, [r3, #0]
 8011042:	7dfa      	ldrb	r2, [r7, #23]
 8011044:	481f      	ldr	r0, [pc, #124]	; (80110c4 <etharp_output+0x200>)
 8011046:	4613      	mov	r3, r2
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	4413      	add	r3, r2
 801104c:	00db      	lsls	r3, r3, #3
 801104e:	4403      	add	r3, r0
 8011050:	3304      	adds	r3, #4
 8011052:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011054:	4299      	cmp	r1, r3
 8011056:	d10a      	bne.n	801106e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011058:	4a19      	ldr	r2, [pc, #100]	; (80110c0 <etharp_output+0x1fc>)
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801105e:	7dfb      	ldrb	r3, [r7, #23]
 8011060:	461a      	mov	r2, r3
 8011062:	68b9      	ldr	r1, [r7, #8]
 8011064:	68f8      	ldr	r0, [r7, #12]
 8011066:	f7ff fe93 	bl	8010d90 <etharp_output_to_arp_index>
 801106a:	4603      	mov	r3, r0
 801106c:	e018      	b.n	80110a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801106e:	7dfb      	ldrb	r3, [r7, #23]
 8011070:	3301      	adds	r3, #1
 8011072:	75fb      	strb	r3, [r7, #23]
 8011074:	7dfb      	ldrb	r3, [r7, #23]
 8011076:	2b09      	cmp	r3, #9
 8011078:	d9ca      	bls.n	8011010 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	69b9      	ldr	r1, [r7, #24]
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f000 f822 	bl	80110c8 <etharp_query>
 8011084:	4603      	mov	r3, r0
 8011086:	e00b      	b.n	80110a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801108e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	68b9      	ldr	r1, [r7, #8]
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f001 fd45 	bl	8012b28 <ethernet_output>
 801109e:	4603      	mov	r3, r0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3720      	adds	r7, #32
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	08016160 	.word	0x08016160
 80110ac:	080162b0 	.word	0x080162b0
 80110b0:	080161d8 	.word	0x080161d8
 80110b4:	08016300 	.word	0x08016300
 80110b8:	080162a0 	.word	0x080162a0
 80110bc:	08016988 	.word	0x08016988
 80110c0:	20009a04 	.word	0x20009a04
 80110c4:	20009914 	.word	0x20009914

080110c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b08c      	sub	sp, #48	; 0x30
 80110cc:	af02      	add	r7, sp, #8
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	3326      	adds	r3, #38	; 0x26
 80110d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80110da:	23ff      	movs	r3, #255	; 0xff
 80110dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80110e0:	2300      	movs	r3, #0
 80110e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68f9      	ldr	r1, [r7, #12]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f000 fe0e 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d10c      	bne.n	8011110 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110fe:	2be0      	cmp	r3, #224	; 0xe0
 8011100:	d006      	beq.n	8011110 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d003      	beq.n	8011110 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d102      	bne.n	8011116 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011110:	f06f 030f 	mvn.w	r3, #15
 8011114:	e101      	b.n	801131a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	2101      	movs	r1, #1
 801111a:	68b8      	ldr	r0, [r7, #8]
 801111c:	f7ff fb60 	bl	80107e0 <etharp_find_entry>
 8011120:	4603      	mov	r3, r0
 8011122:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011128:	2b00      	cmp	r3, #0
 801112a:	da02      	bge.n	8011132 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801112c:	8a7b      	ldrh	r3, [r7, #18]
 801112e:	b25b      	sxtb	r3, r3
 8011130:	e0f3      	b.n	801131a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011132:	8a7b      	ldrh	r3, [r7, #18]
 8011134:	2b7e      	cmp	r3, #126	; 0x7e
 8011136:	d906      	bls.n	8011146 <etharp_query+0x7e>
 8011138:	4b7a      	ldr	r3, [pc, #488]	; (8011324 <etharp_query+0x25c>)
 801113a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801113e:	497a      	ldr	r1, [pc, #488]	; (8011328 <etharp_query+0x260>)
 8011140:	487a      	ldr	r0, [pc, #488]	; (801132c <etharp_query+0x264>)
 8011142:	f001 fd83 	bl	8012c4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011146:	8a7b      	ldrh	r3, [r7, #18]
 8011148:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801114a:	7c7a      	ldrb	r2, [r7, #17]
 801114c:	4978      	ldr	r1, [pc, #480]	; (8011330 <etharp_query+0x268>)
 801114e:	4613      	mov	r3, r2
 8011150:	005b      	lsls	r3, r3, #1
 8011152:	4413      	add	r3, r2
 8011154:	00db      	lsls	r3, r3, #3
 8011156:	440b      	add	r3, r1
 8011158:	3314      	adds	r3, #20
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d115      	bne.n	801118c <etharp_query+0xc4>
    is_new_entry = 1;
 8011160:	2301      	movs	r3, #1
 8011162:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011164:	7c7a      	ldrb	r2, [r7, #17]
 8011166:	4972      	ldr	r1, [pc, #456]	; (8011330 <etharp_query+0x268>)
 8011168:	4613      	mov	r3, r2
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	4413      	add	r3, r2
 801116e:	00db      	lsls	r3, r3, #3
 8011170:	440b      	add	r3, r1
 8011172:	3314      	adds	r3, #20
 8011174:	2201      	movs	r2, #1
 8011176:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011178:	7c7a      	ldrb	r2, [r7, #17]
 801117a:	496d      	ldr	r1, [pc, #436]	; (8011330 <etharp_query+0x268>)
 801117c:	4613      	mov	r3, r2
 801117e:	005b      	lsls	r3, r3, #1
 8011180:	4413      	add	r3, r2
 8011182:	00db      	lsls	r3, r3, #3
 8011184:	440b      	add	r3, r1
 8011186:	3308      	adds	r3, #8
 8011188:	68fa      	ldr	r2, [r7, #12]
 801118a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801118c:	7c7a      	ldrb	r2, [r7, #17]
 801118e:	4968      	ldr	r1, [pc, #416]	; (8011330 <etharp_query+0x268>)
 8011190:	4613      	mov	r3, r2
 8011192:	005b      	lsls	r3, r3, #1
 8011194:	4413      	add	r3, r2
 8011196:	00db      	lsls	r3, r3, #3
 8011198:	440b      	add	r3, r1
 801119a:	3314      	adds	r3, #20
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d011      	beq.n	80111c6 <etharp_query+0xfe>
 80111a2:	7c7a      	ldrb	r2, [r7, #17]
 80111a4:	4962      	ldr	r1, [pc, #392]	; (8011330 <etharp_query+0x268>)
 80111a6:	4613      	mov	r3, r2
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	4413      	add	r3, r2
 80111ac:	00db      	lsls	r3, r3, #3
 80111ae:	440b      	add	r3, r1
 80111b0:	3314      	adds	r3, #20
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d806      	bhi.n	80111c6 <etharp_query+0xfe>
 80111b8:	4b5a      	ldr	r3, [pc, #360]	; (8011324 <etharp_query+0x25c>)
 80111ba:	f240 32cd 	movw	r2, #973	; 0x3cd
 80111be:	495d      	ldr	r1, [pc, #372]	; (8011334 <etharp_query+0x26c>)
 80111c0:	485a      	ldr	r0, [pc, #360]	; (801132c <etharp_query+0x264>)
 80111c2:	f001 fd43 	bl	8012c4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80111c6:	6a3b      	ldr	r3, [r7, #32]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d102      	bne.n	80111d2 <etharp_query+0x10a>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d10c      	bne.n	80111ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80111d2:	68b9      	ldr	r1, [r7, #8]
 80111d4:	68f8      	ldr	r0, [r7, #12]
 80111d6:	f000 f963 	bl	80114a0 <etharp_request>
 80111da:	4603      	mov	r3, r0
 80111dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d102      	bne.n	80111ec <etharp_query+0x124>
      return result;
 80111e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111ea:	e096      	b.n	801131a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d106      	bne.n	8011200 <etharp_query+0x138>
 80111f2:	4b4c      	ldr	r3, [pc, #304]	; (8011324 <etharp_query+0x25c>)
 80111f4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80111f8:	494f      	ldr	r1, [pc, #316]	; (8011338 <etharp_query+0x270>)
 80111fa:	484c      	ldr	r0, [pc, #304]	; (801132c <etharp_query+0x264>)
 80111fc:	f001 fd26 	bl	8012c4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011200:	7c7a      	ldrb	r2, [r7, #17]
 8011202:	494b      	ldr	r1, [pc, #300]	; (8011330 <etharp_query+0x268>)
 8011204:	4613      	mov	r3, r2
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	4413      	add	r3, r2
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	440b      	add	r3, r1
 801120e:	3314      	adds	r3, #20
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	2b01      	cmp	r3, #1
 8011214:	d917      	bls.n	8011246 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011216:	4a49      	ldr	r2, [pc, #292]	; (801133c <etharp_query+0x274>)
 8011218:	7c7b      	ldrb	r3, [r7, #17]
 801121a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801121c:	7c7a      	ldrb	r2, [r7, #17]
 801121e:	4613      	mov	r3, r2
 8011220:	005b      	lsls	r3, r3, #1
 8011222:	4413      	add	r3, r2
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	3308      	adds	r3, #8
 8011228:	4a41      	ldr	r2, [pc, #260]	; (8011330 <etharp_query+0x268>)
 801122a:	4413      	add	r3, r2
 801122c:	3304      	adds	r3, #4
 801122e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011232:	9200      	str	r2, [sp, #0]
 8011234:	697a      	ldr	r2, [r7, #20]
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	68f8      	ldr	r0, [r7, #12]
 801123a:	f001 fc75 	bl	8012b28 <ethernet_output>
 801123e:	4603      	mov	r3, r0
 8011240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011244:	e067      	b.n	8011316 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011246:	7c7a      	ldrb	r2, [r7, #17]
 8011248:	4939      	ldr	r1, [pc, #228]	; (8011330 <etharp_query+0x268>)
 801124a:	4613      	mov	r3, r2
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	4413      	add	r3, r2
 8011250:	00db      	lsls	r3, r3, #3
 8011252:	440b      	add	r3, r1
 8011254:	3314      	adds	r3, #20
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b01      	cmp	r3, #1
 801125a:	d15c      	bne.n	8011316 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801125c:	2300      	movs	r3, #0
 801125e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011264:	e01c      	b.n	80112a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	895a      	ldrh	r2, [r3, #10]
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	891b      	ldrh	r3, [r3, #8]
 801126e:	429a      	cmp	r2, r3
 8011270:	d10a      	bne.n	8011288 <etharp_query+0x1c0>
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d006      	beq.n	8011288 <etharp_query+0x1c0>
 801127a:	4b2a      	ldr	r3, [pc, #168]	; (8011324 <etharp_query+0x25c>)
 801127c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011280:	492f      	ldr	r1, [pc, #188]	; (8011340 <etharp_query+0x278>)
 8011282:	482a      	ldr	r0, [pc, #168]	; (801132c <etharp_query+0x264>)
 8011284:	f001 fce2 	bl	8012c4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011288:	69fb      	ldr	r3, [r7, #28]
 801128a:	7b1b      	ldrb	r3, [r3, #12]
 801128c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011290:	2b00      	cmp	r3, #0
 8011292:	d002      	beq.n	801129a <etharp_query+0x1d2>
        copy_needed = 1;
 8011294:	2301      	movs	r3, #1
 8011296:	61bb      	str	r3, [r7, #24]
        break;
 8011298:	e005      	b.n	80112a6 <etharp_query+0x1de>
      }
      p = p->next;
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1df      	bne.n	8011266 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d007      	beq.n	80112bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80112b2:	200e      	movs	r0, #14
 80112b4:	f7f8 fa76 	bl	80097a4 <pbuf_clone>
 80112b8:	61f8      	str	r0, [r7, #28]
 80112ba:	e004      	b.n	80112c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80112c0:	69f8      	ldr	r0, [r7, #28]
 80112c2:	f7f8 f8a3 	bl	800940c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80112c6:	69fb      	ldr	r3, [r7, #28]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d021      	beq.n	8011310 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80112cc:	7c7a      	ldrb	r2, [r7, #17]
 80112ce:	4918      	ldr	r1, [pc, #96]	; (8011330 <etharp_query+0x268>)
 80112d0:	4613      	mov	r3, r2
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	4413      	add	r3, r2
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	440b      	add	r3, r1
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00a      	beq.n	80112f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80112e0:	7c7a      	ldrb	r2, [r7, #17]
 80112e2:	4913      	ldr	r1, [pc, #76]	; (8011330 <etharp_query+0x268>)
 80112e4:	4613      	mov	r3, r2
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	4413      	add	r3, r2
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	440b      	add	r3, r1
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7f7 ffeb 	bl	80092cc <pbuf_free>
      }
      arp_table[i].q = p;
 80112f6:	7c7a      	ldrb	r2, [r7, #17]
 80112f8:	490d      	ldr	r1, [pc, #52]	; (8011330 <etharp_query+0x268>)
 80112fa:	4613      	mov	r3, r2
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	4413      	add	r3, r2
 8011300:	00db      	lsls	r3, r3, #3
 8011302:	440b      	add	r3, r1
 8011304:	69fa      	ldr	r2, [r7, #28]
 8011306:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011308:	2300      	movs	r3, #0
 801130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801130e:	e002      	b.n	8011316 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011310:	23ff      	movs	r3, #255	; 0xff
 8011312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801131a:	4618      	mov	r0, r3
 801131c:	3728      	adds	r7, #40	; 0x28
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	08016160 	.word	0x08016160
 8011328:	0801630c 	.word	0x0801630c
 801132c:	080161d8 	.word	0x080161d8
 8011330:	20009914 	.word	0x20009914
 8011334:	0801631c 	.word	0x0801631c
 8011338:	08016300 	.word	0x08016300
 801133c:	20009a04 	.word	0x20009a04
 8011340:	08016344 	.word	0x08016344

08011344 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b08a      	sub	sp, #40	; 0x28
 8011348:	af02      	add	r7, sp, #8
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d106      	bne.n	801136a <etharp_raw+0x26>
 801135c:	4b3a      	ldr	r3, [pc, #232]	; (8011448 <etharp_raw+0x104>)
 801135e:	f240 4257 	movw	r2, #1111	; 0x457
 8011362:	493a      	ldr	r1, [pc, #232]	; (801144c <etharp_raw+0x108>)
 8011364:	483a      	ldr	r0, [pc, #232]	; (8011450 <etharp_raw+0x10c>)
 8011366:	f001 fc71 	bl	8012c4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801136a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801136e:	211c      	movs	r1, #28
 8011370:	200e      	movs	r0, #14
 8011372:	f7f7 fcc7 	bl	8008d04 <pbuf_alloc>
 8011376:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d102      	bne.n	8011384 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801137e:	f04f 33ff 	mov.w	r3, #4294967295
 8011382:	e05d      	b.n	8011440 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	895b      	ldrh	r3, [r3, #10]
 8011388:	2b1b      	cmp	r3, #27
 801138a:	d806      	bhi.n	801139a <etharp_raw+0x56>
 801138c:	4b2e      	ldr	r3, [pc, #184]	; (8011448 <etharp_raw+0x104>)
 801138e:	f240 4262 	movw	r2, #1122	; 0x462
 8011392:	4930      	ldr	r1, [pc, #192]	; (8011454 <etharp_raw+0x110>)
 8011394:	482e      	ldr	r0, [pc, #184]	; (8011450 <etharp_raw+0x10c>)
 8011396:	f001 fc59 	bl	8012c4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80113a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f6 fcdf 	bl	8007d66 <lwip_htons>
 80113a8:	4603      	mov	r3, r0
 80113aa:	461a      	mov	r2, r3
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80113b6:	2b06      	cmp	r3, #6
 80113b8:	d006      	beq.n	80113c8 <etharp_raw+0x84>
 80113ba:	4b23      	ldr	r3, [pc, #140]	; (8011448 <etharp_raw+0x104>)
 80113bc:	f240 4269 	movw	r2, #1129	; 0x469
 80113c0:	4925      	ldr	r1, [pc, #148]	; (8011458 <etharp_raw+0x114>)
 80113c2:	4823      	ldr	r0, [pc, #140]	; (8011450 <etharp_raw+0x10c>)
 80113c4:	f001 fc42 	bl	8012c4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	3308      	adds	r3, #8
 80113cc:	2206      	movs	r2, #6
 80113ce:	6839      	ldr	r1, [r7, #0]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f001 fc25 	bl	8012c20 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	3312      	adds	r3, #18
 80113da:	2206      	movs	r2, #6
 80113dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113de:	4618      	mov	r0, r3
 80113e0:	f001 fc1e 	bl	8012c20 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	330e      	adds	r3, #14
 80113e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113ea:	6812      	ldr	r2, [r2, #0]
 80113ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	3318      	adds	r3, #24
 80113f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113f4:	6812      	ldr	r2, [r2, #0]
 80113f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	2200      	movs	r2, #0
 80113fc:	701a      	strb	r2, [r3, #0]
 80113fe:	2200      	movs	r2, #0
 8011400:	f042 0201 	orr.w	r2, r2, #1
 8011404:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	2200      	movs	r2, #0
 801140a:	f042 0208 	orr.w	r2, r2, #8
 801140e:	709a      	strb	r2, [r3, #2]
 8011410:	2200      	movs	r2, #0
 8011412:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	2206      	movs	r2, #6
 8011418:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2204      	movs	r2, #4
 801141e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011420:	f640 0306 	movw	r3, #2054	; 0x806
 8011424:	9300      	str	r3, [sp, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	69b9      	ldr	r1, [r7, #24]
 801142c:	68f8      	ldr	r0, [r7, #12]
 801142e:	f001 fb7b 	bl	8012b28 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011432:	69b8      	ldr	r0, [r7, #24]
 8011434:	f7f7 ff4a 	bl	80092cc <pbuf_free>
  p = NULL;
 8011438:	2300      	movs	r3, #0
 801143a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801143c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011440:	4618      	mov	r0, r3
 8011442:	3720      	adds	r7, #32
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	08016160 	.word	0x08016160
 801144c:	080162b0 	.word	0x080162b0
 8011450:	080161d8 	.word	0x080161d8
 8011454:	08016360 	.word	0x08016360
 8011458:	08016394 	.word	0x08016394

0801145c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b088      	sub	sp, #32
 8011460:	af04      	add	r7, sp, #16
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011478:	2201      	movs	r2, #1
 801147a:	9203      	str	r2, [sp, #12]
 801147c:	68ba      	ldr	r2, [r7, #8]
 801147e:	9202      	str	r2, [sp, #8]
 8011480:	4a06      	ldr	r2, [pc, #24]	; (801149c <etharp_request_dst+0x40>)
 8011482:	9201      	str	r2, [sp, #4]
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	4603      	mov	r3, r0
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f7ff ff5a 	bl	8011344 <etharp_raw>
 8011490:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011492:	4618      	mov	r0, r3
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	08016990 	.word	0x08016990

080114a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80114aa:	4a05      	ldr	r2, [pc, #20]	; (80114c0 <etharp_request+0x20>)
 80114ac:	6839      	ldr	r1, [r7, #0]
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff ffd4 	bl	801145c <etharp_request_dst>
 80114b4:	4603      	mov	r3, r0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	08016988 	.word	0x08016988

080114c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08e      	sub	sp, #56	; 0x38
 80114c8:	af04      	add	r7, sp, #16
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80114ce:	4b79      	ldr	r3, [pc, #484]	; (80116b4 <icmp_input+0x1f0>)
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80114d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	f003 030f 	and.w	r3, r3, #15
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80114e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114e6:	2b13      	cmp	r3, #19
 80114e8:	f240 80cd 	bls.w	8011686 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	895b      	ldrh	r3, [r3, #10]
 80114f0:	2b03      	cmp	r3, #3
 80114f2:	f240 80ca 	bls.w	801168a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011500:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011504:	2b00      	cmp	r3, #0
 8011506:	f000 80b7 	beq.w	8011678 <icmp_input+0x1b4>
 801150a:	2b08      	cmp	r3, #8
 801150c:	f040 80b7 	bne.w	801167e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011510:	4b69      	ldr	r3, [pc, #420]	; (80116b8 <icmp_input+0x1f4>)
 8011512:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011514:	4b67      	ldr	r3, [pc, #412]	; (80116b4 <icmp_input+0x1f0>)
 8011516:	695b      	ldr	r3, [r3, #20]
 8011518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801151c:	2be0      	cmp	r3, #224	; 0xe0
 801151e:	f000 80bb 	beq.w	8011698 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011522:	4b64      	ldr	r3, [pc, #400]	; (80116b4 <icmp_input+0x1f0>)
 8011524:	695b      	ldr	r3, [r3, #20]
 8011526:	4a63      	ldr	r2, [pc, #396]	; (80116b4 <icmp_input+0x1f0>)
 8011528:	6812      	ldr	r2, [r2, #0]
 801152a:	4611      	mov	r1, r2
 801152c:	4618      	mov	r0, r3
 801152e:	f000 fbed 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	f040 80b1 	bne.w	801169c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	891b      	ldrh	r3, [r3, #8]
 801153e:	2b07      	cmp	r3, #7
 8011540:	f240 80a5 	bls.w	801168e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011546:	330e      	adds	r3, #14
 8011548:	4619      	mov	r1, r3
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7f7 fe28 	bl	80091a0 <pbuf_add_header>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d04b      	beq.n	80115ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	891a      	ldrh	r2, [r3, #8]
 801155a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801155c:	4413      	add	r3, r2
 801155e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	891b      	ldrh	r3, [r3, #8]
 8011564:	8b7a      	ldrh	r2, [r7, #26]
 8011566:	429a      	cmp	r2, r3
 8011568:	f0c0 809a 	bcc.w	80116a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801156c:	8b7b      	ldrh	r3, [r7, #26]
 801156e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011572:	4619      	mov	r1, r3
 8011574:	200e      	movs	r0, #14
 8011576:	f7f7 fbc5 	bl	8008d04 <pbuf_alloc>
 801157a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2b00      	cmp	r3, #0
 8011580:	f000 8090 	beq.w	80116a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	895b      	ldrh	r3, [r3, #10]
 8011588:	461a      	mov	r2, r3
 801158a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801158c:	3308      	adds	r3, #8
 801158e:	429a      	cmp	r2, r3
 8011590:	d203      	bcs.n	801159a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011592:	6978      	ldr	r0, [r7, #20]
 8011594:	f7f7 fe9a 	bl	80092cc <pbuf_free>
          goto icmperr;
 8011598:	e085      	b.n	80116a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80115a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115a2:	4618      	mov	r0, r3
 80115a4:	f001 fb3c 	bl	8012c20 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80115a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115aa:	4619      	mov	r1, r3
 80115ac:	6978      	ldr	r0, [r7, #20]
 80115ae:	f7f7 fe07 	bl	80091c0 <pbuf_remove_header>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d009      	beq.n	80115cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80115b8:	4b40      	ldr	r3, [pc, #256]	; (80116bc <icmp_input+0x1f8>)
 80115ba:	22b6      	movs	r2, #182	; 0xb6
 80115bc:	4940      	ldr	r1, [pc, #256]	; (80116c0 <icmp_input+0x1fc>)
 80115be:	4841      	ldr	r0, [pc, #260]	; (80116c4 <icmp_input+0x200>)
 80115c0:	f001 fb44 	bl	8012c4c <iprintf>
          pbuf_free(r);
 80115c4:	6978      	ldr	r0, [r7, #20]
 80115c6:	f7f7 fe81 	bl	80092cc <pbuf_free>
          goto icmperr;
 80115ca:	e06c      	b.n	80116a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80115cc:	6879      	ldr	r1, [r7, #4]
 80115ce:	6978      	ldr	r0, [r7, #20]
 80115d0:	f7f7 ffa4 	bl	800951c <pbuf_copy>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d003      	beq.n	80115e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80115da:	6978      	ldr	r0, [r7, #20]
 80115dc:	f7f7 fe76 	bl	80092cc <pbuf_free>
          goto icmperr;
 80115e0:	e061      	b.n	80116a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f7f7 fe72 	bl	80092cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	607b      	str	r3, [r7, #4]
 80115ec:	e00f      	b.n	801160e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80115ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115f0:	330e      	adds	r3, #14
 80115f2:	4619      	mov	r1, r3
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f7f7 fde3 	bl	80091c0 <pbuf_remove_header>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d006      	beq.n	801160e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011600:	4b2e      	ldr	r3, [pc, #184]	; (80116bc <icmp_input+0x1f8>)
 8011602:	22c7      	movs	r2, #199	; 0xc7
 8011604:	4930      	ldr	r1, [pc, #192]	; (80116c8 <icmp_input+0x204>)
 8011606:	482f      	ldr	r0, [pc, #188]	; (80116c4 <icmp_input+0x200>)
 8011608:	f001 fb20 	bl	8012c4c <iprintf>
          goto icmperr;
 801160c:	e04b      	b.n	80116a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011616:	4619      	mov	r1, r3
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7f7 fdc1 	bl	80091a0 <pbuf_add_header>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	d12b      	bne.n	801167c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011632:	4b20      	ldr	r3, [pc, #128]	; (80116b4 <icmp_input+0x1f0>)
 8011634:	691a      	ldr	r2, [r3, #16]
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	2200      	movs	r2, #0
 801163e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	2200      	movs	r2, #0
 8011644:	709a      	strb	r2, [r3, #2]
 8011646:	2200      	movs	r2, #0
 8011648:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	22ff      	movs	r2, #255	; 0xff
 801164e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2200      	movs	r2, #0
 8011654:	729a      	strb	r2, [r3, #10]
 8011656:	2200      	movs	r2, #0
 8011658:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	9302      	str	r3, [sp, #8]
 801165e:	2301      	movs	r3, #1
 8011660:	9301      	str	r3, [sp, #4]
 8011662:	2300      	movs	r3, #0
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	23ff      	movs	r3, #255	; 0xff
 8011668:	2200      	movs	r2, #0
 801166a:	69f9      	ldr	r1, [r7, #28]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 fa75 	bl	8011b5c <ip4_output_if>
 8011672:	4603      	mov	r3, r0
 8011674:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011676:	e001      	b.n	801167c <icmp_input+0x1b8>
      break;
 8011678:	bf00      	nop
 801167a:	e000      	b.n	801167e <icmp_input+0x1ba>
      break;
 801167c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7f7 fe24 	bl	80092cc <pbuf_free>
  return;
 8011684:	e013      	b.n	80116ae <icmp_input+0x1ea>
    goto lenerr;
 8011686:	bf00      	nop
 8011688:	e002      	b.n	8011690 <icmp_input+0x1cc>
    goto lenerr;
 801168a:	bf00      	nop
 801168c:	e000      	b.n	8011690 <icmp_input+0x1cc>
        goto lenerr;
 801168e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7f7 fe1b 	bl	80092cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011696:	e00a      	b.n	80116ae <icmp_input+0x1ea>
        goto icmperr;
 8011698:	bf00      	nop
 801169a:	e004      	b.n	80116a6 <icmp_input+0x1e2>
        goto icmperr;
 801169c:	bf00      	nop
 801169e:	e002      	b.n	80116a6 <icmp_input+0x1e2>
          goto icmperr;
 80116a0:	bf00      	nop
 80116a2:	e000      	b.n	80116a6 <icmp_input+0x1e2>
          goto icmperr;
 80116a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7f7 fe10 	bl	80092cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80116ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80116ae:	3728      	adds	r7, #40	; 0x28
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	20006344 	.word	0x20006344
 80116b8:	20006358 	.word	0x20006358
 80116bc:	080163d8 	.word	0x080163d8
 80116c0:	08016410 	.word	0x08016410
 80116c4:	08016448 	.word	0x08016448
 80116c8:	08016470 	.word	0x08016470

080116cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	460b      	mov	r3, r1
 80116d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80116d8:	78fb      	ldrb	r3, [r7, #3]
 80116da:	461a      	mov	r2, r3
 80116dc:	2103      	movs	r1, #3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f000 f814 	bl	801170c <icmp_send_response>
}
 80116e4:	bf00      	nop
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	460b      	mov	r3, r1
 80116f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80116f8:	78fb      	ldrb	r3, [r7, #3]
 80116fa:	461a      	mov	r2, r3
 80116fc:	210b      	movs	r1, #11
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 f804 	bl	801170c <icmp_send_response>
}
 8011704:	bf00      	nop
 8011706:	3708      	adds	r7, #8
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b08c      	sub	sp, #48	; 0x30
 8011710:	af04      	add	r7, sp, #16
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	460b      	mov	r3, r1
 8011716:	70fb      	strb	r3, [r7, #3]
 8011718:	4613      	mov	r3, r2
 801171a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801171c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011720:	2124      	movs	r1, #36	; 0x24
 8011722:	2022      	movs	r0, #34	; 0x22
 8011724:	f7f7 faee 	bl	8008d04 <pbuf_alloc>
 8011728:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d04c      	beq.n	80117ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	895b      	ldrh	r3, [r3, #10]
 8011734:	2b23      	cmp	r3, #35	; 0x23
 8011736:	d806      	bhi.n	8011746 <icmp_send_response+0x3a>
 8011738:	4b26      	ldr	r3, [pc, #152]	; (80117d4 <icmp_send_response+0xc8>)
 801173a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801173e:	4926      	ldr	r1, [pc, #152]	; (80117d8 <icmp_send_response+0xcc>)
 8011740:	4826      	ldr	r0, [pc, #152]	; (80117dc <icmp_send_response+0xd0>)
 8011742:	f001 fa83 	bl	8012c4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	78fa      	ldrb	r2, [r7, #3]
 8011756:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	78ba      	ldrb	r2, [r7, #2]
 801175c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2200      	movs	r2, #0
 8011762:	711a      	strb	r2, [r3, #4]
 8011764:	2200      	movs	r2, #0
 8011766:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	2200      	movs	r2, #0
 801176c:	719a      	strb	r2, [r3, #6]
 801176e:	2200      	movs	r2, #0
 8011770:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	f103 0008 	add.w	r0, r3, #8
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	221c      	movs	r2, #28
 8011780:	4619      	mov	r1, r3
 8011782:	f001 fa4d 	bl	8012c20 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801178c:	f107 030c 	add.w	r3, r7, #12
 8011790:	4618      	mov	r0, r3
 8011792:	f000 f825 	bl	80117e0 <ip4_route>
 8011796:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d011      	beq.n	80117c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	2200      	movs	r2, #0
 80117a2:	709a      	strb	r2, [r3, #2]
 80117a4:	2200      	movs	r2, #0
 80117a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80117a8:	f107 020c 	add.w	r2, r7, #12
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	9302      	str	r3, [sp, #8]
 80117b0:	2301      	movs	r3, #1
 80117b2:	9301      	str	r3, [sp, #4]
 80117b4:	2300      	movs	r3, #0
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	23ff      	movs	r3, #255	; 0xff
 80117ba:	2100      	movs	r1, #0
 80117bc:	69f8      	ldr	r0, [r7, #28]
 80117be:	f000 f9cd 	bl	8011b5c <ip4_output_if>
  }
  pbuf_free(q);
 80117c2:	69f8      	ldr	r0, [r7, #28]
 80117c4:	f7f7 fd82 	bl	80092cc <pbuf_free>
 80117c8:	e000      	b.n	80117cc <icmp_send_response+0xc0>
    return;
 80117ca:	bf00      	nop
}
 80117cc:	3720      	adds	r7, #32
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	080163d8 	.word	0x080163d8
 80117d8:	080164a4 	.word	0x080164a4
 80117dc:	08016448 	.word	0x08016448

080117e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80117e8:	4b33      	ldr	r3, [pc, #204]	; (80118b8 <ip4_route+0xd8>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	60fb      	str	r3, [r7, #12]
 80117ee:	e036      	b.n	801185e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117f6:	f003 0301 	and.w	r3, r3, #1
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d02b      	beq.n	8011858 <ip4_route+0x78>
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011806:	089b      	lsrs	r3, r3, #2
 8011808:	f003 0301 	and.w	r3, r3, #1
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d022      	beq.n	8011858 <ip4_route+0x78>
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	3304      	adds	r3, #4
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d01d      	beq.n	8011858 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	3304      	adds	r3, #4
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	405a      	eors	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	3308      	adds	r3, #8
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4013      	ands	r3, r2
 8011830:	2b00      	cmp	r3, #0
 8011832:	d101      	bne.n	8011838 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	e038      	b.n	80118aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801183e:	f003 0302 	and.w	r3, r3, #2
 8011842:	2b00      	cmp	r3, #0
 8011844:	d108      	bne.n	8011858 <ip4_route+0x78>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	330c      	adds	r3, #12
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	429a      	cmp	r2, r3
 8011852:	d101      	bne.n	8011858 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	e028      	b.n	80118aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	60fb      	str	r3, [r7, #12]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d1c5      	bne.n	80117f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011864:	4b15      	ldr	r3, [pc, #84]	; (80118bc <ip4_route+0xdc>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d01a      	beq.n	80118a2 <ip4_route+0xc2>
 801186c:	4b13      	ldr	r3, [pc, #76]	; (80118bc <ip4_route+0xdc>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011874:	f003 0301 	and.w	r3, r3, #1
 8011878:	2b00      	cmp	r3, #0
 801187a:	d012      	beq.n	80118a2 <ip4_route+0xc2>
 801187c:	4b0f      	ldr	r3, [pc, #60]	; (80118bc <ip4_route+0xdc>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011884:	f003 0304 	and.w	r3, r3, #4
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00a      	beq.n	80118a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801188c:	4b0b      	ldr	r3, [pc, #44]	; (80118bc <ip4_route+0xdc>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3304      	adds	r3, #4
 8011892:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011894:	2b00      	cmp	r3, #0
 8011896:	d004      	beq.n	80118a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	b2db      	uxtb	r3, r3
 801189e:	2b7f      	cmp	r3, #127	; 0x7f
 80118a0:	d101      	bne.n	80118a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80118a2:	2300      	movs	r3, #0
 80118a4:	e001      	b.n	80118aa <ip4_route+0xca>
  }

  return netif_default;
 80118a6:	4b05      	ldr	r3, [pc, #20]	; (80118bc <ip4_route+0xdc>)
 80118a8:	681b      	ldr	r3, [r3, #0]
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3714      	adds	r7, #20
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop
 80118b8:	200098a8 	.word	0x200098a8
 80118bc:	200098ac 	.word	0x200098ac

080118c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118ce:	f003 0301 	and.w	r3, r3, #1
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d016      	beq.n	8011906 <ip4_input_accept+0x46>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	3304      	adds	r3, #4
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d011      	beq.n	8011906 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80118e2:	4b0b      	ldr	r3, [pc, #44]	; (8011910 <ip4_input_accept+0x50>)
 80118e4:	695a      	ldr	r2, [r3, #20]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3304      	adds	r3, #4
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d008      	beq.n	8011902 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80118f0:	4b07      	ldr	r3, [pc, #28]	; (8011910 <ip4_input_accept+0x50>)
 80118f2:	695b      	ldr	r3, [r3, #20]
 80118f4:	6879      	ldr	r1, [r7, #4]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f000 fa08 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 80118fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d001      	beq.n	8011906 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011902:	2301      	movs	r3, #1
 8011904:	e000      	b.n	8011908 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	20006344 	.word	0x20006344

08011914 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	091b      	lsrs	r3, r3, #4
 801192a:	b2db      	uxtb	r3, r3
 801192c:	2b04      	cmp	r3, #4
 801192e:	d004      	beq.n	801193a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7f7 fccb 	bl	80092cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011936:	2300      	movs	r3, #0
 8011938:	e107      	b.n	8011b4a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	f003 030f 	and.w	r3, r3, #15
 8011942:	b2db      	uxtb	r3, r3
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	b2db      	uxtb	r3, r3
 8011948:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	885b      	ldrh	r3, [r3, #2]
 801194e:	b29b      	uxth	r3, r3
 8011950:	4618      	mov	r0, r3
 8011952:	f7f6 fa08 	bl	8007d66 <lwip_htons>
 8011956:	4603      	mov	r3, r0
 8011958:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	891b      	ldrh	r3, [r3, #8]
 801195e:	89ba      	ldrh	r2, [r7, #12]
 8011960:	429a      	cmp	r2, r3
 8011962:	d204      	bcs.n	801196e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011964:	89bb      	ldrh	r3, [r7, #12]
 8011966:	4619      	mov	r1, r3
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7f7 fb29 	bl	8008fc0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	895b      	ldrh	r3, [r3, #10]
 8011972:	89fa      	ldrh	r2, [r7, #14]
 8011974:	429a      	cmp	r2, r3
 8011976:	d807      	bhi.n	8011988 <ip4_input+0x74>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	891b      	ldrh	r3, [r3, #8]
 801197c:	89ba      	ldrh	r2, [r7, #12]
 801197e:	429a      	cmp	r2, r3
 8011980:	d802      	bhi.n	8011988 <ip4_input+0x74>
 8011982:	89fb      	ldrh	r3, [r7, #14]
 8011984:	2b13      	cmp	r3, #19
 8011986:	d804      	bhi.n	8011992 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7f7 fc9f 	bl	80092cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801198e:	2300      	movs	r3, #0
 8011990:	e0db      	b.n	8011b4a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	691b      	ldr	r3, [r3, #16]
 8011996:	4a6f      	ldr	r2, [pc, #444]	; (8011b54 <ip4_input+0x240>)
 8011998:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	4a6d      	ldr	r2, [pc, #436]	; (8011b54 <ip4_input+0x240>)
 80119a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80119a2:	4b6c      	ldr	r3, [pc, #432]	; (8011b54 <ip4_input+0x240>)
 80119a4:	695b      	ldr	r3, [r3, #20]
 80119a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119aa:	2be0      	cmp	r3, #224	; 0xe0
 80119ac:	d112      	bne.n	80119d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119b4:	f003 0301 	and.w	r3, r3, #1
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d007      	beq.n	80119ce <ip4_input+0xba>
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	3304      	adds	r3, #4
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d002      	beq.n	80119ce <ip4_input+0xba>
      netif = inp;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	613b      	str	r3, [r7, #16]
 80119cc:	e02a      	b.n	8011a24 <ip4_input+0x110>
    } else {
      netif = NULL;
 80119ce:	2300      	movs	r3, #0
 80119d0:	613b      	str	r3, [r7, #16]
 80119d2:	e027      	b.n	8011a24 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80119d4:	6838      	ldr	r0, [r7, #0]
 80119d6:	f7ff ff73 	bl	80118c0 <ip4_input_accept>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d002      	beq.n	80119e6 <ip4_input+0xd2>
      netif = inp;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	613b      	str	r3, [r7, #16]
 80119e4:	e01e      	b.n	8011a24 <ip4_input+0x110>
    } else {
      netif = NULL;
 80119e6:	2300      	movs	r3, #0
 80119e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80119ea:	4b5a      	ldr	r3, [pc, #360]	; (8011b54 <ip4_input+0x240>)
 80119ec:	695b      	ldr	r3, [r3, #20]
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	2b7f      	cmp	r3, #127	; 0x7f
 80119f2:	d017      	beq.n	8011a24 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80119f4:	4b58      	ldr	r3, [pc, #352]	; (8011b58 <ip4_input+0x244>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	613b      	str	r3, [r7, #16]
 80119fa:	e00e      	b.n	8011a1a <ip4_input+0x106>
          if (netif == inp) {
 80119fc:	693a      	ldr	r2, [r7, #16]
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d006      	beq.n	8011a12 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011a04:	6938      	ldr	r0, [r7, #16]
 8011a06:	f7ff ff5b 	bl	80118c0 <ip4_input_accept>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d108      	bne.n	8011a22 <ip4_input+0x10e>
 8011a10:	e000      	b.n	8011a14 <ip4_input+0x100>
            continue;
 8011a12:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	613b      	str	r3, [r7, #16]
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1ed      	bne.n	80119fc <ip4_input+0xe8>
 8011a20:	e000      	b.n	8011a24 <ip4_input+0x110>
            break;
 8011a22:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011a24:	4b4b      	ldr	r3, [pc, #300]	; (8011b54 <ip4_input+0x240>)
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 f96e 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d105      	bne.n	8011a42 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011a36:	4b47      	ldr	r3, [pc, #284]	; (8011b54 <ip4_input+0x240>)
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011a3e:	2be0      	cmp	r3, #224	; 0xe0
 8011a40:	d104      	bne.n	8011a4c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7f7 fc42 	bl	80092cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	e07e      	b.n	8011b4a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d104      	bne.n	8011a5c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7f7 fc3a 	bl	80092cc <pbuf_free>
    return ERR_OK;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	e076      	b.n	8011b4a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	88db      	ldrh	r3, [r3, #6]
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	461a      	mov	r2, r3
 8011a64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011a68:	4013      	ands	r3, r2
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00b      	beq.n	8011a86 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 fc92 	bl	8012398 <ip4_reass>
 8011a74:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d101      	bne.n	8011a80 <ip4_input+0x16c>
      return ERR_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e064      	b.n	8011b4a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011a86:	4a33      	ldr	r2, [pc, #204]	; (8011b54 <ip4_input+0x240>)
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011a8c:	4a31      	ldr	r2, [pc, #196]	; (8011b54 <ip4_input+0x240>)
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011a92:	4a30      	ldr	r2, [pc, #192]	; (8011b54 <ip4_input+0x240>)
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	f003 030f 	and.w	r3, r3, #15
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	b29a      	uxth	r2, r3
 8011aa8:	4b2a      	ldr	r3, [pc, #168]	; (8011b54 <ip4_input+0x240>)
 8011aaa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011aac:	89fb      	ldrh	r3, [r7, #14]
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7f7 fb85 	bl	80091c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	7a5b      	ldrb	r3, [r3, #9]
 8011aba:	2b11      	cmp	r3, #17
 8011abc:	d006      	beq.n	8011acc <ip4_input+0x1b8>
 8011abe:	2b11      	cmp	r3, #17
 8011ac0:	dc13      	bgt.n	8011aea <ip4_input+0x1d6>
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d00c      	beq.n	8011ae0 <ip4_input+0x1cc>
 8011ac6:	2b06      	cmp	r3, #6
 8011ac8:	d005      	beq.n	8011ad6 <ip4_input+0x1c2>
 8011aca:	e00e      	b.n	8011aea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011acc:	6839      	ldr	r1, [r7, #0]
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7fe f8e6 	bl	800fca0 <udp_input>
        break;
 8011ad4:	e026      	b.n	8011b24 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011ad6:	6839      	ldr	r1, [r7, #0]
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f7f9 fccf 	bl	800b47c <tcp_input>
        break;
 8011ade:	e021      	b.n	8011b24 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ff fcee 	bl	80114c4 <icmp_input>
        break;
 8011ae8:	e01c      	b.n	8011b24 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011aea:	4b1a      	ldr	r3, [pc, #104]	; (8011b54 <ip4_input+0x240>)
 8011aec:	695b      	ldr	r3, [r3, #20]
 8011aee:	6939      	ldr	r1, [r7, #16]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f000 f90b 	bl	8011d0c <ip4_addr_isbroadcast_u32>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d10f      	bne.n	8011b1c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011afc:	4b15      	ldr	r3, [pc, #84]	; (8011b54 <ip4_input+0x240>)
 8011afe:	695b      	ldr	r3, [r3, #20]
 8011b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011b04:	2be0      	cmp	r3, #224	; 0xe0
 8011b06:	d009      	beq.n	8011b1c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f7f7 fbc9 	bl	80092a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011b14:	2102      	movs	r1, #2
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7ff fdd8 	bl	80116cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7f7 fbd5 	bl	80092cc <pbuf_free>
        break;
 8011b22:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011b24:	4b0b      	ldr	r3, [pc, #44]	; (8011b54 <ip4_input+0x240>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011b2a:	4b0a      	ldr	r3, [pc, #40]	; (8011b54 <ip4_input+0x240>)
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011b30:	4b08      	ldr	r3, [pc, #32]	; (8011b54 <ip4_input+0x240>)
 8011b32:	2200      	movs	r2, #0
 8011b34:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011b36:	4b07      	ldr	r3, [pc, #28]	; (8011b54 <ip4_input+0x240>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011b3c:	4b05      	ldr	r3, [pc, #20]	; (8011b54 <ip4_input+0x240>)
 8011b3e:	2200      	movs	r2, #0
 8011b40:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011b42:	4b04      	ldr	r3, [pc, #16]	; (8011b54 <ip4_input+0x240>)
 8011b44:	2200      	movs	r2, #0
 8011b46:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	20006344 	.word	0x20006344
 8011b58:	200098a8 	.word	0x200098a8

08011b5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08a      	sub	sp, #40	; 0x28
 8011b60:	af04      	add	r7, sp, #16
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
 8011b68:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d009      	beq.n	8011b88 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d003      	beq.n	8011b82 <ip4_output_if+0x26>
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d102      	bne.n	8011b88 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b84:	3304      	adds	r3, #4
 8011b86:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011b88:	78fa      	ldrb	r2, [r7, #3]
 8011b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8c:	9302      	str	r3, [sp, #8]
 8011b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b92:	9301      	str	r3, [sp, #4]
 8011b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b98:	9300      	str	r3, [sp, #0]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	6979      	ldr	r1, [r7, #20]
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f000 f805 	bl	8011bb0 <ip4_output_if_src>
 8011ba6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3718      	adds	r7, #24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	607a      	str	r2, [r7, #4]
 8011bbc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	7b9b      	ldrb	r3, [r3, #14]
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d006      	beq.n	8011bd4 <ip4_output_if_src+0x24>
 8011bc6:	4b4b      	ldr	r3, [pc, #300]	; (8011cf4 <ip4_output_if_src+0x144>)
 8011bc8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011bcc:	494a      	ldr	r1, [pc, #296]	; (8011cf8 <ip4_output_if_src+0x148>)
 8011bce:	484b      	ldr	r0, [pc, #300]	; (8011cfc <ip4_output_if_src+0x14c>)
 8011bd0:	f001 f83c 	bl	8012c4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d060      	beq.n	8011c9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011bda:	2314      	movs	r3, #20
 8011bdc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011bde:	2114      	movs	r1, #20
 8011be0:	68f8      	ldr	r0, [r7, #12]
 8011be2:	f7f7 fadd 	bl	80091a0 <pbuf_add_header>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d002      	beq.n	8011bf2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bec:	f06f 0301 	mvn.w	r3, #1
 8011bf0:	e07c      	b.n	8011cec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	2b13      	cmp	r3, #19
 8011bfe:	d806      	bhi.n	8011c0e <ip4_output_if_src+0x5e>
 8011c00:	4b3c      	ldr	r3, [pc, #240]	; (8011cf4 <ip4_output_if_src+0x144>)
 8011c02:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011c06:	493e      	ldr	r1, [pc, #248]	; (8011d00 <ip4_output_if_src+0x150>)
 8011c08:	483c      	ldr	r0, [pc, #240]	; (8011cfc <ip4_output_if_src+0x14c>)
 8011c0a:	f001 f81f 	bl	8012c4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011c0e:	69fb      	ldr	r3, [r7, #28]
 8011c10:	78fa      	ldrb	r2, [r7, #3]
 8011c12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011c1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011c24:	8b7b      	ldrh	r3, [r7, #26]
 8011c26:	089b      	lsrs	r3, r3, #2
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011c3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	891b      	ldrh	r3, [r3, #8]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7f6 f88f 	bl	8007d66 <lwip_htons>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	2200      	movs	r2, #0
 8011c54:	719a      	strb	r2, [r3, #6]
 8011c56:	2200      	movs	r2, #0
 8011c58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011c5a:	4b2a      	ldr	r3, [pc, #168]	; (8011d04 <ip4_output_if_src+0x154>)
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7f6 f881 	bl	8007d66 <lwip_htons>
 8011c64:	4603      	mov	r3, r0
 8011c66:	461a      	mov	r2, r3
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011c6c:	4b25      	ldr	r3, [pc, #148]	; (8011d04 <ip4_output_if_src+0x154>)
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	3301      	adds	r3, #1
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	4b23      	ldr	r3, [pc, #140]	; (8011d04 <ip4_output_if_src+0x154>)
 8011c76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d104      	bne.n	8011c88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011c7e:	4b22      	ldr	r3, [pc, #136]	; (8011d08 <ip4_output_if_src+0x158>)
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	60da      	str	r2, [r3, #12]
 8011c86:	e003      	b.n	8011c90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	2200      	movs	r2, #0
 8011c94:	729a      	strb	r2, [r3, #10]
 8011c96:	2200      	movs	r2, #0
 8011c98:	72da      	strb	r2, [r3, #11]
 8011c9a:	e00f      	b.n	8011cbc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	895b      	ldrh	r3, [r3, #10]
 8011ca0:	2b13      	cmp	r3, #19
 8011ca2:	d802      	bhi.n	8011caa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011ca4:	f06f 0301 	mvn.w	r3, #1
 8011ca8:	e020      	b.n	8011cec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	691b      	ldr	r3, [r3, #16]
 8011cb4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011cb6:	f107 0314 	add.w	r3, r7, #20
 8011cba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d00c      	beq.n	8011cde <ip4_output_if_src+0x12e>
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	891a      	ldrh	r2, [r3, #8]
 8011cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d906      	bls.n	8011cde <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f000 fd53 	bl	8012780 <ip4_frag>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	e006      	b.n	8011cec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	695b      	ldr	r3, [r3, #20]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	68f9      	ldr	r1, [r7, #12]
 8011ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ce8:	4798      	blx	r3
 8011cea:	4603      	mov	r3, r0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3720      	adds	r7, #32
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	080164d0 	.word	0x080164d0
 8011cf8:	08016504 	.word	0x08016504
 8011cfc:	08016510 	.word	0x08016510
 8011d00:	08016538 	.word	0x08016538
 8011d04:	20009a06 	.word	0x20009a06
 8011d08:	08016984 	.word	0x08016984

08011d0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b085      	sub	sp, #20
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d20:	d002      	beq.n	8011d28 <ip4_addr_isbroadcast_u32+0x1c>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d101      	bne.n	8011d2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e02a      	b.n	8011d82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d32:	f003 0302 	and.w	r3, r3, #2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e021      	b.n	8011d82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	3304      	adds	r3, #4
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d101      	bne.n	8011d4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	e019      	b.n	8011d82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011d4e:	68fa      	ldr	r2, [r7, #12]
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	3304      	adds	r3, #4
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	405a      	eors	r2, r3
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	3308      	adds	r3, #8
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4013      	ands	r3, r2
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10d      	bne.n	8011d80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	3308      	adds	r3, #8
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	43da      	mvns	r2, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	3308      	adds	r3, #8
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d101      	bne.n	8011d80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	e000      	b.n	8011d82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011d80:	2300      	movs	r3, #0
  }
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3714      	adds	r7, #20
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr
	...

08011d90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011d96:	2300      	movs	r3, #0
 8011d98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011d9a:	4b12      	ldr	r3, [pc, #72]	; (8011de4 <ip_reass_tmr+0x54>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011da0:	e018      	b.n	8011dd4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	7fdb      	ldrb	r3, [r3, #31]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d00b      	beq.n	8011dc2 <ip_reass_tmr+0x32>
      r->timer--;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	7fdb      	ldrb	r3, [r3, #31]
 8011dae:	3b01      	subs	r3, #1
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	60fb      	str	r3, [r7, #12]
 8011dc0:	e008      	b.n	8011dd4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011dcc:	68b9      	ldr	r1, [r7, #8]
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 f80a 	bl	8011de8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1e3      	bne.n	8011da2 <ip_reass_tmr+0x12>
    }
  }
}
 8011dda:	bf00      	nop
 8011ddc:	bf00      	nop
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	20009a08 	.word	0x20009a08

08011de8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d105      	bne.n	8011e0a <ip_reass_free_complete_datagram+0x22>
 8011dfe:	4b45      	ldr	r3, [pc, #276]	; (8011f14 <ip_reass_free_complete_datagram+0x12c>)
 8011e00:	22ab      	movs	r2, #171	; 0xab
 8011e02:	4945      	ldr	r1, [pc, #276]	; (8011f18 <ip_reass_free_complete_datagram+0x130>)
 8011e04:	4845      	ldr	r0, [pc, #276]	; (8011f1c <ip_reass_free_complete_datagram+0x134>)
 8011e06:	f000 ff21 	bl	8012c4c <iprintf>
  if (prev != NULL) {
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00a      	beq.n	8011e26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d005      	beq.n	8011e26 <ip_reass_free_complete_datagram+0x3e>
 8011e1a:	4b3e      	ldr	r3, [pc, #248]	; (8011f14 <ip_reass_free_complete_datagram+0x12c>)
 8011e1c:	22ad      	movs	r2, #173	; 0xad
 8011e1e:	4940      	ldr	r1, [pc, #256]	; (8011f20 <ip_reass_free_complete_datagram+0x138>)
 8011e20:	483e      	ldr	r0, [pc, #248]	; (8011f1c <ip_reass_free_complete_datagram+0x134>)
 8011e22:	f000 ff13 	bl	8012c4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	889b      	ldrh	r3, [r3, #4]
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d12a      	bne.n	8011e8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011e46:	69bb      	ldr	r3, [r7, #24]
 8011e48:	6858      	ldr	r0, [r3, #4]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	3308      	adds	r3, #8
 8011e4e:	2214      	movs	r2, #20
 8011e50:	4619      	mov	r1, r3
 8011e52:	f000 fee5 	bl	8012c20 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011e56:	2101      	movs	r1, #1
 8011e58:	69b8      	ldr	r0, [r7, #24]
 8011e5a:	f7ff fc47 	bl	80116ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011e5e:	69b8      	ldr	r0, [r7, #24]
 8011e60:	f7f7 fabc 	bl	80093dc <pbuf_clen>
 8011e64:	4603      	mov	r3, r0
 8011e66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e68:	8bfa      	ldrh	r2, [r7, #30]
 8011e6a:	8a7b      	ldrh	r3, [r7, #18]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e72:	db05      	blt.n	8011e80 <ip_reass_free_complete_datagram+0x98>
 8011e74:	4b27      	ldr	r3, [pc, #156]	; (8011f14 <ip_reass_free_complete_datagram+0x12c>)
 8011e76:	22bc      	movs	r2, #188	; 0xbc
 8011e78:	492a      	ldr	r1, [pc, #168]	; (8011f24 <ip_reass_free_complete_datagram+0x13c>)
 8011e7a:	4828      	ldr	r0, [pc, #160]	; (8011f1c <ip_reass_free_complete_datagram+0x134>)
 8011e7c:	f000 fee6 	bl	8012c4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e80:	8bfa      	ldrh	r2, [r7, #30]
 8011e82:	8a7b      	ldrh	r3, [r7, #18]
 8011e84:	4413      	add	r3, r2
 8011e86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011e88:	69b8      	ldr	r0, [r7, #24]
 8011e8a:	f7f7 fa1f 	bl	80092cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011e94:	e01f      	b.n	8011ed6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f7f7 fa98 	bl	80093dc <pbuf_clen>
 8011eac:	4603      	mov	r3, r0
 8011eae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011eb0:	8bfa      	ldrh	r2, [r7, #30]
 8011eb2:	8a7b      	ldrh	r3, [r7, #18]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011eba:	db05      	blt.n	8011ec8 <ip_reass_free_complete_datagram+0xe0>
 8011ebc:	4b15      	ldr	r3, [pc, #84]	; (8011f14 <ip_reass_free_complete_datagram+0x12c>)
 8011ebe:	22cc      	movs	r2, #204	; 0xcc
 8011ec0:	4918      	ldr	r1, [pc, #96]	; (8011f24 <ip_reass_free_complete_datagram+0x13c>)
 8011ec2:	4816      	ldr	r0, [pc, #88]	; (8011f1c <ip_reass_free_complete_datagram+0x134>)
 8011ec4:	f000 fec2 	bl	8012c4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ec8:	8bfa      	ldrh	r2, [r7, #30]
 8011eca:	8a7b      	ldrh	r3, [r7, #18]
 8011ecc:	4413      	add	r3, r2
 8011ece:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f7f7 f9fb 	bl	80092cc <pbuf_free>
  while (p != NULL) {
 8011ed6:	69bb      	ldr	r3, [r7, #24]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d1dc      	bne.n	8011e96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011edc:	6839      	ldr	r1, [r7, #0]
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f000 f8c2 	bl	8012068 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011ee4:	4b10      	ldr	r3, [pc, #64]	; (8011f28 <ip_reass_free_complete_datagram+0x140>)
 8011ee6:	881b      	ldrh	r3, [r3, #0]
 8011ee8:	8bfa      	ldrh	r2, [r7, #30]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d905      	bls.n	8011efa <ip_reass_free_complete_datagram+0x112>
 8011eee:	4b09      	ldr	r3, [pc, #36]	; (8011f14 <ip_reass_free_complete_datagram+0x12c>)
 8011ef0:	22d2      	movs	r2, #210	; 0xd2
 8011ef2:	490e      	ldr	r1, [pc, #56]	; (8011f2c <ip_reass_free_complete_datagram+0x144>)
 8011ef4:	4809      	ldr	r0, [pc, #36]	; (8011f1c <ip_reass_free_complete_datagram+0x134>)
 8011ef6:	f000 fea9 	bl	8012c4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011efa:	4b0b      	ldr	r3, [pc, #44]	; (8011f28 <ip_reass_free_complete_datagram+0x140>)
 8011efc:	881a      	ldrh	r2, [r3, #0]
 8011efe:	8bfb      	ldrh	r3, [r7, #30]
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	4b08      	ldr	r3, [pc, #32]	; (8011f28 <ip_reass_free_complete_datagram+0x140>)
 8011f06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011f08:	8bfb      	ldrh	r3, [r7, #30]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3720      	adds	r7, #32
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	08016568 	.word	0x08016568
 8011f18:	080165a4 	.word	0x080165a4
 8011f1c:	080165b0 	.word	0x080165b0
 8011f20:	080165d8 	.word	0x080165d8
 8011f24:	080165ec 	.word	0x080165ec
 8011f28:	20009a0c 	.word	0x20009a0c
 8011f2c:	0801660c 	.word	0x0801660c

08011f30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b08a      	sub	sp, #40	; 0x28
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011f42:	2300      	movs	r3, #0
 8011f44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011f46:	2300      	movs	r3, #0
 8011f48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011f4e:	4b28      	ldr	r3, [pc, #160]	; (8011ff0 <ip_reass_remove_oldest_datagram+0xc0>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f54:	e030      	b.n	8011fb8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	695a      	ldr	r2, [r3, #20]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d10c      	bne.n	8011f7c <ip_reass_remove_oldest_datagram+0x4c>
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	699a      	ldr	r2, [r3, #24]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	691b      	ldr	r3, [r3, #16]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d106      	bne.n	8011f7c <ip_reass_remove_oldest_datagram+0x4c>
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f70:	899a      	ldrh	r2, [r3, #12]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	889b      	ldrh	r3, [r3, #4]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d014      	beq.n	8011fa6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011f82:	6a3b      	ldr	r3, [r7, #32]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d104      	bne.n	8011f92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	61bb      	str	r3, [r7, #24]
 8011f90:	e009      	b.n	8011fa6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	7fda      	ldrb	r2, [r3, #31]
 8011f96:	6a3b      	ldr	r3, [r7, #32]
 8011f98:	7fdb      	ldrb	r3, [r3, #31]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d803      	bhi.n	8011fa6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d1cb      	bne.n	8011f56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011fbe:	6a3b      	ldr	r3, [r7, #32]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d008      	beq.n	8011fd6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011fc4:	69b9      	ldr	r1, [r7, #24]
 8011fc6:	6a38      	ldr	r0, [r7, #32]
 8011fc8:	f7ff ff0e 	bl	8011de8 <ip_reass_free_complete_datagram>
 8011fcc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011fce:	697a      	ldr	r2, [r7, #20]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011fd6:	697a      	ldr	r2, [r7, #20]
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	da02      	bge.n	8011fe4 <ip_reass_remove_oldest_datagram+0xb4>
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	dcac      	bgt.n	8011f3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011fe4:	697b      	ldr	r3, [r7, #20]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3728      	adds	r7, #40	; 0x28
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	20009a08 	.word	0x20009a08

08011ff4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011ffe:	2004      	movs	r0, #4
 8012000:	f7f6 fb06 	bl	8008610 <memp_malloc>
 8012004:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d110      	bne.n	801202e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801200c:	6839      	ldr	r1, [r7, #0]
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f7ff ff8e 	bl	8011f30 <ip_reass_remove_oldest_datagram>
 8012014:	4602      	mov	r2, r0
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	4293      	cmp	r3, r2
 801201a:	dc03      	bgt.n	8012024 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801201c:	2004      	movs	r0, #4
 801201e:	f7f6 faf7 	bl	8008610 <memp_malloc>
 8012022:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d101      	bne.n	801202e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801202a:	2300      	movs	r3, #0
 801202c:	e016      	b.n	801205c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801202e:	2220      	movs	r2, #32
 8012030:	2100      	movs	r1, #0
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f000 fe02 	bl	8012c3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	220f      	movs	r2, #15
 801203c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801203e:	4b09      	ldr	r3, [pc, #36]	; (8012064 <ip_reass_enqueue_new_datagram+0x70>)
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012046:	4a07      	ldr	r2, [pc, #28]	; (8012064 <ip_reass_enqueue_new_datagram+0x70>)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	3308      	adds	r3, #8
 8012050:	2214      	movs	r2, #20
 8012052:	6879      	ldr	r1, [r7, #4]
 8012054:	4618      	mov	r0, r3
 8012056:	f000 fde3 	bl	8012c20 <memcpy>
  return ipr;
 801205a:	68fb      	ldr	r3, [r7, #12]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	20009a08 	.word	0x20009a08

08012068 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012072:	4b10      	ldr	r3, [pc, #64]	; (80120b4 <ip_reass_dequeue_datagram+0x4c>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	429a      	cmp	r2, r3
 801207a:	d104      	bne.n	8012086 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a0c      	ldr	r2, [pc, #48]	; (80120b4 <ip_reass_dequeue_datagram+0x4c>)
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	e00d      	b.n	80120a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d106      	bne.n	801209a <ip_reass_dequeue_datagram+0x32>
 801208c:	4b0a      	ldr	r3, [pc, #40]	; (80120b8 <ip_reass_dequeue_datagram+0x50>)
 801208e:	f240 1245 	movw	r2, #325	; 0x145
 8012092:	490a      	ldr	r1, [pc, #40]	; (80120bc <ip_reass_dequeue_datagram+0x54>)
 8012094:	480a      	ldr	r0, [pc, #40]	; (80120c0 <ip_reass_dequeue_datagram+0x58>)
 8012096:	f000 fdd9 	bl	8012c4c <iprintf>
    prev->next = ipr->next;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80120a2:	6879      	ldr	r1, [r7, #4]
 80120a4:	2004      	movs	r0, #4
 80120a6:	f7f6 faff 	bl	80086a8 <memp_free>
}
 80120aa:	bf00      	nop
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	20009a08 	.word	0x20009a08
 80120b8:	08016568 	.word	0x08016568
 80120bc:	08016630 	.word	0x08016630
 80120c0:	080165b0 	.word	0x080165b0

080120c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08c      	sub	sp, #48	; 0x30
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80120d4:	2301      	movs	r3, #1
 80120d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	885b      	ldrh	r3, [r3, #2]
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7f5 fe3e 	bl	8007d66 <lwip_htons>
 80120ea:	4603      	mov	r3, r0
 80120ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	f003 030f 	and.w	r3, r3, #15
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80120fc:	7e7b      	ldrb	r3, [r7, #25]
 80120fe:	b29b      	uxth	r3, r3
 8012100:	8b7a      	ldrh	r2, [r7, #26]
 8012102:	429a      	cmp	r2, r3
 8012104:	d202      	bcs.n	801210c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012106:	f04f 33ff 	mov.w	r3, #4294967295
 801210a:	e135      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801210c:	7e7b      	ldrb	r3, [r7, #25]
 801210e:	b29b      	uxth	r3, r3
 8012110:	8b7a      	ldrh	r2, [r7, #26]
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	88db      	ldrh	r3, [r3, #6]
 801211a:	b29b      	uxth	r3, r3
 801211c:	4618      	mov	r0, r3
 801211e:	f7f5 fe22 	bl	8007d66 <lwip_htons>
 8012122:	4603      	mov	r3, r0
 8012124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012128:	b29b      	uxth	r3, r3
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	2200      	movs	r2, #0
 8012138:	701a      	strb	r2, [r3, #0]
 801213a:	2200      	movs	r2, #0
 801213c:	705a      	strb	r2, [r3, #1]
 801213e:	2200      	movs	r2, #0
 8012140:	709a      	strb	r2, [r3, #2]
 8012142:	2200      	movs	r2, #0
 8012144:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012148:	8afa      	ldrh	r2, [r7, #22]
 801214a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801214c:	8afa      	ldrh	r2, [r7, #22]
 801214e:	8b7b      	ldrh	r3, [r7, #26]
 8012150:	4413      	add	r3, r2
 8012152:	b29a      	uxth	r2, r3
 8012154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012156:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215a:	88db      	ldrh	r3, [r3, #6]
 801215c:	b29b      	uxth	r3, r3
 801215e:	8afa      	ldrh	r2, [r7, #22]
 8012160:	429a      	cmp	r2, r3
 8012162:	d902      	bls.n	801216a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012164:	f04f 33ff 	mov.w	r3, #4294967295
 8012168:	e106      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	627b      	str	r3, [r7, #36]	; 0x24
 8012170:	e068      	b.n	8012244 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217a:	889b      	ldrh	r3, [r3, #4]
 801217c:	b29a      	uxth	r2, r3
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	889b      	ldrh	r3, [r3, #4]
 8012182:	b29b      	uxth	r3, r3
 8012184:	429a      	cmp	r2, r3
 8012186:	d235      	bcs.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801218c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012190:	2b00      	cmp	r3, #0
 8012192:	d020      	beq.n	80121d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012196:	889b      	ldrh	r3, [r3, #4]
 8012198:	b29a      	uxth	r2, r3
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	88db      	ldrh	r3, [r3, #6]
 801219e:	b29b      	uxth	r3, r3
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d307      	bcc.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	88db      	ldrh	r3, [r3, #6]
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	889b      	ldrh	r3, [r3, #4]
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d902      	bls.n	80121ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121b4:	f04f 33ff 	mov.w	r3, #4294967295
 80121b8:	e0de      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80121ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80121c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c2:	88db      	ldrh	r3, [r3, #6]
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c8:	889b      	ldrh	r3, [r3, #4]
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d03d      	beq.n	801224c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80121d0:	2300      	movs	r3, #0
 80121d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80121d4:	e03a      	b.n	801224c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	88db      	ldrh	r3, [r3, #6]
 80121da:	b29a      	uxth	r2, r3
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	889b      	ldrh	r3, [r3, #4]
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d902      	bls.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121e6:	f04f 33ff 	mov.w	r3, #4294967295
 80121ea:	e0c5      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	605a      	str	r2, [r3, #4]
      break;
 80121f2:	e02b      	b.n	801224c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f6:	889b      	ldrh	r3, [r3, #4]
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	889b      	ldrh	r3, [r3, #4]
 80121fe:	b29b      	uxth	r3, r3
 8012200:	429a      	cmp	r2, r3
 8012202:	d102      	bne.n	801220a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012204:	f04f 33ff 	mov.w	r3, #4294967295
 8012208:	e0b6      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220c:	889b      	ldrh	r3, [r3, #4]
 801220e:	b29a      	uxth	r2, r3
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	88db      	ldrh	r3, [r3, #6]
 8012214:	b29b      	uxth	r3, r3
 8012216:	429a      	cmp	r2, r3
 8012218:	d202      	bcs.n	8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801221a:	f04f 33ff 	mov.w	r3, #4294967295
 801221e:	e0ab      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012222:	2b00      	cmp	r3, #0
 8012224:	d009      	beq.n	801223a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	88db      	ldrh	r3, [r3, #6]
 801222a:	b29a      	uxth	r2, r3
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	889b      	ldrh	r3, [r3, #4]
 8012230:	b29b      	uxth	r3, r3
 8012232:	429a      	cmp	r2, r3
 8012234:	d001      	beq.n	801223a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	2b00      	cmp	r3, #0
 8012248:	d193      	bne.n	8012172 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801224a:	e000      	b.n	801224e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801224c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	2b00      	cmp	r3, #0
 8012252:	d12d      	bne.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012256:	2b00      	cmp	r3, #0
 8012258:	d01c      	beq.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225c:	88db      	ldrh	r3, [r3, #6]
 801225e:	b29a      	uxth	r2, r3
 8012260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012262:	889b      	ldrh	r3, [r3, #4]
 8012264:	b29b      	uxth	r3, r3
 8012266:	429a      	cmp	r2, r3
 8012268:	d906      	bls.n	8012278 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801226a:	4b45      	ldr	r3, [pc, #276]	; (8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801226c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012270:	4944      	ldr	r1, [pc, #272]	; (8012384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012272:	4845      	ldr	r0, [pc, #276]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012274:	f000 fcea 	bl	8012c4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227a:	68ba      	ldr	r2, [r7, #8]
 801227c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012280:	88db      	ldrh	r3, [r3, #6]
 8012282:	b29a      	uxth	r2, r3
 8012284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012286:	889b      	ldrh	r3, [r3, #4]
 8012288:	b29b      	uxth	r3, r3
 801228a:	429a      	cmp	r2, r3
 801228c:	d010      	beq.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801228e:	2300      	movs	r3, #0
 8012290:	623b      	str	r3, [r7, #32]
 8012292:	e00d      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d006      	beq.n	80122aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801229c:	4b38      	ldr	r3, [pc, #224]	; (8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801229e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80122a2:	493a      	ldr	r1, [pc, #232]	; (801238c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80122a4:	4838      	ldr	r0, [pc, #224]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80122a6:	f000 fcd1 	bl	8012c4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	68ba      	ldr	r2, [r7, #8]
 80122ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d105      	bne.n	80122c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	7f9b      	ldrb	r3, [r3, #30]
 80122ba:	f003 0301 	and.w	r3, r3, #1
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d059      	beq.n	8012376 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80122c2:	6a3b      	ldr	r3, [r7, #32]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d04f      	beq.n	8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d006      	beq.n	80122de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	889b      	ldrh	r3, [r3, #4]
 80122d8:	b29b      	uxth	r3, r3
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80122de:	2300      	movs	r3, #0
 80122e0:	623b      	str	r3, [r7, #32]
 80122e2:	e041      	b.n	8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80122e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122ee:	e012      	b.n	8012316 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80122f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f8:	88db      	ldrh	r3, [r3, #6]
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	889b      	ldrh	r3, [r3, #4]
 8012300:	b29b      	uxth	r3, r3
 8012302:	429a      	cmp	r2, r3
 8012304:	d002      	beq.n	801230c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012306:	2300      	movs	r3, #0
 8012308:	623b      	str	r3, [r7, #32]
            break;
 801230a:	e007      	b.n	801231c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	2b00      	cmp	r3, #0
 801231a:	d1e9      	bne.n	80122f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d022      	beq.n	8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801232a:	4b15      	ldr	r3, [pc, #84]	; (8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801232c:	f240 12df 	movw	r2, #479	; 0x1df
 8012330:	4917      	ldr	r1, [pc, #92]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012332:	4815      	ldr	r0, [pc, #84]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012334:	f000 fc8a 	bl	8012c4c <iprintf>
          LWIP_ASSERT("sanity check",
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012340:	429a      	cmp	r2, r3
 8012342:	d106      	bne.n	8012352 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012344:	4b0e      	ldr	r3, [pc, #56]	; (8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012346:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801234a:	4911      	ldr	r1, [pc, #68]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801234c:	480e      	ldr	r0, [pc, #56]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801234e:	f000 fc7d 	bl	8012c4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d006      	beq.n	8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801235a:	4b09      	ldr	r3, [pc, #36]	; (8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801235c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012360:	490c      	ldr	r1, [pc, #48]	; (8012394 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012362:	4809      	ldr	r0, [pc, #36]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012364:	f000 fc72 	bl	8012c4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012368:	6a3b      	ldr	r3, [r7, #32]
 801236a:	2b00      	cmp	r3, #0
 801236c:	bf14      	ite	ne
 801236e:	2301      	movne	r3, #1
 8012370:	2300      	moveq	r3, #0
 8012372:	b2db      	uxtb	r3, r3
 8012374:	e000      	b.n	8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3730      	adds	r7, #48	; 0x30
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	08016568 	.word	0x08016568
 8012384:	0801664c 	.word	0x0801664c
 8012388:	080165b0 	.word	0x080165b0
 801238c:	0801666c 	.word	0x0801666c
 8012390:	080166a4 	.word	0x080166a4
 8012394:	080166b4 	.word	0x080166b4

08012398 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b08e      	sub	sp, #56	; 0x38
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80123a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	f003 030f 	and.w	r3, r3, #15
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b14      	cmp	r3, #20
 80123b6:	f040 8171 	bne.w	801269c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	88db      	ldrh	r3, [r3, #6]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f5 fcd0 	bl	8007d66 <lwip_htons>
 80123c6:	4603      	mov	r3, r0
 80123c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	00db      	lsls	r3, r3, #3
 80123d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80123d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d4:	885b      	ldrh	r3, [r3, #2]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f5 fcc4 	bl	8007d66 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80123e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	f003 030f 	and.w	r3, r3, #15
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	009b      	lsls	r3, r3, #2
 80123ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80123f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123fa:	429a      	cmp	r2, r3
 80123fc:	f0c0 8150 	bcc.w	80126a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012404:	b29b      	uxth	r3, r3
 8012406:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012408:	1ad3      	subs	r3, r2, r3
 801240a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7f6 ffe5 	bl	80093dc <pbuf_clen>
 8012412:	4603      	mov	r3, r0
 8012414:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012416:	4b8c      	ldr	r3, [pc, #560]	; (8012648 <ip4_reass+0x2b0>)
 8012418:	881b      	ldrh	r3, [r3, #0]
 801241a:	461a      	mov	r2, r3
 801241c:	8c3b      	ldrh	r3, [r7, #32]
 801241e:	4413      	add	r3, r2
 8012420:	2b0a      	cmp	r3, #10
 8012422:	dd10      	ble.n	8012446 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012424:	8c3b      	ldrh	r3, [r7, #32]
 8012426:	4619      	mov	r1, r3
 8012428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801242a:	f7ff fd81 	bl	8011f30 <ip_reass_remove_oldest_datagram>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	f000 8137 	beq.w	80126a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012436:	4b84      	ldr	r3, [pc, #528]	; (8012648 <ip4_reass+0x2b0>)
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	461a      	mov	r2, r3
 801243c:	8c3b      	ldrh	r3, [r7, #32]
 801243e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012440:	2b0a      	cmp	r3, #10
 8012442:	f300 812f 	bgt.w	80126a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012446:	4b81      	ldr	r3, [pc, #516]	; (801264c <ip4_reass+0x2b4>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	633b      	str	r3, [r7, #48]	; 0x30
 801244c:	e015      	b.n	801247a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	695a      	ldr	r2, [r3, #20]
 8012452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	429a      	cmp	r2, r3
 8012458:	d10c      	bne.n	8012474 <ip4_reass+0xdc>
 801245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245c:	699a      	ldr	r2, [r3, #24]
 801245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012460:	691b      	ldr	r3, [r3, #16]
 8012462:	429a      	cmp	r2, r3
 8012464:	d106      	bne.n	8012474 <ip4_reass+0xdc>
 8012466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012468:	899a      	ldrh	r2, [r3, #12]
 801246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246c:	889b      	ldrh	r3, [r3, #4]
 801246e:	b29b      	uxth	r3, r3
 8012470:	429a      	cmp	r2, r3
 8012472:	d006      	beq.n	8012482 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	633b      	str	r3, [r7, #48]	; 0x30
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1e6      	bne.n	801244e <ip4_reass+0xb6>
 8012480:	e000      	b.n	8012484 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012482:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012486:	2b00      	cmp	r3, #0
 8012488:	d109      	bne.n	801249e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801248a:	8c3b      	ldrh	r3, [r7, #32]
 801248c:	4619      	mov	r1, r3
 801248e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012490:	f7ff fdb0 	bl	8011ff4 <ip_reass_enqueue_new_datagram>
 8012494:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012498:	2b00      	cmp	r3, #0
 801249a:	d11c      	bne.n	80124d6 <ip4_reass+0x13e>
      goto nullreturn;
 801249c:	e105      	b.n	80126aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a0:	88db      	ldrh	r3, [r3, #6]
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7f5 fc5e 	bl	8007d66 <lwip_htons>
 80124aa:	4603      	mov	r3, r0
 80124ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d110      	bne.n	80124d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80124b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b6:	89db      	ldrh	r3, [r3, #14]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f5 fc54 	bl	8007d66 <lwip_htons>
 80124be:	4603      	mov	r3, r0
 80124c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d006      	beq.n	80124d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80124c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ca:	3308      	adds	r3, #8
 80124cc:	2214      	movs	r2, #20
 80124ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124d0:	4618      	mov	r0, r3
 80124d2:	f000 fba5 	bl	8012c20 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d8:	88db      	ldrh	r3, [r3, #6]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	f003 0320 	and.w	r3, r3, #32
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	bf0c      	ite	eq
 80124e4:	2301      	moveq	r3, #1
 80124e6:	2300      	movne	r3, #0
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d00e      	beq.n	8012510 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80124f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124f6:	4413      	add	r3, r2
 80124f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80124fa:	8b7a      	ldrh	r2, [r7, #26]
 80124fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124fe:	429a      	cmp	r2, r3
 8012500:	f0c0 80a0 	bcc.w	8012644 <ip4_reass+0x2ac>
 8012504:	8b7b      	ldrh	r3, [r7, #26]
 8012506:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801250a:	4293      	cmp	r3, r2
 801250c:	f200 809a 	bhi.w	8012644 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012510:	69fa      	ldr	r2, [r7, #28]
 8012512:	6879      	ldr	r1, [r7, #4]
 8012514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012516:	f7ff fdd5 	bl	80120c4 <ip_reass_chain_frag_into_datagram_and_validate>
 801251a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012522:	f000 809b 	beq.w	801265c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012526:	4b48      	ldr	r3, [pc, #288]	; (8012648 <ip4_reass+0x2b0>)
 8012528:	881a      	ldrh	r2, [r3, #0]
 801252a:	8c3b      	ldrh	r3, [r7, #32]
 801252c:	4413      	add	r3, r2
 801252e:	b29a      	uxth	r2, r3
 8012530:	4b45      	ldr	r3, [pc, #276]	; (8012648 <ip4_reass+0x2b0>)
 8012532:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00d      	beq.n	8012556 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801253a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801253c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801253e:	4413      	add	r3, r2
 8012540:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012544:	8a7a      	ldrh	r2, [r7, #18]
 8012546:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254a:	7f9b      	ldrb	r3, [r3, #30]
 801254c:	f043 0301 	orr.w	r3, r3, #1
 8012550:	b2da      	uxtb	r2, r3
 8012552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012554:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	2b01      	cmp	r3, #1
 801255a:	d171      	bne.n	8012640 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255e:	8b9b      	ldrh	r3, [r3, #28]
 8012560:	3314      	adds	r3, #20
 8012562:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012578:	3308      	adds	r3, #8
 801257a:	2214      	movs	r2, #20
 801257c:	4619      	mov	r1, r3
 801257e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012580:	f000 fb4e 	bl	8012c20 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012584:	8a3b      	ldrh	r3, [r7, #16]
 8012586:	4618      	mov	r0, r3
 8012588:	f7f5 fbed 	bl	8007d66 <lwip_htons>
 801258c:	4603      	mov	r3, r0
 801258e:	461a      	mov	r2, r3
 8012590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012592:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	2200      	movs	r2, #0
 8012598:	719a      	strb	r2, [r3, #6]
 801259a:	2200      	movs	r2, #0
 801259c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a0:	2200      	movs	r2, #0
 80125a2:	729a      	strb	r2, [r3, #10]
 80125a4:	2200      	movs	r2, #0
 80125a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80125a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80125ae:	e00d      	b.n	80125cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80125b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80125b6:	2114      	movs	r1, #20
 80125b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80125ba:	f7f6 fe01 	bl	80091c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80125be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f7f6 ff45 	bl	8009450 <pbuf_cat>
      r = iprh->next_pbuf;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80125cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1ee      	bne.n	80125b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80125d2:	4b1e      	ldr	r3, [pc, #120]	; (801264c <ip4_reass+0x2b4>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d8:	429a      	cmp	r2, r3
 80125da:	d102      	bne.n	80125e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80125dc:	2300      	movs	r3, #0
 80125de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125e0:	e010      	b.n	8012604 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125e2:	4b1a      	ldr	r3, [pc, #104]	; (801264c <ip4_reass+0x2b4>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125e8:	e007      	b.n	80125fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80125ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d006      	beq.n	8012602 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d1f4      	bne.n	80125ea <ip4_reass+0x252>
 8012600:	e000      	b.n	8012604 <ip4_reass+0x26c>
          break;
 8012602:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012608:	f7ff fd2e 	bl	8012068 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7f6 fee5 	bl	80093dc <pbuf_clen>
 8012612:	4603      	mov	r3, r0
 8012614:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012616:	4b0c      	ldr	r3, [pc, #48]	; (8012648 <ip4_reass+0x2b0>)
 8012618:	881b      	ldrh	r3, [r3, #0]
 801261a:	8c3a      	ldrh	r2, [r7, #32]
 801261c:	429a      	cmp	r2, r3
 801261e:	d906      	bls.n	801262e <ip4_reass+0x296>
 8012620:	4b0b      	ldr	r3, [pc, #44]	; (8012650 <ip4_reass+0x2b8>)
 8012622:	f240 229b 	movw	r2, #667	; 0x29b
 8012626:	490b      	ldr	r1, [pc, #44]	; (8012654 <ip4_reass+0x2bc>)
 8012628:	480b      	ldr	r0, [pc, #44]	; (8012658 <ip4_reass+0x2c0>)
 801262a:	f000 fb0f 	bl	8012c4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801262e:	4b06      	ldr	r3, [pc, #24]	; (8012648 <ip4_reass+0x2b0>)
 8012630:	881a      	ldrh	r2, [r3, #0]
 8012632:	8c3b      	ldrh	r3, [r7, #32]
 8012634:	1ad3      	subs	r3, r2, r3
 8012636:	b29a      	uxth	r2, r3
 8012638:	4b03      	ldr	r3, [pc, #12]	; (8012648 <ip4_reass+0x2b0>)
 801263a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	e038      	b.n	80126b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012640:	2300      	movs	r3, #0
 8012642:	e036      	b.n	80126b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012644:	bf00      	nop
 8012646:	e00a      	b.n	801265e <ip4_reass+0x2c6>
 8012648:	20009a0c 	.word	0x20009a0c
 801264c:	20009a08 	.word	0x20009a08
 8012650:	08016568 	.word	0x08016568
 8012654:	080166d8 	.word	0x080166d8
 8012658:	080165b0 	.word	0x080165b0
    goto nullreturn_ipr;
 801265c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	2b00      	cmp	r3, #0
 8012662:	d106      	bne.n	8012672 <ip4_reass+0x2da>
 8012664:	4b15      	ldr	r3, [pc, #84]	; (80126bc <ip4_reass+0x324>)
 8012666:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801266a:	4915      	ldr	r1, [pc, #84]	; (80126c0 <ip4_reass+0x328>)
 801266c:	4815      	ldr	r0, [pc, #84]	; (80126c4 <ip4_reass+0x32c>)
 801266e:	f000 faed 	bl	8012c4c <iprintf>
  if (ipr->p == NULL) {
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d116      	bne.n	80126a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801267a:	4b13      	ldr	r3, [pc, #76]	; (80126c8 <ip4_reass+0x330>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012680:	429a      	cmp	r2, r3
 8012682:	d006      	beq.n	8012692 <ip4_reass+0x2fa>
 8012684:	4b0d      	ldr	r3, [pc, #52]	; (80126bc <ip4_reass+0x324>)
 8012686:	f240 22ab 	movw	r2, #683	; 0x2ab
 801268a:	4910      	ldr	r1, [pc, #64]	; (80126cc <ip4_reass+0x334>)
 801268c:	480d      	ldr	r0, [pc, #52]	; (80126c4 <ip4_reass+0x32c>)
 801268e:	f000 fadd 	bl	8012c4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012692:	2100      	movs	r1, #0
 8012694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012696:	f7ff fce7 	bl	8012068 <ip_reass_dequeue_datagram>
 801269a:	e006      	b.n	80126aa <ip4_reass+0x312>
    goto nullreturn;
 801269c:	bf00      	nop
 801269e:	e004      	b.n	80126aa <ip4_reass+0x312>
    goto nullreturn;
 80126a0:	bf00      	nop
 80126a2:	e002      	b.n	80126aa <ip4_reass+0x312>
      goto nullreturn;
 80126a4:	bf00      	nop
 80126a6:	e000      	b.n	80126aa <ip4_reass+0x312>
  }

nullreturn:
 80126a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7f6 fe0e 	bl	80092cc <pbuf_free>
  return NULL;
 80126b0:	2300      	movs	r3, #0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3738      	adds	r7, #56	; 0x38
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	08016568 	.word	0x08016568
 80126c0:	080166f4 	.word	0x080166f4
 80126c4:	080165b0 	.word	0x080165b0
 80126c8:	20009a08 	.word	0x20009a08
 80126cc:	08016700 	.word	0x08016700

080126d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80126d4:	2005      	movs	r0, #5
 80126d6:	f7f5 ff9b 	bl	8008610 <memp_malloc>
 80126da:	4603      	mov	r3, r0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	bd80      	pop	{r7, pc}

080126e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80126ee:	4b07      	ldr	r3, [pc, #28]	; (801270c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80126f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80126f4:	4906      	ldr	r1, [pc, #24]	; (8012710 <ip_frag_free_pbuf_custom_ref+0x30>)
 80126f6:	4807      	ldr	r0, [pc, #28]	; (8012714 <ip_frag_free_pbuf_custom_ref+0x34>)
 80126f8:	f000 faa8 	bl	8012c4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80126fc:	6879      	ldr	r1, [r7, #4]
 80126fe:	2005      	movs	r0, #5
 8012700:	f7f5 ffd2 	bl	80086a8 <memp_free>
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	08016568 	.word	0x08016568
 8012710:	08016720 	.word	0x08016720
 8012714:	080165b0 	.word	0x080165b0

08012718 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d106      	bne.n	8012738 <ipfrag_free_pbuf_custom+0x20>
 801272a:	4b11      	ldr	r3, [pc, #68]	; (8012770 <ipfrag_free_pbuf_custom+0x58>)
 801272c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012730:	4910      	ldr	r1, [pc, #64]	; (8012774 <ipfrag_free_pbuf_custom+0x5c>)
 8012732:	4811      	ldr	r0, [pc, #68]	; (8012778 <ipfrag_free_pbuf_custom+0x60>)
 8012734:	f000 fa8a 	bl	8012c4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	429a      	cmp	r2, r3
 801273e:	d006      	beq.n	801274e <ipfrag_free_pbuf_custom+0x36>
 8012740:	4b0b      	ldr	r3, [pc, #44]	; (8012770 <ipfrag_free_pbuf_custom+0x58>)
 8012742:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012746:	490d      	ldr	r1, [pc, #52]	; (801277c <ipfrag_free_pbuf_custom+0x64>)
 8012748:	480b      	ldr	r0, [pc, #44]	; (8012778 <ipfrag_free_pbuf_custom+0x60>)
 801274a:	f000 fa7f 	bl	8012c4c <iprintf>
  if (pcr->original != NULL) {
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	695b      	ldr	r3, [r3, #20]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d004      	beq.n	8012760 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	695b      	ldr	r3, [r3, #20]
 801275a:	4618      	mov	r0, r3
 801275c:	f7f6 fdb6 	bl	80092cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f7ff ffbd 	bl	80126e0 <ip_frag_free_pbuf_custom_ref>
}
 8012766:	bf00      	nop
 8012768:	3710      	adds	r7, #16
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	08016568 	.word	0x08016568
 8012774:	0801672c 	.word	0x0801672c
 8012778:	080165b0 	.word	0x080165b0
 801277c:	08016738 	.word	0x08016738

08012780 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b094      	sub	sp, #80	; 0x50
 8012784:	af02      	add	r7, sp, #8
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801278c:	2300      	movs	r3, #0
 801278e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012796:	3b14      	subs	r3, #20
 8012798:	2b00      	cmp	r3, #0
 801279a:	da00      	bge.n	801279e <ip4_frag+0x1e>
 801279c:	3307      	adds	r3, #7
 801279e:	10db      	asrs	r3, r3, #3
 80127a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80127a2:	2314      	movs	r3, #20
 80127a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80127ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80127b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	f003 030f 	and.w	r3, r3, #15
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	2b14      	cmp	r3, #20
 80127c0:	d002      	beq.n	80127c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80127c2:	f06f 0305 	mvn.w	r3, #5
 80127c6:	e110      	b.n	80129ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	895b      	ldrh	r3, [r3, #10]
 80127cc:	2b13      	cmp	r3, #19
 80127ce:	d809      	bhi.n	80127e4 <ip4_frag+0x64>
 80127d0:	4b88      	ldr	r3, [pc, #544]	; (80129f4 <ip4_frag+0x274>)
 80127d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80127d6:	4988      	ldr	r1, [pc, #544]	; (80129f8 <ip4_frag+0x278>)
 80127d8:	4888      	ldr	r0, [pc, #544]	; (80129fc <ip4_frag+0x27c>)
 80127da:	f000 fa37 	bl	8012c4c <iprintf>
 80127de:	f06f 0305 	mvn.w	r3, #5
 80127e2:	e102      	b.n	80129ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80127e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e6:	88db      	ldrh	r3, [r3, #6]
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f5 fabb 	bl	8007d66 <lwip_htons>
 80127f0:	4603      	mov	r3, r0
 80127f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80127f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80127fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012804:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	891b      	ldrh	r3, [r3, #8]
 801280a:	3b14      	subs	r3, #20
 801280c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012810:	e0e1      	b.n	80129d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012812:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	b29b      	uxth	r3, r3
 8012818:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801281c:	4293      	cmp	r3, r2
 801281e:	bf28      	it	cs
 8012820:	4613      	movcs	r3, r2
 8012822:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012824:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012828:	2114      	movs	r1, #20
 801282a:	200e      	movs	r0, #14
 801282c:	f7f6 fa6a 	bl	8008d04 <pbuf_alloc>
 8012830:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012834:	2b00      	cmp	r3, #0
 8012836:	f000 80d5 	beq.w	80129e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	895b      	ldrh	r3, [r3, #10]
 801283e:	2b13      	cmp	r3, #19
 8012840:	d806      	bhi.n	8012850 <ip4_frag+0xd0>
 8012842:	4b6c      	ldr	r3, [pc, #432]	; (80129f4 <ip4_frag+0x274>)
 8012844:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012848:	496d      	ldr	r1, [pc, #436]	; (8012a00 <ip4_frag+0x280>)
 801284a:	486c      	ldr	r0, [pc, #432]	; (80129fc <ip4_frag+0x27c>)
 801284c:	f000 f9fe 	bl	8012c4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	2214      	movs	r2, #20
 8012856:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012858:	4618      	mov	r0, r3
 801285a:	f000 f9e1 	bl	8012c20 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012864:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012866:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801286a:	e064      	b.n	8012936 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	895a      	ldrh	r2, [r3, #10]
 8012870:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012872:	1ad3      	subs	r3, r2, r3
 8012874:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	895b      	ldrh	r3, [r3, #10]
 801287a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801287c:	429a      	cmp	r2, r3
 801287e:	d906      	bls.n	801288e <ip4_frag+0x10e>
 8012880:	4b5c      	ldr	r3, [pc, #368]	; (80129f4 <ip4_frag+0x274>)
 8012882:	f240 322d 	movw	r2, #813	; 0x32d
 8012886:	495f      	ldr	r1, [pc, #380]	; (8012a04 <ip4_frag+0x284>)
 8012888:	485c      	ldr	r0, [pc, #368]	; (80129fc <ip4_frag+0x27c>)
 801288a:	f000 f9df 	bl	8012c4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801288e:	8bfa      	ldrh	r2, [r7, #30]
 8012890:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012894:	4293      	cmp	r3, r2
 8012896:	bf28      	it	cs
 8012898:	4613      	movcs	r3, r2
 801289a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801289e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d105      	bne.n	80128b2 <ip4_frag+0x132>
        poff = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	60fb      	str	r3, [r7, #12]
        continue;
 80128b0:	e041      	b.n	8012936 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80128b2:	f7ff ff0d 	bl	80126d0 <ip_frag_alloc_pbuf_custom_ref>
 80128b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d103      	bne.n	80128c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80128be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128c0:	f7f6 fd04 	bl	80092cc <pbuf_free>
        goto memerr;
 80128c4:	e08f      	b.n	80129e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80128ce:	4413      	add	r3, r2
 80128d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80128d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80128d8:	9201      	str	r2, [sp, #4]
 80128da:	9300      	str	r3, [sp, #0]
 80128dc:	4603      	mov	r3, r0
 80128de:	2241      	movs	r2, #65	; 0x41
 80128e0:	2000      	movs	r0, #0
 80128e2:	f7f6 fb39 	bl	8008f58 <pbuf_alloced_custom>
 80128e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d106      	bne.n	80128fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80128ee:	69b8      	ldr	r0, [r7, #24]
 80128f0:	f7ff fef6 	bl	80126e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80128f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128f6:	f7f6 fce9 	bl	80092cc <pbuf_free>
        goto memerr;
 80128fa:	e074      	b.n	80129e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f7f6 fd85 	bl	800940c <pbuf_ref>
      pcr->original = p;
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	68fa      	ldr	r2, [r7, #12]
 8012906:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	4a3f      	ldr	r2, [pc, #252]	; (8012a08 <ip4_frag+0x288>)
 801290c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801290e:	6979      	ldr	r1, [r7, #20]
 8012910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012912:	f7f6 fd9d 	bl	8009450 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012916:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801291a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012924:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012928:	2b00      	cmp	r3, #0
 801292a:	d004      	beq.n	8012936 <ip4_frag+0x1b6>
        poff = 0;
 801292c:	2300      	movs	r3, #0
 801292e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012936:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801293a:	2b00      	cmp	r3, #0
 801293c:	d196      	bne.n	801286c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801293e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012940:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012944:	4413      	add	r3, r2
 8012946:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801294c:	f1a3 0213 	sub.w	r2, r3, #19
 8012950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012954:	429a      	cmp	r2, r3
 8012956:	bfcc      	ite	gt
 8012958:	2301      	movgt	r3, #1
 801295a:	2300      	movle	r3, #0
 801295c:	b2db      	uxtb	r3, r3
 801295e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012968:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801296a:	6a3b      	ldr	r3, [r7, #32]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d002      	beq.n	8012976 <ip4_frag+0x1f6>
 8012970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012972:	2b00      	cmp	r3, #0
 8012974:	d003      	beq.n	801297e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012976:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801297c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801297e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012980:	4618      	mov	r0, r3
 8012982:	f7f5 f9f0 	bl	8007d66 <lwip_htons>
 8012986:	4603      	mov	r3, r0
 8012988:	461a      	mov	r2, r3
 801298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801298e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012990:	3314      	adds	r3, #20
 8012992:	b29b      	uxth	r3, r3
 8012994:	4618      	mov	r0, r3
 8012996:	f7f5 f9e6 	bl	8007d66 <lwip_htons>
 801299a:	4603      	mov	r3, r0
 801299c:	461a      	mov	r2, r3
 801299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80129a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a4:	2200      	movs	r2, #0
 80129a6:	729a      	strb	r2, [r3, #10]
 80129a8:	2200      	movs	r2, #0
 80129aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	695b      	ldr	r3, [r3, #20]
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129b4:	68b8      	ldr	r0, [r7, #8]
 80129b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80129b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129ba:	f7f6 fc87 	bl	80092cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 80129be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80129ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80129ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129d0:	4413      	add	r3, r2
 80129d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80129d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f47f af19 	bne.w	8012812 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80129e0:	2300      	movs	r3, #0
 80129e2:	e002      	b.n	80129ea <ip4_frag+0x26a>
      goto memerr;
 80129e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80129e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3748      	adds	r7, #72	; 0x48
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	08016568 	.word	0x08016568
 80129f8:	08016744 	.word	0x08016744
 80129fc:	080165b0 	.word	0x080165b0
 8012a00:	08016760 	.word	0x08016760
 8012a04:	08016780 	.word	0x08016780
 8012a08:	08012719 	.word	0x08012719

08012a0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b086      	sub	sp, #24
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012a16:	230e      	movs	r3, #14
 8012a18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	895b      	ldrh	r3, [r3, #10]
 8012a1e:	2b0e      	cmp	r3, #14
 8012a20:	d96e      	bls.n	8012b00 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	7bdb      	ldrb	r3, [r3, #15]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a30:	3301      	adds	r3, #1
 8012a32:	b2da      	uxtb	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	7b1a      	ldrb	r2, [r3, #12]
 8012a42:	7b5b      	ldrb	r3, [r3, #13]
 8012a44:	021b      	lsls	r3, r3, #8
 8012a46:	4313      	orrs	r3, r2
 8012a48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d023      	beq.n	8012a9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d10f      	bne.n	8012a7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	785b      	ldrb	r3, [r3, #1]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d11b      	bne.n	8012a9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a6a:	2b5e      	cmp	r3, #94	; 0x5e
 8012a6c:	d117      	bne.n	8012a9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	7b5b      	ldrb	r3, [r3, #13]
 8012a72:	f043 0310 	orr.w	r3, r3, #16
 8012a76:	b2da      	uxtb	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	735a      	strb	r2, [r3, #13]
 8012a7c:	e00f      	b.n	8012a9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2206      	movs	r2, #6
 8012a82:	4928      	ldr	r1, [pc, #160]	; (8012b24 <ethernet_input+0x118>)
 8012a84:	4618      	mov	r0, r3
 8012a86:	f000 f8bb 	bl	8012c00 <memcmp>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d106      	bne.n	8012a9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	7b5b      	ldrb	r3, [r3, #13]
 8012a94:	f043 0308 	orr.w	r3, r3, #8
 8012a98:	b2da      	uxtb	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012a9e:	89fb      	ldrh	r3, [r7, #14]
 8012aa0:	2b08      	cmp	r3, #8
 8012aa2:	d003      	beq.n	8012aac <ethernet_input+0xa0>
 8012aa4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012aa8:	d014      	beq.n	8012ad4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012aaa:	e032      	b.n	8012b12 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ab2:	f003 0308 	and.w	r3, r3, #8
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d024      	beq.n	8012b04 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012aba:	8afb      	ldrh	r3, [r7, #22]
 8012abc:	4619      	mov	r1, r3
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f7f6 fb7e 	bl	80091c0 <pbuf_remove_header>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d11e      	bne.n	8012b08 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012aca:	6839      	ldr	r1, [r7, #0]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7fe ff21 	bl	8011914 <ip4_input>
      break;
 8012ad2:	e013      	b.n	8012afc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ada:	f003 0308 	and.w	r3, r3, #8
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d014      	beq.n	8012b0c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012ae2:	8afb      	ldrh	r3, [r7, #22]
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7f6 fb6a 	bl	80091c0 <pbuf_remove_header>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d10e      	bne.n	8012b10 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012af2:	6839      	ldr	r1, [r7, #0]
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f7fe f8c1 	bl	8010c7c <etharp_input>
      break;
 8012afa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012afc:	2300      	movs	r3, #0
 8012afe:	e00c      	b.n	8012b1a <ethernet_input+0x10e>
    goto free_and_return;
 8012b00:	bf00      	nop
 8012b02:	e006      	b.n	8012b12 <ethernet_input+0x106>
        goto free_and_return;
 8012b04:	bf00      	nop
 8012b06:	e004      	b.n	8012b12 <ethernet_input+0x106>
        goto free_and_return;
 8012b08:	bf00      	nop
 8012b0a:	e002      	b.n	8012b12 <ethernet_input+0x106>
        goto free_and_return;
 8012b0c:	bf00      	nop
 8012b0e:	e000      	b.n	8012b12 <ethernet_input+0x106>
        goto free_and_return;
 8012b10:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f7f6 fbda 	bl	80092cc <pbuf_free>
  return ERR_OK;
 8012b18:	2300      	movs	r3, #0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3718      	adds	r7, #24
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	08016988 	.word	0x08016988

08012b28 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b086      	sub	sp, #24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012b36:	8c3b      	ldrh	r3, [r7, #32]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7f5 f914 	bl	8007d66 <lwip_htons>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012b42:	210e      	movs	r1, #14
 8012b44:	68b8      	ldr	r0, [r7, #8]
 8012b46:	f7f6 fb2b 	bl	80091a0 <pbuf_add_header>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d125      	bne.n	8012b9c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	8afa      	ldrh	r2, [r7, #22]
 8012b5a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	2206      	movs	r2, #6
 8012b60:	6839      	ldr	r1, [r7, #0]
 8012b62:	4618      	mov	r0, r3
 8012b64:	f000 f85c 	bl	8012c20 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	3306      	adds	r3, #6
 8012b6c:	2206      	movs	r2, #6
 8012b6e:	6879      	ldr	r1, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f000 f855 	bl	8012c20 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b7c:	2b06      	cmp	r3, #6
 8012b7e:	d006      	beq.n	8012b8e <ethernet_output+0x66>
 8012b80:	4b0a      	ldr	r3, [pc, #40]	; (8012bac <ethernet_output+0x84>)
 8012b82:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012b86:	490a      	ldr	r1, [pc, #40]	; (8012bb0 <ethernet_output+0x88>)
 8012b88:	480a      	ldr	r0, [pc, #40]	; (8012bb4 <ethernet_output+0x8c>)
 8012b8a:	f000 f85f 	bl	8012c4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	699b      	ldr	r3, [r3, #24]
 8012b92:	68b9      	ldr	r1, [r7, #8]
 8012b94:	68f8      	ldr	r0, [r7, #12]
 8012b96:	4798      	blx	r3
 8012b98:	4603      	mov	r3, r0
 8012b9a:	e002      	b.n	8012ba2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012b9c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012b9e:	f06f 0301 	mvn.w	r3, #1
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3718      	adds	r7, #24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	08016790 	.word	0x08016790
 8012bb0:	080167c8 	.word	0x080167c8
 8012bb4:	080167fc 	.word	0x080167fc

08012bb8 <__libc_init_array>:
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	4d0d      	ldr	r5, [pc, #52]	; (8012bf0 <__libc_init_array+0x38>)
 8012bbc:	4c0d      	ldr	r4, [pc, #52]	; (8012bf4 <__libc_init_array+0x3c>)
 8012bbe:	1b64      	subs	r4, r4, r5
 8012bc0:	10a4      	asrs	r4, r4, #2
 8012bc2:	2600      	movs	r6, #0
 8012bc4:	42a6      	cmp	r6, r4
 8012bc6:	d109      	bne.n	8012bdc <__libc_init_array+0x24>
 8012bc8:	4d0b      	ldr	r5, [pc, #44]	; (8012bf8 <__libc_init_array+0x40>)
 8012bca:	4c0c      	ldr	r4, [pc, #48]	; (8012bfc <__libc_init_array+0x44>)
 8012bcc:	f001 f896 	bl	8013cfc <_init>
 8012bd0:	1b64      	subs	r4, r4, r5
 8012bd2:	10a4      	asrs	r4, r4, #2
 8012bd4:	2600      	movs	r6, #0
 8012bd6:	42a6      	cmp	r6, r4
 8012bd8:	d105      	bne.n	8012be6 <__libc_init_array+0x2e>
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
 8012bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012be0:	4798      	blx	r3
 8012be2:	3601      	adds	r6, #1
 8012be4:	e7ee      	b.n	8012bc4 <__libc_init_array+0xc>
 8012be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bea:	4798      	blx	r3
 8012bec:	3601      	adds	r6, #1
 8012bee:	e7f2      	b.n	8012bd6 <__libc_init_array+0x1e>
 8012bf0:	08016ae8 	.word	0x08016ae8
 8012bf4:	08016ae8 	.word	0x08016ae8
 8012bf8:	08016ae8 	.word	0x08016ae8
 8012bfc:	08016aec 	.word	0x08016aec

08012c00 <memcmp>:
 8012c00:	b510      	push	{r4, lr}
 8012c02:	3901      	subs	r1, #1
 8012c04:	4402      	add	r2, r0
 8012c06:	4290      	cmp	r0, r2
 8012c08:	d101      	bne.n	8012c0e <memcmp+0xe>
 8012c0a:	2000      	movs	r0, #0
 8012c0c:	e005      	b.n	8012c1a <memcmp+0x1a>
 8012c0e:	7803      	ldrb	r3, [r0, #0]
 8012c10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012c14:	42a3      	cmp	r3, r4
 8012c16:	d001      	beq.n	8012c1c <memcmp+0x1c>
 8012c18:	1b18      	subs	r0, r3, r4
 8012c1a:	bd10      	pop	{r4, pc}
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	e7f2      	b.n	8012c06 <memcmp+0x6>

08012c20 <memcpy>:
 8012c20:	440a      	add	r2, r1
 8012c22:	4291      	cmp	r1, r2
 8012c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c28:	d100      	bne.n	8012c2c <memcpy+0xc>
 8012c2a:	4770      	bx	lr
 8012c2c:	b510      	push	{r4, lr}
 8012c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c36:	4291      	cmp	r1, r2
 8012c38:	d1f9      	bne.n	8012c2e <memcpy+0xe>
 8012c3a:	bd10      	pop	{r4, pc}

08012c3c <memset>:
 8012c3c:	4402      	add	r2, r0
 8012c3e:	4603      	mov	r3, r0
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d100      	bne.n	8012c46 <memset+0xa>
 8012c44:	4770      	bx	lr
 8012c46:	f803 1b01 	strb.w	r1, [r3], #1
 8012c4a:	e7f9      	b.n	8012c40 <memset+0x4>

08012c4c <iprintf>:
 8012c4c:	b40f      	push	{r0, r1, r2, r3}
 8012c4e:	4b0a      	ldr	r3, [pc, #40]	; (8012c78 <iprintf+0x2c>)
 8012c50:	b513      	push	{r0, r1, r4, lr}
 8012c52:	681c      	ldr	r4, [r3, #0]
 8012c54:	b124      	cbz	r4, 8012c60 <iprintf+0x14>
 8012c56:	69a3      	ldr	r3, [r4, #24]
 8012c58:	b913      	cbnz	r3, 8012c60 <iprintf+0x14>
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 f8ca 	bl	8012df4 <__sinit>
 8012c60:	ab05      	add	r3, sp, #20
 8012c62:	9a04      	ldr	r2, [sp, #16]
 8012c64:	68a1      	ldr	r1, [r4, #8]
 8012c66:	9301      	str	r3, [sp, #4]
 8012c68:	4620      	mov	r0, r4
 8012c6a:	f000 fa87 	bl	801317c <_vfiprintf_r>
 8012c6e:	b002      	add	sp, #8
 8012c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c74:	b004      	add	sp, #16
 8012c76:	4770      	bx	lr
 8012c78:	20000050 	.word	0x20000050

08012c7c <rand>:
 8012c7c:	4b16      	ldr	r3, [pc, #88]	; (8012cd8 <rand+0x5c>)
 8012c7e:	b510      	push	{r4, lr}
 8012c80:	681c      	ldr	r4, [r3, #0]
 8012c82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012c84:	b9b3      	cbnz	r3, 8012cb4 <rand+0x38>
 8012c86:	2018      	movs	r0, #24
 8012c88:	f000 f966 	bl	8012f58 <malloc>
 8012c8c:	63a0      	str	r0, [r4, #56]	; 0x38
 8012c8e:	b928      	cbnz	r0, 8012c9c <rand+0x20>
 8012c90:	4602      	mov	r2, r0
 8012c92:	4b12      	ldr	r3, [pc, #72]	; (8012cdc <rand+0x60>)
 8012c94:	4812      	ldr	r0, [pc, #72]	; (8012ce0 <rand+0x64>)
 8012c96:	214e      	movs	r1, #78	; 0x4e
 8012c98:	f000 f836 	bl	8012d08 <__assert_func>
 8012c9c:	4a11      	ldr	r2, [pc, #68]	; (8012ce4 <rand+0x68>)
 8012c9e:	4b12      	ldr	r3, [pc, #72]	; (8012ce8 <rand+0x6c>)
 8012ca0:	e9c0 2300 	strd	r2, r3, [r0]
 8012ca4:	4b11      	ldr	r3, [pc, #68]	; (8012cec <rand+0x70>)
 8012ca6:	6083      	str	r3, [r0, #8]
 8012ca8:	230b      	movs	r3, #11
 8012caa:	8183      	strh	r3, [r0, #12]
 8012cac:	2201      	movs	r2, #1
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012cb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012cb6:	4a0e      	ldr	r2, [pc, #56]	; (8012cf0 <rand+0x74>)
 8012cb8:	6920      	ldr	r0, [r4, #16]
 8012cba:	6963      	ldr	r3, [r4, #20]
 8012cbc:	490d      	ldr	r1, [pc, #52]	; (8012cf4 <rand+0x78>)
 8012cbe:	4342      	muls	r2, r0
 8012cc0:	fb01 2203 	mla	r2, r1, r3, r2
 8012cc4:	fba0 0101 	umull	r0, r1, r0, r1
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	eb42 0001 	adc.w	r0, r2, r1
 8012cce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012cd2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012cd6:	bd10      	pop	{r4, pc}
 8012cd8:	20000050 	.word	0x20000050
 8012cdc:	0801699c 	.word	0x0801699c
 8012ce0:	080169b3 	.word	0x080169b3
 8012ce4:	abcd330e 	.word	0xabcd330e
 8012ce8:	e66d1234 	.word	0xe66d1234
 8012cec:	0005deec 	.word	0x0005deec
 8012cf0:	5851f42d 	.word	0x5851f42d
 8012cf4:	4c957f2d 	.word	0x4c957f2d

08012cf8 <strcpy>:
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cfe:	f803 2b01 	strb.w	r2, [r3], #1
 8012d02:	2a00      	cmp	r2, #0
 8012d04:	d1f9      	bne.n	8012cfa <strcpy+0x2>
 8012d06:	4770      	bx	lr

08012d08 <__assert_func>:
 8012d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d0a:	4614      	mov	r4, r2
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	4b09      	ldr	r3, [pc, #36]	; (8012d34 <__assert_func+0x2c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4605      	mov	r5, r0
 8012d14:	68d8      	ldr	r0, [r3, #12]
 8012d16:	b14c      	cbz	r4, 8012d2c <__assert_func+0x24>
 8012d18:	4b07      	ldr	r3, [pc, #28]	; (8012d38 <__assert_func+0x30>)
 8012d1a:	9100      	str	r1, [sp, #0]
 8012d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d20:	4906      	ldr	r1, [pc, #24]	; (8012d3c <__assert_func+0x34>)
 8012d22:	462b      	mov	r3, r5
 8012d24:	f000 f8e4 	bl	8012ef0 <fiprintf>
 8012d28:	f000 fe12 	bl	8013950 <abort>
 8012d2c:	4b04      	ldr	r3, [pc, #16]	; (8012d40 <__assert_func+0x38>)
 8012d2e:	461c      	mov	r4, r3
 8012d30:	e7f3      	b.n	8012d1a <__assert_func+0x12>
 8012d32:	bf00      	nop
 8012d34:	20000050 	.word	0x20000050
 8012d38:	08016a0e 	.word	0x08016a0e
 8012d3c:	08016a1b 	.word	0x08016a1b
 8012d40:	08016a49 	.word	0x08016a49

08012d44 <std>:
 8012d44:	2300      	movs	r3, #0
 8012d46:	b510      	push	{r4, lr}
 8012d48:	4604      	mov	r4, r0
 8012d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d52:	6083      	str	r3, [r0, #8]
 8012d54:	8181      	strh	r1, [r0, #12]
 8012d56:	6643      	str	r3, [r0, #100]	; 0x64
 8012d58:	81c2      	strh	r2, [r0, #14]
 8012d5a:	6183      	str	r3, [r0, #24]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	2208      	movs	r2, #8
 8012d60:	305c      	adds	r0, #92	; 0x5c
 8012d62:	f7ff ff6b 	bl	8012c3c <memset>
 8012d66:	4b05      	ldr	r3, [pc, #20]	; (8012d7c <std+0x38>)
 8012d68:	6263      	str	r3, [r4, #36]	; 0x24
 8012d6a:	4b05      	ldr	r3, [pc, #20]	; (8012d80 <std+0x3c>)
 8012d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d6e:	4b05      	ldr	r3, [pc, #20]	; (8012d84 <std+0x40>)
 8012d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d72:	4b05      	ldr	r3, [pc, #20]	; (8012d88 <std+0x44>)
 8012d74:	6224      	str	r4, [r4, #32]
 8012d76:	6323      	str	r3, [r4, #48]	; 0x30
 8012d78:	bd10      	pop	{r4, pc}
 8012d7a:	bf00      	nop
 8012d7c:	08013725 	.word	0x08013725
 8012d80:	08013747 	.word	0x08013747
 8012d84:	0801377f 	.word	0x0801377f
 8012d88:	080137a3 	.word	0x080137a3

08012d8c <_cleanup_r>:
 8012d8c:	4901      	ldr	r1, [pc, #4]	; (8012d94 <_cleanup_r+0x8>)
 8012d8e:	f000 b8c1 	b.w	8012f14 <_fwalk_reent>
 8012d92:	bf00      	nop
 8012d94:	08013a8d 	.word	0x08013a8d

08012d98 <__sfmoreglue>:
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	2268      	movs	r2, #104	; 0x68
 8012d9c:	1e4d      	subs	r5, r1, #1
 8012d9e:	4355      	muls	r5, r2
 8012da0:	460e      	mov	r6, r1
 8012da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012da6:	f000 f94b 	bl	8013040 <_malloc_r>
 8012daa:	4604      	mov	r4, r0
 8012dac:	b140      	cbz	r0, 8012dc0 <__sfmoreglue+0x28>
 8012dae:	2100      	movs	r1, #0
 8012db0:	e9c0 1600 	strd	r1, r6, [r0]
 8012db4:	300c      	adds	r0, #12
 8012db6:	60a0      	str	r0, [r4, #8]
 8012db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012dbc:	f7ff ff3e 	bl	8012c3c <memset>
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}

08012dc4 <__sfp_lock_acquire>:
 8012dc4:	4801      	ldr	r0, [pc, #4]	; (8012dcc <__sfp_lock_acquire+0x8>)
 8012dc6:	f000 b8c5 	b.w	8012f54 <__retarget_lock_acquire_recursive>
 8012dca:	bf00      	nop
 8012dcc:	20009a15 	.word	0x20009a15

08012dd0 <__sfp_lock_release>:
 8012dd0:	4801      	ldr	r0, [pc, #4]	; (8012dd8 <__sfp_lock_release+0x8>)
 8012dd2:	f000 b8c0 	b.w	8012f56 <__retarget_lock_release_recursive>
 8012dd6:	bf00      	nop
 8012dd8:	20009a15 	.word	0x20009a15

08012ddc <__sinit_lock_acquire>:
 8012ddc:	4801      	ldr	r0, [pc, #4]	; (8012de4 <__sinit_lock_acquire+0x8>)
 8012dde:	f000 b8b9 	b.w	8012f54 <__retarget_lock_acquire_recursive>
 8012de2:	bf00      	nop
 8012de4:	20009a16 	.word	0x20009a16

08012de8 <__sinit_lock_release>:
 8012de8:	4801      	ldr	r0, [pc, #4]	; (8012df0 <__sinit_lock_release+0x8>)
 8012dea:	f000 b8b4 	b.w	8012f56 <__retarget_lock_release_recursive>
 8012dee:	bf00      	nop
 8012df0:	20009a16 	.word	0x20009a16

08012df4 <__sinit>:
 8012df4:	b510      	push	{r4, lr}
 8012df6:	4604      	mov	r4, r0
 8012df8:	f7ff fff0 	bl	8012ddc <__sinit_lock_acquire>
 8012dfc:	69a3      	ldr	r3, [r4, #24]
 8012dfe:	b11b      	cbz	r3, 8012e08 <__sinit+0x14>
 8012e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e04:	f7ff bff0 	b.w	8012de8 <__sinit_lock_release>
 8012e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8012e0e:	4b13      	ldr	r3, [pc, #76]	; (8012e5c <__sinit+0x68>)
 8012e10:	4a13      	ldr	r2, [pc, #76]	; (8012e60 <__sinit+0x6c>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e16:	42a3      	cmp	r3, r4
 8012e18:	bf04      	itt	eq
 8012e1a:	2301      	moveq	r3, #1
 8012e1c:	61a3      	streq	r3, [r4, #24]
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f000 f820 	bl	8012e64 <__sfp>
 8012e24:	6060      	str	r0, [r4, #4]
 8012e26:	4620      	mov	r0, r4
 8012e28:	f000 f81c 	bl	8012e64 <__sfp>
 8012e2c:	60a0      	str	r0, [r4, #8]
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f000 f818 	bl	8012e64 <__sfp>
 8012e34:	2200      	movs	r2, #0
 8012e36:	60e0      	str	r0, [r4, #12]
 8012e38:	2104      	movs	r1, #4
 8012e3a:	6860      	ldr	r0, [r4, #4]
 8012e3c:	f7ff ff82 	bl	8012d44 <std>
 8012e40:	68a0      	ldr	r0, [r4, #8]
 8012e42:	2201      	movs	r2, #1
 8012e44:	2109      	movs	r1, #9
 8012e46:	f7ff ff7d 	bl	8012d44 <std>
 8012e4a:	68e0      	ldr	r0, [r4, #12]
 8012e4c:	2202      	movs	r2, #2
 8012e4e:	2112      	movs	r1, #18
 8012e50:	f7ff ff78 	bl	8012d44 <std>
 8012e54:	2301      	movs	r3, #1
 8012e56:	61a3      	str	r3, [r4, #24]
 8012e58:	e7d2      	b.n	8012e00 <__sinit+0xc>
 8012e5a:	bf00      	nop
 8012e5c:	08016998 	.word	0x08016998
 8012e60:	08012d8d 	.word	0x08012d8d

08012e64 <__sfp>:
 8012e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e66:	4607      	mov	r7, r0
 8012e68:	f7ff ffac 	bl	8012dc4 <__sfp_lock_acquire>
 8012e6c:	4b1e      	ldr	r3, [pc, #120]	; (8012ee8 <__sfp+0x84>)
 8012e6e:	681e      	ldr	r6, [r3, #0]
 8012e70:	69b3      	ldr	r3, [r6, #24]
 8012e72:	b913      	cbnz	r3, 8012e7a <__sfp+0x16>
 8012e74:	4630      	mov	r0, r6
 8012e76:	f7ff ffbd 	bl	8012df4 <__sinit>
 8012e7a:	3648      	adds	r6, #72	; 0x48
 8012e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e80:	3b01      	subs	r3, #1
 8012e82:	d503      	bpl.n	8012e8c <__sfp+0x28>
 8012e84:	6833      	ldr	r3, [r6, #0]
 8012e86:	b30b      	cbz	r3, 8012ecc <__sfp+0x68>
 8012e88:	6836      	ldr	r6, [r6, #0]
 8012e8a:	e7f7      	b.n	8012e7c <__sfp+0x18>
 8012e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e90:	b9d5      	cbnz	r5, 8012ec8 <__sfp+0x64>
 8012e92:	4b16      	ldr	r3, [pc, #88]	; (8012eec <__sfp+0x88>)
 8012e94:	60e3      	str	r3, [r4, #12]
 8012e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8012e9c:	f000 f859 	bl	8012f52 <__retarget_lock_init_recursive>
 8012ea0:	f7ff ff96 	bl	8012dd0 <__sfp_lock_release>
 8012ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012eac:	6025      	str	r5, [r4, #0]
 8012eae:	61a5      	str	r5, [r4, #24]
 8012eb0:	2208      	movs	r2, #8
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012eb8:	f7ff fec0 	bl	8012c3c <memset>
 8012ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec8:	3468      	adds	r4, #104	; 0x68
 8012eca:	e7d9      	b.n	8012e80 <__sfp+0x1c>
 8012ecc:	2104      	movs	r1, #4
 8012ece:	4638      	mov	r0, r7
 8012ed0:	f7ff ff62 	bl	8012d98 <__sfmoreglue>
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	6030      	str	r0, [r6, #0]
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	d1d5      	bne.n	8012e88 <__sfp+0x24>
 8012edc:	f7ff ff78 	bl	8012dd0 <__sfp_lock_release>
 8012ee0:	230c      	movs	r3, #12
 8012ee2:	603b      	str	r3, [r7, #0]
 8012ee4:	e7ee      	b.n	8012ec4 <__sfp+0x60>
 8012ee6:	bf00      	nop
 8012ee8:	08016998 	.word	0x08016998
 8012eec:	ffff0001 	.word	0xffff0001

08012ef0 <fiprintf>:
 8012ef0:	b40e      	push	{r1, r2, r3}
 8012ef2:	b503      	push	{r0, r1, lr}
 8012ef4:	4601      	mov	r1, r0
 8012ef6:	ab03      	add	r3, sp, #12
 8012ef8:	4805      	ldr	r0, [pc, #20]	; (8012f10 <fiprintf+0x20>)
 8012efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012efe:	6800      	ldr	r0, [r0, #0]
 8012f00:	9301      	str	r3, [sp, #4]
 8012f02:	f000 f93b 	bl	801317c <_vfiprintf_r>
 8012f06:	b002      	add	sp, #8
 8012f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f0c:	b003      	add	sp, #12
 8012f0e:	4770      	bx	lr
 8012f10:	20000050 	.word	0x20000050

08012f14 <_fwalk_reent>:
 8012f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f18:	4606      	mov	r6, r0
 8012f1a:	4688      	mov	r8, r1
 8012f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f20:	2700      	movs	r7, #0
 8012f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f26:	f1b9 0901 	subs.w	r9, r9, #1
 8012f2a:	d505      	bpl.n	8012f38 <_fwalk_reent+0x24>
 8012f2c:	6824      	ldr	r4, [r4, #0]
 8012f2e:	2c00      	cmp	r4, #0
 8012f30:	d1f7      	bne.n	8012f22 <_fwalk_reent+0xe>
 8012f32:	4638      	mov	r0, r7
 8012f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f38:	89ab      	ldrh	r3, [r5, #12]
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	d907      	bls.n	8012f4e <_fwalk_reent+0x3a>
 8012f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f42:	3301      	adds	r3, #1
 8012f44:	d003      	beq.n	8012f4e <_fwalk_reent+0x3a>
 8012f46:	4629      	mov	r1, r5
 8012f48:	4630      	mov	r0, r6
 8012f4a:	47c0      	blx	r8
 8012f4c:	4307      	orrs	r7, r0
 8012f4e:	3568      	adds	r5, #104	; 0x68
 8012f50:	e7e9      	b.n	8012f26 <_fwalk_reent+0x12>

08012f52 <__retarget_lock_init_recursive>:
 8012f52:	4770      	bx	lr

08012f54 <__retarget_lock_acquire_recursive>:
 8012f54:	4770      	bx	lr

08012f56 <__retarget_lock_release_recursive>:
 8012f56:	4770      	bx	lr

08012f58 <malloc>:
 8012f58:	4b02      	ldr	r3, [pc, #8]	; (8012f64 <malloc+0xc>)
 8012f5a:	4601      	mov	r1, r0
 8012f5c:	6818      	ldr	r0, [r3, #0]
 8012f5e:	f000 b86f 	b.w	8013040 <_malloc_r>
 8012f62:	bf00      	nop
 8012f64:	20000050 	.word	0x20000050

08012f68 <_free_r>:
 8012f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f6a:	2900      	cmp	r1, #0
 8012f6c:	d044      	beq.n	8012ff8 <_free_r+0x90>
 8012f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f72:	9001      	str	r0, [sp, #4]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f1a1 0404 	sub.w	r4, r1, #4
 8012f7a:	bfb8      	it	lt
 8012f7c:	18e4      	addlt	r4, r4, r3
 8012f7e:	f000 fe39 	bl	8013bf4 <__malloc_lock>
 8012f82:	4a1e      	ldr	r2, [pc, #120]	; (8012ffc <_free_r+0x94>)
 8012f84:	9801      	ldr	r0, [sp, #4]
 8012f86:	6813      	ldr	r3, [r2, #0]
 8012f88:	b933      	cbnz	r3, 8012f98 <_free_r+0x30>
 8012f8a:	6063      	str	r3, [r4, #4]
 8012f8c:	6014      	str	r4, [r2, #0]
 8012f8e:	b003      	add	sp, #12
 8012f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f94:	f000 be34 	b.w	8013c00 <__malloc_unlock>
 8012f98:	42a3      	cmp	r3, r4
 8012f9a:	d908      	bls.n	8012fae <_free_r+0x46>
 8012f9c:	6825      	ldr	r5, [r4, #0]
 8012f9e:	1961      	adds	r1, r4, r5
 8012fa0:	428b      	cmp	r3, r1
 8012fa2:	bf01      	itttt	eq
 8012fa4:	6819      	ldreq	r1, [r3, #0]
 8012fa6:	685b      	ldreq	r3, [r3, #4]
 8012fa8:	1949      	addeq	r1, r1, r5
 8012faa:	6021      	streq	r1, [r4, #0]
 8012fac:	e7ed      	b.n	8012f8a <_free_r+0x22>
 8012fae:	461a      	mov	r2, r3
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	b10b      	cbz	r3, 8012fb8 <_free_r+0x50>
 8012fb4:	42a3      	cmp	r3, r4
 8012fb6:	d9fa      	bls.n	8012fae <_free_r+0x46>
 8012fb8:	6811      	ldr	r1, [r2, #0]
 8012fba:	1855      	adds	r5, r2, r1
 8012fbc:	42a5      	cmp	r5, r4
 8012fbe:	d10b      	bne.n	8012fd8 <_free_r+0x70>
 8012fc0:	6824      	ldr	r4, [r4, #0]
 8012fc2:	4421      	add	r1, r4
 8012fc4:	1854      	adds	r4, r2, r1
 8012fc6:	42a3      	cmp	r3, r4
 8012fc8:	6011      	str	r1, [r2, #0]
 8012fca:	d1e0      	bne.n	8012f8e <_free_r+0x26>
 8012fcc:	681c      	ldr	r4, [r3, #0]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	6053      	str	r3, [r2, #4]
 8012fd2:	4421      	add	r1, r4
 8012fd4:	6011      	str	r1, [r2, #0]
 8012fd6:	e7da      	b.n	8012f8e <_free_r+0x26>
 8012fd8:	d902      	bls.n	8012fe0 <_free_r+0x78>
 8012fda:	230c      	movs	r3, #12
 8012fdc:	6003      	str	r3, [r0, #0]
 8012fde:	e7d6      	b.n	8012f8e <_free_r+0x26>
 8012fe0:	6825      	ldr	r5, [r4, #0]
 8012fe2:	1961      	adds	r1, r4, r5
 8012fe4:	428b      	cmp	r3, r1
 8012fe6:	bf04      	itt	eq
 8012fe8:	6819      	ldreq	r1, [r3, #0]
 8012fea:	685b      	ldreq	r3, [r3, #4]
 8012fec:	6063      	str	r3, [r4, #4]
 8012fee:	bf04      	itt	eq
 8012ff0:	1949      	addeq	r1, r1, r5
 8012ff2:	6021      	streq	r1, [r4, #0]
 8012ff4:	6054      	str	r4, [r2, #4]
 8012ff6:	e7ca      	b.n	8012f8e <_free_r+0x26>
 8012ff8:	b003      	add	sp, #12
 8012ffa:	bd30      	pop	{r4, r5, pc}
 8012ffc:	20009a18 	.word	0x20009a18

08013000 <sbrk_aligned>:
 8013000:	b570      	push	{r4, r5, r6, lr}
 8013002:	4e0e      	ldr	r6, [pc, #56]	; (801303c <sbrk_aligned+0x3c>)
 8013004:	460c      	mov	r4, r1
 8013006:	6831      	ldr	r1, [r6, #0]
 8013008:	4605      	mov	r5, r0
 801300a:	b911      	cbnz	r1, 8013012 <sbrk_aligned+0x12>
 801300c:	f000 fb7a 	bl	8013704 <_sbrk_r>
 8013010:	6030      	str	r0, [r6, #0]
 8013012:	4621      	mov	r1, r4
 8013014:	4628      	mov	r0, r5
 8013016:	f000 fb75 	bl	8013704 <_sbrk_r>
 801301a:	1c43      	adds	r3, r0, #1
 801301c:	d00a      	beq.n	8013034 <sbrk_aligned+0x34>
 801301e:	1cc4      	adds	r4, r0, #3
 8013020:	f024 0403 	bic.w	r4, r4, #3
 8013024:	42a0      	cmp	r0, r4
 8013026:	d007      	beq.n	8013038 <sbrk_aligned+0x38>
 8013028:	1a21      	subs	r1, r4, r0
 801302a:	4628      	mov	r0, r5
 801302c:	f000 fb6a 	bl	8013704 <_sbrk_r>
 8013030:	3001      	adds	r0, #1
 8013032:	d101      	bne.n	8013038 <sbrk_aligned+0x38>
 8013034:	f04f 34ff 	mov.w	r4, #4294967295
 8013038:	4620      	mov	r0, r4
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	20009a1c 	.word	0x20009a1c

08013040 <_malloc_r>:
 8013040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013044:	1ccd      	adds	r5, r1, #3
 8013046:	f025 0503 	bic.w	r5, r5, #3
 801304a:	3508      	adds	r5, #8
 801304c:	2d0c      	cmp	r5, #12
 801304e:	bf38      	it	cc
 8013050:	250c      	movcc	r5, #12
 8013052:	2d00      	cmp	r5, #0
 8013054:	4607      	mov	r7, r0
 8013056:	db01      	blt.n	801305c <_malloc_r+0x1c>
 8013058:	42a9      	cmp	r1, r5
 801305a:	d905      	bls.n	8013068 <_malloc_r+0x28>
 801305c:	230c      	movs	r3, #12
 801305e:	603b      	str	r3, [r7, #0]
 8013060:	2600      	movs	r6, #0
 8013062:	4630      	mov	r0, r6
 8013064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013068:	4e2e      	ldr	r6, [pc, #184]	; (8013124 <_malloc_r+0xe4>)
 801306a:	f000 fdc3 	bl	8013bf4 <__malloc_lock>
 801306e:	6833      	ldr	r3, [r6, #0]
 8013070:	461c      	mov	r4, r3
 8013072:	bb34      	cbnz	r4, 80130c2 <_malloc_r+0x82>
 8013074:	4629      	mov	r1, r5
 8013076:	4638      	mov	r0, r7
 8013078:	f7ff ffc2 	bl	8013000 <sbrk_aligned>
 801307c:	1c43      	adds	r3, r0, #1
 801307e:	4604      	mov	r4, r0
 8013080:	d14d      	bne.n	801311e <_malloc_r+0xde>
 8013082:	6834      	ldr	r4, [r6, #0]
 8013084:	4626      	mov	r6, r4
 8013086:	2e00      	cmp	r6, #0
 8013088:	d140      	bne.n	801310c <_malloc_r+0xcc>
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	4631      	mov	r1, r6
 801308e:	4638      	mov	r0, r7
 8013090:	eb04 0803 	add.w	r8, r4, r3
 8013094:	f000 fb36 	bl	8013704 <_sbrk_r>
 8013098:	4580      	cmp	r8, r0
 801309a:	d13a      	bne.n	8013112 <_malloc_r+0xd2>
 801309c:	6821      	ldr	r1, [r4, #0]
 801309e:	3503      	adds	r5, #3
 80130a0:	1a6d      	subs	r5, r5, r1
 80130a2:	f025 0503 	bic.w	r5, r5, #3
 80130a6:	3508      	adds	r5, #8
 80130a8:	2d0c      	cmp	r5, #12
 80130aa:	bf38      	it	cc
 80130ac:	250c      	movcc	r5, #12
 80130ae:	4629      	mov	r1, r5
 80130b0:	4638      	mov	r0, r7
 80130b2:	f7ff ffa5 	bl	8013000 <sbrk_aligned>
 80130b6:	3001      	adds	r0, #1
 80130b8:	d02b      	beq.n	8013112 <_malloc_r+0xd2>
 80130ba:	6823      	ldr	r3, [r4, #0]
 80130bc:	442b      	add	r3, r5
 80130be:	6023      	str	r3, [r4, #0]
 80130c0:	e00e      	b.n	80130e0 <_malloc_r+0xa0>
 80130c2:	6822      	ldr	r2, [r4, #0]
 80130c4:	1b52      	subs	r2, r2, r5
 80130c6:	d41e      	bmi.n	8013106 <_malloc_r+0xc6>
 80130c8:	2a0b      	cmp	r2, #11
 80130ca:	d916      	bls.n	80130fa <_malloc_r+0xba>
 80130cc:	1961      	adds	r1, r4, r5
 80130ce:	42a3      	cmp	r3, r4
 80130d0:	6025      	str	r5, [r4, #0]
 80130d2:	bf18      	it	ne
 80130d4:	6059      	strne	r1, [r3, #4]
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	bf08      	it	eq
 80130da:	6031      	streq	r1, [r6, #0]
 80130dc:	5162      	str	r2, [r4, r5]
 80130de:	604b      	str	r3, [r1, #4]
 80130e0:	4638      	mov	r0, r7
 80130e2:	f104 060b 	add.w	r6, r4, #11
 80130e6:	f000 fd8b 	bl	8013c00 <__malloc_unlock>
 80130ea:	f026 0607 	bic.w	r6, r6, #7
 80130ee:	1d23      	adds	r3, r4, #4
 80130f0:	1af2      	subs	r2, r6, r3
 80130f2:	d0b6      	beq.n	8013062 <_malloc_r+0x22>
 80130f4:	1b9b      	subs	r3, r3, r6
 80130f6:	50a3      	str	r3, [r4, r2]
 80130f8:	e7b3      	b.n	8013062 <_malloc_r+0x22>
 80130fa:	6862      	ldr	r2, [r4, #4]
 80130fc:	42a3      	cmp	r3, r4
 80130fe:	bf0c      	ite	eq
 8013100:	6032      	streq	r2, [r6, #0]
 8013102:	605a      	strne	r2, [r3, #4]
 8013104:	e7ec      	b.n	80130e0 <_malloc_r+0xa0>
 8013106:	4623      	mov	r3, r4
 8013108:	6864      	ldr	r4, [r4, #4]
 801310a:	e7b2      	b.n	8013072 <_malloc_r+0x32>
 801310c:	4634      	mov	r4, r6
 801310e:	6876      	ldr	r6, [r6, #4]
 8013110:	e7b9      	b.n	8013086 <_malloc_r+0x46>
 8013112:	230c      	movs	r3, #12
 8013114:	603b      	str	r3, [r7, #0]
 8013116:	4638      	mov	r0, r7
 8013118:	f000 fd72 	bl	8013c00 <__malloc_unlock>
 801311c:	e7a1      	b.n	8013062 <_malloc_r+0x22>
 801311e:	6025      	str	r5, [r4, #0]
 8013120:	e7de      	b.n	80130e0 <_malloc_r+0xa0>
 8013122:	bf00      	nop
 8013124:	20009a18 	.word	0x20009a18

08013128 <__sfputc_r>:
 8013128:	6893      	ldr	r3, [r2, #8]
 801312a:	3b01      	subs	r3, #1
 801312c:	2b00      	cmp	r3, #0
 801312e:	b410      	push	{r4}
 8013130:	6093      	str	r3, [r2, #8]
 8013132:	da08      	bge.n	8013146 <__sfputc_r+0x1e>
 8013134:	6994      	ldr	r4, [r2, #24]
 8013136:	42a3      	cmp	r3, r4
 8013138:	db01      	blt.n	801313e <__sfputc_r+0x16>
 801313a:	290a      	cmp	r1, #10
 801313c:	d103      	bne.n	8013146 <__sfputc_r+0x1e>
 801313e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013142:	f000 bb33 	b.w	80137ac <__swbuf_r>
 8013146:	6813      	ldr	r3, [r2, #0]
 8013148:	1c58      	adds	r0, r3, #1
 801314a:	6010      	str	r0, [r2, #0]
 801314c:	7019      	strb	r1, [r3, #0]
 801314e:	4608      	mov	r0, r1
 8013150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013154:	4770      	bx	lr

08013156 <__sfputs_r>:
 8013156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013158:	4606      	mov	r6, r0
 801315a:	460f      	mov	r7, r1
 801315c:	4614      	mov	r4, r2
 801315e:	18d5      	adds	r5, r2, r3
 8013160:	42ac      	cmp	r4, r5
 8013162:	d101      	bne.n	8013168 <__sfputs_r+0x12>
 8013164:	2000      	movs	r0, #0
 8013166:	e007      	b.n	8013178 <__sfputs_r+0x22>
 8013168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801316c:	463a      	mov	r2, r7
 801316e:	4630      	mov	r0, r6
 8013170:	f7ff ffda 	bl	8013128 <__sfputc_r>
 8013174:	1c43      	adds	r3, r0, #1
 8013176:	d1f3      	bne.n	8013160 <__sfputs_r+0xa>
 8013178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801317c <_vfiprintf_r>:
 801317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013180:	460d      	mov	r5, r1
 8013182:	b09d      	sub	sp, #116	; 0x74
 8013184:	4614      	mov	r4, r2
 8013186:	4698      	mov	r8, r3
 8013188:	4606      	mov	r6, r0
 801318a:	b118      	cbz	r0, 8013194 <_vfiprintf_r+0x18>
 801318c:	6983      	ldr	r3, [r0, #24]
 801318e:	b90b      	cbnz	r3, 8013194 <_vfiprintf_r+0x18>
 8013190:	f7ff fe30 	bl	8012df4 <__sinit>
 8013194:	4b89      	ldr	r3, [pc, #548]	; (80133bc <_vfiprintf_r+0x240>)
 8013196:	429d      	cmp	r5, r3
 8013198:	d11b      	bne.n	80131d2 <_vfiprintf_r+0x56>
 801319a:	6875      	ldr	r5, [r6, #4]
 801319c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801319e:	07d9      	lsls	r1, r3, #31
 80131a0:	d405      	bmi.n	80131ae <_vfiprintf_r+0x32>
 80131a2:	89ab      	ldrh	r3, [r5, #12]
 80131a4:	059a      	lsls	r2, r3, #22
 80131a6:	d402      	bmi.n	80131ae <_vfiprintf_r+0x32>
 80131a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131aa:	f7ff fed3 	bl	8012f54 <__retarget_lock_acquire_recursive>
 80131ae:	89ab      	ldrh	r3, [r5, #12]
 80131b0:	071b      	lsls	r3, r3, #28
 80131b2:	d501      	bpl.n	80131b8 <_vfiprintf_r+0x3c>
 80131b4:	692b      	ldr	r3, [r5, #16]
 80131b6:	b9eb      	cbnz	r3, 80131f4 <_vfiprintf_r+0x78>
 80131b8:	4629      	mov	r1, r5
 80131ba:	4630      	mov	r0, r6
 80131bc:	f000 fb5a 	bl	8013874 <__swsetup_r>
 80131c0:	b1c0      	cbz	r0, 80131f4 <_vfiprintf_r+0x78>
 80131c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131c4:	07dc      	lsls	r4, r3, #31
 80131c6:	d50e      	bpl.n	80131e6 <_vfiprintf_r+0x6a>
 80131c8:	f04f 30ff 	mov.w	r0, #4294967295
 80131cc:	b01d      	add	sp, #116	; 0x74
 80131ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d2:	4b7b      	ldr	r3, [pc, #492]	; (80133c0 <_vfiprintf_r+0x244>)
 80131d4:	429d      	cmp	r5, r3
 80131d6:	d101      	bne.n	80131dc <_vfiprintf_r+0x60>
 80131d8:	68b5      	ldr	r5, [r6, #8]
 80131da:	e7df      	b.n	801319c <_vfiprintf_r+0x20>
 80131dc:	4b79      	ldr	r3, [pc, #484]	; (80133c4 <_vfiprintf_r+0x248>)
 80131de:	429d      	cmp	r5, r3
 80131e0:	bf08      	it	eq
 80131e2:	68f5      	ldreq	r5, [r6, #12]
 80131e4:	e7da      	b.n	801319c <_vfiprintf_r+0x20>
 80131e6:	89ab      	ldrh	r3, [r5, #12]
 80131e8:	0598      	lsls	r0, r3, #22
 80131ea:	d4ed      	bmi.n	80131c8 <_vfiprintf_r+0x4c>
 80131ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131ee:	f7ff feb2 	bl	8012f56 <__retarget_lock_release_recursive>
 80131f2:	e7e9      	b.n	80131c8 <_vfiprintf_r+0x4c>
 80131f4:	2300      	movs	r3, #0
 80131f6:	9309      	str	r3, [sp, #36]	; 0x24
 80131f8:	2320      	movs	r3, #32
 80131fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8013202:	2330      	movs	r3, #48	; 0x30
 8013204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80133c8 <_vfiprintf_r+0x24c>
 8013208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801320c:	f04f 0901 	mov.w	r9, #1
 8013210:	4623      	mov	r3, r4
 8013212:	469a      	mov	sl, r3
 8013214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013218:	b10a      	cbz	r2, 801321e <_vfiprintf_r+0xa2>
 801321a:	2a25      	cmp	r2, #37	; 0x25
 801321c:	d1f9      	bne.n	8013212 <_vfiprintf_r+0x96>
 801321e:	ebba 0b04 	subs.w	fp, sl, r4
 8013222:	d00b      	beq.n	801323c <_vfiprintf_r+0xc0>
 8013224:	465b      	mov	r3, fp
 8013226:	4622      	mov	r2, r4
 8013228:	4629      	mov	r1, r5
 801322a:	4630      	mov	r0, r6
 801322c:	f7ff ff93 	bl	8013156 <__sfputs_r>
 8013230:	3001      	adds	r0, #1
 8013232:	f000 80aa 	beq.w	801338a <_vfiprintf_r+0x20e>
 8013236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013238:	445a      	add	r2, fp
 801323a:	9209      	str	r2, [sp, #36]	; 0x24
 801323c:	f89a 3000 	ldrb.w	r3, [sl]
 8013240:	2b00      	cmp	r3, #0
 8013242:	f000 80a2 	beq.w	801338a <_vfiprintf_r+0x20e>
 8013246:	2300      	movs	r3, #0
 8013248:	f04f 32ff 	mov.w	r2, #4294967295
 801324c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013250:	f10a 0a01 	add.w	sl, sl, #1
 8013254:	9304      	str	r3, [sp, #16]
 8013256:	9307      	str	r3, [sp, #28]
 8013258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801325c:	931a      	str	r3, [sp, #104]	; 0x68
 801325e:	4654      	mov	r4, sl
 8013260:	2205      	movs	r2, #5
 8013262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013266:	4858      	ldr	r0, [pc, #352]	; (80133c8 <_vfiprintf_r+0x24c>)
 8013268:	f7ec ffba 	bl	80001e0 <memchr>
 801326c:	9a04      	ldr	r2, [sp, #16]
 801326e:	b9d8      	cbnz	r0, 80132a8 <_vfiprintf_r+0x12c>
 8013270:	06d1      	lsls	r1, r2, #27
 8013272:	bf44      	itt	mi
 8013274:	2320      	movmi	r3, #32
 8013276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801327a:	0713      	lsls	r3, r2, #28
 801327c:	bf44      	itt	mi
 801327e:	232b      	movmi	r3, #43	; 0x2b
 8013280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013284:	f89a 3000 	ldrb.w	r3, [sl]
 8013288:	2b2a      	cmp	r3, #42	; 0x2a
 801328a:	d015      	beq.n	80132b8 <_vfiprintf_r+0x13c>
 801328c:	9a07      	ldr	r2, [sp, #28]
 801328e:	4654      	mov	r4, sl
 8013290:	2000      	movs	r0, #0
 8013292:	f04f 0c0a 	mov.w	ip, #10
 8013296:	4621      	mov	r1, r4
 8013298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801329c:	3b30      	subs	r3, #48	; 0x30
 801329e:	2b09      	cmp	r3, #9
 80132a0:	d94e      	bls.n	8013340 <_vfiprintf_r+0x1c4>
 80132a2:	b1b0      	cbz	r0, 80132d2 <_vfiprintf_r+0x156>
 80132a4:	9207      	str	r2, [sp, #28]
 80132a6:	e014      	b.n	80132d2 <_vfiprintf_r+0x156>
 80132a8:	eba0 0308 	sub.w	r3, r0, r8
 80132ac:	fa09 f303 	lsl.w	r3, r9, r3
 80132b0:	4313      	orrs	r3, r2
 80132b2:	9304      	str	r3, [sp, #16]
 80132b4:	46a2      	mov	sl, r4
 80132b6:	e7d2      	b.n	801325e <_vfiprintf_r+0xe2>
 80132b8:	9b03      	ldr	r3, [sp, #12]
 80132ba:	1d19      	adds	r1, r3, #4
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	9103      	str	r1, [sp, #12]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	bfbb      	ittet	lt
 80132c4:	425b      	neglt	r3, r3
 80132c6:	f042 0202 	orrlt.w	r2, r2, #2
 80132ca:	9307      	strge	r3, [sp, #28]
 80132cc:	9307      	strlt	r3, [sp, #28]
 80132ce:	bfb8      	it	lt
 80132d0:	9204      	strlt	r2, [sp, #16]
 80132d2:	7823      	ldrb	r3, [r4, #0]
 80132d4:	2b2e      	cmp	r3, #46	; 0x2e
 80132d6:	d10c      	bne.n	80132f2 <_vfiprintf_r+0x176>
 80132d8:	7863      	ldrb	r3, [r4, #1]
 80132da:	2b2a      	cmp	r3, #42	; 0x2a
 80132dc:	d135      	bne.n	801334a <_vfiprintf_r+0x1ce>
 80132de:	9b03      	ldr	r3, [sp, #12]
 80132e0:	1d1a      	adds	r2, r3, #4
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	9203      	str	r2, [sp, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	bfb8      	it	lt
 80132ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80132ee:	3402      	adds	r4, #2
 80132f0:	9305      	str	r3, [sp, #20]
 80132f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80133d8 <_vfiprintf_r+0x25c>
 80132f6:	7821      	ldrb	r1, [r4, #0]
 80132f8:	2203      	movs	r2, #3
 80132fa:	4650      	mov	r0, sl
 80132fc:	f7ec ff70 	bl	80001e0 <memchr>
 8013300:	b140      	cbz	r0, 8013314 <_vfiprintf_r+0x198>
 8013302:	2340      	movs	r3, #64	; 0x40
 8013304:	eba0 000a 	sub.w	r0, r0, sl
 8013308:	fa03 f000 	lsl.w	r0, r3, r0
 801330c:	9b04      	ldr	r3, [sp, #16]
 801330e:	4303      	orrs	r3, r0
 8013310:	3401      	adds	r4, #1
 8013312:	9304      	str	r3, [sp, #16]
 8013314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013318:	482c      	ldr	r0, [pc, #176]	; (80133cc <_vfiprintf_r+0x250>)
 801331a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801331e:	2206      	movs	r2, #6
 8013320:	f7ec ff5e 	bl	80001e0 <memchr>
 8013324:	2800      	cmp	r0, #0
 8013326:	d03f      	beq.n	80133a8 <_vfiprintf_r+0x22c>
 8013328:	4b29      	ldr	r3, [pc, #164]	; (80133d0 <_vfiprintf_r+0x254>)
 801332a:	bb1b      	cbnz	r3, 8013374 <_vfiprintf_r+0x1f8>
 801332c:	9b03      	ldr	r3, [sp, #12]
 801332e:	3307      	adds	r3, #7
 8013330:	f023 0307 	bic.w	r3, r3, #7
 8013334:	3308      	adds	r3, #8
 8013336:	9303      	str	r3, [sp, #12]
 8013338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801333a:	443b      	add	r3, r7
 801333c:	9309      	str	r3, [sp, #36]	; 0x24
 801333e:	e767      	b.n	8013210 <_vfiprintf_r+0x94>
 8013340:	fb0c 3202 	mla	r2, ip, r2, r3
 8013344:	460c      	mov	r4, r1
 8013346:	2001      	movs	r0, #1
 8013348:	e7a5      	b.n	8013296 <_vfiprintf_r+0x11a>
 801334a:	2300      	movs	r3, #0
 801334c:	3401      	adds	r4, #1
 801334e:	9305      	str	r3, [sp, #20]
 8013350:	4619      	mov	r1, r3
 8013352:	f04f 0c0a 	mov.w	ip, #10
 8013356:	4620      	mov	r0, r4
 8013358:	f810 2b01 	ldrb.w	r2, [r0], #1
 801335c:	3a30      	subs	r2, #48	; 0x30
 801335e:	2a09      	cmp	r2, #9
 8013360:	d903      	bls.n	801336a <_vfiprintf_r+0x1ee>
 8013362:	2b00      	cmp	r3, #0
 8013364:	d0c5      	beq.n	80132f2 <_vfiprintf_r+0x176>
 8013366:	9105      	str	r1, [sp, #20]
 8013368:	e7c3      	b.n	80132f2 <_vfiprintf_r+0x176>
 801336a:	fb0c 2101 	mla	r1, ip, r1, r2
 801336e:	4604      	mov	r4, r0
 8013370:	2301      	movs	r3, #1
 8013372:	e7f0      	b.n	8013356 <_vfiprintf_r+0x1da>
 8013374:	ab03      	add	r3, sp, #12
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	462a      	mov	r2, r5
 801337a:	4b16      	ldr	r3, [pc, #88]	; (80133d4 <_vfiprintf_r+0x258>)
 801337c:	a904      	add	r1, sp, #16
 801337e:	4630      	mov	r0, r6
 8013380:	f3af 8000 	nop.w
 8013384:	4607      	mov	r7, r0
 8013386:	1c78      	adds	r0, r7, #1
 8013388:	d1d6      	bne.n	8013338 <_vfiprintf_r+0x1bc>
 801338a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801338c:	07d9      	lsls	r1, r3, #31
 801338e:	d405      	bmi.n	801339c <_vfiprintf_r+0x220>
 8013390:	89ab      	ldrh	r3, [r5, #12]
 8013392:	059a      	lsls	r2, r3, #22
 8013394:	d402      	bmi.n	801339c <_vfiprintf_r+0x220>
 8013396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013398:	f7ff fddd 	bl	8012f56 <__retarget_lock_release_recursive>
 801339c:	89ab      	ldrh	r3, [r5, #12]
 801339e:	065b      	lsls	r3, r3, #25
 80133a0:	f53f af12 	bmi.w	80131c8 <_vfiprintf_r+0x4c>
 80133a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133a6:	e711      	b.n	80131cc <_vfiprintf_r+0x50>
 80133a8:	ab03      	add	r3, sp, #12
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	462a      	mov	r2, r5
 80133ae:	4b09      	ldr	r3, [pc, #36]	; (80133d4 <_vfiprintf_r+0x258>)
 80133b0:	a904      	add	r1, sp, #16
 80133b2:	4630      	mov	r0, r6
 80133b4:	f000 f880 	bl	80134b8 <_printf_i>
 80133b8:	e7e4      	b.n	8013384 <_vfiprintf_r+0x208>
 80133ba:	bf00      	nop
 80133bc:	08016a6c 	.word	0x08016a6c
 80133c0:	08016a8c 	.word	0x08016a8c
 80133c4:	08016a4c 	.word	0x08016a4c
 80133c8:	08016aac 	.word	0x08016aac
 80133cc:	08016ab6 	.word	0x08016ab6
 80133d0:	00000000 	.word	0x00000000
 80133d4:	08013157 	.word	0x08013157
 80133d8:	08016ab2 	.word	0x08016ab2

080133dc <_printf_common>:
 80133dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133e0:	4616      	mov	r6, r2
 80133e2:	4699      	mov	r9, r3
 80133e4:	688a      	ldr	r2, [r1, #8]
 80133e6:	690b      	ldr	r3, [r1, #16]
 80133e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133ec:	4293      	cmp	r3, r2
 80133ee:	bfb8      	it	lt
 80133f0:	4613      	movlt	r3, r2
 80133f2:	6033      	str	r3, [r6, #0]
 80133f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133f8:	4607      	mov	r7, r0
 80133fa:	460c      	mov	r4, r1
 80133fc:	b10a      	cbz	r2, 8013402 <_printf_common+0x26>
 80133fe:	3301      	adds	r3, #1
 8013400:	6033      	str	r3, [r6, #0]
 8013402:	6823      	ldr	r3, [r4, #0]
 8013404:	0699      	lsls	r1, r3, #26
 8013406:	bf42      	ittt	mi
 8013408:	6833      	ldrmi	r3, [r6, #0]
 801340a:	3302      	addmi	r3, #2
 801340c:	6033      	strmi	r3, [r6, #0]
 801340e:	6825      	ldr	r5, [r4, #0]
 8013410:	f015 0506 	ands.w	r5, r5, #6
 8013414:	d106      	bne.n	8013424 <_printf_common+0x48>
 8013416:	f104 0a19 	add.w	sl, r4, #25
 801341a:	68e3      	ldr	r3, [r4, #12]
 801341c:	6832      	ldr	r2, [r6, #0]
 801341e:	1a9b      	subs	r3, r3, r2
 8013420:	42ab      	cmp	r3, r5
 8013422:	dc26      	bgt.n	8013472 <_printf_common+0x96>
 8013424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013428:	1e13      	subs	r3, r2, #0
 801342a:	6822      	ldr	r2, [r4, #0]
 801342c:	bf18      	it	ne
 801342e:	2301      	movne	r3, #1
 8013430:	0692      	lsls	r2, r2, #26
 8013432:	d42b      	bmi.n	801348c <_printf_common+0xb0>
 8013434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013438:	4649      	mov	r1, r9
 801343a:	4638      	mov	r0, r7
 801343c:	47c0      	blx	r8
 801343e:	3001      	adds	r0, #1
 8013440:	d01e      	beq.n	8013480 <_printf_common+0xa4>
 8013442:	6823      	ldr	r3, [r4, #0]
 8013444:	68e5      	ldr	r5, [r4, #12]
 8013446:	6832      	ldr	r2, [r6, #0]
 8013448:	f003 0306 	and.w	r3, r3, #6
 801344c:	2b04      	cmp	r3, #4
 801344e:	bf08      	it	eq
 8013450:	1aad      	subeq	r5, r5, r2
 8013452:	68a3      	ldr	r3, [r4, #8]
 8013454:	6922      	ldr	r2, [r4, #16]
 8013456:	bf0c      	ite	eq
 8013458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801345c:	2500      	movne	r5, #0
 801345e:	4293      	cmp	r3, r2
 8013460:	bfc4      	itt	gt
 8013462:	1a9b      	subgt	r3, r3, r2
 8013464:	18ed      	addgt	r5, r5, r3
 8013466:	2600      	movs	r6, #0
 8013468:	341a      	adds	r4, #26
 801346a:	42b5      	cmp	r5, r6
 801346c:	d11a      	bne.n	80134a4 <_printf_common+0xc8>
 801346e:	2000      	movs	r0, #0
 8013470:	e008      	b.n	8013484 <_printf_common+0xa8>
 8013472:	2301      	movs	r3, #1
 8013474:	4652      	mov	r2, sl
 8013476:	4649      	mov	r1, r9
 8013478:	4638      	mov	r0, r7
 801347a:	47c0      	blx	r8
 801347c:	3001      	adds	r0, #1
 801347e:	d103      	bne.n	8013488 <_printf_common+0xac>
 8013480:	f04f 30ff 	mov.w	r0, #4294967295
 8013484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013488:	3501      	adds	r5, #1
 801348a:	e7c6      	b.n	801341a <_printf_common+0x3e>
 801348c:	18e1      	adds	r1, r4, r3
 801348e:	1c5a      	adds	r2, r3, #1
 8013490:	2030      	movs	r0, #48	; 0x30
 8013492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013496:	4422      	add	r2, r4
 8013498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801349c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80134a0:	3302      	adds	r3, #2
 80134a2:	e7c7      	b.n	8013434 <_printf_common+0x58>
 80134a4:	2301      	movs	r3, #1
 80134a6:	4622      	mov	r2, r4
 80134a8:	4649      	mov	r1, r9
 80134aa:	4638      	mov	r0, r7
 80134ac:	47c0      	blx	r8
 80134ae:	3001      	adds	r0, #1
 80134b0:	d0e6      	beq.n	8013480 <_printf_common+0xa4>
 80134b2:	3601      	adds	r6, #1
 80134b4:	e7d9      	b.n	801346a <_printf_common+0x8e>
	...

080134b8 <_printf_i>:
 80134b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134bc:	7e0f      	ldrb	r7, [r1, #24]
 80134be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134c0:	2f78      	cmp	r7, #120	; 0x78
 80134c2:	4691      	mov	r9, r2
 80134c4:	4680      	mov	r8, r0
 80134c6:	460c      	mov	r4, r1
 80134c8:	469a      	mov	sl, r3
 80134ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134ce:	d807      	bhi.n	80134e0 <_printf_i+0x28>
 80134d0:	2f62      	cmp	r7, #98	; 0x62
 80134d2:	d80a      	bhi.n	80134ea <_printf_i+0x32>
 80134d4:	2f00      	cmp	r7, #0
 80134d6:	f000 80d8 	beq.w	801368a <_printf_i+0x1d2>
 80134da:	2f58      	cmp	r7, #88	; 0x58
 80134dc:	f000 80a3 	beq.w	8013626 <_printf_i+0x16e>
 80134e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134e8:	e03a      	b.n	8013560 <_printf_i+0xa8>
 80134ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134ee:	2b15      	cmp	r3, #21
 80134f0:	d8f6      	bhi.n	80134e0 <_printf_i+0x28>
 80134f2:	a101      	add	r1, pc, #4	; (adr r1, 80134f8 <_printf_i+0x40>)
 80134f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134f8:	08013551 	.word	0x08013551
 80134fc:	08013565 	.word	0x08013565
 8013500:	080134e1 	.word	0x080134e1
 8013504:	080134e1 	.word	0x080134e1
 8013508:	080134e1 	.word	0x080134e1
 801350c:	080134e1 	.word	0x080134e1
 8013510:	08013565 	.word	0x08013565
 8013514:	080134e1 	.word	0x080134e1
 8013518:	080134e1 	.word	0x080134e1
 801351c:	080134e1 	.word	0x080134e1
 8013520:	080134e1 	.word	0x080134e1
 8013524:	08013671 	.word	0x08013671
 8013528:	08013595 	.word	0x08013595
 801352c:	08013653 	.word	0x08013653
 8013530:	080134e1 	.word	0x080134e1
 8013534:	080134e1 	.word	0x080134e1
 8013538:	08013693 	.word	0x08013693
 801353c:	080134e1 	.word	0x080134e1
 8013540:	08013595 	.word	0x08013595
 8013544:	080134e1 	.word	0x080134e1
 8013548:	080134e1 	.word	0x080134e1
 801354c:	0801365b 	.word	0x0801365b
 8013550:	682b      	ldr	r3, [r5, #0]
 8013552:	1d1a      	adds	r2, r3, #4
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	602a      	str	r2, [r5, #0]
 8013558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801355c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013560:	2301      	movs	r3, #1
 8013562:	e0a3      	b.n	80136ac <_printf_i+0x1f4>
 8013564:	6820      	ldr	r0, [r4, #0]
 8013566:	6829      	ldr	r1, [r5, #0]
 8013568:	0606      	lsls	r6, r0, #24
 801356a:	f101 0304 	add.w	r3, r1, #4
 801356e:	d50a      	bpl.n	8013586 <_printf_i+0xce>
 8013570:	680e      	ldr	r6, [r1, #0]
 8013572:	602b      	str	r3, [r5, #0]
 8013574:	2e00      	cmp	r6, #0
 8013576:	da03      	bge.n	8013580 <_printf_i+0xc8>
 8013578:	232d      	movs	r3, #45	; 0x2d
 801357a:	4276      	negs	r6, r6
 801357c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013580:	485e      	ldr	r0, [pc, #376]	; (80136fc <_printf_i+0x244>)
 8013582:	230a      	movs	r3, #10
 8013584:	e019      	b.n	80135ba <_printf_i+0x102>
 8013586:	680e      	ldr	r6, [r1, #0]
 8013588:	602b      	str	r3, [r5, #0]
 801358a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801358e:	bf18      	it	ne
 8013590:	b236      	sxthne	r6, r6
 8013592:	e7ef      	b.n	8013574 <_printf_i+0xbc>
 8013594:	682b      	ldr	r3, [r5, #0]
 8013596:	6820      	ldr	r0, [r4, #0]
 8013598:	1d19      	adds	r1, r3, #4
 801359a:	6029      	str	r1, [r5, #0]
 801359c:	0601      	lsls	r1, r0, #24
 801359e:	d501      	bpl.n	80135a4 <_printf_i+0xec>
 80135a0:	681e      	ldr	r6, [r3, #0]
 80135a2:	e002      	b.n	80135aa <_printf_i+0xf2>
 80135a4:	0646      	lsls	r6, r0, #25
 80135a6:	d5fb      	bpl.n	80135a0 <_printf_i+0xe8>
 80135a8:	881e      	ldrh	r6, [r3, #0]
 80135aa:	4854      	ldr	r0, [pc, #336]	; (80136fc <_printf_i+0x244>)
 80135ac:	2f6f      	cmp	r7, #111	; 0x6f
 80135ae:	bf0c      	ite	eq
 80135b0:	2308      	moveq	r3, #8
 80135b2:	230a      	movne	r3, #10
 80135b4:	2100      	movs	r1, #0
 80135b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135ba:	6865      	ldr	r5, [r4, #4]
 80135bc:	60a5      	str	r5, [r4, #8]
 80135be:	2d00      	cmp	r5, #0
 80135c0:	bfa2      	ittt	ge
 80135c2:	6821      	ldrge	r1, [r4, #0]
 80135c4:	f021 0104 	bicge.w	r1, r1, #4
 80135c8:	6021      	strge	r1, [r4, #0]
 80135ca:	b90e      	cbnz	r6, 80135d0 <_printf_i+0x118>
 80135cc:	2d00      	cmp	r5, #0
 80135ce:	d04d      	beq.n	801366c <_printf_i+0x1b4>
 80135d0:	4615      	mov	r5, r2
 80135d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80135d6:	fb03 6711 	mls	r7, r3, r1, r6
 80135da:	5dc7      	ldrb	r7, [r0, r7]
 80135dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80135e0:	4637      	mov	r7, r6
 80135e2:	42bb      	cmp	r3, r7
 80135e4:	460e      	mov	r6, r1
 80135e6:	d9f4      	bls.n	80135d2 <_printf_i+0x11a>
 80135e8:	2b08      	cmp	r3, #8
 80135ea:	d10b      	bne.n	8013604 <_printf_i+0x14c>
 80135ec:	6823      	ldr	r3, [r4, #0]
 80135ee:	07de      	lsls	r6, r3, #31
 80135f0:	d508      	bpl.n	8013604 <_printf_i+0x14c>
 80135f2:	6923      	ldr	r3, [r4, #16]
 80135f4:	6861      	ldr	r1, [r4, #4]
 80135f6:	4299      	cmp	r1, r3
 80135f8:	bfde      	ittt	le
 80135fa:	2330      	movle	r3, #48	; 0x30
 80135fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013604:	1b52      	subs	r2, r2, r5
 8013606:	6122      	str	r2, [r4, #16]
 8013608:	f8cd a000 	str.w	sl, [sp]
 801360c:	464b      	mov	r3, r9
 801360e:	aa03      	add	r2, sp, #12
 8013610:	4621      	mov	r1, r4
 8013612:	4640      	mov	r0, r8
 8013614:	f7ff fee2 	bl	80133dc <_printf_common>
 8013618:	3001      	adds	r0, #1
 801361a:	d14c      	bne.n	80136b6 <_printf_i+0x1fe>
 801361c:	f04f 30ff 	mov.w	r0, #4294967295
 8013620:	b004      	add	sp, #16
 8013622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013626:	4835      	ldr	r0, [pc, #212]	; (80136fc <_printf_i+0x244>)
 8013628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801362c:	6829      	ldr	r1, [r5, #0]
 801362e:	6823      	ldr	r3, [r4, #0]
 8013630:	f851 6b04 	ldr.w	r6, [r1], #4
 8013634:	6029      	str	r1, [r5, #0]
 8013636:	061d      	lsls	r5, r3, #24
 8013638:	d514      	bpl.n	8013664 <_printf_i+0x1ac>
 801363a:	07df      	lsls	r7, r3, #31
 801363c:	bf44      	itt	mi
 801363e:	f043 0320 	orrmi.w	r3, r3, #32
 8013642:	6023      	strmi	r3, [r4, #0]
 8013644:	b91e      	cbnz	r6, 801364e <_printf_i+0x196>
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	f023 0320 	bic.w	r3, r3, #32
 801364c:	6023      	str	r3, [r4, #0]
 801364e:	2310      	movs	r3, #16
 8013650:	e7b0      	b.n	80135b4 <_printf_i+0xfc>
 8013652:	6823      	ldr	r3, [r4, #0]
 8013654:	f043 0320 	orr.w	r3, r3, #32
 8013658:	6023      	str	r3, [r4, #0]
 801365a:	2378      	movs	r3, #120	; 0x78
 801365c:	4828      	ldr	r0, [pc, #160]	; (8013700 <_printf_i+0x248>)
 801365e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013662:	e7e3      	b.n	801362c <_printf_i+0x174>
 8013664:	0659      	lsls	r1, r3, #25
 8013666:	bf48      	it	mi
 8013668:	b2b6      	uxthmi	r6, r6
 801366a:	e7e6      	b.n	801363a <_printf_i+0x182>
 801366c:	4615      	mov	r5, r2
 801366e:	e7bb      	b.n	80135e8 <_printf_i+0x130>
 8013670:	682b      	ldr	r3, [r5, #0]
 8013672:	6826      	ldr	r6, [r4, #0]
 8013674:	6961      	ldr	r1, [r4, #20]
 8013676:	1d18      	adds	r0, r3, #4
 8013678:	6028      	str	r0, [r5, #0]
 801367a:	0635      	lsls	r5, r6, #24
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	d501      	bpl.n	8013684 <_printf_i+0x1cc>
 8013680:	6019      	str	r1, [r3, #0]
 8013682:	e002      	b.n	801368a <_printf_i+0x1d2>
 8013684:	0670      	lsls	r0, r6, #25
 8013686:	d5fb      	bpl.n	8013680 <_printf_i+0x1c8>
 8013688:	8019      	strh	r1, [r3, #0]
 801368a:	2300      	movs	r3, #0
 801368c:	6123      	str	r3, [r4, #16]
 801368e:	4615      	mov	r5, r2
 8013690:	e7ba      	b.n	8013608 <_printf_i+0x150>
 8013692:	682b      	ldr	r3, [r5, #0]
 8013694:	1d1a      	adds	r2, r3, #4
 8013696:	602a      	str	r2, [r5, #0]
 8013698:	681d      	ldr	r5, [r3, #0]
 801369a:	6862      	ldr	r2, [r4, #4]
 801369c:	2100      	movs	r1, #0
 801369e:	4628      	mov	r0, r5
 80136a0:	f7ec fd9e 	bl	80001e0 <memchr>
 80136a4:	b108      	cbz	r0, 80136aa <_printf_i+0x1f2>
 80136a6:	1b40      	subs	r0, r0, r5
 80136a8:	6060      	str	r0, [r4, #4]
 80136aa:	6863      	ldr	r3, [r4, #4]
 80136ac:	6123      	str	r3, [r4, #16]
 80136ae:	2300      	movs	r3, #0
 80136b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136b4:	e7a8      	b.n	8013608 <_printf_i+0x150>
 80136b6:	6923      	ldr	r3, [r4, #16]
 80136b8:	462a      	mov	r2, r5
 80136ba:	4649      	mov	r1, r9
 80136bc:	4640      	mov	r0, r8
 80136be:	47d0      	blx	sl
 80136c0:	3001      	adds	r0, #1
 80136c2:	d0ab      	beq.n	801361c <_printf_i+0x164>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	079b      	lsls	r3, r3, #30
 80136c8:	d413      	bmi.n	80136f2 <_printf_i+0x23a>
 80136ca:	68e0      	ldr	r0, [r4, #12]
 80136cc:	9b03      	ldr	r3, [sp, #12]
 80136ce:	4298      	cmp	r0, r3
 80136d0:	bfb8      	it	lt
 80136d2:	4618      	movlt	r0, r3
 80136d4:	e7a4      	b.n	8013620 <_printf_i+0x168>
 80136d6:	2301      	movs	r3, #1
 80136d8:	4632      	mov	r2, r6
 80136da:	4649      	mov	r1, r9
 80136dc:	4640      	mov	r0, r8
 80136de:	47d0      	blx	sl
 80136e0:	3001      	adds	r0, #1
 80136e2:	d09b      	beq.n	801361c <_printf_i+0x164>
 80136e4:	3501      	adds	r5, #1
 80136e6:	68e3      	ldr	r3, [r4, #12]
 80136e8:	9903      	ldr	r1, [sp, #12]
 80136ea:	1a5b      	subs	r3, r3, r1
 80136ec:	42ab      	cmp	r3, r5
 80136ee:	dcf2      	bgt.n	80136d6 <_printf_i+0x21e>
 80136f0:	e7eb      	b.n	80136ca <_printf_i+0x212>
 80136f2:	2500      	movs	r5, #0
 80136f4:	f104 0619 	add.w	r6, r4, #25
 80136f8:	e7f5      	b.n	80136e6 <_printf_i+0x22e>
 80136fa:	bf00      	nop
 80136fc:	08016abd 	.word	0x08016abd
 8013700:	08016ace 	.word	0x08016ace

08013704 <_sbrk_r>:
 8013704:	b538      	push	{r3, r4, r5, lr}
 8013706:	4d06      	ldr	r5, [pc, #24]	; (8013720 <_sbrk_r+0x1c>)
 8013708:	2300      	movs	r3, #0
 801370a:	4604      	mov	r4, r0
 801370c:	4608      	mov	r0, r1
 801370e:	602b      	str	r3, [r5, #0]
 8013710:	f7ed fe60 	bl	80013d4 <_sbrk>
 8013714:	1c43      	adds	r3, r0, #1
 8013716:	d102      	bne.n	801371e <_sbrk_r+0x1a>
 8013718:	682b      	ldr	r3, [r5, #0]
 801371a:	b103      	cbz	r3, 801371e <_sbrk_r+0x1a>
 801371c:	6023      	str	r3, [r4, #0]
 801371e:	bd38      	pop	{r3, r4, r5, pc}
 8013720:	20009a10 	.word	0x20009a10

08013724 <__sread>:
 8013724:	b510      	push	{r4, lr}
 8013726:	460c      	mov	r4, r1
 8013728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801372c:	f000 fa6e 	bl	8013c0c <_read_r>
 8013730:	2800      	cmp	r0, #0
 8013732:	bfab      	itete	ge
 8013734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013736:	89a3      	ldrhlt	r3, [r4, #12]
 8013738:	181b      	addge	r3, r3, r0
 801373a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801373e:	bfac      	ite	ge
 8013740:	6563      	strge	r3, [r4, #84]	; 0x54
 8013742:	81a3      	strhlt	r3, [r4, #12]
 8013744:	bd10      	pop	{r4, pc}

08013746 <__swrite>:
 8013746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801374a:	461f      	mov	r7, r3
 801374c:	898b      	ldrh	r3, [r1, #12]
 801374e:	05db      	lsls	r3, r3, #23
 8013750:	4605      	mov	r5, r0
 8013752:	460c      	mov	r4, r1
 8013754:	4616      	mov	r6, r2
 8013756:	d505      	bpl.n	8013764 <__swrite+0x1e>
 8013758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801375c:	2302      	movs	r3, #2
 801375e:	2200      	movs	r2, #0
 8013760:	f000 f9d0 	bl	8013b04 <_lseek_r>
 8013764:	89a3      	ldrh	r3, [r4, #12]
 8013766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801376a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801376e:	81a3      	strh	r3, [r4, #12]
 8013770:	4632      	mov	r2, r6
 8013772:	463b      	mov	r3, r7
 8013774:	4628      	mov	r0, r5
 8013776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801377a:	f000 b869 	b.w	8013850 <_write_r>

0801377e <__sseek>:
 801377e:	b510      	push	{r4, lr}
 8013780:	460c      	mov	r4, r1
 8013782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013786:	f000 f9bd 	bl	8013b04 <_lseek_r>
 801378a:	1c43      	adds	r3, r0, #1
 801378c:	89a3      	ldrh	r3, [r4, #12]
 801378e:	bf15      	itete	ne
 8013790:	6560      	strne	r0, [r4, #84]	; 0x54
 8013792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801379a:	81a3      	strheq	r3, [r4, #12]
 801379c:	bf18      	it	ne
 801379e:	81a3      	strhne	r3, [r4, #12]
 80137a0:	bd10      	pop	{r4, pc}

080137a2 <__sclose>:
 80137a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137a6:	f000 b8db 	b.w	8013960 <_close_r>
	...

080137ac <__swbuf_r>:
 80137ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ae:	460e      	mov	r6, r1
 80137b0:	4614      	mov	r4, r2
 80137b2:	4605      	mov	r5, r0
 80137b4:	b118      	cbz	r0, 80137be <__swbuf_r+0x12>
 80137b6:	6983      	ldr	r3, [r0, #24]
 80137b8:	b90b      	cbnz	r3, 80137be <__swbuf_r+0x12>
 80137ba:	f7ff fb1b 	bl	8012df4 <__sinit>
 80137be:	4b21      	ldr	r3, [pc, #132]	; (8013844 <__swbuf_r+0x98>)
 80137c0:	429c      	cmp	r4, r3
 80137c2:	d12b      	bne.n	801381c <__swbuf_r+0x70>
 80137c4:	686c      	ldr	r4, [r5, #4]
 80137c6:	69a3      	ldr	r3, [r4, #24]
 80137c8:	60a3      	str	r3, [r4, #8]
 80137ca:	89a3      	ldrh	r3, [r4, #12]
 80137cc:	071a      	lsls	r2, r3, #28
 80137ce:	d52f      	bpl.n	8013830 <__swbuf_r+0x84>
 80137d0:	6923      	ldr	r3, [r4, #16]
 80137d2:	b36b      	cbz	r3, 8013830 <__swbuf_r+0x84>
 80137d4:	6923      	ldr	r3, [r4, #16]
 80137d6:	6820      	ldr	r0, [r4, #0]
 80137d8:	1ac0      	subs	r0, r0, r3
 80137da:	6963      	ldr	r3, [r4, #20]
 80137dc:	b2f6      	uxtb	r6, r6
 80137de:	4283      	cmp	r3, r0
 80137e0:	4637      	mov	r7, r6
 80137e2:	dc04      	bgt.n	80137ee <__swbuf_r+0x42>
 80137e4:	4621      	mov	r1, r4
 80137e6:	4628      	mov	r0, r5
 80137e8:	f000 f950 	bl	8013a8c <_fflush_r>
 80137ec:	bb30      	cbnz	r0, 801383c <__swbuf_r+0x90>
 80137ee:	68a3      	ldr	r3, [r4, #8]
 80137f0:	3b01      	subs	r3, #1
 80137f2:	60a3      	str	r3, [r4, #8]
 80137f4:	6823      	ldr	r3, [r4, #0]
 80137f6:	1c5a      	adds	r2, r3, #1
 80137f8:	6022      	str	r2, [r4, #0]
 80137fa:	701e      	strb	r6, [r3, #0]
 80137fc:	6963      	ldr	r3, [r4, #20]
 80137fe:	3001      	adds	r0, #1
 8013800:	4283      	cmp	r3, r0
 8013802:	d004      	beq.n	801380e <__swbuf_r+0x62>
 8013804:	89a3      	ldrh	r3, [r4, #12]
 8013806:	07db      	lsls	r3, r3, #31
 8013808:	d506      	bpl.n	8013818 <__swbuf_r+0x6c>
 801380a:	2e0a      	cmp	r6, #10
 801380c:	d104      	bne.n	8013818 <__swbuf_r+0x6c>
 801380e:	4621      	mov	r1, r4
 8013810:	4628      	mov	r0, r5
 8013812:	f000 f93b 	bl	8013a8c <_fflush_r>
 8013816:	b988      	cbnz	r0, 801383c <__swbuf_r+0x90>
 8013818:	4638      	mov	r0, r7
 801381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801381c:	4b0a      	ldr	r3, [pc, #40]	; (8013848 <__swbuf_r+0x9c>)
 801381e:	429c      	cmp	r4, r3
 8013820:	d101      	bne.n	8013826 <__swbuf_r+0x7a>
 8013822:	68ac      	ldr	r4, [r5, #8]
 8013824:	e7cf      	b.n	80137c6 <__swbuf_r+0x1a>
 8013826:	4b09      	ldr	r3, [pc, #36]	; (801384c <__swbuf_r+0xa0>)
 8013828:	429c      	cmp	r4, r3
 801382a:	bf08      	it	eq
 801382c:	68ec      	ldreq	r4, [r5, #12]
 801382e:	e7ca      	b.n	80137c6 <__swbuf_r+0x1a>
 8013830:	4621      	mov	r1, r4
 8013832:	4628      	mov	r0, r5
 8013834:	f000 f81e 	bl	8013874 <__swsetup_r>
 8013838:	2800      	cmp	r0, #0
 801383a:	d0cb      	beq.n	80137d4 <__swbuf_r+0x28>
 801383c:	f04f 37ff 	mov.w	r7, #4294967295
 8013840:	e7ea      	b.n	8013818 <__swbuf_r+0x6c>
 8013842:	bf00      	nop
 8013844:	08016a6c 	.word	0x08016a6c
 8013848:	08016a8c 	.word	0x08016a8c
 801384c:	08016a4c 	.word	0x08016a4c

08013850 <_write_r>:
 8013850:	b538      	push	{r3, r4, r5, lr}
 8013852:	4d07      	ldr	r5, [pc, #28]	; (8013870 <_write_r+0x20>)
 8013854:	4604      	mov	r4, r0
 8013856:	4608      	mov	r0, r1
 8013858:	4611      	mov	r1, r2
 801385a:	2200      	movs	r2, #0
 801385c:	602a      	str	r2, [r5, #0]
 801385e:	461a      	mov	r2, r3
 8013860:	f7ed fd67 	bl	8001332 <_write>
 8013864:	1c43      	adds	r3, r0, #1
 8013866:	d102      	bne.n	801386e <_write_r+0x1e>
 8013868:	682b      	ldr	r3, [r5, #0]
 801386a:	b103      	cbz	r3, 801386e <_write_r+0x1e>
 801386c:	6023      	str	r3, [r4, #0]
 801386e:	bd38      	pop	{r3, r4, r5, pc}
 8013870:	20009a10 	.word	0x20009a10

08013874 <__swsetup_r>:
 8013874:	4b32      	ldr	r3, [pc, #200]	; (8013940 <__swsetup_r+0xcc>)
 8013876:	b570      	push	{r4, r5, r6, lr}
 8013878:	681d      	ldr	r5, [r3, #0]
 801387a:	4606      	mov	r6, r0
 801387c:	460c      	mov	r4, r1
 801387e:	b125      	cbz	r5, 801388a <__swsetup_r+0x16>
 8013880:	69ab      	ldr	r3, [r5, #24]
 8013882:	b913      	cbnz	r3, 801388a <__swsetup_r+0x16>
 8013884:	4628      	mov	r0, r5
 8013886:	f7ff fab5 	bl	8012df4 <__sinit>
 801388a:	4b2e      	ldr	r3, [pc, #184]	; (8013944 <__swsetup_r+0xd0>)
 801388c:	429c      	cmp	r4, r3
 801388e:	d10f      	bne.n	80138b0 <__swsetup_r+0x3c>
 8013890:	686c      	ldr	r4, [r5, #4]
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013898:	0719      	lsls	r1, r3, #28
 801389a:	d42c      	bmi.n	80138f6 <__swsetup_r+0x82>
 801389c:	06dd      	lsls	r5, r3, #27
 801389e:	d411      	bmi.n	80138c4 <__swsetup_r+0x50>
 80138a0:	2309      	movs	r3, #9
 80138a2:	6033      	str	r3, [r6, #0]
 80138a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80138a8:	81a3      	strh	r3, [r4, #12]
 80138aa:	f04f 30ff 	mov.w	r0, #4294967295
 80138ae:	e03e      	b.n	801392e <__swsetup_r+0xba>
 80138b0:	4b25      	ldr	r3, [pc, #148]	; (8013948 <__swsetup_r+0xd4>)
 80138b2:	429c      	cmp	r4, r3
 80138b4:	d101      	bne.n	80138ba <__swsetup_r+0x46>
 80138b6:	68ac      	ldr	r4, [r5, #8]
 80138b8:	e7eb      	b.n	8013892 <__swsetup_r+0x1e>
 80138ba:	4b24      	ldr	r3, [pc, #144]	; (801394c <__swsetup_r+0xd8>)
 80138bc:	429c      	cmp	r4, r3
 80138be:	bf08      	it	eq
 80138c0:	68ec      	ldreq	r4, [r5, #12]
 80138c2:	e7e6      	b.n	8013892 <__swsetup_r+0x1e>
 80138c4:	0758      	lsls	r0, r3, #29
 80138c6:	d512      	bpl.n	80138ee <__swsetup_r+0x7a>
 80138c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138ca:	b141      	cbz	r1, 80138de <__swsetup_r+0x6a>
 80138cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138d0:	4299      	cmp	r1, r3
 80138d2:	d002      	beq.n	80138da <__swsetup_r+0x66>
 80138d4:	4630      	mov	r0, r6
 80138d6:	f7ff fb47 	bl	8012f68 <_free_r>
 80138da:	2300      	movs	r3, #0
 80138dc:	6363      	str	r3, [r4, #52]	; 0x34
 80138de:	89a3      	ldrh	r3, [r4, #12]
 80138e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80138e4:	81a3      	strh	r3, [r4, #12]
 80138e6:	2300      	movs	r3, #0
 80138e8:	6063      	str	r3, [r4, #4]
 80138ea:	6923      	ldr	r3, [r4, #16]
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	89a3      	ldrh	r3, [r4, #12]
 80138f0:	f043 0308 	orr.w	r3, r3, #8
 80138f4:	81a3      	strh	r3, [r4, #12]
 80138f6:	6923      	ldr	r3, [r4, #16]
 80138f8:	b94b      	cbnz	r3, 801390e <__swsetup_r+0x9a>
 80138fa:	89a3      	ldrh	r3, [r4, #12]
 80138fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013904:	d003      	beq.n	801390e <__swsetup_r+0x9a>
 8013906:	4621      	mov	r1, r4
 8013908:	4630      	mov	r0, r6
 801390a:	f000 f933 	bl	8013b74 <__smakebuf_r>
 801390e:	89a0      	ldrh	r0, [r4, #12]
 8013910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013914:	f010 0301 	ands.w	r3, r0, #1
 8013918:	d00a      	beq.n	8013930 <__swsetup_r+0xbc>
 801391a:	2300      	movs	r3, #0
 801391c:	60a3      	str	r3, [r4, #8]
 801391e:	6963      	ldr	r3, [r4, #20]
 8013920:	425b      	negs	r3, r3
 8013922:	61a3      	str	r3, [r4, #24]
 8013924:	6923      	ldr	r3, [r4, #16]
 8013926:	b943      	cbnz	r3, 801393a <__swsetup_r+0xc6>
 8013928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801392c:	d1ba      	bne.n	80138a4 <__swsetup_r+0x30>
 801392e:	bd70      	pop	{r4, r5, r6, pc}
 8013930:	0781      	lsls	r1, r0, #30
 8013932:	bf58      	it	pl
 8013934:	6963      	ldrpl	r3, [r4, #20]
 8013936:	60a3      	str	r3, [r4, #8]
 8013938:	e7f4      	b.n	8013924 <__swsetup_r+0xb0>
 801393a:	2000      	movs	r0, #0
 801393c:	e7f7      	b.n	801392e <__swsetup_r+0xba>
 801393e:	bf00      	nop
 8013940:	20000050 	.word	0x20000050
 8013944:	08016a6c 	.word	0x08016a6c
 8013948:	08016a8c 	.word	0x08016a8c
 801394c:	08016a4c 	.word	0x08016a4c

08013950 <abort>:
 8013950:	b508      	push	{r3, lr}
 8013952:	2006      	movs	r0, #6
 8013954:	f000 f994 	bl	8013c80 <raise>
 8013958:	2001      	movs	r0, #1
 801395a:	f7ed fcc3 	bl	80012e4 <_exit>
	...

08013960 <_close_r>:
 8013960:	b538      	push	{r3, r4, r5, lr}
 8013962:	4d06      	ldr	r5, [pc, #24]	; (801397c <_close_r+0x1c>)
 8013964:	2300      	movs	r3, #0
 8013966:	4604      	mov	r4, r0
 8013968:	4608      	mov	r0, r1
 801396a:	602b      	str	r3, [r5, #0]
 801396c:	f7ed fcfd 	bl	800136a <_close>
 8013970:	1c43      	adds	r3, r0, #1
 8013972:	d102      	bne.n	801397a <_close_r+0x1a>
 8013974:	682b      	ldr	r3, [r5, #0]
 8013976:	b103      	cbz	r3, 801397a <_close_r+0x1a>
 8013978:	6023      	str	r3, [r4, #0]
 801397a:	bd38      	pop	{r3, r4, r5, pc}
 801397c:	20009a10 	.word	0x20009a10

08013980 <__sflush_r>:
 8013980:	898a      	ldrh	r2, [r1, #12]
 8013982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013986:	4605      	mov	r5, r0
 8013988:	0710      	lsls	r0, r2, #28
 801398a:	460c      	mov	r4, r1
 801398c:	d458      	bmi.n	8013a40 <__sflush_r+0xc0>
 801398e:	684b      	ldr	r3, [r1, #4]
 8013990:	2b00      	cmp	r3, #0
 8013992:	dc05      	bgt.n	80139a0 <__sflush_r+0x20>
 8013994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013996:	2b00      	cmp	r3, #0
 8013998:	dc02      	bgt.n	80139a0 <__sflush_r+0x20>
 801399a:	2000      	movs	r0, #0
 801399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139a2:	2e00      	cmp	r6, #0
 80139a4:	d0f9      	beq.n	801399a <__sflush_r+0x1a>
 80139a6:	2300      	movs	r3, #0
 80139a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80139ac:	682f      	ldr	r7, [r5, #0]
 80139ae:	602b      	str	r3, [r5, #0]
 80139b0:	d032      	beq.n	8013a18 <__sflush_r+0x98>
 80139b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139b4:	89a3      	ldrh	r3, [r4, #12]
 80139b6:	075a      	lsls	r2, r3, #29
 80139b8:	d505      	bpl.n	80139c6 <__sflush_r+0x46>
 80139ba:	6863      	ldr	r3, [r4, #4]
 80139bc:	1ac0      	subs	r0, r0, r3
 80139be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139c0:	b10b      	cbz	r3, 80139c6 <__sflush_r+0x46>
 80139c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139c4:	1ac0      	subs	r0, r0, r3
 80139c6:	2300      	movs	r3, #0
 80139c8:	4602      	mov	r2, r0
 80139ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139cc:	6a21      	ldr	r1, [r4, #32]
 80139ce:	4628      	mov	r0, r5
 80139d0:	47b0      	blx	r6
 80139d2:	1c43      	adds	r3, r0, #1
 80139d4:	89a3      	ldrh	r3, [r4, #12]
 80139d6:	d106      	bne.n	80139e6 <__sflush_r+0x66>
 80139d8:	6829      	ldr	r1, [r5, #0]
 80139da:	291d      	cmp	r1, #29
 80139dc:	d82c      	bhi.n	8013a38 <__sflush_r+0xb8>
 80139de:	4a2a      	ldr	r2, [pc, #168]	; (8013a88 <__sflush_r+0x108>)
 80139e0:	40ca      	lsrs	r2, r1
 80139e2:	07d6      	lsls	r6, r2, #31
 80139e4:	d528      	bpl.n	8013a38 <__sflush_r+0xb8>
 80139e6:	2200      	movs	r2, #0
 80139e8:	6062      	str	r2, [r4, #4]
 80139ea:	04d9      	lsls	r1, r3, #19
 80139ec:	6922      	ldr	r2, [r4, #16]
 80139ee:	6022      	str	r2, [r4, #0]
 80139f0:	d504      	bpl.n	80139fc <__sflush_r+0x7c>
 80139f2:	1c42      	adds	r2, r0, #1
 80139f4:	d101      	bne.n	80139fa <__sflush_r+0x7a>
 80139f6:	682b      	ldr	r3, [r5, #0]
 80139f8:	b903      	cbnz	r3, 80139fc <__sflush_r+0x7c>
 80139fa:	6560      	str	r0, [r4, #84]	; 0x54
 80139fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139fe:	602f      	str	r7, [r5, #0]
 8013a00:	2900      	cmp	r1, #0
 8013a02:	d0ca      	beq.n	801399a <__sflush_r+0x1a>
 8013a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a08:	4299      	cmp	r1, r3
 8013a0a:	d002      	beq.n	8013a12 <__sflush_r+0x92>
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	f7ff faab 	bl	8012f68 <_free_r>
 8013a12:	2000      	movs	r0, #0
 8013a14:	6360      	str	r0, [r4, #52]	; 0x34
 8013a16:	e7c1      	b.n	801399c <__sflush_r+0x1c>
 8013a18:	6a21      	ldr	r1, [r4, #32]
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	47b0      	blx	r6
 8013a20:	1c41      	adds	r1, r0, #1
 8013a22:	d1c7      	bne.n	80139b4 <__sflush_r+0x34>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d0c4      	beq.n	80139b4 <__sflush_r+0x34>
 8013a2a:	2b1d      	cmp	r3, #29
 8013a2c:	d001      	beq.n	8013a32 <__sflush_r+0xb2>
 8013a2e:	2b16      	cmp	r3, #22
 8013a30:	d101      	bne.n	8013a36 <__sflush_r+0xb6>
 8013a32:	602f      	str	r7, [r5, #0]
 8013a34:	e7b1      	b.n	801399a <__sflush_r+0x1a>
 8013a36:	89a3      	ldrh	r3, [r4, #12]
 8013a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a3c:	81a3      	strh	r3, [r4, #12]
 8013a3e:	e7ad      	b.n	801399c <__sflush_r+0x1c>
 8013a40:	690f      	ldr	r7, [r1, #16]
 8013a42:	2f00      	cmp	r7, #0
 8013a44:	d0a9      	beq.n	801399a <__sflush_r+0x1a>
 8013a46:	0793      	lsls	r3, r2, #30
 8013a48:	680e      	ldr	r6, [r1, #0]
 8013a4a:	bf08      	it	eq
 8013a4c:	694b      	ldreq	r3, [r1, #20]
 8013a4e:	600f      	str	r7, [r1, #0]
 8013a50:	bf18      	it	ne
 8013a52:	2300      	movne	r3, #0
 8013a54:	eba6 0807 	sub.w	r8, r6, r7
 8013a58:	608b      	str	r3, [r1, #8]
 8013a5a:	f1b8 0f00 	cmp.w	r8, #0
 8013a5e:	dd9c      	ble.n	801399a <__sflush_r+0x1a>
 8013a60:	6a21      	ldr	r1, [r4, #32]
 8013a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a64:	4643      	mov	r3, r8
 8013a66:	463a      	mov	r2, r7
 8013a68:	4628      	mov	r0, r5
 8013a6a:	47b0      	blx	r6
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	dc06      	bgt.n	8013a7e <__sflush_r+0xfe>
 8013a70:	89a3      	ldrh	r3, [r4, #12]
 8013a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a76:	81a3      	strh	r3, [r4, #12]
 8013a78:	f04f 30ff 	mov.w	r0, #4294967295
 8013a7c:	e78e      	b.n	801399c <__sflush_r+0x1c>
 8013a7e:	4407      	add	r7, r0
 8013a80:	eba8 0800 	sub.w	r8, r8, r0
 8013a84:	e7e9      	b.n	8013a5a <__sflush_r+0xda>
 8013a86:	bf00      	nop
 8013a88:	20400001 	.word	0x20400001

08013a8c <_fflush_r>:
 8013a8c:	b538      	push	{r3, r4, r5, lr}
 8013a8e:	690b      	ldr	r3, [r1, #16]
 8013a90:	4605      	mov	r5, r0
 8013a92:	460c      	mov	r4, r1
 8013a94:	b913      	cbnz	r3, 8013a9c <_fflush_r+0x10>
 8013a96:	2500      	movs	r5, #0
 8013a98:	4628      	mov	r0, r5
 8013a9a:	bd38      	pop	{r3, r4, r5, pc}
 8013a9c:	b118      	cbz	r0, 8013aa6 <_fflush_r+0x1a>
 8013a9e:	6983      	ldr	r3, [r0, #24]
 8013aa0:	b90b      	cbnz	r3, 8013aa6 <_fflush_r+0x1a>
 8013aa2:	f7ff f9a7 	bl	8012df4 <__sinit>
 8013aa6:	4b14      	ldr	r3, [pc, #80]	; (8013af8 <_fflush_r+0x6c>)
 8013aa8:	429c      	cmp	r4, r3
 8013aaa:	d11b      	bne.n	8013ae4 <_fflush_r+0x58>
 8013aac:	686c      	ldr	r4, [r5, #4]
 8013aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d0ef      	beq.n	8013a96 <_fflush_r+0xa>
 8013ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013ab8:	07d0      	lsls	r0, r2, #31
 8013aba:	d404      	bmi.n	8013ac6 <_fflush_r+0x3a>
 8013abc:	0599      	lsls	r1, r3, #22
 8013abe:	d402      	bmi.n	8013ac6 <_fflush_r+0x3a>
 8013ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ac2:	f7ff fa47 	bl	8012f54 <__retarget_lock_acquire_recursive>
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	4621      	mov	r1, r4
 8013aca:	f7ff ff59 	bl	8013980 <__sflush_r>
 8013ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ad0:	07da      	lsls	r2, r3, #31
 8013ad2:	4605      	mov	r5, r0
 8013ad4:	d4e0      	bmi.n	8013a98 <_fflush_r+0xc>
 8013ad6:	89a3      	ldrh	r3, [r4, #12]
 8013ad8:	059b      	lsls	r3, r3, #22
 8013ada:	d4dd      	bmi.n	8013a98 <_fflush_r+0xc>
 8013adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ade:	f7ff fa3a 	bl	8012f56 <__retarget_lock_release_recursive>
 8013ae2:	e7d9      	b.n	8013a98 <_fflush_r+0xc>
 8013ae4:	4b05      	ldr	r3, [pc, #20]	; (8013afc <_fflush_r+0x70>)
 8013ae6:	429c      	cmp	r4, r3
 8013ae8:	d101      	bne.n	8013aee <_fflush_r+0x62>
 8013aea:	68ac      	ldr	r4, [r5, #8]
 8013aec:	e7df      	b.n	8013aae <_fflush_r+0x22>
 8013aee:	4b04      	ldr	r3, [pc, #16]	; (8013b00 <_fflush_r+0x74>)
 8013af0:	429c      	cmp	r4, r3
 8013af2:	bf08      	it	eq
 8013af4:	68ec      	ldreq	r4, [r5, #12]
 8013af6:	e7da      	b.n	8013aae <_fflush_r+0x22>
 8013af8:	08016a6c 	.word	0x08016a6c
 8013afc:	08016a8c 	.word	0x08016a8c
 8013b00:	08016a4c 	.word	0x08016a4c

08013b04 <_lseek_r>:
 8013b04:	b538      	push	{r3, r4, r5, lr}
 8013b06:	4d07      	ldr	r5, [pc, #28]	; (8013b24 <_lseek_r+0x20>)
 8013b08:	4604      	mov	r4, r0
 8013b0a:	4608      	mov	r0, r1
 8013b0c:	4611      	mov	r1, r2
 8013b0e:	2200      	movs	r2, #0
 8013b10:	602a      	str	r2, [r5, #0]
 8013b12:	461a      	mov	r2, r3
 8013b14:	f7ed fc50 	bl	80013b8 <_lseek>
 8013b18:	1c43      	adds	r3, r0, #1
 8013b1a:	d102      	bne.n	8013b22 <_lseek_r+0x1e>
 8013b1c:	682b      	ldr	r3, [r5, #0]
 8013b1e:	b103      	cbz	r3, 8013b22 <_lseek_r+0x1e>
 8013b20:	6023      	str	r3, [r4, #0]
 8013b22:	bd38      	pop	{r3, r4, r5, pc}
 8013b24:	20009a10 	.word	0x20009a10

08013b28 <__swhatbuf_r>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	460e      	mov	r6, r1
 8013b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b30:	2900      	cmp	r1, #0
 8013b32:	b096      	sub	sp, #88	; 0x58
 8013b34:	4614      	mov	r4, r2
 8013b36:	461d      	mov	r5, r3
 8013b38:	da08      	bge.n	8013b4c <__swhatbuf_r+0x24>
 8013b3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	602a      	str	r2, [r5, #0]
 8013b42:	061a      	lsls	r2, r3, #24
 8013b44:	d410      	bmi.n	8013b68 <__swhatbuf_r+0x40>
 8013b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b4a:	e00e      	b.n	8013b6a <__swhatbuf_r+0x42>
 8013b4c:	466a      	mov	r2, sp
 8013b4e:	f000 f8b3 	bl	8013cb8 <_fstat_r>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	dbf1      	blt.n	8013b3a <__swhatbuf_r+0x12>
 8013b56:	9a01      	ldr	r2, [sp, #4]
 8013b58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b60:	425a      	negs	r2, r3
 8013b62:	415a      	adcs	r2, r3
 8013b64:	602a      	str	r2, [r5, #0]
 8013b66:	e7ee      	b.n	8013b46 <__swhatbuf_r+0x1e>
 8013b68:	2340      	movs	r3, #64	; 0x40
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	6023      	str	r3, [r4, #0]
 8013b6e:	b016      	add	sp, #88	; 0x58
 8013b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b74 <__smakebuf_r>:
 8013b74:	898b      	ldrh	r3, [r1, #12]
 8013b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b78:	079d      	lsls	r5, r3, #30
 8013b7a:	4606      	mov	r6, r0
 8013b7c:	460c      	mov	r4, r1
 8013b7e:	d507      	bpl.n	8013b90 <__smakebuf_r+0x1c>
 8013b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b84:	6023      	str	r3, [r4, #0]
 8013b86:	6123      	str	r3, [r4, #16]
 8013b88:	2301      	movs	r3, #1
 8013b8a:	6163      	str	r3, [r4, #20]
 8013b8c:	b002      	add	sp, #8
 8013b8e:	bd70      	pop	{r4, r5, r6, pc}
 8013b90:	ab01      	add	r3, sp, #4
 8013b92:	466a      	mov	r2, sp
 8013b94:	f7ff ffc8 	bl	8013b28 <__swhatbuf_r>
 8013b98:	9900      	ldr	r1, [sp, #0]
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	f7ff fa4f 	bl	8013040 <_malloc_r>
 8013ba2:	b948      	cbnz	r0, 8013bb8 <__smakebuf_r+0x44>
 8013ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ba8:	059a      	lsls	r2, r3, #22
 8013baa:	d4ef      	bmi.n	8013b8c <__smakebuf_r+0x18>
 8013bac:	f023 0303 	bic.w	r3, r3, #3
 8013bb0:	f043 0302 	orr.w	r3, r3, #2
 8013bb4:	81a3      	strh	r3, [r4, #12]
 8013bb6:	e7e3      	b.n	8013b80 <__smakebuf_r+0xc>
 8013bb8:	4b0d      	ldr	r3, [pc, #52]	; (8013bf0 <__smakebuf_r+0x7c>)
 8013bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8013bbc:	89a3      	ldrh	r3, [r4, #12]
 8013bbe:	6020      	str	r0, [r4, #0]
 8013bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bc4:	81a3      	strh	r3, [r4, #12]
 8013bc6:	9b00      	ldr	r3, [sp, #0]
 8013bc8:	6163      	str	r3, [r4, #20]
 8013bca:	9b01      	ldr	r3, [sp, #4]
 8013bcc:	6120      	str	r0, [r4, #16]
 8013bce:	b15b      	cbz	r3, 8013be8 <__smakebuf_r+0x74>
 8013bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bd4:	4630      	mov	r0, r6
 8013bd6:	f000 f881 	bl	8013cdc <_isatty_r>
 8013bda:	b128      	cbz	r0, 8013be8 <__smakebuf_r+0x74>
 8013bdc:	89a3      	ldrh	r3, [r4, #12]
 8013bde:	f023 0303 	bic.w	r3, r3, #3
 8013be2:	f043 0301 	orr.w	r3, r3, #1
 8013be6:	81a3      	strh	r3, [r4, #12]
 8013be8:	89a0      	ldrh	r0, [r4, #12]
 8013bea:	4305      	orrs	r5, r0
 8013bec:	81a5      	strh	r5, [r4, #12]
 8013bee:	e7cd      	b.n	8013b8c <__smakebuf_r+0x18>
 8013bf0:	08012d8d 	.word	0x08012d8d

08013bf4 <__malloc_lock>:
 8013bf4:	4801      	ldr	r0, [pc, #4]	; (8013bfc <__malloc_lock+0x8>)
 8013bf6:	f7ff b9ad 	b.w	8012f54 <__retarget_lock_acquire_recursive>
 8013bfa:	bf00      	nop
 8013bfc:	20009a14 	.word	0x20009a14

08013c00 <__malloc_unlock>:
 8013c00:	4801      	ldr	r0, [pc, #4]	; (8013c08 <__malloc_unlock+0x8>)
 8013c02:	f7ff b9a8 	b.w	8012f56 <__retarget_lock_release_recursive>
 8013c06:	bf00      	nop
 8013c08:	20009a14 	.word	0x20009a14

08013c0c <_read_r>:
 8013c0c:	b538      	push	{r3, r4, r5, lr}
 8013c0e:	4d07      	ldr	r5, [pc, #28]	; (8013c2c <_read_r+0x20>)
 8013c10:	4604      	mov	r4, r0
 8013c12:	4608      	mov	r0, r1
 8013c14:	4611      	mov	r1, r2
 8013c16:	2200      	movs	r2, #0
 8013c18:	602a      	str	r2, [r5, #0]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	f7ed fb6c 	bl	80012f8 <_read>
 8013c20:	1c43      	adds	r3, r0, #1
 8013c22:	d102      	bne.n	8013c2a <_read_r+0x1e>
 8013c24:	682b      	ldr	r3, [r5, #0]
 8013c26:	b103      	cbz	r3, 8013c2a <_read_r+0x1e>
 8013c28:	6023      	str	r3, [r4, #0]
 8013c2a:	bd38      	pop	{r3, r4, r5, pc}
 8013c2c:	20009a10 	.word	0x20009a10

08013c30 <_raise_r>:
 8013c30:	291f      	cmp	r1, #31
 8013c32:	b538      	push	{r3, r4, r5, lr}
 8013c34:	4604      	mov	r4, r0
 8013c36:	460d      	mov	r5, r1
 8013c38:	d904      	bls.n	8013c44 <_raise_r+0x14>
 8013c3a:	2316      	movs	r3, #22
 8013c3c:	6003      	str	r3, [r0, #0]
 8013c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c42:	bd38      	pop	{r3, r4, r5, pc}
 8013c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c46:	b112      	cbz	r2, 8013c4e <_raise_r+0x1e>
 8013c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c4c:	b94b      	cbnz	r3, 8013c62 <_raise_r+0x32>
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f000 f830 	bl	8013cb4 <_getpid_r>
 8013c54:	462a      	mov	r2, r5
 8013c56:	4601      	mov	r1, r0
 8013c58:	4620      	mov	r0, r4
 8013c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c5e:	f000 b817 	b.w	8013c90 <_kill_r>
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d00a      	beq.n	8013c7c <_raise_r+0x4c>
 8013c66:	1c59      	adds	r1, r3, #1
 8013c68:	d103      	bne.n	8013c72 <_raise_r+0x42>
 8013c6a:	2316      	movs	r3, #22
 8013c6c:	6003      	str	r3, [r0, #0]
 8013c6e:	2001      	movs	r0, #1
 8013c70:	e7e7      	b.n	8013c42 <_raise_r+0x12>
 8013c72:	2400      	movs	r4, #0
 8013c74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c78:	4628      	mov	r0, r5
 8013c7a:	4798      	blx	r3
 8013c7c:	2000      	movs	r0, #0
 8013c7e:	e7e0      	b.n	8013c42 <_raise_r+0x12>

08013c80 <raise>:
 8013c80:	4b02      	ldr	r3, [pc, #8]	; (8013c8c <raise+0xc>)
 8013c82:	4601      	mov	r1, r0
 8013c84:	6818      	ldr	r0, [r3, #0]
 8013c86:	f7ff bfd3 	b.w	8013c30 <_raise_r>
 8013c8a:	bf00      	nop
 8013c8c:	20000050 	.word	0x20000050

08013c90 <_kill_r>:
 8013c90:	b538      	push	{r3, r4, r5, lr}
 8013c92:	4d07      	ldr	r5, [pc, #28]	; (8013cb0 <_kill_r+0x20>)
 8013c94:	2300      	movs	r3, #0
 8013c96:	4604      	mov	r4, r0
 8013c98:	4608      	mov	r0, r1
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	602b      	str	r3, [r5, #0]
 8013c9e:	f7ed fb0f 	bl	80012c0 <_kill>
 8013ca2:	1c43      	adds	r3, r0, #1
 8013ca4:	d102      	bne.n	8013cac <_kill_r+0x1c>
 8013ca6:	682b      	ldr	r3, [r5, #0]
 8013ca8:	b103      	cbz	r3, 8013cac <_kill_r+0x1c>
 8013caa:	6023      	str	r3, [r4, #0]
 8013cac:	bd38      	pop	{r3, r4, r5, pc}
 8013cae:	bf00      	nop
 8013cb0:	20009a10 	.word	0x20009a10

08013cb4 <_getpid_r>:
 8013cb4:	f7ed bafc 	b.w	80012b0 <_getpid>

08013cb8 <_fstat_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4d07      	ldr	r5, [pc, #28]	; (8013cd8 <_fstat_r+0x20>)
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	602b      	str	r3, [r5, #0]
 8013cc6:	f7ed fb5c 	bl	8001382 <_fstat>
 8013cca:	1c43      	adds	r3, r0, #1
 8013ccc:	d102      	bne.n	8013cd4 <_fstat_r+0x1c>
 8013cce:	682b      	ldr	r3, [r5, #0]
 8013cd0:	b103      	cbz	r3, 8013cd4 <_fstat_r+0x1c>
 8013cd2:	6023      	str	r3, [r4, #0]
 8013cd4:	bd38      	pop	{r3, r4, r5, pc}
 8013cd6:	bf00      	nop
 8013cd8:	20009a10 	.word	0x20009a10

08013cdc <_isatty_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d06      	ldr	r5, [pc, #24]	; (8013cf8 <_isatty_r+0x1c>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	602b      	str	r3, [r5, #0]
 8013ce8:	f7ed fb5b 	bl	80013a2 <_isatty>
 8013cec:	1c43      	adds	r3, r0, #1
 8013cee:	d102      	bne.n	8013cf6 <_isatty_r+0x1a>
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	b103      	cbz	r3, 8013cf6 <_isatty_r+0x1a>
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	bd38      	pop	{r3, r4, r5, pc}
 8013cf8:	20009a10 	.word	0x20009a10

08013cfc <_init>:
 8013cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cfe:	bf00      	nop
 8013d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d02:	bc08      	pop	{r3}
 8013d04:	469e      	mov	lr, r3
 8013d06:	4770      	bx	lr

08013d08 <_fini>:
 8013d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0a:	bf00      	nop
 8013d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d0e:	bc08      	pop	{r3}
 8013d10:	469e      	mov	lr, r3
 8013d12:	4770      	bx	lr
