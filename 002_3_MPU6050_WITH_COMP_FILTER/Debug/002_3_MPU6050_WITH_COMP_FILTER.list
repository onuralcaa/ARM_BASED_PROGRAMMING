
002_3_MPU6050_WITH_COMP_FILTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080053d0  080053d0  000153d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c8  080055c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d0  080055d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e56  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011de  00000000  00000000  00026ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  000280d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000628  00000000  00000000  00028780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201a4  00000000  00000000  00028da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000089f0  00000000  00000000  00048f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2ec5  00000000  00000000  0005193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114801  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000204c  00000000  00000000  00114854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053b4 	.word	0x080053b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080053b4 	.word	0x080053b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fde4 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 fc1c 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fcb2 	bl	8001810 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eac:	f000 fc82 	bl	80017b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  data = 0x00;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <main+0x80>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <main+0x80>)
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	226b      	movs	r2, #107	; 0x6b
 8000ec8:	21d0      	movs	r1, #208	; 0xd0
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <main+0x84>)
 8000ecc:	f001 fd82 	bl	80029d4 <HAL_I2C_Mem_Write>

  //GYRO_CONFIG => +-500 DERECE/SANIYE -----> 08
  data = 0x08;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <main+0x80>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <main+0x80>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	221b      	movs	r2, #27
 8000ee8:	21d0      	movs	r1, #208	; 0xd0
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <main+0x84>)
 8000eec:	f001 fd72 	bl	80029d4 <HAL_I2C_Mem_Write>


  //ACC_CONFIG => +-8G ------> 10
  data = 0x10;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <main+0x80>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <main+0x80>)
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	221c      	movs	r2, #28
 8000f08:	21d0      	movs	r1, #208	; 0xd0
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <main+0x84>)
 8000f0c:	f001 fd62 	bl	80029d4 <HAL_I2C_Mem_Write>

  for(i=0 ; i<2000 ; i++)
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <main+0x88>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e08c      	b.n	8001032 <main+0x19a>
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	2000008c 	.word	0x2000008c
 8000f20:	20000138 	.word	0x20000138
  {
	  pTime2 = time2;
 8000f24:	4bb4      	ldr	r3, [pc, #720]	; (80011f8 <main+0x360>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4ab4      	ldr	r2, [pc, #720]	; (80011fc <main+0x364>)
 8000f2a:	6013      	str	r3, [r2, #0]
	  time2 = HAL_GetTick();
 8000f2c:	f000 fe04 	bl	8001b38 <HAL_GetTick>
 8000f30:	ee07 0a90 	vmov	s15, r0
 8000f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f38:	4baf      	ldr	r3, [pc, #700]	; (80011f8 <main+0x360>)
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
	  elapsedtime2 = (time2 - pTime2) * 1000;
 8000f3e:	4bae      	ldr	r3, [pc, #696]	; (80011f8 <main+0x360>)
 8000f40:	ed93 7a00 	vldr	s14, [r3]
 8000f44:	4bad      	ldr	r3, [pc, #692]	; (80011fc <main+0x364>)
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8001200 <main+0x368>
 8000f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f56:	4bab      	ldr	r3, [pc, #684]	; (8001204 <main+0x36c>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]

	  Gyro_buffer[0] = 0x43;
 8000f5c:	4baa      	ldr	r3, [pc, #680]	; (8001208 <main+0x370>)
 8000f5e:	2243      	movs	r2, #67	; 0x43
 8000f60:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, Gyro_buffer, 1, HAL_MAX_DELAY);
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4aa7      	ldr	r2, [pc, #668]	; (8001208 <main+0x370>)
 8000f6c:	21d0      	movs	r1, #208	; 0xd0
 8000f6e:	48a7      	ldr	r0, [pc, #668]	; (800120c <main+0x374>)
 8000f70:	f001 fa0c 	bl	800238c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, Gyro_buffer, 6, HAL_MAX_DELAY);
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	4aa2      	ldr	r2, [pc, #648]	; (8001208 <main+0x370>)
 8000f7e:	21d0      	movs	r1, #208	; 0xd0
 8000f80:	48a2      	ldr	r0, [pc, #648]	; (800120c <main+0x374>)
 8000f82:	f001 fb01 	bl	8002588 <HAL_I2C_Master_Receive>

	  gyro_raw[0] = (Gyro_buffer[0] << 8 | Gyro_buffer[1]); //X ekseni
 8000f86:	4ba0      	ldr	r3, [pc, #640]	; (8001208 <main+0x370>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	4b9e      	ldr	r3, [pc, #632]	; (8001208 <main+0x370>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	4b9d      	ldr	r3, [pc, #628]	; (8001210 <main+0x378>)
 8000f9a:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (Gyro_buffer[2] << 8 | Gyro_buffer[3]); //Y ekseni
 8000f9c:	4b9a      	ldr	r3, [pc, #616]	; (8001208 <main+0x370>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b98      	ldr	r3, [pc, #608]	; (8001208 <main+0x370>)
 8000fa6:	78db      	ldrb	r3, [r3, #3]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b98      	ldr	r3, [pc, #608]	; (8001210 <main+0x378>)
 8000fb0:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (Gyro_buffer[4] << 8 | Gyro_buffer[5]); //Z ekseni
 8000fb2:	4b95      	ldr	r3, [pc, #596]	; (8001208 <main+0x370>)
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b93      	ldr	r3, [pc, #588]	; (8001208 <main+0x370>)
 8000fbc:	795b      	ldrb	r3, [r3, #5]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b92      	ldr	r3, [pc, #584]	; (8001210 <main+0x378>)
 8000fc6:	809a      	strh	r2, [r3, #4]

	  gyro_cal[0] += gyro_raw[0];
 8000fc8:	4b92      	ldr	r3, [pc, #584]	; (8001214 <main+0x37c>)
 8000fca:	ed93 7a00 	vldr	s14, [r3]
 8000fce:	4b90      	ldr	r3, [pc, #576]	; (8001210 <main+0x378>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	4b8c      	ldr	r3, [pc, #560]	; (8001214 <main+0x37c>)
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
	  gyro_cal[1] += gyro_raw[1];
 8000fe6:	4b8b      	ldr	r3, [pc, #556]	; (8001214 <main+0x37c>)
 8000fe8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fec:	4b88      	ldr	r3, [pc, #544]	; (8001210 <main+0x378>)
 8000fee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffe:	4b85      	ldr	r3, [pc, #532]	; (8001214 <main+0x37c>)
 8001000:	edc3 7a01 	vstr	s15, [r3, #4]
	  gyro_cal[2] += gyro_raw[2];
 8001004:	4b83      	ldr	r3, [pc, #524]	; (8001214 <main+0x37c>)
 8001006:	ed93 7a02 	vldr	s14, [r3, #8]
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <main+0x378>)
 800100c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	4b7d      	ldr	r3, [pc, #500]	; (8001214 <main+0x37c>)
 800101e:	edc3 7a02 	vstr	s15, [r3, #8]

	  HAL_Delay(3); // 4 ms
 8001022:	2003      	movs	r0, #3
 8001024:	f000 fd94 	bl	8001b50 <HAL_Delay>
  for(i=0 ; i<2000 ; i++)
 8001028:	4b7b      	ldr	r3, [pc, #492]	; (8001218 <main+0x380>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a7a      	ldr	r2, [pc, #488]	; (8001218 <main+0x380>)
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b79      	ldr	r3, [pc, #484]	; (8001218 <main+0x380>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800103a:	f6ff af73 	blt.w	8000f24 <main+0x8c>
  }

  gyro_cal[0] /= 2000;
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <main+0x37c>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	eddf 6a75 	vldr	s13, [pc, #468]	; 800121c <main+0x384>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	4b71      	ldr	r3, [pc, #452]	; (8001214 <main+0x37c>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 8001052:	4b70      	ldr	r3, [pc, #448]	; (8001214 <main+0x37c>)
 8001054:	ed93 7a01 	vldr	s14, [r3, #4]
 8001058:	eddf 6a70 	vldr	s13, [pc, #448]	; 800121c <main+0x384>
 800105c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001060:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <main+0x37c>)
 8001062:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 8001066:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <main+0x37c>)
 8001068:	ed93 7a02 	vldr	s14, [r3, #8]
 800106c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800121c <main+0x384>
 8001070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001074:	4b67      	ldr	r3, [pc, #412]	; (8001214 <main+0x37c>)
 8001076:	edc3 7a02 	vstr	s15, [r3, #8]

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800107a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107e:	4868      	ldr	r0, [pc, #416]	; (8001220 <main+0x388>)
 8001080:	f001 f825 	bl	80020ce <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f000 fd62 	bl	8001b50 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pTime1 = time1;
 800108c:	4b65      	ldr	r3, [pc, #404]	; (8001224 <main+0x38c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a65      	ldr	r2, [pc, #404]	; (8001228 <main+0x390>)
 8001092:	6013      	str	r3, [r2, #0]
	  time1 = HAL_GetTick();
 8001094:	f000 fd50 	bl	8001b38 <HAL_GetTick>
 8001098:	ee07 0a90 	vmov	s15, r0
 800109c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <main+0x38c>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
	  elapsedtime1 = (time1 - pTime1)*1000;
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <main+0x38c>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <main+0x390>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001200 <main+0x368>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <main+0x394>)
 80010c0:	edc3 7a00 	vstr	s15, [r3]

	  Acc_buffer[0] = 0x3B;
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <main+0x398>)
 80010c6:	223b      	movs	r2, #59	; 0x3b
 80010c8:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, Acc_buffer, 1, HAL_MAX_DELAY);
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	4a57      	ldr	r2, [pc, #348]	; (8001230 <main+0x398>)
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	484d      	ldr	r0, [pc, #308]	; (800120c <main+0x374>)
 80010d8:	f001 f958 	bl	800238c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, Acc_buffer, 6, HAL_MAX_DELAY);
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2306      	movs	r3, #6
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <main+0x398>)
 80010e6:	21d0      	movs	r1, #208	; 0xd0
 80010e8:	4848      	ldr	r0, [pc, #288]	; (800120c <main+0x374>)
 80010ea:	f001 fa4d 	bl	8002588 <HAL_I2C_Master_Receive>

	  //Acc raw values
	  acc_raw[0] = (Acc_buffer[0] << 8 | Acc_buffer[1]);
 80010ee:	4b50      	ldr	r3, [pc, #320]	; (8001230 <main+0x398>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <main+0x398>)
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <main+0x39c>)
 8001102:	801a      	strh	r2, [r3, #0]
	  acc_raw[1] = (Acc_buffer[2] << 8 | Acc_buffer[3]);
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <main+0x398>)
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b48      	ldr	r3, [pc, #288]	; (8001230 <main+0x398>)
 800110e:	78db      	ldrb	r3, [r3, #3]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <main+0x39c>)
 8001118:	805a      	strh	r2, [r3, #2]
	  acc_raw[2] = (Acc_buffer[4] << 8 | Acc_buffer[5]);
 800111a:	4b45      	ldr	r3, [pc, #276]	; (8001230 <main+0x398>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <main+0x398>)
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b41      	ldr	r3, [pc, #260]	; (8001234 <main+0x39c>)
 800112e:	809a      	strh	r2, [r3, #4]

	  Temp_buffer[0] = 0x41;
 8001130:	4b41      	ldr	r3, [pc, #260]	; (8001238 <main+0x3a0>)
 8001132:	2241      	movs	r2, #65	; 0x41
 8001134:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, Temp_buffer, 1, HAL_MAX_DELAY);
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	4a3e      	ldr	r2, [pc, #248]	; (8001238 <main+0x3a0>)
 8001140:	21d0      	movs	r1, #208	; 0xd0
 8001142:	4832      	ldr	r0, [pc, #200]	; (800120c <main+0x374>)
 8001144:	f001 f922 	bl	800238c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, Temp_buffer, 2, HAL_MAX_DELAY);
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2302      	movs	r3, #2
 8001150:	4a39      	ldr	r2, [pc, #228]	; (8001238 <main+0x3a0>)
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	482d      	ldr	r0, [pc, #180]	; (800120c <main+0x374>)
 8001156:	f001 fa17 	bl	8002588 <HAL_I2C_Master_Receive>

	  raw_temp = (Temp_buffer[0] << 8 | Temp_buffer[1]);
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <main+0x3a0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <main+0x3a0>)
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <main+0x3a4>)
 800116e:	801a      	strh	r2, [r3, #0]
	  temp = (temp / 340.0) + 36.53;
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <main+0x3a8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f98b 	bl	8000490 <__aeabi_f2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <main+0x3ac>)
 8001180:	f7ff fb08 	bl	8000794 <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	a318      	add	r3, pc, #96	; (adr r3, 80011f0 <main+0x358>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f81f 	bl	80001d4 <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fca7 	bl	8000af0 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <main+0x3a8>)
 80011a6:	6013      	str	r3, [r2, #0]

	  Gyro_buffer[0] = 0x43;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <main+0x370>)
 80011aa:	2243      	movs	r2, #67	; 0x43
 80011ac:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, Gyro_buffer, 1, HAL_MAX_DELAY);
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <main+0x370>)
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <main+0x374>)
 80011bc:	f001 f8e6 	bl	800238c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, Gyro_buffer, 6, HAL_MAX_DELAY);
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2306      	movs	r3, #6
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <main+0x370>)
 80011ca:	21d0      	movs	r1, #208	; 0xd0
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <main+0x374>)
 80011ce:	f001 f9db 	bl	8002588 <HAL_I2C_Master_Receive>

	  //Gyro raw values
	  gyro_raw[0] = (Gyro_buffer[0] << 8 | Gyro_buffer[1]);
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <main+0x370>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <main+0x370>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <main+0x378>)
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	e02e      	b.n	8001248 <main+0x3b0>
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	0a3d70a4 	.word	0x0a3d70a4
 80011f4:	404243d7 	.word	0x404243d7
 80011f8:	20000150 	.word	0x20000150
 80011fc:	2000014c 	.word	0x2000014c
 8001200:	447a0000 	.word	0x447a0000
 8001204:	20000154 	.word	0x20000154
 8001208:	200000f0 	.word	0x200000f0
 800120c:	2000008c 	.word	0x2000008c
 8001210:	200000f8 	.word	0x200000f8
 8001214:	20000108 	.word	0x20000108
 8001218:	20000138 	.word	0x20000138
 800121c:	44fa0000 	.word	0x44fa0000
 8001220:	40020c00 	.word	0x40020c00
 8001224:	20000144 	.word	0x20000144
 8001228:	20000140 	.word	0x20000140
 800122c:	20000148 	.word	0x20000148
 8001230:	200000e8 	.word	0x200000e8
 8001234:	20000100 	.word	0x20000100
 8001238:	200000e4 	.word	0x200000e4
 800123c:	20000130 	.word	0x20000130
 8001240:	20000134 	.word	0x20000134
 8001244:	40754000 	.word	0x40754000
	  gyro_raw[1] = (Gyro_buffer[2] << 8 | Gyro_buffer[3]);
 8001248:	4bcd      	ldr	r3, [pc, #820]	; (8001580 <main+0x6e8>)
 800124a:	789b      	ldrb	r3, [r3, #2]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	4bcb      	ldr	r3, [pc, #812]	; (8001580 <main+0x6e8>)
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	4bca      	ldr	r3, [pc, #808]	; (8001584 <main+0x6ec>)
 800125c:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (Gyro_buffer[4] << 8 | Gyro_buffer[5]);
 800125e:	4bc8      	ldr	r3, [pc, #800]	; (8001580 <main+0x6e8>)
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	4bc6      	ldr	r3, [pc, #792]	; (8001580 <main+0x6e8>)
 8001268:	795b      	ldrb	r3, [r3, #5]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	4bc4      	ldr	r3, [pc, #784]	; (8001584 <main+0x6ec>)
 8001272:	809a      	strh	r2, [r3, #4]

	  gyro_raw[0] -= gyro_cal[0];
 8001274:	4bc3      	ldr	r3, [pc, #780]	; (8001584 <main+0x6ec>)
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001282:	4bc1      	ldr	r3, [pc, #772]	; (8001588 <main+0x6f0>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001290:	ee17 3a90 	vmov	r3, s15
 8001294:	b21a      	sxth	r2, r3
 8001296:	4bbb      	ldr	r3, [pc, #748]	; (8001584 <main+0x6ec>)
 8001298:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] -= gyro_cal[1];
 800129a:	4bba      	ldr	r3, [pc, #744]	; (8001584 <main+0x6ec>)
 800129c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	4bb7      	ldr	r3, [pc, #732]	; (8001588 <main+0x6f0>)
 80012aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b6:	ee17 3a90 	vmov	r3, s15
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4bb1      	ldr	r3, [pc, #708]	; (8001584 <main+0x6ec>)
 80012be:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] -= gyro_cal[2];
 80012c0:	4bb0      	ldr	r3, [pc, #704]	; (8001584 <main+0x6ec>)
 80012c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4bae      	ldr	r3, [pc, #696]	; (8001588 <main+0x6f0>)
 80012d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4ba8      	ldr	r3, [pc, #672]	; (8001584 <main+0x6ec>)
 80012e4:	809a      	strh	r2, [r3, #4]

	  angle_pitch_gyro += gyro_raw[0] * 0.0000611;
 80012e6:	4ba9      	ldr	r3, [pc, #676]	; (800158c <main+0x6f4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f8d0 	bl	8000490 <__aeabi_f2d>
 80012f0:	4604      	mov	r4, r0
 80012f2:	460d      	mov	r5, r1
 80012f4:	4ba3      	ldr	r3, [pc, #652]	; (8001584 <main+0x6ec>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f8b6 	bl	800046c <__aeabi_i2d>
 8001300:	a397      	add	r3, pc, #604	; (adr r3, 8001560 <main+0x6c8>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f91b 	bl	8000540 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7fe ff5f 	bl	80001d4 <__adddf3>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fbe7 	bl	8000af0 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a99      	ldr	r2, [pc, #612]	; (800158c <main+0x6f4>)
 8001326:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro += gyro_raw[1] * 0.0000611;
 8001328:	4b99      	ldr	r3, [pc, #612]	; (8001590 <main+0x6f8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8af 	bl	8000490 <__aeabi_f2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	4b93      	ldr	r3, [pc, #588]	; (8001584 <main+0x6ec>)
 8001338:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f895 	bl	800046c <__aeabi_i2d>
 8001342:	a387      	add	r3, pc, #540	; (adr r3, 8001560 <main+0x6c8>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f8fa 	bl	8000540 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe ff3e 	bl	80001d4 <__adddf3>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fbc6 	bl	8000af0 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a8a      	ldr	r2, [pc, #552]	; (8001590 <main+0x6f8>)
 8001368:	6013      	str	r3, [r2, #0]

	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <main+0x6f4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f88e 	bl	8000490 <__aeabi_f2d>
 8001374:	4604      	mov	r4, r0
 8001376:	460d      	mov	r5, r1
 8001378:	4b85      	ldr	r3, [pc, #532]	; (8001590 <main+0x6f8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f887 	bl	8000490 <__aeabi_f2d>
 8001382:	4680      	mov	r8, r0
 8001384:	4689      	mov	r9, r1
 8001386:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <main+0x6ec>)
 8001388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f86d 	bl	800046c <__aeabi_i2d>
 8001392:	a375      	add	r3, pc, #468	; (adr r3, 8001568 <main+0x6d0>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f8d2 	bl	8000540 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b17 	vmov	d7, r2, r3
 80013a4:	eeb0 0a47 	vmov.f32	s0, s14
 80013a8:	eef0 0a67 	vmov.f32	s1, s15
 80013ac:	f002 fc88 	bl	8003cc0 <sin>
 80013b0:	ec53 2b10 	vmov	r2, r3, d0
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	f7ff f8c2 	bl	8000540 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7fe ff06 	bl	80001d4 <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fb8e 	bl	8000af0 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a6d      	ldr	r2, [pc, #436]	; (800158c <main+0x6f4>)
 80013d8:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 80013da:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <main+0x6f8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f856 	bl	8000490 <__aeabi_f2d>
 80013e4:	4604      	mov	r4, r0
 80013e6:	460d      	mov	r5, r1
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <main+0x6f4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f84f 	bl	8000490 <__aeabi_f2d>
 80013f2:	4680      	mov	r8, r0
 80013f4:	4689      	mov	r9, r1
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <main+0x6ec>)
 80013f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f835 	bl	800046c <__aeabi_i2d>
 8001402:	a359      	add	r3, pc, #356	; (adr r3, 8001568 <main+0x6d0>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f89a 	bl	8000540 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	ec43 2b17 	vmov	d7, r2, r3
 8001414:	eeb0 0a47 	vmov.f32	s0, s14
 8001418:	eef0 0a67 	vmov.f32	s1, s15
 800141c:	f002 fc50 	bl	8003cc0 <sin>
 8001420:	ec53 2b10 	vmov	r2, r3, d0
 8001424:	4640      	mov	r0, r8
 8001426:	4649      	mov	r1, r9
 8001428:	f7ff f88a 	bl	8000540 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f7fe fecc 	bl	80001d0 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb56 	bl	8000af0 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a52      	ldr	r2, [pc, #328]	; (8001590 <main+0x6f8>)
 8001448:	6013      	str	r3, [r2, #0]

	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0]) + (acc_raw[1]*acc_raw[1]) + (acc_raw[2]*acc_raw[2]));
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <main+0x6fc>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	461a      	mov	r2, r3
 8001452:	4b50      	ldr	r3, [pc, #320]	; (8001594 <main+0x6fc>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	fb03 f202 	mul.w	r2, r3, r2
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <main+0x6fc>)
 800145e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001462:	4619      	mov	r1, r3
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <main+0x6fc>)
 8001466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	441a      	add	r2, r3
 8001470:	4b48      	ldr	r3, [pc, #288]	; (8001594 <main+0x6fc>)
 8001472:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001476:	4619      	mov	r1, r3
 8001478:	4b46      	ldr	r3, [pc, #280]	; (8001594 <main+0x6fc>)
 800147a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe fff1 	bl	800046c <__aeabi_i2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	ec43 2b10 	vmov	d0, r2, r3
 8001492:	f002 fca1 	bl	8003dd8 <sqrt>
 8001496:	ec53 2b10 	vmov	r2, r3, d0
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff faff 	bl	8000aa0 <__aeabi_d2iz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <main+0x700>)
 80014a8:	801a      	strh	r2, [r3, #0]

	  //57.296 = 1 / (3.142 / 180) //derece/saniye hesabi
	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector) * 57.296;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <main+0x6fc>)
 80014ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <main+0x700>)
 80014ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014ca:	ee16 0a90 	vmov	r0, s13
 80014ce:	f7fe ffdf 	bl	8000490 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b10 	vmov	d0, r2, r3
 80014da:	f002 fc49 	bl	8003d70 <asin>
 80014de:	ec51 0b10 	vmov	r0, r1, d0
 80014e2:	a323      	add	r3, pc, #140	; (adr r3, 8001570 <main+0x6d8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f82a 	bl	8000540 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fafc 	bl	8000af0 <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a28      	ldr	r2, [pc, #160]	; (800159c <main+0x704>)
 80014fc:	6013      	str	r3, [r2, #0]
	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector) * -57.296;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <main+0x6fc>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <main+0x700>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800151e:	ee16 0a90 	vmov	r0, s13
 8001522:	f7fe ffb5 	bl	8000490 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	ec43 2b10 	vmov	d0, r2, r3
 800152e:	f002 fc1f 	bl	8003d70 <asin>
 8001532:	ec51 0b10 	vmov	r0, r1, d0
 8001536:	a310      	add	r3, pc, #64	; (adr r3, 8001578 <main+0x6e0>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f800 	bl	8000540 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fad2 	bl	8000af0 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <main+0x708>)
 8001550:	6013      	str	r3, [r2, #0]

	  //calibration offsets
	  angle_pitch_acc -= 0.00;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <main+0x704>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <main+0x704>)
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e023      	b.n	80015a4 <main+0x70c>
 800155c:	f3af 8000 	nop.w
 8001560:	01d41596 	.word	0x01d41596
 8001564:	3f10045a 	.word	0x3f10045a
 8001568:	652c6e62 	.word	0x652c6e62
 800156c:	3eb1e26f 	.word	0x3eb1e26f
 8001570:	53f7ced9 	.word	0x53f7ced9
 8001574:	404ca5e3 	.word	0x404ca5e3
 8001578:	53f7ced9 	.word	0x53f7ced9
 800157c:	c04ca5e3 	.word	0xc04ca5e3
 8001580:	200000f0 	.word	0x200000f0
 8001584:	200000f8 	.word	0x200000f8
 8001588:	20000108 	.word	0x20000108
 800158c:	20000118 	.word	0x20000118
 8001590:	2000011c 	.word	0x2000011c
 8001594:	20000100 	.word	0x20000100
 8001598:	20000114 	.word	0x20000114
 800159c:	20000120 	.word	0x20000120
 80015a0:	20000124 	.word	0x20000124
	  angle_roll_acc -= 0.00;
 80015a4:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <main+0x820>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <main+0x820>)
 80015aa:	6013      	str	r3, [r2, #0]


	  if(setgyro)
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <main+0x824>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d04e      	beq.n	8001652 <main+0x7ba>
	  {
		  angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <main+0x828>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff69 	bl	8000490 <__aeabi_f2d>
 80015be:	a33a      	add	r3, pc, #232	; (adr r3, 80016a8 <main+0x810>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe ffbc 	bl	8000540 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4614      	mov	r4, r2
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <main+0x82c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff5b 	bl	8000490 <__aeabi_f2d>
 80015da:	a335      	add	r3, pc, #212	; (adr r3, 80016b0 <main+0x818>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe ffae 	bl	8000540 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe fdf2 	bl	80001d4 <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa7a 	bl	8000af0 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <main+0x830>)
 8001600:	6013      	str	r3, [r2, #0]
		  angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <main+0x834>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff42 	bl	8000490 <__aeabi_f2d>
 800160c:	a326      	add	r3, pc, #152	; (adr r3, 80016a8 <main+0x810>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ff95 	bl	8000540 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4614      	mov	r4, r2
 800161c:	461d      	mov	r5, r3
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <main+0x820>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff34 	bl	8000490 <__aeabi_f2d>
 8001628:	a321      	add	r3, pc, #132	; (adr r3, 80016b0 <main+0x818>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ff87 	bl	8000540 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fdcb 	bl	80001d4 <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa53 	bl	8000af0 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <main+0x838>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e006      	b.n	8001660 <main+0x7c8>
	  }
	  else
	  {
		  angle_pitch = angle_pitch_acc;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <main+0x82c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <main+0x830>)
 8001658:	6013      	str	r3, [r2, #0]
		  setgyro = true;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <main+0x824>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
	  }

	  while((HAL_GetTick() - pTime) * 1000 < 4000);
 8001660:	bf00      	nop
 8001662:	f000 fa69 	bl	8001b38 <HAL_GetTick>
 8001666:	ee07 0a90 	vmov	s15, r0
 800166a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <main+0x83c>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001678:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80016d8 <main+0x840>
 800167c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001680:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80016dc <main+0x844>
 8001684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	d4e9      	bmi.n	8001662 <main+0x7ca>
	  pTime = HAL_GetTick();
 800168e:	f000 fa53 	bl	8001b38 <HAL_GetTick>
 8001692:	ee07 0a90 	vmov	s15, r0
 8001696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <main+0x83c>)
 800169c:	edc3 7a00 	vstr	s15, [r3]
	  pTime1 = time1;
 80016a0:	e4f4      	b.n	800108c <main+0x1f4>
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	23a29c78 	.word	0x23a29c78
 80016ac:	3feffcb9 	.word	0x3feffcb9
 80016b0:	eb1c432d 	.word	0xeb1c432d
 80016b4:	3f3a36e2 	.word	0x3f3a36e2
 80016b8:	20000124 	.word	0x20000124
 80016bc:	20000158 	.word	0x20000158
 80016c0:	20000118 	.word	0x20000118
 80016c4:	20000120 	.word	0x20000120
 80016c8:	20000128 	.word	0x20000128
 80016cc:	2000011c 	.word	0x2000011c
 80016d0:	2000012c 	.word	0x2000012c
 80016d4:	2000013c 	.word	0x2000013c
 80016d8:	447a0000 	.word	0x447a0000
 80016dc:	457a0000 	.word	0x457a0000

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fadc 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a27      	ldr	r2, [pc, #156]	; (80017ac <SystemClock_Config+0xcc>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemClock_Config+0xcc>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <SystemClock_Config+0xd0>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemClock_Config+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001754:	23a8      	movs	r3, #168	; 0xa8
 8001756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800175c:	2304      	movs	r3, #4
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fdf3 	bl	8003350 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001770:	f000 f8a0 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001778:	2302      	movs	r3, #2
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2105      	movs	r1, #5
 8001792:	4618      	mov	r0, r3
 8001794:	f002 f854 	bl	8003840 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800179e:	f000 f889 	bl	80018b4 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3750      	adds	r7, #80	; 0x50
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_I2C1_Init+0x50>)
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <MX_I2C1_Init+0x54>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_I2C1_Init+0x50>)
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_I2C1_Init+0x58>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_I2C1_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_I2C1_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_I2C1_Init+0x50>)
 80017d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MX_I2C1_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_I2C1_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_I2C1_Init+0x50>)
 80017f2:	f000 fc87 	bl	8002104 <HAL_I2C_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017fc:	f000 f85a 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000008c 	.word	0x2000008c
 8001808:	40005400 	.word	0x40005400
 800180c:	00061a80 	.word	0x00061a80

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_GPIO_Init+0x9c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a18      	ldr	r2, [pc, #96]	; (80018ac <MX_GPIO_Init+0x9c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_GPIO_Init+0x9c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001880:	480b      	ldr	r0, [pc, #44]	; (80018b0 <MX_GPIO_Init+0xa0>)
 8001882:	f000 fc0b 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_GPIO_Init+0xa0>)
 80018a0:	f000 fa60 	bl	8001d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020c00 	.word	0x40020c00

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_I2C_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12c      	bne.n	800198c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_I2C_MspInit+0x88>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001960:	2304      	movs	r3, #4
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <HAL_I2C_MspInit+0x8c>)
 800196c:	f000 f9fa 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_I2C_MspInit+0x88>)
 800197a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40005400 	.word	0x40005400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f890 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd7 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f002 f90d 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fa25 	bl	8000e98 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a5c:	080055d8 	.word	0x080055d8
  ldr r2, =_sbss
 8001a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a64:	20000160 	.word	0x20000160

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f931 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff ff0e 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f93b 	bl	8001d4a <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 f911 	bl	8001d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	2000015c 	.word	0x2000015c

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	2000015c 	.word	0x2000015c

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc8:	d301      	bcc.n	8001cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <SysTick_Config+0x40>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f7ff ff8e 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010

08001cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff47 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d24:	f7ff ff5c 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7ff ff8e 	bl	8001c50 <NVIC_EncodePriority>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5d 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffb0 	bl	8001cb8 <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e16b      	b.n	8002058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 815a 	bne.w	8002052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80b4 	beq.w	8002052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b60      	ldr	r3, [pc, #384]	; (8002070 <HAL_GPIO_Init+0x30c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a5f      	ldr	r2, [pc, #380]	; (8002070 <HAL_GPIO_Init+0x30c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_GPIO_Init+0x30c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a5b      	ldr	r2, [pc, #364]	; (8002074 <HAL_GPIO_Init+0x310>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	; (8002078 <HAL_GPIO_Init+0x314>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a51      	ldr	r2, [pc, #324]	; (800207c <HAL_GPIO_Init+0x318>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x222>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a50      	ldr	r2, [pc, #320]	; (8002080 <HAL_GPIO_Init+0x31c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x21e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	; (8002084 <HAL_GPIO_Init+0x320>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x21a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4e      	ldr	r2, [pc, #312]	; (8002088 <HAL_GPIO_Init+0x324>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x216>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	; (800208c <HAL_GPIO_Init+0x328>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x212>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	; (8002090 <HAL_GPIO_Init+0x32c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x20e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4b      	ldr	r2, [pc, #300]	; (8002094 <HAL_GPIO_Init+0x330>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x20a>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00e      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e00c      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00a      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9c:	4935      	ldr	r1, [pc, #212]	; (8002074 <HAL_GPIO_Init+0x310>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_GPIO_Init+0x334>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a32      	ldr	r2, [pc, #200]	; (8002098 <HAL_GPIO_Init+0x334>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_GPIO_Init+0x334>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a27      	ldr	r2, [pc, #156]	; (8002098 <HAL_GPIO_Init+0x334>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_GPIO_Init+0x334>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_GPIO_Init+0x334>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_GPIO_Init+0x334>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_GPIO_Init+0x334>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f ae90 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40021c00 	.word	0x40021c00
 8002098:	40013c00 	.word	0x40013c00

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e12b      	b.n	800236e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fbf0 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002168:	f001 fd62 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a81      	ldr	r2, [pc, #516]	; (8002378 <HAL_I2C_Init+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d807      	bhi.n	8002188 <HAL_I2C_Init+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a80      	ldr	r2, [pc, #512]	; (800237c <HAL_I2C_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e006      	b.n	8002196 <HAL_I2C_Init+0x92>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a7d      	ldr	r2, [pc, #500]	; (8002380 <HAL_I2C_Init+0x27c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0e7      	b.n	800236e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a78      	ldr	r2, [pc, #480]	; (8002384 <HAL_I2C_Init+0x280>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_I2C_Init+0x274>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d802      	bhi.n	80021d8 <HAL_I2C_Init+0xd4>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3301      	adds	r3, #1
 80021d6:	e009      	b.n	80021ec <HAL_I2C_Init+0xe8>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a69      	ldr	r2, [pc, #420]	; (8002388 <HAL_I2C_Init+0x284>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	3301      	adds	r3, #1
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	495c      	ldr	r1, [pc, #368]	; (8002378 <HAL_I2C_Init+0x274>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d819      	bhi.n	8002240 <HAL_I2C_Init+0x13c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e59      	subs	r1, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fbb1 f3f3 	udiv	r3, r1, r3
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002220:	400b      	ands	r3, r1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_I2C_Init+0x138>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e59      	subs	r1, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb1 f3f3 	udiv	r3, r1, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	e051      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800223c:	2304      	movs	r3, #4
 800223e:	e04f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_I2C_Init+0x168>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e012      	b.n	8002292 <HAL_I2C_Init+0x18e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	0099      	lsls	r1, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Init+0x196>
 8002296:	2301      	movs	r3, #1
 8002298:	e022      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <HAL_I2C_Init+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e58      	subs	r0, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	440b      	add	r3, r1
 80022b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022be:	e00f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800230e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6911      	ldr	r1, [r2, #16]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68d2      	ldr	r2, [r2, #12]
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	003d08ff 	.word	0x003d08ff
 8002384:	431bde83 	.word	0x431bde83
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	461a      	mov	r2, r3
 8002398:	460b      	mov	r3, r1
 800239a:	817b      	strh	r3, [r7, #10]
 800239c:	4613      	mov	r3, r2
 800239e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff fbca 	bl	8001b38 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	f040 80e0 	bne.w	8002574 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	4970      	ldr	r1, [pc, #448]	; (8002580 <HAL_I2C_Master_Transmit+0x1f4>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fde8 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0d3      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x50>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0cc      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d007      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2210      	movs	r2, #16
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a50      	ldr	r2, [pc, #320]	; (8002584 <HAL_I2C_Master_Transmit+0x1f8>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fbbc 	bl	8002bc8 <I2C_MasterRequestWrite>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e08d      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002470:	e066      	b.n	8002540 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fe62 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b04      	cmp	r3, #4
 8002488:	d107      	bne.n	800249a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06b      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11b      	bne.n	8002514 <HAL_I2C_Master_Transmit+0x188>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d017      	beq.n	8002514 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6a39      	ldr	r1, [r7, #32]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fe52 	bl	80031c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2b04      	cmp	r3, #4
 800252a:	d107      	bne.n	800253c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e01a      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d194      	bne.n	8002472 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000

08002588 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	461a      	mov	r2, r3
 8002594:	460b      	mov	r3, r1
 8002596:	817b      	strh	r3, [r7, #10]
 8002598:	4613      	mov	r3, r2
 800259a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff facc 	bl	8001b38 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	f040 820b 	bne.w	80029c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2319      	movs	r3, #25
 80025b6:	2201      	movs	r2, #1
 80025b8:	497c      	ldr	r1, [pc, #496]	; (80027ac <HAL_I2C_Master_Receive+0x224>)
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fcea 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	e1fe      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2C_Master_Receive+0x50>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e1f7      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d007      	beq.n	80025fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2222      	movs	r2, #34	; 0x22
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2210      	movs	r2, #16
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	893a      	ldrh	r2, [r7, #8]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a5c      	ldr	r2, [pc, #368]	; (80027b0 <HAL_I2C_Master_Receive+0x228>)
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002640:	8979      	ldrh	r1, [r7, #10]
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb40 	bl	8002ccc <I2C_MasterRequestRead>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1b8      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d113      	bne.n	8002686 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e18c      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268a:	2b01      	cmp	r3, #1
 800268c:	d11b      	bne.n	80026c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e16c      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d11b      	bne.n	8002706 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	e14c      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800272c:	e138      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b03      	cmp	r3, #3
 8002734:	f200 80f1 	bhi.w	800291a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b01      	cmp	r3, #1
 800273e:	d123      	bne.n	8002788 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fd7d 	bl	8003244 <I2C_WaitOnRXNEFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e139      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002786:	e10b      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b02      	cmp	r3, #2
 800278e:	d14e      	bne.n	800282e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	2200      	movs	r2, #0
 8002798:	4906      	ldr	r1, [pc, #24]	; (80027b4 <HAL_I2C_Master_Receive+0x22c>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fbfa 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e10e      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
 80027aa:	bf00      	nop
 80027ac:	00100002 	.word	0x00100002
 80027b0:	ffff0000 	.word	0xffff0000
 80027b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800282c:	e0b8      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	2200      	movs	r2, #0
 8002836:	4966      	ldr	r1, [pc, #408]	; (80029d0 <HAL_I2C_Master_Receive+0x448>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fbab 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0bf      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2200      	movs	r2, #0
 8002892:	494f      	ldr	r1, [pc, #316]	; (80029d0 <HAL_I2C_Master_Receive+0x448>)
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fb7d 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e091      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002918:	e042      	b.n	80029a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fc90 	bl	8003244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e04c      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d118      	bne.n	80029a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f aec2 	bne.w	800272e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	00010004 	.word	0x00010004

080029d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	460b      	mov	r3, r1
 80029e8:	813b      	strh	r3, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ee:	f7ff f8a3 	bl	8001b38 <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 80d9 	bne.w	8002bb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2319      	movs	r3, #25
 8002a08:	2201      	movs	r2, #1
 8002a0a:	496d      	ldr	r1, [pc, #436]	; (8002bc0 <HAL_I2C_Mem_Write+0x1ec>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fac1 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Mem_Write+0x56>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e0c5      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d007      	beq.n	8002a50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2221      	movs	r2, #33	; 0x21
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <HAL_I2C_Mem_Write+0x1f0>)
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a92:	88f8      	ldrh	r0, [r7, #6]
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f9e0 	bl	8002e68 <I2C_RequestMemoryWrite>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d052      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e081      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fb42 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_I2C_Mem_Write+0x180>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1aa      	bne.n	8002ab2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb2e 	bl	80031c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e016      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00100002 	.word	0x00100002
 8002bc4:	ffff0000 	.word	0xffff0000

08002bc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d006      	beq.n	8002bf2 <I2C_MasterRequestWrite+0x2a>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d003      	beq.n	8002bf2 <I2C_MasterRequestWrite+0x2a>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf0:	d108      	bne.n	8002c04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e00b      	b.n	8002c1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	2b12      	cmp	r3, #18
 8002c0a:	d107      	bne.n	8002c1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f9b3 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c42:	d103      	bne.n	8002c4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e035      	b.n	8002cbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c58:	d108      	bne.n	8002c6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c68:	611a      	str	r2, [r3, #16]
 8002c6a:	e01b      	b.n	8002ca4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	11db      	asrs	r3, r3, #7
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0306 	and.w	r3, r3, #6
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f063 030f 	orn	r3, r3, #15
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <I2C_MasterRequestWrite+0xfc>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9d9 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e010      	b.n	8002cbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <I2C_MasterRequestWrite+0x100>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f9c9 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010008 	.word	0x00010008
 8002cc8:	00010002 	.word	0x00010002

08002ccc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d006      	beq.n	8002d06 <I2C_MasterRequestRead+0x3a>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d003      	beq.n	8002d06 <I2C_MasterRequestRead+0x3a>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d04:	d108      	bne.n	8002d18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e00b      	b.n	8002d30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b11      	cmp	r3, #17
 8002d1e:	d107      	bne.n	8002d30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f929 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d103      	bne.n	8002d60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e079      	b.n	8002e58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d6c:	d108      	bne.n	8002d80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	e05f      	b.n	8002e40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d80:	897b      	ldrh	r3, [r7, #10]
 8002d82:	11db      	asrs	r3, r3, #7
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0306 	and.w	r3, r3, #6
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f063 030f 	orn	r3, r3, #15
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4930      	ldr	r1, [pc, #192]	; (8002e60 <I2C_MasterRequestRead+0x194>)
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f94f 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e054      	b.n	8002e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dae:	897b      	ldrh	r3, [r7, #10]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4929      	ldr	r1, [pc, #164]	; (8002e64 <I2C_MasterRequestRead+0x198>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f93f 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e044      	b.n	8002e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f8c7 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	d103      	bne.n	8002e24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e017      	b.n	8002e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	11db      	asrs	r3, r3, #7
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0306 	and.w	r3, r3, #6
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f063 030e 	orn	r3, r3, #14
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4907      	ldr	r1, [pc, #28]	; (8002e64 <I2C_MasterRequestRead+0x198>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8fb 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	00010008 	.word	0x00010008
 8002e64:	00010002 	.word	0x00010002

08002e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f878 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d103      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e05f      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	492d      	ldr	r1, [pc, #180]	; (8002f90 <I2C_RequestMemoryWrite+0x128>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f8b0 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04c      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f91a 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e02b      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]
 8002f3e:	e021      	b.n	8002f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f8f4 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d107      	bne.n	8002f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e005      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	00010002 	.word	0x00010002

08002f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa4:	e025      	b.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d021      	beq.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fdc3 	bl	8001b38 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d116      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e023      	b.n	800303a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10d      	bne.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	e00c      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0b6      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003050:	e051      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d123      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800307a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e046      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d021      	beq.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fe fd41 	bl	8001b38 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e020      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e00b      	b.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	43da      	mvns	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d18d      	bne.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314c:	e02d      	b.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8ce 	bl	80032f0 <I2C_IsAcknowledgeFailed>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02d      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d021      	beq.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe fce7 	bl	8001b38 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d116      	bne.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e007      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d1ca      	bne.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ce:	e02d      	b.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f88d 	bl	80032f0 <I2C_IsAcknowledgeFailed>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e02d      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d021      	beq.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fe fca6 	bl	8001b38 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d1ca      	bne.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003250:	e042      	b.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b10      	cmp	r3, #16
 800325e:	d119      	bne.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0210 	mvn.w	r2, #16
 8003268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e029      	b.n	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fe fc50 	bl	8001b38 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d116      	bne.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e007      	b.n	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d1b5      	bne.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d11b      	bne.n	8003340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e267      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e242      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a75      	ldr	r2, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6f      	ldr	r2, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6c      	ldr	r2, [pc, #432]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a68      	ldr	r2, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fb96 	bl	8001b38 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fb92 	bl	8001b38 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e207      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fb82 	bl	8001b38 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fb7e 	bl	8001b38 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1f3      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b44      	ldr	r3, [pc, #272]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e1c7      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe fb37 	bl	8001b38 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fb33 	bl	8001b38 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1a8      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4925      	ldr	r1, [pc, #148]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fb16 	bl	8001b38 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7fe fb12 	bl	8001b38 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e187      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d036      	beq.n	80035a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe faf6 	bl	8001b38 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7fe faf2 	bl	8001b38 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e167      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e01b      	b.n	80035a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fe fadf 	bl	8001b38 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e00e      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe fadb 	bl	8001b38 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d907      	bls.n	800359c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e150      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	42470000 	.word	0x42470000
 8003598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ea      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8097 	beq.w	80036e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ba:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a7c      	ldr	r2, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b77      	ldr	r3, [pc, #476]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b74      	ldr	r3, [pc, #464]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a73      	ldr	r2, [pc, #460]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fa9b 	bl	8001b38 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe fa97 	bl	8001b38 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e10c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x2ea>
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a63      	ldr	r2, [pc, #396]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x30c>
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800365c:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a54      	ldr	r2, [pc, #336]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe fa5c 	bl	8001b38 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fe fa58 	bl	8001b38 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0cb      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RCC_OscConfig+0x334>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe fa46 	bl	8001b38 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe fa42 	bl	8001b38 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b5      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a1 	beq.w	8003830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fa16 	bl	8001b38 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe fa12 	bl	8001b38 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e087      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe f9eb 	bl	8001b38 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe f9e7 	bl	8001b38 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e05c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x416>
 8003784:	e054      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f9d4 	bl	8001b38 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f9d0 	bl	8001b38 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e045      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
 80037b2:	e03d      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e038      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4ec>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d028      	beq.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d121      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d11a      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cc      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d90c      	bls.n	800387c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e067      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4934      	ldr	r1, [pc, #208]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fe f902 	bl	8001b38 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe f8fe 	bl	8001b38 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e04f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20c      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe f862 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	080053d0 	.word	0x080053d0
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b094      	sub	sp, #80	; 0x50
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	647b      	str	r3, [r7, #68]	; 0x44
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80e1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e0db      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b73      	ldr	r3, [pc, #460]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a44:	e0db      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a90:	0150      	lsls	r0, r2, #5
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4621      	mov	r1, r4
 8003a98:	1a51      	subs	r1, r2, r1
 8003a9a:	6139      	str	r1, [r7, #16]
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	018b      	lsls	r3, r1, #6
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aba:	4651      	mov	r1, sl
 8003abc:	018a      	lsls	r2, r1, #6
 8003abe:	4651      	mov	r1, sl
 8003ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eb18 0303 	adds.w	r3, r8, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	462b      	mov	r3, r5
 8003aec:	eb49 0303 	adc.w	r3, r9, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003afe:	4629      	mov	r1, r5
 8003b00:	024b      	lsls	r3, r1, #9
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b08:	4621      	mov	r1, r4
 8003b0a:	024a      	lsls	r2, r1, #9
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b1c:	f7fd f838 	bl	8000b90 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	e058      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	2200      	movs	r2, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	4611      	mov	r1, r2
 8003b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b62:	4649      	mov	r1, r9
 8003b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b80:	eb63 050b 	sbc.w	r5, r3, fp
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb45 0303 	adc.w	r3, r5, r3
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	61fa      	str	r2, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	f7fc ffde 	bl	8000b90 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3750      	adds	r7, #80	; 0x50
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	007a1200 	.word	0x007a1200

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	080053e0 	.word	0x080053e0

08003c58 <__errno>:
 8003c58:	4b01      	ldr	r3, [pc, #4]	; (8003c60 <__errno+0x8>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	2000000c 	.word	0x2000000c

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	4d0d      	ldr	r5, [pc, #52]	; (8003c9c <__libc_init_array+0x38>)
 8003c68:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6a:	1b64      	subs	r4, r4, r5
 8003c6c:	10a4      	asrs	r4, r4, #2
 8003c6e:	2600      	movs	r6, #0
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	4d0b      	ldr	r5, [pc, #44]	; (8003ca4 <__libc_init_array+0x40>)
 8003c76:	4c0c      	ldr	r4, [pc, #48]	; (8003ca8 <__libc_init_array+0x44>)
 8003c78:	f001 fb9c 	bl	80053b4 <_init>
 8003c7c:	1b64      	subs	r4, r4, r5
 8003c7e:	10a4      	asrs	r4, r4, #2
 8003c80:	2600      	movs	r6, #0
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	080055d0 	.word	0x080055d0
 8003ca0:	080055d0 	.word	0x080055d0
 8003ca4:	080055d0 	.word	0x080055d0
 8003ca8:	080055d4 	.word	0x080055d4

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>
 8003cbc:	0000      	movs	r0, r0
	...

08003cc0 <sin>:
 8003cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cc2:	ec53 2b10 	vmov	r2, r3, d0
 8003cc6:	4828      	ldr	r0, [pc, #160]	; (8003d68 <sin+0xa8>)
 8003cc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ccc:	4281      	cmp	r1, r0
 8003cce:	dc07      	bgt.n	8003ce0 <sin+0x20>
 8003cd0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003d60 <sin+0xa0>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	b005      	add	sp, #20
 8003cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cdc:	f001 b994 	b.w	8005008 <__kernel_sin>
 8003ce0:	4822      	ldr	r0, [pc, #136]	; (8003d6c <sin+0xac>)
 8003ce2:	4281      	cmp	r1, r0
 8003ce4:	dd09      	ble.n	8003cfa <sin+0x3a>
 8003ce6:	ee10 0a10 	vmov	r0, s0
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc fa70 	bl	80001d0 <__aeabi_dsub>
 8003cf0:	ec41 0b10 	vmov	d0, r0, r1
 8003cf4:	b005      	add	sp, #20
 8003cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cfa:	4668      	mov	r0, sp
 8003cfc:	f000 faac 	bl	8004258 <__ieee754_rem_pio2>
 8003d00:	f000 0003 	and.w	r0, r0, #3
 8003d04:	2801      	cmp	r0, #1
 8003d06:	d00c      	beq.n	8003d22 <sin+0x62>
 8003d08:	2802      	cmp	r0, #2
 8003d0a:	d011      	beq.n	8003d30 <sin+0x70>
 8003d0c:	b9f0      	cbnz	r0, 8003d4c <sin+0x8c>
 8003d0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d12:	ed9d 0b00 	vldr	d0, [sp]
 8003d16:	2001      	movs	r0, #1
 8003d18:	f001 f976 	bl	8005008 <__kernel_sin>
 8003d1c:	ec51 0b10 	vmov	r0, r1, d0
 8003d20:	e7e6      	b.n	8003cf0 <sin+0x30>
 8003d22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d26:	ed9d 0b00 	vldr	d0, [sp]
 8003d2a:	f000 fd55 	bl	80047d8 <__kernel_cos>
 8003d2e:	e7f5      	b.n	8003d1c <sin+0x5c>
 8003d30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d34:	ed9d 0b00 	vldr	d0, [sp]
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f001 f965 	bl	8005008 <__kernel_sin>
 8003d3e:	ec53 2b10 	vmov	r2, r3, d0
 8003d42:	ee10 0a10 	vmov	r0, s0
 8003d46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d4a:	e7d1      	b.n	8003cf0 <sin+0x30>
 8003d4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d50:	ed9d 0b00 	vldr	d0, [sp]
 8003d54:	f000 fd40 	bl	80047d8 <__kernel_cos>
 8003d58:	e7f1      	b.n	8003d3e <sin+0x7e>
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w
	...
 8003d68:	3fe921fb 	.word	0x3fe921fb
 8003d6c:	7fefffff 	.word	0x7fefffff

08003d70 <asin>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	ed2d 8b02 	vpush	{d8}
 8003d76:	ec55 4b10 	vmov	r4, r5, d0
 8003d7a:	f000 f859 	bl	8003e30 <__ieee754_asin>
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	4620      	mov	r0, r4
 8003d84:	4629      	mov	r1, r5
 8003d86:	eeb0 8a40 	vmov.f32	s16, s0
 8003d8a:	eef0 8a60 	vmov.f32	s17, s1
 8003d8e:	f7fc fe71 	bl	8000a74 <__aeabi_dcmpun>
 8003d92:	b9a8      	cbnz	r0, 8003dc0 <asin+0x50>
 8003d94:	ec45 4b10 	vmov	d0, r4, r5
 8003d98:	f001 f9f4 	bl	8005184 <fabs>
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <asin+0x60>)
 8003d9e:	ec51 0b10 	vmov	r0, r1, d0
 8003da2:	2200      	movs	r2, #0
 8003da4:	f7fc fe5c 	bl	8000a60 <__aeabi_dcmpgt>
 8003da8:	b150      	cbz	r0, 8003dc0 <asin+0x50>
 8003daa:	f7ff ff55 	bl	8003c58 <__errno>
 8003dae:	ecbd 8b02 	vpop	{d8}
 8003db2:	2321      	movs	r3, #33	; 0x21
 8003db4:	6003      	str	r3, [r0, #0]
 8003db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dba:	4806      	ldr	r0, [pc, #24]	; (8003dd4 <asin+0x64>)
 8003dbc:	f001 ba6c 	b.w	8005298 <nan>
 8003dc0:	eeb0 0a48 	vmov.f32	s0, s16
 8003dc4:	eef0 0a68 	vmov.f32	s1, s17
 8003dc8:	ecbd 8b02 	vpop	{d8}
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	3ff00000 	.word	0x3ff00000
 8003dd4:	080053e8 	.word	0x080053e8

08003dd8 <sqrt>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	ed2d 8b02 	vpush	{d8}
 8003dde:	ec55 4b10 	vmov	r4, r5, d0
 8003de2:	f000 fc45 	bl	8004670 <__ieee754_sqrt>
 8003de6:	4622      	mov	r2, r4
 8003de8:	462b      	mov	r3, r5
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	eeb0 8a40 	vmov.f32	s16, s0
 8003df2:	eef0 8a60 	vmov.f32	s17, s1
 8003df6:	f7fc fe3d 	bl	8000a74 <__aeabi_dcmpun>
 8003dfa:	b990      	cbnz	r0, 8003e22 <sqrt+0x4a>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fe0e 	bl	8000a24 <__aeabi_dcmplt>
 8003e08:	b158      	cbz	r0, 8003e22 <sqrt+0x4a>
 8003e0a:	f7ff ff25 	bl	8003c58 <__errno>
 8003e0e:	2321      	movs	r3, #33	; 0x21
 8003e10:	6003      	str	r3, [r0, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	2300      	movs	r3, #0
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7fc fcbb 	bl	8000794 <__aeabi_ddiv>
 8003e1e:	ec41 0b18 	vmov	d8, r0, r1
 8003e22:	eeb0 0a48 	vmov.f32	s0, s16
 8003e26:	eef0 0a68 	vmov.f32	s1, s17
 8003e2a:	ecbd 8b02 	vpop	{d8}
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}

08003e30 <__ieee754_asin>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	ed2d 8b04 	vpush	{d8-d9}
 8003e38:	ec55 4b10 	vmov	r4, r5, d0
 8003e3c:	4bcc      	ldr	r3, [pc, #816]	; (8004170 <__ieee754_asin+0x340>)
 8003e3e:	b083      	sub	sp, #12
 8003e40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003e44:	4598      	cmp	r8, r3
 8003e46:	9501      	str	r5, [sp, #4]
 8003e48:	dd35      	ble.n	8003eb6 <__ieee754_asin+0x86>
 8003e4a:	ee10 3a10 	vmov	r3, s0
 8003e4e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8003e52:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8003e56:	ea58 0303 	orrs.w	r3, r8, r3
 8003e5a:	d117      	bne.n	8003e8c <__ieee754_asin+0x5c>
 8003e5c:	a3aa      	add	r3, pc, #680	; (adr r3, 8004108 <__ieee754_asin+0x2d8>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	ee10 0a10 	vmov	r0, s0
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7fc fb6a 	bl	8000540 <__aeabi_dmul>
 8003e6c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004110 <__ieee754_asin+0x2e0>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	4606      	mov	r6, r0
 8003e74:	460f      	mov	r7, r1
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc fb61 	bl	8000540 <__aeabi_dmul>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4630      	mov	r0, r6
 8003e84:	4639      	mov	r1, r7
 8003e86:	f7fc f9a5 	bl	80001d4 <__adddf3>
 8003e8a:	e00b      	b.n	8003ea4 <__ieee754_asin+0x74>
 8003e8c:	ee10 2a10 	vmov	r2, s0
 8003e90:	462b      	mov	r3, r5
 8003e92:	ee10 0a10 	vmov	r0, s0
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc f99a 	bl	80001d0 <__aeabi_dsub>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	f7fc fc78 	bl	8000794 <__aeabi_ddiv>
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	ec45 4b10 	vmov	d0, r4, r5
 8003eac:	b003      	add	sp, #12
 8003eae:	ecbd 8b04 	vpop	{d8-d9}
 8003eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb6:	4baf      	ldr	r3, [pc, #700]	; (8004174 <__ieee754_asin+0x344>)
 8003eb8:	4598      	cmp	r8, r3
 8003eba:	dc11      	bgt.n	8003ee0 <__ieee754_asin+0xb0>
 8003ebc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003ec0:	f280 80ae 	bge.w	8004020 <__ieee754_asin+0x1f0>
 8003ec4:	a394      	add	r3, pc, #592	; (adr r3, 8004118 <__ieee754_asin+0x2e8>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	ee10 0a10 	vmov	r0, s0
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc f980 	bl	80001d4 <__adddf3>
 8003ed4:	4ba8      	ldr	r3, [pc, #672]	; (8004178 <__ieee754_asin+0x348>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f7fc fdc2 	bl	8000a60 <__aeabi_dcmpgt>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d1e3      	bne.n	8003ea8 <__ieee754_asin+0x78>
 8003ee0:	ec45 4b10 	vmov	d0, r4, r5
 8003ee4:	f001 f94e 	bl	8005184 <fabs>
 8003ee8:	49a3      	ldr	r1, [pc, #652]	; (8004178 <__ieee754_asin+0x348>)
 8003eea:	ec53 2b10 	vmov	r2, r3, d0
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f7fc f96e 	bl	80001d0 <__aeabi_dsub>
 8003ef4:	4ba1      	ldr	r3, [pc, #644]	; (800417c <__ieee754_asin+0x34c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f7fc fb22 	bl	8000540 <__aeabi_dmul>
 8003efc:	a388      	add	r3, pc, #544	; (adr r3, 8004120 <__ieee754_asin+0x2f0>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	f7fc fb1b 	bl	8000540 <__aeabi_dmul>
 8003f0a:	a387      	add	r3, pc, #540	; (adr r3, 8004128 <__ieee754_asin+0x2f8>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f7fc f960 	bl	80001d4 <__adddf3>
 8003f14:	4622      	mov	r2, r4
 8003f16:	462b      	mov	r3, r5
 8003f18:	f7fc fb12 	bl	8000540 <__aeabi_dmul>
 8003f1c:	a384      	add	r3, pc, #528	; (adr r3, 8004130 <__ieee754_asin+0x300>)
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f7fc f955 	bl	80001d0 <__aeabi_dsub>
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	f7fc fb09 	bl	8000540 <__aeabi_dmul>
 8003f2e:	a382      	add	r3, pc, #520	; (adr r3, 8004138 <__ieee754_asin+0x308>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f7fc f94e 	bl	80001d4 <__adddf3>
 8003f38:	4622      	mov	r2, r4
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	f7fc fb00 	bl	8000540 <__aeabi_dmul>
 8003f40:	a37f      	add	r3, pc, #508	; (adr r3, 8004140 <__ieee754_asin+0x310>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc f943 	bl	80001d0 <__aeabi_dsub>
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	f7fc faf7 	bl	8000540 <__aeabi_dmul>
 8003f52:	a37d      	add	r3, pc, #500	; (adr r3, 8004148 <__ieee754_asin+0x318>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f7fc f93c 	bl	80001d4 <__adddf3>
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	462b      	mov	r3, r5
 8003f60:	f7fc faee 	bl	8000540 <__aeabi_dmul>
 8003f64:	a37a      	add	r3, pc, #488	; (adr r3, 8004150 <__ieee754_asin+0x320>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	ec41 0b18 	vmov	d8, r0, r1
 8003f6e:	4620      	mov	r0, r4
 8003f70:	4629      	mov	r1, r5
 8003f72:	f7fc fae5 	bl	8000540 <__aeabi_dmul>
 8003f76:	a378      	add	r3, pc, #480	; (adr r3, 8004158 <__ieee754_asin+0x328>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc f928 	bl	80001d0 <__aeabi_dsub>
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	f7fc fadc 	bl	8000540 <__aeabi_dmul>
 8003f88:	a375      	add	r3, pc, #468	; (adr r3, 8004160 <__ieee754_asin+0x330>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f921 	bl	80001d4 <__adddf3>
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f7fc fad3 	bl	8000540 <__aeabi_dmul>
 8003f9a:	a373      	add	r3, pc, #460	; (adr r3, 8004168 <__ieee754_asin+0x338>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f7fc f916 	bl	80001d0 <__aeabi_dsub>
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	f7fc faca 	bl	8000540 <__aeabi_dmul>
 8003fac:	4b72      	ldr	r3, [pc, #456]	; (8004178 <__ieee754_asin+0x348>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f7fc f910 	bl	80001d4 <__adddf3>
 8003fb4:	ec45 4b10 	vmov	d0, r4, r5
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	f000 fb58 	bl	8004670 <__ieee754_sqrt>
 8003fc0:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <__ieee754_asin+0x350>)
 8003fc2:	4598      	cmp	r8, r3
 8003fc4:	ec5b ab10 	vmov	sl, fp, d0
 8003fc8:	f340 80dc 	ble.w	8004184 <__ieee754_asin+0x354>
 8003fcc:	4632      	mov	r2, r6
 8003fce:	463b      	mov	r3, r7
 8003fd0:	ec51 0b18 	vmov	r0, r1, d8
 8003fd4:	f7fc fbde 	bl	8000794 <__aeabi_ddiv>
 8003fd8:	4652      	mov	r2, sl
 8003fda:	465b      	mov	r3, fp
 8003fdc:	f7fc fab0 	bl	8000540 <__aeabi_dmul>
 8003fe0:	4652      	mov	r2, sl
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	f7fc f8f6 	bl	80001d4 <__adddf3>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	f7fc f8f2 	bl	80001d4 <__adddf3>
 8003ff0:	a347      	add	r3, pc, #284	; (adr r3, 8004110 <__ieee754_asin+0x2e0>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc f8eb 	bl	80001d0 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	a142      	add	r1, pc, #264	; (adr r1, 8004108 <__ieee754_asin+0x2d8>)
 8004000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004004:	f7fc f8e4 	bl	80001d0 <__aeabi_dsub>
 8004008:	9b01      	ldr	r3, [sp, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	bfdc      	itt	le
 800400e:	4602      	movle	r2, r0
 8004010:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8004014:	4604      	mov	r4, r0
 8004016:	460d      	mov	r5, r1
 8004018:	bfdc      	itt	le
 800401a:	4614      	movle	r4, r2
 800401c:	461d      	movle	r5, r3
 800401e:	e743      	b.n	8003ea8 <__ieee754_asin+0x78>
 8004020:	ee10 2a10 	vmov	r2, s0
 8004024:	ee10 0a10 	vmov	r0, s0
 8004028:	462b      	mov	r3, r5
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc fa88 	bl	8000540 <__aeabi_dmul>
 8004030:	a33b      	add	r3, pc, #236	; (adr r3, 8004120 <__ieee754_asin+0x2f0>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	4606      	mov	r6, r0
 8004038:	460f      	mov	r7, r1
 800403a:	f7fc fa81 	bl	8000540 <__aeabi_dmul>
 800403e:	a33a      	add	r3, pc, #232	; (adr r3, 8004128 <__ieee754_asin+0x2f8>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc f8c6 	bl	80001d4 <__adddf3>
 8004048:	4632      	mov	r2, r6
 800404a:	463b      	mov	r3, r7
 800404c:	f7fc fa78 	bl	8000540 <__aeabi_dmul>
 8004050:	a337      	add	r3, pc, #220	; (adr r3, 8004130 <__ieee754_asin+0x300>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc f8bb 	bl	80001d0 <__aeabi_dsub>
 800405a:	4632      	mov	r2, r6
 800405c:	463b      	mov	r3, r7
 800405e:	f7fc fa6f 	bl	8000540 <__aeabi_dmul>
 8004062:	a335      	add	r3, pc, #212	; (adr r3, 8004138 <__ieee754_asin+0x308>)
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f7fc f8b4 	bl	80001d4 <__adddf3>
 800406c:	4632      	mov	r2, r6
 800406e:	463b      	mov	r3, r7
 8004070:	f7fc fa66 	bl	8000540 <__aeabi_dmul>
 8004074:	a332      	add	r3, pc, #200	; (adr r3, 8004140 <__ieee754_asin+0x310>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc f8a9 	bl	80001d0 <__aeabi_dsub>
 800407e:	4632      	mov	r2, r6
 8004080:	463b      	mov	r3, r7
 8004082:	f7fc fa5d 	bl	8000540 <__aeabi_dmul>
 8004086:	a330      	add	r3, pc, #192	; (adr r3, 8004148 <__ieee754_asin+0x318>)
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f7fc f8a2 	bl	80001d4 <__adddf3>
 8004090:	4632      	mov	r2, r6
 8004092:	463b      	mov	r3, r7
 8004094:	f7fc fa54 	bl	8000540 <__aeabi_dmul>
 8004098:	a32d      	add	r3, pc, #180	; (adr r3, 8004150 <__ieee754_asin+0x320>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	4680      	mov	r8, r0
 80040a0:	4689      	mov	r9, r1
 80040a2:	4630      	mov	r0, r6
 80040a4:	4639      	mov	r1, r7
 80040a6:	f7fc fa4b 	bl	8000540 <__aeabi_dmul>
 80040aa:	a32b      	add	r3, pc, #172	; (adr r3, 8004158 <__ieee754_asin+0x328>)
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f7fc f88e 	bl	80001d0 <__aeabi_dsub>
 80040b4:	4632      	mov	r2, r6
 80040b6:	463b      	mov	r3, r7
 80040b8:	f7fc fa42 	bl	8000540 <__aeabi_dmul>
 80040bc:	a328      	add	r3, pc, #160	; (adr r3, 8004160 <__ieee754_asin+0x330>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc f887 	bl	80001d4 <__adddf3>
 80040c6:	4632      	mov	r2, r6
 80040c8:	463b      	mov	r3, r7
 80040ca:	f7fc fa39 	bl	8000540 <__aeabi_dmul>
 80040ce:	a326      	add	r3, pc, #152	; (adr r3, 8004168 <__ieee754_asin+0x338>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc f87c 	bl	80001d0 <__aeabi_dsub>
 80040d8:	4632      	mov	r2, r6
 80040da:	463b      	mov	r3, r7
 80040dc:	f7fc fa30 	bl	8000540 <__aeabi_dmul>
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <__ieee754_asin+0x348>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	f7fc f876 	bl	80001d4 <__adddf3>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4640      	mov	r0, r8
 80040ee:	4649      	mov	r1, r9
 80040f0:	f7fc fb50 	bl	8000794 <__aeabi_ddiv>
 80040f4:	4622      	mov	r2, r4
 80040f6:	462b      	mov	r3, r5
 80040f8:	f7fc fa22 	bl	8000540 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	e6bf      	b.n	8003e86 <__ieee754_asin+0x56>
 8004106:	bf00      	nop
 8004108:	54442d18 	.word	0x54442d18
 800410c:	3ff921fb 	.word	0x3ff921fb
 8004110:	33145c07 	.word	0x33145c07
 8004114:	3c91a626 	.word	0x3c91a626
 8004118:	8800759c 	.word	0x8800759c
 800411c:	7e37e43c 	.word	0x7e37e43c
 8004120:	0dfdf709 	.word	0x0dfdf709
 8004124:	3f023de1 	.word	0x3f023de1
 8004128:	7501b288 	.word	0x7501b288
 800412c:	3f49efe0 	.word	0x3f49efe0
 8004130:	b5688f3b 	.word	0xb5688f3b
 8004134:	3fa48228 	.word	0x3fa48228
 8004138:	0e884455 	.word	0x0e884455
 800413c:	3fc9c155 	.word	0x3fc9c155
 8004140:	03eb6f7d 	.word	0x03eb6f7d
 8004144:	3fd4d612 	.word	0x3fd4d612
 8004148:	55555555 	.word	0x55555555
 800414c:	3fc55555 	.word	0x3fc55555
 8004150:	b12e9282 	.word	0xb12e9282
 8004154:	3fb3b8c5 	.word	0x3fb3b8c5
 8004158:	1b8d0159 	.word	0x1b8d0159
 800415c:	3fe6066c 	.word	0x3fe6066c
 8004160:	9c598ac8 	.word	0x9c598ac8
 8004164:	40002ae5 	.word	0x40002ae5
 8004168:	1c8a2d4b 	.word	0x1c8a2d4b
 800416c:	40033a27 	.word	0x40033a27
 8004170:	3fefffff 	.word	0x3fefffff
 8004174:	3fdfffff 	.word	0x3fdfffff
 8004178:	3ff00000 	.word	0x3ff00000
 800417c:	3fe00000 	.word	0x3fe00000
 8004180:	3fef3332 	.word	0x3fef3332
 8004184:	ee10 2a10 	vmov	r2, s0
 8004188:	ee10 0a10 	vmov	r0, s0
 800418c:	465b      	mov	r3, fp
 800418e:	4659      	mov	r1, fp
 8004190:	f7fc f820 	bl	80001d4 <__adddf3>
 8004194:	4632      	mov	r2, r6
 8004196:	463b      	mov	r3, r7
 8004198:	ec41 0b19 	vmov	d9, r0, r1
 800419c:	ec51 0b18 	vmov	r0, r1, d8
 80041a0:	f7fc faf8 	bl	8000794 <__aeabi_ddiv>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	ec51 0b19 	vmov	r0, r1, d9
 80041ac:	f7fc f9c8 	bl	8000540 <__aeabi_dmul>
 80041b0:	f04f 0800 	mov.w	r8, #0
 80041b4:	4606      	mov	r6, r0
 80041b6:	460f      	mov	r7, r1
 80041b8:	4642      	mov	r2, r8
 80041ba:	465b      	mov	r3, fp
 80041bc:	4640      	mov	r0, r8
 80041be:	4659      	mov	r1, fp
 80041c0:	f7fc f9be 	bl	8000540 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4620      	mov	r0, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	f7fc f800 	bl	80001d0 <__aeabi_dsub>
 80041d0:	4642      	mov	r2, r8
 80041d2:	4604      	mov	r4, r0
 80041d4:	460d      	mov	r5, r1
 80041d6:	465b      	mov	r3, fp
 80041d8:	4650      	mov	r0, sl
 80041da:	4659      	mov	r1, fp
 80041dc:	f7fb fffa 	bl	80001d4 <__adddf3>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc fad4 	bl	8000794 <__aeabi_ddiv>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	f7fb fff0 	bl	80001d4 <__adddf3>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	a113      	add	r1, pc, #76	; (adr r1, 8004248 <__ieee754_asin+0x418>)
 80041fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041fe:	f7fb ffe7 	bl	80001d0 <__aeabi_dsub>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4630      	mov	r0, r6
 8004208:	4639      	mov	r1, r7
 800420a:	f7fb ffe1 	bl	80001d0 <__aeabi_dsub>
 800420e:	4642      	mov	r2, r8
 8004210:	4604      	mov	r4, r0
 8004212:	460d      	mov	r5, r1
 8004214:	465b      	mov	r3, fp
 8004216:	4640      	mov	r0, r8
 8004218:	4659      	mov	r1, fp
 800421a:	f7fb ffdb 	bl	80001d4 <__adddf3>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	a10b      	add	r1, pc, #44	; (adr r1, 8004250 <__ieee754_asin+0x420>)
 8004224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004228:	f7fb ffd2 	bl	80001d0 <__aeabi_dsub>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4620      	mov	r0, r4
 8004232:	4629      	mov	r1, r5
 8004234:	f7fb ffcc 	bl	80001d0 <__aeabi_dsub>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	a104      	add	r1, pc, #16	; (adr r1, 8004250 <__ieee754_asin+0x420>)
 800423e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004242:	e6df      	b.n	8004004 <__ieee754_asin+0x1d4>
 8004244:	f3af 8000 	nop.w
 8004248:	33145c07 	.word	0x33145c07
 800424c:	3c91a626 	.word	0x3c91a626
 8004250:	54442d18 	.word	0x54442d18
 8004254:	3fe921fb 	.word	0x3fe921fb

08004258 <__ieee754_rem_pio2>:
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	ed2d 8b02 	vpush	{d8}
 8004260:	ec55 4b10 	vmov	r4, r5, d0
 8004264:	4bca      	ldr	r3, [pc, #808]	; (8004590 <__ieee754_rem_pio2+0x338>)
 8004266:	b08b      	sub	sp, #44	; 0x2c
 8004268:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800426c:	4598      	cmp	r8, r3
 800426e:	4682      	mov	sl, r0
 8004270:	9502      	str	r5, [sp, #8]
 8004272:	dc08      	bgt.n	8004286 <__ieee754_rem_pio2+0x2e>
 8004274:	2200      	movs	r2, #0
 8004276:	2300      	movs	r3, #0
 8004278:	ed80 0b00 	vstr	d0, [r0]
 800427c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004280:	f04f 0b00 	mov.w	fp, #0
 8004284:	e028      	b.n	80042d8 <__ieee754_rem_pio2+0x80>
 8004286:	4bc3      	ldr	r3, [pc, #780]	; (8004594 <__ieee754_rem_pio2+0x33c>)
 8004288:	4598      	cmp	r8, r3
 800428a:	dc78      	bgt.n	800437e <__ieee754_rem_pio2+0x126>
 800428c:	9b02      	ldr	r3, [sp, #8]
 800428e:	4ec2      	ldr	r6, [pc, #776]	; (8004598 <__ieee754_rem_pio2+0x340>)
 8004290:	2b00      	cmp	r3, #0
 8004292:	ee10 0a10 	vmov	r0, s0
 8004296:	a3b0      	add	r3, pc, #704	; (adr r3, 8004558 <__ieee754_rem_pio2+0x300>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	4629      	mov	r1, r5
 800429e:	dd39      	ble.n	8004314 <__ieee754_rem_pio2+0xbc>
 80042a0:	f7fb ff96 	bl	80001d0 <__aeabi_dsub>
 80042a4:	45b0      	cmp	r8, r6
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	d01b      	beq.n	80042e4 <__ieee754_rem_pio2+0x8c>
 80042ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8004560 <__ieee754_rem_pio2+0x308>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f7fb ff8d 	bl	80001d0 <__aeabi_dsub>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	e9ca 2300 	strd	r2, r3, [sl]
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7fb ff85 	bl	80001d0 <__aeabi_dsub>
 80042c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004560 <__ieee754_rem_pio2+0x308>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fb ff80 	bl	80001d0 <__aeabi_dsub>
 80042d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80042d4:	f04f 0b01 	mov.w	fp, #1
 80042d8:	4658      	mov	r0, fp
 80042da:	b00b      	add	sp, #44	; 0x2c
 80042dc:	ecbd 8b02 	vpop	{d8}
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004568 <__ieee754_rem_pio2+0x310>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f7fb ff71 	bl	80001d0 <__aeabi_dsub>
 80042ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8004570 <__ieee754_rem_pio2+0x318>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	4604      	mov	r4, r0
 80042f6:	460d      	mov	r5, r1
 80042f8:	f7fb ff6a 	bl	80001d0 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	e9ca 2300 	strd	r2, r3, [sl]
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	f7fb ff62 	bl	80001d0 <__aeabi_dsub>
 800430c:	a398      	add	r3, pc, #608	; (adr r3, 8004570 <__ieee754_rem_pio2+0x318>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	e7db      	b.n	80042cc <__ieee754_rem_pio2+0x74>
 8004314:	f7fb ff5e 	bl	80001d4 <__adddf3>
 8004318:	45b0      	cmp	r8, r6
 800431a:	4604      	mov	r4, r0
 800431c:	460d      	mov	r5, r1
 800431e:	d016      	beq.n	800434e <__ieee754_rem_pio2+0xf6>
 8004320:	a38f      	add	r3, pc, #572	; (adr r3, 8004560 <__ieee754_rem_pio2+0x308>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fb ff55 	bl	80001d4 <__adddf3>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	e9ca 2300 	strd	r2, r3, [sl]
 8004332:	4620      	mov	r0, r4
 8004334:	4629      	mov	r1, r5
 8004336:	f7fb ff4b 	bl	80001d0 <__aeabi_dsub>
 800433a:	a389      	add	r3, pc, #548	; (adr r3, 8004560 <__ieee754_rem_pio2+0x308>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fb ff48 	bl	80001d4 <__adddf3>
 8004344:	f04f 3bff 	mov.w	fp, #4294967295
 8004348:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800434c:	e7c4      	b.n	80042d8 <__ieee754_rem_pio2+0x80>
 800434e:	a386      	add	r3, pc, #536	; (adr r3, 8004568 <__ieee754_rem_pio2+0x310>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fb ff3e 	bl	80001d4 <__adddf3>
 8004358:	a385      	add	r3, pc, #532	; (adr r3, 8004570 <__ieee754_rem_pio2+0x318>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
 8004362:	f7fb ff37 	bl	80001d4 <__adddf3>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	e9ca 2300 	strd	r2, r3, [sl]
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fb ff2d 	bl	80001d0 <__aeabi_dsub>
 8004376:	a37e      	add	r3, pc, #504	; (adr r3, 8004570 <__ieee754_rem_pio2+0x318>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	e7e0      	b.n	8004340 <__ieee754_rem_pio2+0xe8>
 800437e:	4b87      	ldr	r3, [pc, #540]	; (800459c <__ieee754_rem_pio2+0x344>)
 8004380:	4598      	cmp	r8, r3
 8004382:	f300 80d9 	bgt.w	8004538 <__ieee754_rem_pio2+0x2e0>
 8004386:	f000 fefd 	bl	8005184 <fabs>
 800438a:	ec55 4b10 	vmov	r4, r5, d0
 800438e:	ee10 0a10 	vmov	r0, s0
 8004392:	a379      	add	r3, pc, #484	; (adr r3, 8004578 <__ieee754_rem_pio2+0x320>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	4629      	mov	r1, r5
 800439a:	f7fc f8d1 	bl	8000540 <__aeabi_dmul>
 800439e:	4b80      	ldr	r3, [pc, #512]	; (80045a0 <__ieee754_rem_pio2+0x348>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	f7fb ff17 	bl	80001d4 <__adddf3>
 80043a6:	f7fc fb7b 	bl	8000aa0 <__aeabi_d2iz>
 80043aa:	4683      	mov	fp, r0
 80043ac:	f7fc f85e 	bl	800046c <__aeabi_i2d>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	ec43 2b18 	vmov	d8, r2, r3
 80043b8:	a367      	add	r3, pc, #412	; (adr r3, 8004558 <__ieee754_rem_pio2+0x300>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fc f8bf 	bl	8000540 <__aeabi_dmul>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fb ff01 	bl	80001d0 <__aeabi_dsub>
 80043ce:	a364      	add	r3, pc, #400	; (adr r3, 8004560 <__ieee754_rem_pio2+0x308>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	ec51 0b18 	vmov	r0, r1, d8
 80043dc:	f7fc f8b0 	bl	8000540 <__aeabi_dmul>
 80043e0:	f1bb 0f1f 	cmp.w	fp, #31
 80043e4:	4604      	mov	r4, r0
 80043e6:	460d      	mov	r5, r1
 80043e8:	dc0d      	bgt.n	8004406 <__ieee754_rem_pio2+0x1ae>
 80043ea:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <__ieee754_rem_pio2+0x34c>)
 80043ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	4543      	cmp	r3, r8
 80043f6:	d006      	beq.n	8004406 <__ieee754_rem_pio2+0x1ae>
 80043f8:	4622      	mov	r2, r4
 80043fa:	462b      	mov	r3, r5
 80043fc:	4630      	mov	r0, r6
 80043fe:	4639      	mov	r1, r7
 8004400:	f7fb fee6 	bl	80001d0 <__aeabi_dsub>
 8004404:	e00f      	b.n	8004426 <__ieee754_rem_pio2+0x1ce>
 8004406:	462b      	mov	r3, r5
 8004408:	4622      	mov	r2, r4
 800440a:	4630      	mov	r0, r6
 800440c:	4639      	mov	r1, r7
 800440e:	f7fb fedf 	bl	80001d0 <__aeabi_dsub>
 8004412:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004416:	9303      	str	r3, [sp, #12]
 8004418:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800441c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004420:	f1b8 0f10 	cmp.w	r8, #16
 8004424:	dc02      	bgt.n	800442c <__ieee754_rem_pio2+0x1d4>
 8004426:	e9ca 0100 	strd	r0, r1, [sl]
 800442a:	e039      	b.n	80044a0 <__ieee754_rem_pio2+0x248>
 800442c:	a34e      	add	r3, pc, #312	; (adr r3, 8004568 <__ieee754_rem_pio2+0x310>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	ec51 0b18 	vmov	r0, r1, d8
 8004436:	f7fc f883 	bl	8000540 <__aeabi_dmul>
 800443a:	4604      	mov	r4, r0
 800443c:	460d      	mov	r5, r1
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4630      	mov	r0, r6
 8004444:	4639      	mov	r1, r7
 8004446:	f7fb fec3 	bl	80001d0 <__aeabi_dsub>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4680      	mov	r8, r0
 8004450:	4689      	mov	r9, r1
 8004452:	4630      	mov	r0, r6
 8004454:	4639      	mov	r1, r7
 8004456:	f7fb febb 	bl	80001d0 <__aeabi_dsub>
 800445a:	4622      	mov	r2, r4
 800445c:	462b      	mov	r3, r5
 800445e:	f7fb feb7 	bl	80001d0 <__aeabi_dsub>
 8004462:	a343      	add	r3, pc, #268	; (adr r3, 8004570 <__ieee754_rem_pio2+0x318>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	4604      	mov	r4, r0
 800446a:	460d      	mov	r5, r1
 800446c:	ec51 0b18 	vmov	r0, r1, d8
 8004470:	f7fc f866 	bl	8000540 <__aeabi_dmul>
 8004474:	4622      	mov	r2, r4
 8004476:	462b      	mov	r3, r5
 8004478:	f7fb feaa 	bl	80001d0 <__aeabi_dsub>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4604      	mov	r4, r0
 8004482:	460d      	mov	r5, r1
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fb fea2 	bl	80001d0 <__aeabi_dsub>
 800448c:	9a03      	ldr	r2, [sp, #12]
 800448e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b31      	cmp	r3, #49	; 0x31
 8004496:	dc24      	bgt.n	80044e2 <__ieee754_rem_pio2+0x28a>
 8004498:	e9ca 0100 	strd	r0, r1, [sl]
 800449c:	4646      	mov	r6, r8
 800449e:	464f      	mov	r7, r9
 80044a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80044a4:	4630      	mov	r0, r6
 80044a6:	4642      	mov	r2, r8
 80044a8:	464b      	mov	r3, r9
 80044aa:	4639      	mov	r1, r7
 80044ac:	f7fb fe90 	bl	80001d0 <__aeabi_dsub>
 80044b0:	462b      	mov	r3, r5
 80044b2:	4622      	mov	r2, r4
 80044b4:	f7fb fe8c 	bl	80001d0 <__aeabi_dsub>
 80044b8:	9b02      	ldr	r3, [sp, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80044c0:	f6bf af0a 	bge.w	80042d8 <__ieee754_rem_pio2+0x80>
 80044c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80044c8:	f8ca 3004 	str.w	r3, [sl, #4]
 80044cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044d0:	f8ca 8000 	str.w	r8, [sl]
 80044d4:	f8ca 0008 	str.w	r0, [sl, #8]
 80044d8:	f8ca 300c 	str.w	r3, [sl, #12]
 80044dc:	f1cb 0b00 	rsb	fp, fp, #0
 80044e0:	e6fa      	b.n	80042d8 <__ieee754_rem_pio2+0x80>
 80044e2:	a327      	add	r3, pc, #156	; (adr r3, 8004580 <__ieee754_rem_pio2+0x328>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	ec51 0b18 	vmov	r0, r1, d8
 80044ec:	f7fc f828 	bl	8000540 <__aeabi_dmul>
 80044f0:	4604      	mov	r4, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4640      	mov	r0, r8
 80044fa:	4649      	mov	r1, r9
 80044fc:	f7fb fe68 	bl	80001d0 <__aeabi_dsub>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4606      	mov	r6, r0
 8004506:	460f      	mov	r7, r1
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fb fe60 	bl	80001d0 <__aeabi_dsub>
 8004510:	4622      	mov	r2, r4
 8004512:	462b      	mov	r3, r5
 8004514:	f7fb fe5c 	bl	80001d0 <__aeabi_dsub>
 8004518:	a31b      	add	r3, pc, #108	; (adr r3, 8004588 <__ieee754_rem_pio2+0x330>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	4604      	mov	r4, r0
 8004520:	460d      	mov	r5, r1
 8004522:	ec51 0b18 	vmov	r0, r1, d8
 8004526:	f7fc f80b 	bl	8000540 <__aeabi_dmul>
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f7fb fe4f 	bl	80001d0 <__aeabi_dsub>
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	e75f      	b.n	80043f8 <__ieee754_rem_pio2+0x1a0>
 8004538:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <__ieee754_rem_pio2+0x350>)
 800453a:	4598      	cmp	r8, r3
 800453c:	dd36      	ble.n	80045ac <__ieee754_rem_pio2+0x354>
 800453e:	ee10 2a10 	vmov	r2, s0
 8004542:	462b      	mov	r3, r5
 8004544:	4620      	mov	r0, r4
 8004546:	4629      	mov	r1, r5
 8004548:	f7fb fe42 	bl	80001d0 <__aeabi_dsub>
 800454c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004550:	e9ca 0100 	strd	r0, r1, [sl]
 8004554:	e694      	b.n	8004280 <__ieee754_rem_pio2+0x28>
 8004556:	bf00      	nop
 8004558:	54400000 	.word	0x54400000
 800455c:	3ff921fb 	.word	0x3ff921fb
 8004560:	1a626331 	.word	0x1a626331
 8004564:	3dd0b461 	.word	0x3dd0b461
 8004568:	1a600000 	.word	0x1a600000
 800456c:	3dd0b461 	.word	0x3dd0b461
 8004570:	2e037073 	.word	0x2e037073
 8004574:	3ba3198a 	.word	0x3ba3198a
 8004578:	6dc9c883 	.word	0x6dc9c883
 800457c:	3fe45f30 	.word	0x3fe45f30
 8004580:	2e000000 	.word	0x2e000000
 8004584:	3ba3198a 	.word	0x3ba3198a
 8004588:	252049c1 	.word	0x252049c1
 800458c:	397b839a 	.word	0x397b839a
 8004590:	3fe921fb 	.word	0x3fe921fb
 8004594:	4002d97b 	.word	0x4002d97b
 8004598:	3ff921fb 	.word	0x3ff921fb
 800459c:	413921fb 	.word	0x413921fb
 80045a0:	3fe00000 	.word	0x3fe00000
 80045a4:	080053ec 	.word	0x080053ec
 80045a8:	7fefffff 	.word	0x7fefffff
 80045ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 80045b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80045b4:	ee10 0a10 	vmov	r0, s0
 80045b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80045bc:	ee10 6a10 	vmov	r6, s0
 80045c0:	460f      	mov	r7, r1
 80045c2:	f7fc fa6d 	bl	8000aa0 <__aeabi_d2iz>
 80045c6:	f7fb ff51 	bl	800046c <__aeabi_i2d>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4630      	mov	r0, r6
 80045d0:	4639      	mov	r1, r7
 80045d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045d6:	f7fb fdfb 	bl	80001d0 <__aeabi_dsub>
 80045da:	4b23      	ldr	r3, [pc, #140]	; (8004668 <__ieee754_rem_pio2+0x410>)
 80045dc:	2200      	movs	r2, #0
 80045de:	f7fb ffaf 	bl	8000540 <__aeabi_dmul>
 80045e2:	460f      	mov	r7, r1
 80045e4:	4606      	mov	r6, r0
 80045e6:	f7fc fa5b 	bl	8000aa0 <__aeabi_d2iz>
 80045ea:	f7fb ff3f 	bl	800046c <__aeabi_i2d>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045fa:	f7fb fde9 	bl	80001d0 <__aeabi_dsub>
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <__ieee754_rem_pio2+0x410>)
 8004600:	2200      	movs	r2, #0
 8004602:	f7fb ff9d 	bl	8000540 <__aeabi_dmul>
 8004606:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800460a:	ad04      	add	r5, sp, #16
 800460c:	f04f 0803 	mov.w	r8, #3
 8004610:	46a9      	mov	r9, r5
 8004612:	2600      	movs	r6, #0
 8004614:	2700      	movs	r7, #0
 8004616:	4632      	mov	r2, r6
 8004618:	463b      	mov	r3, r7
 800461a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800461e:	46c3      	mov	fp, r8
 8004620:	3d08      	subs	r5, #8
 8004622:	f108 38ff 	add.w	r8, r8, #4294967295
 8004626:	f7fc f9f3 	bl	8000a10 <__aeabi_dcmpeq>
 800462a:	2800      	cmp	r0, #0
 800462c:	d1f3      	bne.n	8004616 <__ieee754_rem_pio2+0x3be>
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <__ieee754_rem_pio2+0x414>)
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	2302      	movs	r3, #2
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4622      	mov	r2, r4
 8004638:	465b      	mov	r3, fp
 800463a:	4651      	mov	r1, sl
 800463c:	4648      	mov	r0, r9
 800463e:	f000 f993 	bl	8004968 <__kernel_rem_pio2>
 8004642:	9b02      	ldr	r3, [sp, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	4683      	mov	fp, r0
 8004648:	f6bf ae46 	bge.w	80042d8 <__ieee754_rem_pio2+0x80>
 800464c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004654:	e9ca 2300 	strd	r2, r3, [sl]
 8004658:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800465c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004660:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004664:	e73a      	b.n	80044dc <__ieee754_rem_pio2+0x284>
 8004666:	bf00      	nop
 8004668:	41700000 	.word	0x41700000
 800466c:	0800546c 	.word	0x0800546c

08004670 <__ieee754_sqrt>:
 8004670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004674:	ec55 4b10 	vmov	r4, r5, d0
 8004678:	4e55      	ldr	r6, [pc, #340]	; (80047d0 <__ieee754_sqrt+0x160>)
 800467a:	43ae      	bics	r6, r5
 800467c:	ee10 0a10 	vmov	r0, s0
 8004680:	ee10 3a10 	vmov	r3, s0
 8004684:	462a      	mov	r2, r5
 8004686:	4629      	mov	r1, r5
 8004688:	d110      	bne.n	80046ac <__ieee754_sqrt+0x3c>
 800468a:	ee10 2a10 	vmov	r2, s0
 800468e:	462b      	mov	r3, r5
 8004690:	f7fb ff56 	bl	8000540 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4620      	mov	r0, r4
 800469a:	4629      	mov	r1, r5
 800469c:	f7fb fd9a 	bl	80001d4 <__adddf3>
 80046a0:	4604      	mov	r4, r0
 80046a2:	460d      	mov	r5, r1
 80046a4:	ec45 4b10 	vmov	d0, r4, r5
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	dc10      	bgt.n	80046d2 <__ieee754_sqrt+0x62>
 80046b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80046b4:	4330      	orrs	r0, r6
 80046b6:	d0f5      	beq.n	80046a4 <__ieee754_sqrt+0x34>
 80046b8:	b15d      	cbz	r5, 80046d2 <__ieee754_sqrt+0x62>
 80046ba:	ee10 2a10 	vmov	r2, s0
 80046be:	462b      	mov	r3, r5
 80046c0:	ee10 0a10 	vmov	r0, s0
 80046c4:	f7fb fd84 	bl	80001d0 <__aeabi_dsub>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	f7fc f862 	bl	8000794 <__aeabi_ddiv>
 80046d0:	e7e6      	b.n	80046a0 <__ieee754_sqrt+0x30>
 80046d2:	1512      	asrs	r2, r2, #20
 80046d4:	d074      	beq.n	80047c0 <__ieee754_sqrt+0x150>
 80046d6:	07d4      	lsls	r4, r2, #31
 80046d8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80046dc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80046e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80046e4:	bf5e      	ittt	pl
 80046e6:	0fda      	lsrpl	r2, r3, #31
 80046e8:	005b      	lslpl	r3, r3, #1
 80046ea:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80046ee:	2400      	movs	r4, #0
 80046f0:	0fda      	lsrs	r2, r3, #31
 80046f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80046f6:	107f      	asrs	r7, r7, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	2516      	movs	r5, #22
 80046fc:	4620      	mov	r0, r4
 80046fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004702:	1886      	adds	r6, r0, r2
 8004704:	428e      	cmp	r6, r1
 8004706:	bfde      	ittt	le
 8004708:	1b89      	suble	r1, r1, r6
 800470a:	18b0      	addle	r0, r6, r2
 800470c:	18a4      	addle	r4, r4, r2
 800470e:	0049      	lsls	r1, r1, #1
 8004710:	3d01      	subs	r5, #1
 8004712:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004716:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800471a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800471e:	d1f0      	bne.n	8004702 <__ieee754_sqrt+0x92>
 8004720:	462a      	mov	r2, r5
 8004722:	f04f 0e20 	mov.w	lr, #32
 8004726:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800472a:	4281      	cmp	r1, r0
 800472c:	eb06 0c05 	add.w	ip, r6, r5
 8004730:	dc02      	bgt.n	8004738 <__ieee754_sqrt+0xc8>
 8004732:	d113      	bne.n	800475c <__ieee754_sqrt+0xec>
 8004734:	459c      	cmp	ip, r3
 8004736:	d811      	bhi.n	800475c <__ieee754_sqrt+0xec>
 8004738:	f1bc 0f00 	cmp.w	ip, #0
 800473c:	eb0c 0506 	add.w	r5, ip, r6
 8004740:	da43      	bge.n	80047ca <__ieee754_sqrt+0x15a>
 8004742:	2d00      	cmp	r5, #0
 8004744:	db41      	blt.n	80047ca <__ieee754_sqrt+0x15a>
 8004746:	f100 0801 	add.w	r8, r0, #1
 800474a:	1a09      	subs	r1, r1, r0
 800474c:	459c      	cmp	ip, r3
 800474e:	bf88      	it	hi
 8004750:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004754:	eba3 030c 	sub.w	r3, r3, ip
 8004758:	4432      	add	r2, r6
 800475a:	4640      	mov	r0, r8
 800475c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004760:	f1be 0e01 	subs.w	lr, lr, #1
 8004764:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004768:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800476c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004770:	d1db      	bne.n	800472a <__ieee754_sqrt+0xba>
 8004772:	430b      	orrs	r3, r1
 8004774:	d006      	beq.n	8004784 <__ieee754_sqrt+0x114>
 8004776:	1c50      	adds	r0, r2, #1
 8004778:	bf13      	iteet	ne
 800477a:	3201      	addne	r2, #1
 800477c:	3401      	addeq	r4, #1
 800477e:	4672      	moveq	r2, lr
 8004780:	f022 0201 	bicne.w	r2, r2, #1
 8004784:	1063      	asrs	r3, r4, #1
 8004786:	0852      	lsrs	r2, r2, #1
 8004788:	07e1      	lsls	r1, r4, #31
 800478a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800478e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004792:	bf48      	it	mi
 8004794:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004798:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800479c:	4614      	mov	r4, r2
 800479e:	e781      	b.n	80046a4 <__ieee754_sqrt+0x34>
 80047a0:	0ad9      	lsrs	r1, r3, #11
 80047a2:	3815      	subs	r0, #21
 80047a4:	055b      	lsls	r3, r3, #21
 80047a6:	2900      	cmp	r1, #0
 80047a8:	d0fa      	beq.n	80047a0 <__ieee754_sqrt+0x130>
 80047aa:	02cd      	lsls	r5, r1, #11
 80047ac:	d50a      	bpl.n	80047c4 <__ieee754_sqrt+0x154>
 80047ae:	f1c2 0420 	rsb	r4, r2, #32
 80047b2:	fa23 f404 	lsr.w	r4, r3, r4
 80047b6:	1e55      	subs	r5, r2, #1
 80047b8:	4093      	lsls	r3, r2
 80047ba:	4321      	orrs	r1, r4
 80047bc:	1b42      	subs	r2, r0, r5
 80047be:	e78a      	b.n	80046d6 <__ieee754_sqrt+0x66>
 80047c0:	4610      	mov	r0, r2
 80047c2:	e7f0      	b.n	80047a6 <__ieee754_sqrt+0x136>
 80047c4:	0049      	lsls	r1, r1, #1
 80047c6:	3201      	adds	r2, #1
 80047c8:	e7ef      	b.n	80047aa <__ieee754_sqrt+0x13a>
 80047ca:	4680      	mov	r8, r0
 80047cc:	e7bd      	b.n	800474a <__ieee754_sqrt+0xda>
 80047ce:	bf00      	nop
 80047d0:	7ff00000 	.word	0x7ff00000
 80047d4:	00000000 	.word	0x00000000

080047d8 <__kernel_cos>:
 80047d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	ec57 6b10 	vmov	r6, r7, d0
 80047e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80047e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80047e8:	ed8d 1b00 	vstr	d1, [sp]
 80047ec:	da07      	bge.n	80047fe <__kernel_cos+0x26>
 80047ee:	ee10 0a10 	vmov	r0, s0
 80047f2:	4639      	mov	r1, r7
 80047f4:	f7fc f954 	bl	8000aa0 <__aeabi_d2iz>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f000 8088 	beq.w	800490e <__kernel_cos+0x136>
 80047fe:	4632      	mov	r2, r6
 8004800:	463b      	mov	r3, r7
 8004802:	4630      	mov	r0, r6
 8004804:	4639      	mov	r1, r7
 8004806:	f7fb fe9b 	bl	8000540 <__aeabi_dmul>
 800480a:	4b51      	ldr	r3, [pc, #324]	; (8004950 <__kernel_cos+0x178>)
 800480c:	2200      	movs	r2, #0
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	f7fb fe95 	bl	8000540 <__aeabi_dmul>
 8004816:	a340      	add	r3, pc, #256	; (adr r3, 8004918 <__kernel_cos+0x140>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	4682      	mov	sl, r0
 800481e:	468b      	mov	fp, r1
 8004820:	4620      	mov	r0, r4
 8004822:	4629      	mov	r1, r5
 8004824:	f7fb fe8c 	bl	8000540 <__aeabi_dmul>
 8004828:	a33d      	add	r3, pc, #244	; (adr r3, 8004920 <__kernel_cos+0x148>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4622      	mov	r2, r4
 8004834:	462b      	mov	r3, r5
 8004836:	f7fb fe83 	bl	8000540 <__aeabi_dmul>
 800483a:	a33b      	add	r3, pc, #236	; (adr r3, 8004928 <__kernel_cos+0x150>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb fcc6 	bl	80001d0 <__aeabi_dsub>
 8004844:	4622      	mov	r2, r4
 8004846:	462b      	mov	r3, r5
 8004848:	f7fb fe7a 	bl	8000540 <__aeabi_dmul>
 800484c:	a338      	add	r3, pc, #224	; (adr r3, 8004930 <__kernel_cos+0x158>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f7fb fcbf 	bl	80001d4 <__adddf3>
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	f7fb fe71 	bl	8000540 <__aeabi_dmul>
 800485e:	a336      	add	r3, pc, #216	; (adr r3, 8004938 <__kernel_cos+0x160>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fcb4 	bl	80001d0 <__aeabi_dsub>
 8004868:	4622      	mov	r2, r4
 800486a:	462b      	mov	r3, r5
 800486c:	f7fb fe68 	bl	8000540 <__aeabi_dmul>
 8004870:	a333      	add	r3, pc, #204	; (adr r3, 8004940 <__kernel_cos+0x168>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fcad 	bl	80001d4 <__adddf3>
 800487a:	4622      	mov	r2, r4
 800487c:	462b      	mov	r3, r5
 800487e:	f7fb fe5f 	bl	8000540 <__aeabi_dmul>
 8004882:	4622      	mov	r2, r4
 8004884:	462b      	mov	r3, r5
 8004886:	f7fb fe5b 	bl	8000540 <__aeabi_dmul>
 800488a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800488e:	4604      	mov	r4, r0
 8004890:	460d      	mov	r5, r1
 8004892:	4630      	mov	r0, r6
 8004894:	4639      	mov	r1, r7
 8004896:	f7fb fe53 	bl	8000540 <__aeabi_dmul>
 800489a:	460b      	mov	r3, r1
 800489c:	4602      	mov	r2, r0
 800489e:	4629      	mov	r1, r5
 80048a0:	4620      	mov	r0, r4
 80048a2:	f7fb fc95 	bl	80001d0 <__aeabi_dsub>
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <__kernel_cos+0x17c>)
 80048a8:	4598      	cmp	r8, r3
 80048aa:	4606      	mov	r6, r0
 80048ac:	460f      	mov	r7, r1
 80048ae:	dc10      	bgt.n	80048d2 <__kernel_cos+0xfa>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4650      	mov	r0, sl
 80048b6:	4659      	mov	r1, fp
 80048b8:	f7fb fc8a 	bl	80001d0 <__aeabi_dsub>
 80048bc:	460b      	mov	r3, r1
 80048be:	4926      	ldr	r1, [pc, #152]	; (8004958 <__kernel_cos+0x180>)
 80048c0:	4602      	mov	r2, r0
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fb fc84 	bl	80001d0 <__aeabi_dsub>
 80048c8:	ec41 0b10 	vmov	d0, r0, r1
 80048cc:	b003      	add	sp, #12
 80048ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <__kernel_cos+0x184>)
 80048d4:	4920      	ldr	r1, [pc, #128]	; (8004958 <__kernel_cos+0x180>)
 80048d6:	4598      	cmp	r8, r3
 80048d8:	bfcc      	ite	gt
 80048da:	4d21      	ldrgt	r5, [pc, #132]	; (8004960 <__kernel_cos+0x188>)
 80048dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80048e0:	2400      	movs	r4, #0
 80048e2:	4622      	mov	r2, r4
 80048e4:	462b      	mov	r3, r5
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7fb fc72 	bl	80001d0 <__aeabi_dsub>
 80048ec:	4622      	mov	r2, r4
 80048ee:	4680      	mov	r8, r0
 80048f0:	4689      	mov	r9, r1
 80048f2:	462b      	mov	r3, r5
 80048f4:	4650      	mov	r0, sl
 80048f6:	4659      	mov	r1, fp
 80048f8:	f7fb fc6a 	bl	80001d0 <__aeabi_dsub>
 80048fc:	4632      	mov	r2, r6
 80048fe:	463b      	mov	r3, r7
 8004900:	f7fb fc66 	bl	80001d0 <__aeabi_dsub>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4640      	mov	r0, r8
 800490a:	4649      	mov	r1, r9
 800490c:	e7da      	b.n	80048c4 <__kernel_cos+0xec>
 800490e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004948 <__kernel_cos+0x170>
 8004912:	e7db      	b.n	80048cc <__kernel_cos+0xf4>
 8004914:	f3af 8000 	nop.w
 8004918:	be8838d4 	.word	0xbe8838d4
 800491c:	bda8fae9 	.word	0xbda8fae9
 8004920:	bdb4b1c4 	.word	0xbdb4b1c4
 8004924:	3e21ee9e 	.word	0x3e21ee9e
 8004928:	809c52ad 	.word	0x809c52ad
 800492c:	3e927e4f 	.word	0x3e927e4f
 8004930:	19cb1590 	.word	0x19cb1590
 8004934:	3efa01a0 	.word	0x3efa01a0
 8004938:	16c15177 	.word	0x16c15177
 800493c:	3f56c16c 	.word	0x3f56c16c
 8004940:	5555554c 	.word	0x5555554c
 8004944:	3fa55555 	.word	0x3fa55555
 8004948:	00000000 	.word	0x00000000
 800494c:	3ff00000 	.word	0x3ff00000
 8004950:	3fe00000 	.word	0x3fe00000
 8004954:	3fd33332 	.word	0x3fd33332
 8004958:	3ff00000 	.word	0x3ff00000
 800495c:	3fe90000 	.word	0x3fe90000
 8004960:	3fd20000 	.word	0x3fd20000
 8004964:	00000000 	.word	0x00000000

08004968 <__kernel_rem_pio2>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	ed2d 8b02 	vpush	{d8}
 8004970:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004974:	f112 0f14 	cmn.w	r2, #20
 8004978:	9308      	str	r3, [sp, #32]
 800497a:	9101      	str	r1, [sp, #4]
 800497c:	4bc4      	ldr	r3, [pc, #784]	; (8004c90 <__kernel_rem_pio2+0x328>)
 800497e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004980:	900b      	str	r0, [sp, #44]	; 0x2c
 8004982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	9b08      	ldr	r3, [sp, #32]
 800498a:	f103 33ff 	add.w	r3, r3, #4294967295
 800498e:	bfa8      	it	ge
 8004990:	1ed4      	subge	r4, r2, #3
 8004992:	9306      	str	r3, [sp, #24]
 8004994:	bfb2      	itee	lt
 8004996:	2400      	movlt	r4, #0
 8004998:	2318      	movge	r3, #24
 800499a:	fb94 f4f3 	sdivge	r4, r4, r3
 800499e:	f06f 0317 	mvn.w	r3, #23
 80049a2:	fb04 3303 	mla	r3, r4, r3, r3
 80049a6:	eb03 0a02 	add.w	sl, r3, r2
 80049aa:	9b02      	ldr	r3, [sp, #8]
 80049ac:	9a06      	ldr	r2, [sp, #24]
 80049ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004c80 <__kernel_rem_pio2+0x318>
 80049b2:	eb03 0802 	add.w	r8, r3, r2
 80049b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80049b8:	1aa7      	subs	r7, r4, r2
 80049ba:	ae22      	add	r6, sp, #136	; 0x88
 80049bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80049c0:	2500      	movs	r5, #0
 80049c2:	4545      	cmp	r5, r8
 80049c4:	dd13      	ble.n	80049ee <__kernel_rem_pio2+0x86>
 80049c6:	9b08      	ldr	r3, [sp, #32]
 80049c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004c80 <__kernel_rem_pio2+0x318>
 80049cc:	aa22      	add	r2, sp, #136	; 0x88
 80049ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80049d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80049d6:	f04f 0800 	mov.w	r8, #0
 80049da:	9b02      	ldr	r3, [sp, #8]
 80049dc:	4598      	cmp	r8, r3
 80049de:	dc2f      	bgt.n	8004a40 <__kernel_rem_pio2+0xd8>
 80049e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80049e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80049e8:	462f      	mov	r7, r5
 80049ea:	2600      	movs	r6, #0
 80049ec:	e01b      	b.n	8004a26 <__kernel_rem_pio2+0xbe>
 80049ee:	42ef      	cmn	r7, r5
 80049f0:	d407      	bmi.n	8004a02 <__kernel_rem_pio2+0x9a>
 80049f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80049f6:	f7fb fd39 	bl	800046c <__aeabi_i2d>
 80049fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80049fe:	3501      	adds	r5, #1
 8004a00:	e7df      	b.n	80049c2 <__kernel_rem_pio2+0x5a>
 8004a02:	ec51 0b18 	vmov	r0, r1, d8
 8004a06:	e7f8      	b.n	80049fa <__kernel_rem_pio2+0x92>
 8004a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004a10:	f7fb fd96 	bl	8000540 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a1c:	f7fb fbda 	bl	80001d4 <__adddf3>
 8004a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a24:	3601      	adds	r6, #1
 8004a26:	9b06      	ldr	r3, [sp, #24]
 8004a28:	429e      	cmp	r6, r3
 8004a2a:	f1a7 0708 	sub.w	r7, r7, #8
 8004a2e:	ddeb      	ble.n	8004a08 <__kernel_rem_pio2+0xa0>
 8004a30:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004a34:	f108 0801 	add.w	r8, r8, #1
 8004a38:	ecab 7b02 	vstmia	fp!, {d7}
 8004a3c:	3508      	adds	r5, #8
 8004a3e:	e7cc      	b.n	80049da <__kernel_rem_pio2+0x72>
 8004a40:	9b02      	ldr	r3, [sp, #8]
 8004a42:	aa0e      	add	r2, sp, #56	; 0x38
 8004a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a48:	930d      	str	r3, [sp, #52]	; 0x34
 8004a4a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004a4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004a50:	9c02      	ldr	r4, [sp, #8]
 8004a52:	930c      	str	r3, [sp, #48]	; 0x30
 8004a54:	00e3      	lsls	r3, r4, #3
 8004a56:	930a      	str	r3, [sp, #40]	; 0x28
 8004a58:	ab9a      	add	r3, sp, #616	; 0x268
 8004a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004a62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004a66:	ab72      	add	r3, sp, #456	; 0x1c8
 8004a68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004a6c:	46c3      	mov	fp, r8
 8004a6e:	46a1      	mov	r9, r4
 8004a70:	f1b9 0f00 	cmp.w	r9, #0
 8004a74:	f1a5 0508 	sub.w	r5, r5, #8
 8004a78:	dc77      	bgt.n	8004b6a <__kernel_rem_pio2+0x202>
 8004a7a:	ec47 6b10 	vmov	d0, r6, r7
 8004a7e:	4650      	mov	r0, sl
 8004a80:	f000 fc12 	bl	80052a8 <scalbn>
 8004a84:	ec57 6b10 	vmov	r6, r7, d0
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004a8e:	ee10 0a10 	vmov	r0, s0
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fb fd54 	bl	8000540 <__aeabi_dmul>
 8004a98:	ec41 0b10 	vmov	d0, r0, r1
 8004a9c:	f000 fb7c 	bl	8005198 <floor>
 8004aa0:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <__kernel_rem_pio2+0x32c>)
 8004aa2:	ec51 0b10 	vmov	r0, r1, d0
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f7fb fd4a 	bl	8000540 <__aeabi_dmul>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	f7fb fb8c 	bl	80001d0 <__aeabi_dsub>
 8004ab8:	460f      	mov	r7, r1
 8004aba:	4606      	mov	r6, r0
 8004abc:	f7fb fff0 	bl	8000aa0 <__aeabi_d2iz>
 8004ac0:	9004      	str	r0, [sp, #16]
 8004ac2:	f7fb fcd3 	bl	800046c <__aeabi_i2d>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4630      	mov	r0, r6
 8004acc:	4639      	mov	r1, r7
 8004ace:	f7fb fb7f 	bl	80001d0 <__aeabi_dsub>
 8004ad2:	f1ba 0f00 	cmp.w	sl, #0
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	460f      	mov	r7, r1
 8004ada:	dd6d      	ble.n	8004bb8 <__kernel_rem_pio2+0x250>
 8004adc:	1e62      	subs	r2, r4, #1
 8004ade:	ab0e      	add	r3, sp, #56	; 0x38
 8004ae0:	9d04      	ldr	r5, [sp, #16]
 8004ae2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ae6:	f1ca 0118 	rsb	r1, sl, #24
 8004aea:	fa40 f301 	asr.w	r3, r0, r1
 8004aee:	441d      	add	r5, r3
 8004af0:	408b      	lsls	r3, r1
 8004af2:	1ac0      	subs	r0, r0, r3
 8004af4:	ab0e      	add	r3, sp, #56	; 0x38
 8004af6:	9504      	str	r5, [sp, #16]
 8004af8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004afc:	f1ca 0317 	rsb	r3, sl, #23
 8004b00:	fa40 fb03 	asr.w	fp, r0, r3
 8004b04:	f1bb 0f00 	cmp.w	fp, #0
 8004b08:	dd65      	ble.n	8004bd6 <__kernel_rem_pio2+0x26e>
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	3301      	adds	r3, #1
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	4615      	mov	r5, r2
 8004b14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004b18:	4294      	cmp	r4, r2
 8004b1a:	f300 809c 	bgt.w	8004c56 <__kernel_rem_pio2+0x2ee>
 8004b1e:	f1ba 0f00 	cmp.w	sl, #0
 8004b22:	dd07      	ble.n	8004b34 <__kernel_rem_pio2+0x1cc>
 8004b24:	f1ba 0f01 	cmp.w	sl, #1
 8004b28:	f000 80c0 	beq.w	8004cac <__kernel_rem_pio2+0x344>
 8004b2c:	f1ba 0f02 	cmp.w	sl, #2
 8004b30:	f000 80c6 	beq.w	8004cc0 <__kernel_rem_pio2+0x358>
 8004b34:	f1bb 0f02 	cmp.w	fp, #2
 8004b38:	d14d      	bne.n	8004bd6 <__kernel_rem_pio2+0x26e>
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4956      	ldr	r1, [pc, #344]	; (8004c98 <__kernel_rem_pio2+0x330>)
 8004b40:	2000      	movs	r0, #0
 8004b42:	f7fb fb45 	bl	80001d0 <__aeabi_dsub>
 8004b46:	4606      	mov	r6, r0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	2d00      	cmp	r5, #0
 8004b4c:	d043      	beq.n	8004bd6 <__kernel_rem_pio2+0x26e>
 8004b4e:	4650      	mov	r0, sl
 8004b50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004c88 <__kernel_rem_pio2+0x320>
 8004b54:	f000 fba8 	bl	80052a8 <scalbn>
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	ec53 2b10 	vmov	r2, r3, d0
 8004b60:	f7fb fb36 	bl	80001d0 <__aeabi_dsub>
 8004b64:	4606      	mov	r6, r0
 8004b66:	460f      	mov	r7, r1
 8004b68:	e035      	b.n	8004bd6 <__kernel_rem_pio2+0x26e>
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <__kernel_rem_pio2+0x334>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4639      	mov	r1, r7
 8004b72:	f7fb fce5 	bl	8000540 <__aeabi_dmul>
 8004b76:	f7fb ff93 	bl	8000aa0 <__aeabi_d2iz>
 8004b7a:	f7fb fc77 	bl	800046c <__aeabi_i2d>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	ec43 2b18 	vmov	d8, r2, r3
 8004b86:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <__kernel_rem_pio2+0x338>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f7fb fcd9 	bl	8000540 <__aeabi_dmul>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4630      	mov	r0, r6
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb fb1b 	bl	80001d0 <__aeabi_dsub>
 8004b9a:	f7fb ff81 	bl	8000aa0 <__aeabi_d2iz>
 8004b9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ba2:	f84b 0b04 	str.w	r0, [fp], #4
 8004ba6:	ec51 0b18 	vmov	r0, r1, d8
 8004baa:	f7fb fb13 	bl	80001d4 <__adddf3>
 8004bae:	f109 39ff 	add.w	r9, r9, #4294967295
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460f      	mov	r7, r1
 8004bb6:	e75b      	b.n	8004a70 <__kernel_rem_pio2+0x108>
 8004bb8:	d106      	bne.n	8004bc8 <__kernel_rem_pio2+0x260>
 8004bba:	1e63      	subs	r3, r4, #1
 8004bbc:	aa0e      	add	r2, sp, #56	; 0x38
 8004bbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bc2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004bc6:	e79d      	b.n	8004b04 <__kernel_rem_pio2+0x19c>
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <__kernel_rem_pio2+0x33c>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f7fb ff3e 	bl	8000a4c <__aeabi_dcmpge>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d13d      	bne.n	8004c50 <__kernel_rem_pio2+0x2e8>
 8004bd4:	4683      	mov	fp, r0
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4630      	mov	r0, r6
 8004bdc:	4639      	mov	r1, r7
 8004bde:	f7fb ff17 	bl	8000a10 <__aeabi_dcmpeq>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	f000 80c0 	beq.w	8004d68 <__kernel_rem_pio2+0x400>
 8004be8:	1e65      	subs	r5, r4, #1
 8004bea:	462b      	mov	r3, r5
 8004bec:	2200      	movs	r2, #0
 8004bee:	9902      	ldr	r1, [sp, #8]
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	da6c      	bge.n	8004cce <__kernel_rem_pio2+0x366>
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	f000 8089 	beq.w	8004d0c <__kernel_rem_pio2+0x3a4>
 8004bfa:	ab0e      	add	r3, sp, #56	; 0x38
 8004bfc:	f1aa 0a18 	sub.w	sl, sl, #24
 8004c00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80ad 	beq.w	8004d64 <__kernel_rem_pio2+0x3fc>
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004c88 <__kernel_rem_pio2+0x320>
 8004c10:	f000 fb4a 	bl	80052a8 <scalbn>
 8004c14:	ab9a      	add	r3, sp, #616	; 0x268
 8004c16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c1a:	ec57 6b10 	vmov	r6, r7, d0
 8004c1e:	00ec      	lsls	r4, r5, #3
 8004c20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004c24:	46aa      	mov	sl, r5
 8004c26:	f1ba 0f00 	cmp.w	sl, #0
 8004c2a:	f280 80d6 	bge.w	8004dda <__kernel_rem_pio2+0x472>
 8004c2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004c80 <__kernel_rem_pio2+0x318>
 8004c32:	462e      	mov	r6, r5
 8004c34:	2e00      	cmp	r6, #0
 8004c36:	f2c0 8104 	blt.w	8004e42 <__kernel_rem_pio2+0x4da>
 8004c3a:	ab72      	add	r3, sp, #456	; 0x1c8
 8004c3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004c40:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004ca8 <__kernel_rem_pio2+0x340>
 8004c44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004c48:	f04f 0800 	mov.w	r8, #0
 8004c4c:	1baf      	subs	r7, r5, r6
 8004c4e:	e0ea      	b.n	8004e26 <__kernel_rem_pio2+0x4be>
 8004c50:	f04f 0b02 	mov.w	fp, #2
 8004c54:	e759      	b.n	8004b0a <__kernel_rem_pio2+0x1a2>
 8004c56:	f8d8 3000 	ldr.w	r3, [r8]
 8004c5a:	b955      	cbnz	r5, 8004c72 <__kernel_rem_pio2+0x30a>
 8004c5c:	b123      	cbz	r3, 8004c68 <__kernel_rem_pio2+0x300>
 8004c5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004c62:	f8c8 3000 	str.w	r3, [r8]
 8004c66:	2301      	movs	r3, #1
 8004c68:	3201      	adds	r2, #1
 8004c6a:	f108 0804 	add.w	r8, r8, #4
 8004c6e:	461d      	mov	r5, r3
 8004c70:	e752      	b.n	8004b18 <__kernel_rem_pio2+0x1b0>
 8004c72:	1acb      	subs	r3, r1, r3
 8004c74:	f8c8 3000 	str.w	r3, [r8]
 8004c78:	462b      	mov	r3, r5
 8004c7a:	e7f5      	b.n	8004c68 <__kernel_rem_pio2+0x300>
 8004c7c:	f3af 8000 	nop.w
	...
 8004c8c:	3ff00000 	.word	0x3ff00000
 8004c90:	080055b8 	.word	0x080055b8
 8004c94:	40200000 	.word	0x40200000
 8004c98:	3ff00000 	.word	0x3ff00000
 8004c9c:	3e700000 	.word	0x3e700000
 8004ca0:	41700000 	.word	0x41700000
 8004ca4:	3fe00000 	.word	0x3fe00000
 8004ca8:	08005578 	.word	0x08005578
 8004cac:	1e62      	subs	r2, r4, #1
 8004cae:	ab0e      	add	r3, sp, #56	; 0x38
 8004cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004cb8:	a90e      	add	r1, sp, #56	; 0x38
 8004cba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004cbe:	e739      	b.n	8004b34 <__kernel_rem_pio2+0x1cc>
 8004cc0:	1e62      	subs	r2, r4, #1
 8004cc2:	ab0e      	add	r3, sp, #56	; 0x38
 8004cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ccc:	e7f4      	b.n	8004cb8 <__kernel_rem_pio2+0x350>
 8004cce:	a90e      	add	r1, sp, #56	; 0x38
 8004cd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	e789      	b.n	8004bee <__kernel_rem_pio2+0x286>
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	d0fa      	beq.n	8004cda <__kernel_rem_pio2+0x372>
 8004ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ce6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004cea:	446a      	add	r2, sp
 8004cec:	3a98      	subs	r2, #152	; 0x98
 8004cee:	920a      	str	r2, [sp, #40]	; 0x28
 8004cf0:	9a08      	ldr	r2, [sp, #32]
 8004cf2:	18e3      	adds	r3, r4, r3
 8004cf4:	18a5      	adds	r5, r4, r2
 8004cf6:	aa22      	add	r2, sp, #136	; 0x88
 8004cf8:	f104 0801 	add.w	r8, r4, #1
 8004cfc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	9b04      	ldr	r3, [sp, #16]
 8004d04:	4543      	cmp	r3, r8
 8004d06:	da04      	bge.n	8004d12 <__kernel_rem_pio2+0x3aa>
 8004d08:	461c      	mov	r4, r3
 8004d0a:	e6a3      	b.n	8004a54 <__kernel_rem_pio2+0xec>
 8004d0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e7e4      	b.n	8004cdc <__kernel_rem_pio2+0x374>
 8004d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004d18:	f7fb fba8 	bl	800046c <__aeabi_i2d>
 8004d1c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d22:	46ab      	mov	fp, r5
 8004d24:	461c      	mov	r4, r3
 8004d26:	f04f 0900 	mov.w	r9, #0
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	2700      	movs	r7, #0
 8004d2e:	9b06      	ldr	r3, [sp, #24]
 8004d30:	4599      	cmp	r9, r3
 8004d32:	dd06      	ble.n	8004d42 <__kernel_rem_pio2+0x3da>
 8004d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d36:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004d3a:	f108 0801 	add.w	r8, r8, #1
 8004d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d40:	e7df      	b.n	8004d02 <__kernel_rem_pio2+0x39a>
 8004d42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004d46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004d4a:	f7fb fbf9 	bl	8000540 <__aeabi_dmul>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4630      	mov	r0, r6
 8004d54:	4639      	mov	r1, r7
 8004d56:	f7fb fa3d 	bl	80001d4 <__adddf3>
 8004d5a:	f109 0901 	add.w	r9, r9, #1
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460f      	mov	r7, r1
 8004d62:	e7e4      	b.n	8004d2e <__kernel_rem_pio2+0x3c6>
 8004d64:	3d01      	subs	r5, #1
 8004d66:	e748      	b.n	8004bfa <__kernel_rem_pio2+0x292>
 8004d68:	ec47 6b10 	vmov	d0, r6, r7
 8004d6c:	f1ca 0000 	rsb	r0, sl, #0
 8004d70:	f000 fa9a 	bl	80052a8 <scalbn>
 8004d74:	ec57 6b10 	vmov	r6, r7, d0
 8004d78:	4ba0      	ldr	r3, [pc, #640]	; (8004ffc <__kernel_rem_pio2+0x694>)
 8004d7a:	ee10 0a10 	vmov	r0, s0
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4639      	mov	r1, r7
 8004d82:	f7fb fe63 	bl	8000a4c <__aeabi_dcmpge>
 8004d86:	b1f8      	cbz	r0, 8004dc8 <__kernel_rem_pio2+0x460>
 8004d88:	4b9d      	ldr	r3, [pc, #628]	; (8005000 <__kernel_rem_pio2+0x698>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4639      	mov	r1, r7
 8004d90:	f7fb fbd6 	bl	8000540 <__aeabi_dmul>
 8004d94:	f7fb fe84 	bl	8000aa0 <__aeabi_d2iz>
 8004d98:	4680      	mov	r8, r0
 8004d9a:	f7fb fb67 	bl	800046c <__aeabi_i2d>
 8004d9e:	4b97      	ldr	r3, [pc, #604]	; (8004ffc <__kernel_rem_pio2+0x694>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	f7fb fbcd 	bl	8000540 <__aeabi_dmul>
 8004da6:	460b      	mov	r3, r1
 8004da8:	4602      	mov	r2, r0
 8004daa:	4639      	mov	r1, r7
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7fb fa0f 	bl	80001d0 <__aeabi_dsub>
 8004db2:	f7fb fe75 	bl	8000aa0 <__aeabi_d2iz>
 8004db6:	1c65      	adds	r5, r4, #1
 8004db8:	ab0e      	add	r3, sp, #56	; 0x38
 8004dba:	f10a 0a18 	add.w	sl, sl, #24
 8004dbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004dc2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004dc6:	e720      	b.n	8004c0a <__kernel_rem_pio2+0x2a2>
 8004dc8:	4630      	mov	r0, r6
 8004dca:	4639      	mov	r1, r7
 8004dcc:	f7fb fe68 	bl	8000aa0 <__aeabi_d2iz>
 8004dd0:	ab0e      	add	r3, sp, #56	; 0x38
 8004dd2:	4625      	mov	r5, r4
 8004dd4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004dd8:	e717      	b.n	8004c0a <__kernel_rem_pio2+0x2a2>
 8004dda:	ab0e      	add	r3, sp, #56	; 0x38
 8004ddc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004de0:	f7fb fb44 	bl	800046c <__aeabi_i2d>
 8004de4:	4632      	mov	r2, r6
 8004de6:	463b      	mov	r3, r7
 8004de8:	f7fb fbaa 	bl	8000540 <__aeabi_dmul>
 8004dec:	4b84      	ldr	r3, [pc, #528]	; (8005000 <__kernel_rem_pio2+0x698>)
 8004dee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004df2:	2200      	movs	r2, #0
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fba2 	bl	8000540 <__aeabi_dmul>
 8004dfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e00:	4606      	mov	r6, r0
 8004e02:	460f      	mov	r7, r1
 8004e04:	e70f      	b.n	8004c26 <__kernel_rem_pio2+0x2be>
 8004e06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004e0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004e0e:	f7fb fb97 	bl	8000540 <__aeabi_dmul>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e1a:	f7fb f9db 	bl	80001d4 <__adddf3>
 8004e1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e22:	f108 0801 	add.w	r8, r8, #1
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	4598      	cmp	r8, r3
 8004e2a:	dc01      	bgt.n	8004e30 <__kernel_rem_pio2+0x4c8>
 8004e2c:	45b8      	cmp	r8, r7
 8004e2e:	ddea      	ble.n	8004e06 <__kernel_rem_pio2+0x49e>
 8004e30:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e34:	ab4a      	add	r3, sp, #296	; 0x128
 8004e36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e3a:	ed87 7b00 	vstr	d7, [r7]
 8004e3e:	3e01      	subs	r6, #1
 8004e40:	e6f8      	b.n	8004c34 <__kernel_rem_pio2+0x2cc>
 8004e42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	dc0b      	bgt.n	8004e60 <__kernel_rem_pio2+0x4f8>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dc35      	bgt.n	8004eb8 <__kernel_rem_pio2+0x550>
 8004e4c:	d059      	beq.n	8004f02 <__kernel_rem_pio2+0x59a>
 8004e4e:	9b04      	ldr	r3, [sp, #16]
 8004e50:	f003 0007 	and.w	r0, r3, #7
 8004e54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004e58:	ecbd 8b02 	vpop	{d8}
 8004e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d1f3      	bne.n	8004e4e <__kernel_rem_pio2+0x4e6>
 8004e66:	ab4a      	add	r3, sp, #296	; 0x128
 8004e68:	4423      	add	r3, r4
 8004e6a:	9306      	str	r3, [sp, #24]
 8004e6c:	461c      	mov	r4, r3
 8004e6e:	469a      	mov	sl, r3
 8004e70:	9502      	str	r5, [sp, #8]
 8004e72:	9b02      	ldr	r3, [sp, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f1aa 0a08 	sub.w	sl, sl, #8
 8004e7a:	dc6b      	bgt.n	8004f54 <__kernel_rem_pio2+0x5ec>
 8004e7c:	46aa      	mov	sl, r5
 8004e7e:	f1ba 0f01 	cmp.w	sl, #1
 8004e82:	f1a4 0408 	sub.w	r4, r4, #8
 8004e86:	f300 8085 	bgt.w	8004f94 <__kernel_rem_pio2+0x62c>
 8004e8a:	9c06      	ldr	r4, [sp, #24]
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	3408      	adds	r4, #8
 8004e90:	2100      	movs	r1, #0
 8004e92:	2d01      	cmp	r5, #1
 8004e94:	f300 809d 	bgt.w	8004fd2 <__kernel_rem_pio2+0x66a>
 8004e98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004e9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004ea0:	f1bb 0f00 	cmp.w	fp, #0
 8004ea4:	f040 809b 	bne.w	8004fde <__kernel_rem_pio2+0x676>
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	e9c3 5600 	strd	r5, r6, [r3]
 8004eae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004eb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004eb6:	e7ca      	b.n	8004e4e <__kernel_rem_pio2+0x4e6>
 8004eb8:	3408      	adds	r4, #8
 8004eba:	ab4a      	add	r3, sp, #296	; 0x128
 8004ebc:	441c      	add	r4, r3
 8004ebe:	462e      	mov	r6, r5
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	da36      	bge.n	8004f36 <__kernel_rem_pio2+0x5ce>
 8004ec8:	f1bb 0f00 	cmp.w	fp, #0
 8004ecc:	d039      	beq.n	8004f42 <__kernel_rem_pio2+0x5da>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ed4:	9c01      	ldr	r4, [sp, #4]
 8004ed6:	e9c4 2300 	strd	r2, r3, [r4]
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004ee2:	f7fb f975 	bl	80001d0 <__aeabi_dsub>
 8004ee6:	ae4c      	add	r6, sp, #304	; 0x130
 8004ee8:	2401      	movs	r4, #1
 8004eea:	42a5      	cmp	r5, r4
 8004eec:	da2c      	bge.n	8004f48 <__kernel_rem_pio2+0x5e0>
 8004eee:	f1bb 0f00 	cmp.w	fp, #0
 8004ef2:	d002      	beq.n	8004efa <__kernel_rem_pio2+0x592>
 8004ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ef8:	4619      	mov	r1, r3
 8004efa:	9b01      	ldr	r3, [sp, #4]
 8004efc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004f00:	e7a5      	b.n	8004e4e <__kernel_rem_pio2+0x4e6>
 8004f02:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004f06:	eb0d 0403 	add.w	r4, sp, r3
 8004f0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004f0e:	2000      	movs	r0, #0
 8004f10:	2100      	movs	r1, #0
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	da09      	bge.n	8004f2a <__kernel_rem_pio2+0x5c2>
 8004f16:	f1bb 0f00 	cmp.w	fp, #0
 8004f1a:	d002      	beq.n	8004f22 <__kernel_rem_pio2+0x5ba>
 8004f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f20:	4619      	mov	r1, r3
 8004f22:	9b01      	ldr	r3, [sp, #4]
 8004f24:	e9c3 0100 	strd	r0, r1, [r3]
 8004f28:	e791      	b.n	8004e4e <__kernel_rem_pio2+0x4e6>
 8004f2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f2e:	f7fb f951 	bl	80001d4 <__adddf3>
 8004f32:	3d01      	subs	r5, #1
 8004f34:	e7ed      	b.n	8004f12 <__kernel_rem_pio2+0x5aa>
 8004f36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f3a:	f7fb f94b 	bl	80001d4 <__adddf3>
 8004f3e:	3e01      	subs	r6, #1
 8004f40:	e7c0      	b.n	8004ec4 <__kernel_rem_pio2+0x55c>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	e7c5      	b.n	8004ed4 <__kernel_rem_pio2+0x56c>
 8004f48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004f4c:	f7fb f942 	bl	80001d4 <__adddf3>
 8004f50:	3401      	adds	r4, #1
 8004f52:	e7ca      	b.n	8004eea <__kernel_rem_pio2+0x582>
 8004f54:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004f5c:	9b02      	ldr	r3, [sp, #8]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	9302      	str	r3, [sp, #8]
 8004f62:	4632      	mov	r2, r6
 8004f64:	463b      	mov	r3, r7
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb f933 	bl	80001d4 <__adddf3>
 8004f6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb f929 	bl	80001d0 <__aeabi_dsub>
 8004f7e:	4632      	mov	r2, r6
 8004f80:	463b      	mov	r3, r7
 8004f82:	f7fb f927 	bl	80001d4 <__adddf3>
 8004f86:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004f8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f8e:	ed8a 7b00 	vstr	d7, [sl]
 8004f92:	e76e      	b.n	8004e72 <__kernel_rem_pio2+0x50a>
 8004f94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	f7fb f916 	bl	80001d4 <__adddf3>
 8004fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb f90c 	bl	80001d0 <__aeabi_dsub>
 8004fb8:	4632      	mov	r2, r6
 8004fba:	463b      	mov	r3, r7
 8004fbc:	f7fb f90a 	bl	80001d4 <__adddf3>
 8004fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fc8:	ed84 7b00 	vstr	d7, [r4]
 8004fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fd0:	e755      	b.n	8004e7e <__kernel_rem_pio2+0x516>
 8004fd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004fd6:	f7fb f8fd 	bl	80001d4 <__adddf3>
 8004fda:	3d01      	subs	r5, #1
 8004fdc:	e759      	b.n	8004e92 <__kernel_rem_pio2+0x52a>
 8004fde:	9b01      	ldr	r3, [sp, #4]
 8004fe0:	9a01      	ldr	r2, [sp, #4]
 8004fe2:	601d      	str	r5, [r3, #0]
 8004fe4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004fe8:	605c      	str	r4, [r3, #4]
 8004fea:	609f      	str	r7, [r3, #8]
 8004fec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004ff0:	60d3      	str	r3, [r2, #12]
 8004ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ff6:	6110      	str	r0, [r2, #16]
 8004ff8:	6153      	str	r3, [r2, #20]
 8004ffa:	e728      	b.n	8004e4e <__kernel_rem_pio2+0x4e6>
 8004ffc:	41700000 	.word	0x41700000
 8005000:	3e700000 	.word	0x3e700000
 8005004:	00000000 	.word	0x00000000

08005008 <__kernel_sin>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	ed2d 8b04 	vpush	{d8-d9}
 8005010:	eeb0 8a41 	vmov.f32	s16, s2
 8005014:	eef0 8a61 	vmov.f32	s17, s3
 8005018:	ec55 4b10 	vmov	r4, r5, d0
 800501c:	b083      	sub	sp, #12
 800501e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005022:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005026:	9001      	str	r0, [sp, #4]
 8005028:	da06      	bge.n	8005038 <__kernel_sin+0x30>
 800502a:	ee10 0a10 	vmov	r0, s0
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb fd36 	bl	8000aa0 <__aeabi_d2iz>
 8005034:	2800      	cmp	r0, #0
 8005036:	d051      	beq.n	80050dc <__kernel_sin+0xd4>
 8005038:	4622      	mov	r2, r4
 800503a:	462b      	mov	r3, r5
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb fa7e 	bl	8000540 <__aeabi_dmul>
 8005044:	4682      	mov	sl, r0
 8005046:	468b      	mov	fp, r1
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	f7fb fa76 	bl	8000540 <__aeabi_dmul>
 8005054:	a341      	add	r3, pc, #260	; (adr r3, 800515c <__kernel_sin+0x154>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	4680      	mov	r8, r0
 800505c:	4689      	mov	r9, r1
 800505e:	4650      	mov	r0, sl
 8005060:	4659      	mov	r1, fp
 8005062:	f7fb fa6d 	bl	8000540 <__aeabi_dmul>
 8005066:	a33f      	add	r3, pc, #252	; (adr r3, 8005164 <__kernel_sin+0x15c>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f7fb f8b0 	bl	80001d0 <__aeabi_dsub>
 8005070:	4652      	mov	r2, sl
 8005072:	465b      	mov	r3, fp
 8005074:	f7fb fa64 	bl	8000540 <__aeabi_dmul>
 8005078:	a33c      	add	r3, pc, #240	; (adr r3, 800516c <__kernel_sin+0x164>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb f8a9 	bl	80001d4 <__adddf3>
 8005082:	4652      	mov	r2, sl
 8005084:	465b      	mov	r3, fp
 8005086:	f7fb fa5b 	bl	8000540 <__aeabi_dmul>
 800508a:	a33a      	add	r3, pc, #232	; (adr r3, 8005174 <__kernel_sin+0x16c>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f7fb f89e 	bl	80001d0 <__aeabi_dsub>
 8005094:	4652      	mov	r2, sl
 8005096:	465b      	mov	r3, fp
 8005098:	f7fb fa52 	bl	8000540 <__aeabi_dmul>
 800509c:	a337      	add	r3, pc, #220	; (adr r3, 800517c <__kernel_sin+0x174>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f7fb f897 	bl	80001d4 <__adddf3>
 80050a6:	9b01      	ldr	r3, [sp, #4]
 80050a8:	4606      	mov	r6, r0
 80050aa:	460f      	mov	r7, r1
 80050ac:	b9eb      	cbnz	r3, 80050ea <__kernel_sin+0xe2>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4650      	mov	r0, sl
 80050b4:	4659      	mov	r1, fp
 80050b6:	f7fb fa43 	bl	8000540 <__aeabi_dmul>
 80050ba:	a325      	add	r3, pc, #148	; (adr r3, 8005150 <__kernel_sin+0x148>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb f886 	bl	80001d0 <__aeabi_dsub>
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	f7fb fa3a 	bl	8000540 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4620      	mov	r0, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7fb f87e 	bl	80001d4 <__adddf3>
 80050d8:	4604      	mov	r4, r0
 80050da:	460d      	mov	r5, r1
 80050dc:	ec45 4b10 	vmov	d0, r4, r5
 80050e0:	b003      	add	sp, #12
 80050e2:	ecbd 8b04 	vpop	{d8-d9}
 80050e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <__kernel_sin+0x150>)
 80050ec:	ec51 0b18 	vmov	r0, r1, d8
 80050f0:	2200      	movs	r2, #0
 80050f2:	f7fb fa25 	bl	8000540 <__aeabi_dmul>
 80050f6:	4632      	mov	r2, r6
 80050f8:	ec41 0b19 	vmov	d9, r0, r1
 80050fc:	463b      	mov	r3, r7
 80050fe:	4640      	mov	r0, r8
 8005100:	4649      	mov	r1, r9
 8005102:	f7fb fa1d 	bl	8000540 <__aeabi_dmul>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	ec51 0b19 	vmov	r0, r1, d9
 800510e:	f7fb f85f 	bl	80001d0 <__aeabi_dsub>
 8005112:	4652      	mov	r2, sl
 8005114:	465b      	mov	r3, fp
 8005116:	f7fb fa13 	bl	8000540 <__aeabi_dmul>
 800511a:	ec53 2b18 	vmov	r2, r3, d8
 800511e:	f7fb f857 	bl	80001d0 <__aeabi_dsub>
 8005122:	a30b      	add	r3, pc, #44	; (adr r3, 8005150 <__kernel_sin+0x148>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	4606      	mov	r6, r0
 800512a:	460f      	mov	r7, r1
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb fa06 	bl	8000540 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb f84a 	bl	80001d4 <__adddf3>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
 8005148:	f7fb f842 	bl	80001d0 <__aeabi_dsub>
 800514c:	e7c4      	b.n	80050d8 <__kernel_sin+0xd0>
 800514e:	bf00      	nop
 8005150:	55555549 	.word	0x55555549
 8005154:	3fc55555 	.word	0x3fc55555
 8005158:	3fe00000 	.word	0x3fe00000
 800515c:	5acfd57c 	.word	0x5acfd57c
 8005160:	3de5d93a 	.word	0x3de5d93a
 8005164:	8a2b9ceb 	.word	0x8a2b9ceb
 8005168:	3e5ae5e6 	.word	0x3e5ae5e6
 800516c:	57b1fe7d 	.word	0x57b1fe7d
 8005170:	3ec71de3 	.word	0x3ec71de3
 8005174:	19c161d5 	.word	0x19c161d5
 8005178:	3f2a01a0 	.word	0x3f2a01a0
 800517c:	1110f8a6 	.word	0x1110f8a6
 8005180:	3f811111 	.word	0x3f811111

08005184 <fabs>:
 8005184:	ec51 0b10 	vmov	r0, r1, d0
 8005188:	ee10 2a10 	vmov	r2, s0
 800518c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005190:	ec43 2b10 	vmov	d0, r2, r3
 8005194:	4770      	bx	lr
	...

08005198 <floor>:
 8005198:	ec51 0b10 	vmov	r0, r1, d0
 800519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80051a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80051a8:	2e13      	cmp	r6, #19
 80051aa:	ee10 5a10 	vmov	r5, s0
 80051ae:	ee10 8a10 	vmov	r8, s0
 80051b2:	460c      	mov	r4, r1
 80051b4:	dc32      	bgt.n	800521c <floor+0x84>
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	da14      	bge.n	80051e4 <floor+0x4c>
 80051ba:	a333      	add	r3, pc, #204	; (adr r3, 8005288 <floor+0xf0>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f7fb f808 	bl	80001d4 <__adddf3>
 80051c4:	2200      	movs	r2, #0
 80051c6:	2300      	movs	r3, #0
 80051c8:	f7fb fc4a 	bl	8000a60 <__aeabi_dcmpgt>
 80051cc:	b138      	cbz	r0, 80051de <floor+0x46>
 80051ce:	2c00      	cmp	r4, #0
 80051d0:	da57      	bge.n	8005282 <floor+0xea>
 80051d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80051d6:	431d      	orrs	r5, r3
 80051d8:	d001      	beq.n	80051de <floor+0x46>
 80051da:	4c2d      	ldr	r4, [pc, #180]	; (8005290 <floor+0xf8>)
 80051dc:	2500      	movs	r5, #0
 80051de:	4621      	mov	r1, r4
 80051e0:	4628      	mov	r0, r5
 80051e2:	e025      	b.n	8005230 <floor+0x98>
 80051e4:	4f2b      	ldr	r7, [pc, #172]	; (8005294 <floor+0xfc>)
 80051e6:	4137      	asrs	r7, r6
 80051e8:	ea01 0307 	and.w	r3, r1, r7
 80051ec:	4303      	orrs	r3, r0
 80051ee:	d01f      	beq.n	8005230 <floor+0x98>
 80051f0:	a325      	add	r3, pc, #148	; (adr r3, 8005288 <floor+0xf0>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fa ffed 	bl	80001d4 <__adddf3>
 80051fa:	2200      	movs	r2, #0
 80051fc:	2300      	movs	r3, #0
 80051fe:	f7fb fc2f 	bl	8000a60 <__aeabi_dcmpgt>
 8005202:	2800      	cmp	r0, #0
 8005204:	d0eb      	beq.n	80051de <floor+0x46>
 8005206:	2c00      	cmp	r4, #0
 8005208:	bfbe      	ittt	lt
 800520a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800520e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005212:	19a4      	addlt	r4, r4, r6
 8005214:	ea24 0407 	bic.w	r4, r4, r7
 8005218:	2500      	movs	r5, #0
 800521a:	e7e0      	b.n	80051de <floor+0x46>
 800521c:	2e33      	cmp	r6, #51	; 0x33
 800521e:	dd0b      	ble.n	8005238 <floor+0xa0>
 8005220:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005224:	d104      	bne.n	8005230 <floor+0x98>
 8005226:	ee10 2a10 	vmov	r2, s0
 800522a:	460b      	mov	r3, r1
 800522c:	f7fa ffd2 	bl	80001d4 <__adddf3>
 8005230:	ec41 0b10 	vmov	d0, r0, r1
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005238:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	fa23 f707 	lsr.w	r7, r3, r7
 8005244:	4207      	tst	r7, r0
 8005246:	d0f3      	beq.n	8005230 <floor+0x98>
 8005248:	a30f      	add	r3, pc, #60	; (adr r3, 8005288 <floor+0xf0>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fa ffc1 	bl	80001d4 <__adddf3>
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	f7fb fc03 	bl	8000a60 <__aeabi_dcmpgt>
 800525a:	2800      	cmp	r0, #0
 800525c:	d0bf      	beq.n	80051de <floor+0x46>
 800525e:	2c00      	cmp	r4, #0
 8005260:	da02      	bge.n	8005268 <floor+0xd0>
 8005262:	2e14      	cmp	r6, #20
 8005264:	d103      	bne.n	800526e <floor+0xd6>
 8005266:	3401      	adds	r4, #1
 8005268:	ea25 0507 	bic.w	r5, r5, r7
 800526c:	e7b7      	b.n	80051de <floor+0x46>
 800526e:	2301      	movs	r3, #1
 8005270:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005274:	fa03 f606 	lsl.w	r6, r3, r6
 8005278:	4435      	add	r5, r6
 800527a:	4545      	cmp	r5, r8
 800527c:	bf38      	it	cc
 800527e:	18e4      	addcc	r4, r4, r3
 8005280:	e7f2      	b.n	8005268 <floor+0xd0>
 8005282:	2500      	movs	r5, #0
 8005284:	462c      	mov	r4, r5
 8005286:	e7aa      	b.n	80051de <floor+0x46>
 8005288:	8800759c 	.word	0x8800759c
 800528c:	7e37e43c 	.word	0x7e37e43c
 8005290:	bff00000 	.word	0xbff00000
 8005294:	000fffff 	.word	0x000fffff

08005298 <nan>:
 8005298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80052a0 <nan+0x8>
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	00000000 	.word	0x00000000
 80052a4:	7ff80000 	.word	0x7ff80000

080052a8 <scalbn>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	ec55 4b10 	vmov	r4, r5, d0
 80052ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052b2:	4606      	mov	r6, r0
 80052b4:	462b      	mov	r3, r5
 80052b6:	b99a      	cbnz	r2, 80052e0 <scalbn+0x38>
 80052b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052bc:	4323      	orrs	r3, r4
 80052be:	d036      	beq.n	800532e <scalbn+0x86>
 80052c0:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <scalbn+0x100>)
 80052c2:	4629      	mov	r1, r5
 80052c4:	ee10 0a10 	vmov	r0, s0
 80052c8:	2200      	movs	r2, #0
 80052ca:	f7fb f939 	bl	8000540 <__aeabi_dmul>
 80052ce:	4b37      	ldr	r3, [pc, #220]	; (80053ac <scalbn+0x104>)
 80052d0:	429e      	cmp	r6, r3
 80052d2:	4604      	mov	r4, r0
 80052d4:	460d      	mov	r5, r1
 80052d6:	da10      	bge.n	80052fa <scalbn+0x52>
 80052d8:	a32b      	add	r3, pc, #172	; (adr r3, 8005388 <scalbn+0xe0>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	e03a      	b.n	8005356 <scalbn+0xae>
 80052e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80052e4:	428a      	cmp	r2, r1
 80052e6:	d10c      	bne.n	8005302 <scalbn+0x5a>
 80052e8:	ee10 2a10 	vmov	r2, s0
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fa ff70 	bl	80001d4 <__adddf3>
 80052f4:	4604      	mov	r4, r0
 80052f6:	460d      	mov	r5, r1
 80052f8:	e019      	b.n	800532e <scalbn+0x86>
 80052fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80052fe:	460b      	mov	r3, r1
 8005300:	3a36      	subs	r2, #54	; 0x36
 8005302:	4432      	add	r2, r6
 8005304:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005308:	428a      	cmp	r2, r1
 800530a:	dd08      	ble.n	800531e <scalbn+0x76>
 800530c:	2d00      	cmp	r5, #0
 800530e:	a120      	add	r1, pc, #128	; (adr r1, 8005390 <scalbn+0xe8>)
 8005310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005314:	da1c      	bge.n	8005350 <scalbn+0xa8>
 8005316:	a120      	add	r1, pc, #128	; (adr r1, 8005398 <scalbn+0xf0>)
 8005318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800531c:	e018      	b.n	8005350 <scalbn+0xa8>
 800531e:	2a00      	cmp	r2, #0
 8005320:	dd08      	ble.n	8005334 <scalbn+0x8c>
 8005322:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005326:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800532a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800532e:	ec45 4b10 	vmov	d0, r4, r5
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005338:	da19      	bge.n	800536e <scalbn+0xc6>
 800533a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800533e:	429e      	cmp	r6, r3
 8005340:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005344:	dd0a      	ble.n	800535c <scalbn+0xb4>
 8005346:	a112      	add	r1, pc, #72	; (adr r1, 8005390 <scalbn+0xe8>)
 8005348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e2      	bne.n	8005316 <scalbn+0x6e>
 8005350:	a30f      	add	r3, pc, #60	; (adr r3, 8005390 <scalbn+0xe8>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fb f8f3 	bl	8000540 <__aeabi_dmul>
 800535a:	e7cb      	b.n	80052f4 <scalbn+0x4c>
 800535c:	a10a      	add	r1, pc, #40	; (adr r1, 8005388 <scalbn+0xe0>)
 800535e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0b8      	beq.n	80052d8 <scalbn+0x30>
 8005366:	a10e      	add	r1, pc, #56	; (adr r1, 80053a0 <scalbn+0xf8>)
 8005368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800536c:	e7b4      	b.n	80052d8 <scalbn+0x30>
 800536e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005372:	3236      	adds	r2, #54	; 0x36
 8005374:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005378:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800537c:	4620      	mov	r0, r4
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <scalbn+0x108>)
 8005380:	2200      	movs	r2, #0
 8005382:	e7e8      	b.n	8005356 <scalbn+0xae>
 8005384:	f3af 8000 	nop.w
 8005388:	c2f8f359 	.word	0xc2f8f359
 800538c:	01a56e1f 	.word	0x01a56e1f
 8005390:	8800759c 	.word	0x8800759c
 8005394:	7e37e43c 	.word	0x7e37e43c
 8005398:	8800759c 	.word	0x8800759c
 800539c:	fe37e43c 	.word	0xfe37e43c
 80053a0:	c2f8f359 	.word	0xc2f8f359
 80053a4:	81a56e1f 	.word	0x81a56e1f
 80053a8:	43500000 	.word	0x43500000
 80053ac:	ffff3cb0 	.word	0xffff3cb0
 80053b0:	3c900000 	.word	0x3c900000

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
