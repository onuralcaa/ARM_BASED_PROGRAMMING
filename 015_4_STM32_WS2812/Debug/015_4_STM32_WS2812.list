
015_4_STM32_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004464  08004464  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800446c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000070  080044dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080044dc  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000988b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a79  00000000  00000000  0002992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021314  00000000  00000000  0002c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4d8  00000000  00000000  0004db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8996  00000000  00000000  00058004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012099a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  001209ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042e4 	.word	0x080042e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080042e4 	.word	0x080042e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Reset_LEDs>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Reset_LEDs(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
	for(char i=0;i<MAX_LED;i++)
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	e019      	b.n	80005b4 <Reset_LEDs+0x40>
	{
		LED_Data[i][0] = 0;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <Reset_LEDs+0x54>)
 8000584:	2100      	movs	r1, #0
 8000586:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <Reset_LEDs+0x54>)
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <Reset_LEDs+0x54>)
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <Reset_LEDs+0x54>)
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	70da      	strb	r2, [r3, #3]
	for(char i=0;i<MAX_LED;i++)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3301      	adds	r3, #1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	d9e2      	bls.n	8000580 <Reset_LEDs+0xc>
	}

}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	2000012c 	.word	0x2000012c

080005cc <WS2812_Moving_Effect>:

void WS2812_Moving_Effect(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	char red, green, blue;

	red = rand();
 80005d2:	f002 fe4f 	bl	8003274 <rand>
 80005d6:	4603      	mov	r3, r0
 80005d8:	717b      	strb	r3, [r7, #5]
	green = rand();
 80005da:	f002 fe4b 	bl	8003274 <rand>
 80005de:	4603      	mov	r3, r0
 80005e0:	713b      	strb	r3, [r7, #4]
	blue = rand();
 80005e2:	f002 fe47 	bl	8003274 <rand>
 80005e6:	4603      	mov	r3, r0
 80005e8:	70fb      	strb	r3, [r7, #3]


	for(char i=0;i<MAX_LED;i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e00f      	b.n	8000610 <WS2812_Moving_Effect+0x44>
	{
		Reset_LEDs();
 80005f0:	f7ff ffc0 	bl	8000574 <Reset_LEDs>
		LED_Set_Data(i,red,green,blue);
 80005f4:	79f8      	ldrb	r0, [r7, #7]
 80005f6:	7979      	ldrb	r1, [r7, #5]
 80005f8:	793a      	ldrb	r2, [r7, #4]
 80005fa:	78fb      	ldrb	r3, [r7, #3]
 80005fc:	f000 f826 	bl	800064c <LED_Set_Data>
		WS2812_Write();
 8000600:	f000 f866 	bl	80006d0 <WS2812_Write>
		HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fcb5 	bl	8000f74 <HAL_Delay>
	for(char i=0;i<MAX_LED;i++)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	3301      	adds	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b07      	cmp	r3, #7
 8000614:	d9ec      	bls.n	80005f0 <WS2812_Moving_Effect+0x24>
	}


	for(char i=MAX_LED;i>=0;i--)
 8000616:	2308      	movs	r3, #8
 8000618:	71bb      	strb	r3, [r7, #6]
	{
		if(i>MAX_LED) break;
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d810      	bhi.n	8000642 <WS2812_Moving_Effect+0x76>
		Reset_LEDs();
 8000620:	f7ff ffa8 	bl	8000574 <Reset_LEDs>
		LED_Set_Data(i,red,green,blue);
 8000624:	79b8      	ldrb	r0, [r7, #6]
 8000626:	7979      	ldrb	r1, [r7, #5]
 8000628:	793a      	ldrb	r2, [r7, #4]
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f000 f80e 	bl	800064c <LED_Set_Data>
		WS2812_Write();
 8000630:	f000 f84e 	bl	80006d0 <WS2812_Write>
		HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f000 fc9d 	bl	8000f74 <HAL_Delay>
	for(char i=MAX_LED;i>=0;i--)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	3b01      	subs	r3, #1
 800063e:	71bb      	strb	r3, [r7, #6]
	{
 8000640:	e7eb      	b.n	800061a <WS2812_Moving_Effect+0x4e>
		if(i>MAX_LED) break;
 8000642:	bf00      	nop
	}

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <LED_Set_Data>:



void LED_Set_Data(int LEDnumber, int Red, int Green, int Blue)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnumber][0] = LEDnumber;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	b2d9      	uxtb	r1, r3
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <LED_Set_Data+0x58>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnumber][1] = Green;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <LED_Set_Data+0x58>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	460a      	mov	r2, r1
 8000674:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnumber][2] = Red;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	b2d9      	uxtb	r1, r3
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <LED_Set_Data+0x58>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnumber][3] = Blue;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2d9      	uxtb	r1, r3
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <LED_Set_Data+0x58>)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	460a      	mov	r2, r1
 8000694:	70da      	strb	r2, [r3, #3]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2000012c 	.word	0x2000012c

080006a8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80006b4:	f002 f85a 	bl	800276c <HAL_TIM_PWM_Stop_DMA>
	sendflag = 1;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	20000334 	.word	0x20000334

080006d0 <WS2812_Write>:

void WS2812_Write(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
	unsigned int index = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<MAX_LED;i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	e039      	b.n	8000754 <WS2812_Write+0x84>
	{
		color = ( (LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]) );
 80006e0:	4a30      	ldr	r2, [pc, #192]	; (80007a4 <WS2812_Write+0xd4>)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	041a      	lsls	r2, r3, #16
 80006ec:	492d      	ldr	r1, [pc, #180]	; (80007a4 <WS2812_Write+0xd4>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	789b      	ldrb	r3, [r3, #2]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	431a      	orrs	r2, r3
 80006fa:	492a      	ldr	r1, [pc, #168]	; (80007a4 <WS2812_Write+0xd4>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	4313      	orrs	r3, r2
 8000706:	461a      	mov	r2, r3
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <WS2812_Write+0xd8>)
 800070a:	601a      	str	r2, [r3, #0]

		for(int i=23;i>=0;i--)
 800070c:	2317      	movs	r3, #23
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	e01a      	b.n	8000748 <WS2812_Write+0x78>
		{
			if(color&(1<<i))
 8000712:	2201      	movs	r2, #1
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	461a      	mov	r2, r3
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <WS2812_Write+0xd8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4013      	ands	r3, r2
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <WS2812_Write+0x62>
			{
				pwmData[index] = 140;
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <WS2812_Write+0xdc>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	218c      	movs	r1, #140	; 0x8c
 800072c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000730:	e004      	b.n	800073c <WS2812_Write+0x6c>
			}
			else
			{
				pwmData[index] = 70;
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <WS2812_Write+0xdc>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2146      	movs	r1, #70	; 0x46
 8000738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			index++;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
		for(int i=23;i>=0;i--)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3b01      	subs	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	dae1      	bge.n	8000712 <WS2812_Write+0x42>
	for(int i=0;i<MAX_LED;i++)
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	3301      	adds	r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b07      	cmp	r3, #7
 8000758:	ddc2      	ble.n	80006e0 <WS2812_Write+0x10>
		}
	}

	for(int i=0;i<50;i++)
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	e00a      	b.n	8000776 <WS2812_Write+0xa6>
	{
		pwmData[index] = 0;
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <WS2812_Write+0xdc>)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2100      	movs	r1, #0
 8000766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<50;i++)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2b31      	cmp	r3, #49	; 0x31
 800077a:	ddf1      	ble.n	8000760 <WS2812_Write+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, index);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b29b      	uxth	r3, r3
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <WS2812_Write+0xdc>)
 8000782:	2100      	movs	r1, #0
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <WS2812_Write+0xe0>)
 8000786:	f001 fedf 	bl	8002548 <HAL_TIM_PWM_Start_DMA>
	while(!sendflag);
 800078a:	bf00      	nop
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <WS2812_Write+0xe4>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0fb      	beq.n	800078c <WS2812_Write+0xbc>
	sendflag = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <WS2812_Write+0xe4>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000012c 	.word	0x2000012c
 80007a8:	20000330 	.word	0x20000330
 80007ac:	2000014c 	.word	0x2000014c
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	20000334 	.word	0x20000334

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 fb68 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f83c 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f946 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c8:	f000 f924 	bl	8000a14 <MX_DMA_Init>
  MX_TIM1_Init();
 80007cc:	f000 f8a0 	bl	8000910 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LED_Set_Data(0,255,0,0);
 80007d0:	2300      	movs	r3, #0
 80007d2:	2200      	movs	r2, #0
 80007d4:	21ff      	movs	r1, #255	; 0xff
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff38 	bl	800064c <LED_Set_Data>
  LED_Set_Data(1,0,255,0);
 80007dc:	2300      	movs	r3, #0
 80007de:	22ff      	movs	r2, #255	; 0xff
 80007e0:	2100      	movs	r1, #0
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ff32 	bl	800064c <LED_Set_Data>
  LED_Set_Data(2,0,0,255);
 80007e8:	23ff      	movs	r3, #255	; 0xff
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2002      	movs	r0, #2
 80007f0:	f7ff ff2c 	bl	800064c <LED_Set_Data>
  LED_Set_Data(3,100,50,25);
 80007f4:	2319      	movs	r3, #25
 80007f6:	2232      	movs	r2, #50	; 0x32
 80007f8:	2164      	movs	r1, #100	; 0x64
 80007fa:	2003      	movs	r0, #3
 80007fc:	f7ff ff26 	bl	800064c <LED_Set_Data>
  LED_Set_Data(4,75,69,99);
 8000800:	2363      	movs	r3, #99	; 0x63
 8000802:	2245      	movs	r2, #69	; 0x45
 8000804:	214b      	movs	r1, #75	; 0x4b
 8000806:	2004      	movs	r0, #4
 8000808:	f7ff ff20 	bl	800064c <LED_Set_Data>
  LED_Set_Data(5,15,120,50);
 800080c:	2332      	movs	r3, #50	; 0x32
 800080e:	2278      	movs	r2, #120	; 0x78
 8000810:	210f      	movs	r1, #15
 8000812:	2005      	movs	r0, #5
 8000814:	f7ff ff1a 	bl	800064c <LED_Set_Data>
  LED_Set_Data(6,200,55,100);
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2237      	movs	r2, #55	; 0x37
 800081c:	21c8      	movs	r1, #200	; 0xc8
 800081e:	2006      	movs	r0, #6
 8000820:	f7ff ff14 	bl	800064c <LED_Set_Data>
  LED_Set_Data(7,50,50,50);
 8000824:	2332      	movs	r3, #50	; 0x32
 8000826:	2232      	movs	r2, #50	; 0x32
 8000828:	2132      	movs	r1, #50	; 0x32
 800082a:	2007      	movs	r0, #7
 800082c:	f7ff ff0e 	bl	800064c <LED_Set_Data>
  WS2812_Write();
 8000830:	f7ff ff4e 	bl	80006d0 <WS2812_Write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  WS2812_Moving_Effect();
 8000834:	f7ff feca 	bl	80005cc <WS2812_Moving_Effect>
 8000838:	e7fc      	b.n	8000834 <main+0x7c>
	...

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fd0a 	bl	8003264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a27      	ldr	r2, [pc, #156]	; (8000908 <SystemClock_Config+0xcc>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <SystemClock_Config+0xd0>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008b0:	23a8      	movs	r3, #168	; 0xa8
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 f9bb 	bl	8001c3c <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008cc:	f000 f8ea 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2105      	movs	r1, #5
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fc12 	bl	8002118 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008fa:	f000 f8d3 	bl	8000aa4 <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	; 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b092      	sub	sp, #72	; 0x48
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2220      	movs	r2, #32
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fc92 	bl	8003264 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <MX_TIM1_Init+0xfc>)
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <MX_TIM1_Init+0x100>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <MX_TIM1_Init+0xfc>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <MX_TIM1_Init+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <MX_TIM1_Init+0xfc>)
 8000954:	22d1      	movs	r2, #209	; 0xd1
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_TIM1_Init+0xfc>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <MX_TIM1_Init+0xfc>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_TIM1_Init+0xfc>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096a:	4828      	ldr	r0, [pc, #160]	; (8000a0c <MX_TIM1_Init+0xfc>)
 800096c:	f001 fdc0 	bl	80024f0 <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f895 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000986:	4619      	mov	r1, r3
 8000988:	4820      	ldr	r0, [pc, #128]	; (8000a0c <MX_TIM1_Init+0xfc>)
 800098a:	f002 fb73 	bl	8003074 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000994:	f000 f886 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_TIM1_Init+0xfc>)
 80009be:	f001 ff87 	bl	80028d0 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009c8:	f000 f86c 	bl	8000aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MX_TIM1_Init+0xfc>)
 80009f0:	f002 fbbc 	bl	800316c <HAL_TIMEx_ConfigBreakDeadTime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80009fa:	f000 f853 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <MX_TIM1_Init+0xfc>)
 8000a00:	f000 f8d2 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3748      	adds	r7, #72	; 0x48
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	40010000 	.word	0x40010000

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2039      	movs	r0, #57	; 0x39
 8000a3c:	f000 fb99 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a40:	2039      	movs	r0, #57	; 0x39
 8000a42:	f000 fbb2 	bl	80011aa <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_GPIO_Init+0x4c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0x4c>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_GPIO_Init+0x4c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_GPIO_Init+0x4c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <MX_GPIO_Init+0x4c>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_GPIO_Init+0x4c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_TIM_PWM_MspInit+0x98>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d13d      	bne.n	8000b8e <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_TIM_PWM_MspInit+0x9c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <HAL_TIM_PWM_MspInit+0x9c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <HAL_TIM_PWM_MspInit+0x9c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b30:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_TIM_PWM_MspInit+0xa4>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b36:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000b3a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b3e:	2240      	movs	r2, #64	; 0x40
 8000b40:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b56:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b74:	f000 fb34 	bl	80011e0 <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000b7e:	f7ff ff91 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	200000cc 	.word	0x200000cc
 8000ba4:	40026428 	.word	0x40026428

08000ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_TIM_MspPostInit+0x68>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d11e      	bne.n	8000c08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_TIM_MspPostInit+0x6c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_TIM_MspPostInit+0x6c>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_TIM_MspPostInit+0x6c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_TIM_MspPostInit+0x70>)
 8000c04:	f000 fe7e 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40010000 	.word	0x40010000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40021000 	.word	0x40021000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f964 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <DMA2_Stream1_IRQHandler+0x10>)
 8000c76:	f000 fbdb 	bl	8001430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000cc 	.word	0x200000cc

08000c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_kill>:

int _kill(int pid, int sig)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c9e:	f002 fab7 	bl	8003210 <__errno>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2216      	movs	r2, #22
 8000ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_exit>:

void _exit (int status)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe7 	bl	8000c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cc6:	e7fe      	b.n	8000cc6 <_exit+0x12>

08000cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
	}
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f002 fa1c 	bl	8003210 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000338 	.word	0x20000338
 8000e0c:	20000350 	.word	0x20000350

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SystemInit+0x28>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <SystemInit+0x28>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x28>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
  ldr  r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd3 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f002 f9d7 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fca3 	bl	80007b8 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e78:	0800446c 	.word	0x0800446c
  ldr  r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e80:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e84:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e88:	20000350 	.word	0x20000350

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f94f 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fdf4 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f967 	bl	80011c6 <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f92f 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	2000033c 	.word	0x2000033c

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000033c 	.word	0x2000033c

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff3e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff feb6 	bl	8000f5c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e099      	b.n	8001330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121c:	e00f      	b.n	800123e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121e:	f7ff fe9d 	bl	8000f5c <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b05      	cmp	r3, #5
 800122a:	d908      	bls.n	800123e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2220      	movs	r2, #32
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e078      	b.n	8001330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e8      	bne.n	800121e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <HAL_DMA_Init+0x158>)
 8001258:	4013      	ands	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4313      	orrs	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2b04      	cmp	r3, #4
 8001296:	d107      	bne.n	80012a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4313      	orrs	r3, r2
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f023 0307 	bic.w	r3, r3, #7
 80012be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d117      	bne.n	8001302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4313      	orrs	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00e      	beq.n	8001302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 fa91 	bl	800180c <DMA_CheckFifoParam>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2240      	movs	r2, #64	; 0x40
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012fe:	2301      	movs	r3, #1
 8001300:	e016      	b.n	8001330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fa48 	bl	80017a0 <DMA_CalcBaseAndBitshift>
 8001310:	4603      	mov	r3, r0
 8001312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	223f      	movs	r2, #63	; 0x3f
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	f010803f 	.word	0xf010803f

0800133c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_DMA_Start_IT+0x26>
 800135e:	2302      	movs	r3, #2
 8001360:	e040      	b.n	80013e4 <HAL_DMA_Start_IT+0xa8>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d12f      	bne.n	80013d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2202      	movs	r2, #2
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f9da 	bl	8001744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	409a      	lsls	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0216 	orr.w	r2, r2, #22
 80013aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0208 	orr.w	r2, r2, #8
 80013c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e005      	b.n	80013e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013de:	2302      	movs	r3, #2
 80013e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d004      	beq.n	800140a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00c      	b.n	8001424 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2205      	movs	r2, #5
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800143c:	4b8e      	ldr	r3, [pc, #568]	; (8001678 <HAL_DMA_IRQHandler+0x248>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a8e      	ldr	r2, [pc, #568]	; (800167c <HAL_DMA_IRQHandler+0x24c>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0a9b      	lsrs	r3, r3, #10
 8001448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	2208      	movs	r2, #8
 800145c:	409a      	lsls	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01a      	beq.n	800149c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2208      	movs	r2, #8
 800148a:	409a      	lsls	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2201      	movs	r2, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d012      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2201      	movs	r2, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	f043 0202 	orr.w	r2, r3, #2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2204      	movs	r2, #4
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f4:	2204      	movs	r2, #4
 80014f6:	409a      	lsls	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001500:	f043 0204 	orr.w	r2, r3, #4
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2210      	movs	r2, #16
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d043      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03c      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	2210      	movs	r2, #16
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d018      	beq.n	8001572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d024      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
 800155e:	e01f      	b.n	80015a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01b      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
 8001570:	e016      	b.n	80015a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0208 	bic.w	r2, r2, #8
 800158e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	2220      	movs	r2, #32
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 808f 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8087 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	2220      	movs	r2, #32
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d136      	bne.n	8001648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0216 	bic.w	r2, r2, #22
 80015e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <HAL_DMA_IRQHandler+0x1da>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0208 	bic.w	r2, r2, #8
 8001618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	223f      	movs	r2, #63	; 0x3f
 8001620:	409a      	lsls	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07e      	beq.n	800173c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
        }
        return;
 8001646:	e079      	b.n	800173c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01d      	beq.n	8001692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	2b00      	cmp	r3, #0
 800166a:	d031      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
 8001674:	e02c      	b.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000
 800167c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d023      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e01e      	b.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10f      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0210 	bic.w	r2, r2, #16
 80016ae:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d032      	beq.n	800173e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d022      	beq.n	800172a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2205      	movs	r2, #5
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3301      	adds	r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	d307      	bcc.n	8001718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f2      	bne.n	80016fc <HAL_DMA_IRQHandler+0x2cc>
 8001716:	e000      	b.n	800171a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001718:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
 800173a:	e000      	b.n	800173e <HAL_DMA_IRQHandler+0x30e>
        return;
 800173c:	bf00      	nop
    }
  }
}
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b40      	cmp	r3, #64	; 0x40
 8001770:	d108      	bne.n	8001784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001782:	e007      	b.n	8001794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b10      	subs	r3, #16
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <DMA_CalcBaseAndBitshift+0x64>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <DMA_CalcBaseAndBitshift+0x68>)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d909      	bls.n	80017e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	659a      	str	r2, [r3, #88]	; 0x58
 80017e0:	e007      	b.n	80017f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	aaaaaaab 	.word	0xaaaaaaab
 8001808:	0800430c 	.word	0x0800430c

0800180c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11f      	bne.n	8001866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d856      	bhi.n	80018da <DMA_CheckFifoParam+0xce>
 800182c:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <DMA_CheckFifoParam+0x28>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001845 	.word	0x08001845
 8001838:	08001857 	.word	0x08001857
 800183c:	08001845 	.word	0x08001845
 8001840:	080018db 	.word	0x080018db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d046      	beq.n	80018de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001854:	e043      	b.n	80018de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800185e:	d140      	bne.n	80018e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001864:	e03d      	b.n	80018e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186e:	d121      	bne.n	80018b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d837      	bhi.n	80018e6 <DMA_CheckFifoParam+0xda>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <DMA_CheckFifoParam+0x70>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001893 	.word	0x08001893
 8001884:	0800188d 	.word	0x0800188d
 8001888:	080018a5 	.word	0x080018a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
      break;
 8001890:	e030      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d025      	beq.n	80018ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a2:	e022      	b.n	80018ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ac:	d11f      	bne.n	80018ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018b2:	e01c      	b.n	80018ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d903      	bls.n	80018c2 <DMA_CheckFifoParam+0xb6>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d003      	beq.n	80018c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018c0:	e018      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
      break;
 80018c6:	e015      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      break;
 80018d8:	e00b      	b.n	80018f2 <DMA_CheckFifoParam+0xe6>
      break;
 80018da:	bf00      	nop
 80018dc:	e00a      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018de:	bf00      	nop
 80018e0:	e008      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018e2:	bf00      	nop
 80018e4:	e006      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
 80018e8:	e004      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e002      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
    }
  } 
  
  return status; 
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e16b      	b.n	8001bf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 815a 	bne.w	8001bf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d00b      	beq.n	800195e <HAL_GPIO_Init+0x5a>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001952:	2b11      	cmp	r3, #17
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b12      	cmp	r3, #18
 800195c:	d130      	bne.n	80019c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0xfc>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b12      	cmp	r3, #18
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80b4 	beq.w	8001bf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a5f      	ldr	r2, [pc, #380]	; (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	; (8001c14 <HAL_GPIO_Init+0x310>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x314>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d02b      	beq.n	8001b2a <HAL_GPIO_Init+0x226>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a51      	ldr	r2, [pc, #324]	; (8001c1c <HAL_GPIO_Init+0x318>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d025      	beq.n	8001b26 <HAL_GPIO_Init+0x222>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a50      	ldr	r2, [pc, #320]	; (8001c20 <HAL_GPIO_Init+0x31c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01f      	beq.n	8001b22 <HAL_GPIO_Init+0x21e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x320>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x216>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x328>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x212>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x32c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	; (8001c34 <HAL_GPIO_Init+0x330>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x20a>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	; (8001c14 <HAL_GPIO_Init+0x310>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6e:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae90 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e25e      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d075      	beq.n	8001d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d00c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b82      	ldr	r3, [pc, #520]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x108>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d157      	bne.n	8001d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e239      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x74>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x98>
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cd4:	4b69      	ldr	r3, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a68      	ldr	r2, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f932 	bl	8000f5c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f92e 	bl	8000f5c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1fe      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xc0>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f91e 	bl	8000f5c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff f91a 	bl	8000f5c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1ea      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0xe8>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d52:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e1be      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_OscConfig+0x244>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff f8d3 	bl	8000f5c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff f8cf 	bl	8000f5c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e19f      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4925      	ldr	r1, [pc, #148]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x244>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f8b2 	bl	8000f5c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f8ae 	bl	8000f5c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e17e      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d036      	beq.n	8001e94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x248>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f892 	bl	8000f5c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f88e 	bl	8000f5c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e15e      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x200>
 8001e5a:	e01b      	b.n	8001e94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x248>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff f87b 	bl	8000f5c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	e00e      	b.n	8001e88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f877 	bl	8000f5c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d907      	bls.n	8001e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e147      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470000 	.word	0x42470000
 8001e84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ea      	bne.n	8001e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8097 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b81      	ldr	r3, [pc, #516]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b7d      	ldr	r3, [pc, #500]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a7c      	ldr	r2, [pc, #496]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a73      	ldr	r2, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f837 	bl	8000f5c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff f833 	bl	8000f5c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e103      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2ea>
 8001f18:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x324>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x30c>
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a5b      	ldr	r2, [pc, #364]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0x324>
 8001f48:	4b58      	ldr	r3, [pc, #352]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 0304 	bic.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fff8 	bl	8000f5c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe fff4 	bl	8000f5c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0c2      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	4b49      	ldr	r3, [pc, #292]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ee      	beq.n	8001f70 <HAL_RCC_OscConfig+0x334>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7fe ffe2 	bl	8000f5c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7fe ffde 	bl	8000f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0ac      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ee      	bne.n	8001f9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a38      	ldr	r2, [pc, #224]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8098 	beq.w	800210a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d05c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d141      	bne.n	8002072 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ffb2 	bl	8000f5c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe ffae 	bl	8000f5c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e07e      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	491b      	ldr	r1, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x478>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe ff87 	bl	8000f5c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe ff83 	bl	8000f5c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e053      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x416>
 8002070:	e04b      	b.n	800210a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_OscConfig+0x478>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe ff70 	bl	8000f5c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe ff6c 	bl	8000f5c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e03c      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x444>
 800209e:	e034      	b.n	800210a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e02f      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d11c      	bne.n	8002106 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e0:	4013      	ands	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10d      	bne.n	8002106 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0cc      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d90c      	bls.n	8002154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800218e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d044      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d119      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e067      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4934      	ldr	r1, [pc, #208]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fea8 	bl	8000f5c <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fea4 	bl	8000f5c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d20c      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fe08 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	080042fc 	.word	0x080042fc
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b094      	sub	sp, #80	; 0x50
 80022ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	647b      	str	r3, [r7, #68]	; 0x44
 80022f0:	2300      	movs	r3, #0
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fc:	4b79      	ldr	r3, [pc, #484]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d00d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x40>
 8002308:	2b08      	cmp	r3, #8
 800230a:	f200 80e1 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x3a>
 8002316:	e0db      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800231c:	e0db      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002322:	e0d8      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
 8002344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
 8002352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002356:	4622      	mov	r2, r4
 8002358:	462b      	mov	r3, r5
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4621      	mov	r1, r4
 8002370:	1a51      	subs	r1, r2, r1
 8002372:	6139      	str	r1, [r7, #16]
 8002374:	4629      	mov	r1, r5
 8002376:	eb63 0301 	sbc.w	r3, r3, r1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002388:	4659      	mov	r1, fp
 800238a:	018b      	lsls	r3, r1, #6
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002392:	4651      	mov	r1, sl
 8002394:	018a      	lsls	r2, r1, #6
 8002396:	4651      	mov	r1, sl
 8002398:	ebb2 0801 	subs.w	r8, r2, r1
 800239c:	4659      	mov	r1, fp
 800239e:	eb63 0901 	sbc.w	r9, r3, r1
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	eb18 0303 	adds.w	r3, r8, r3
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	462b      	mov	r3, r5
 80023c4:	eb49 0303 	adc.w	r3, r9, r3
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023d6:	4629      	mov	r1, r5
 80023d8:	024b      	lsls	r3, r1, #9
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023e0:	4621      	mov	r1, r4
 80023e2:	024a      	lsls	r2, r1, #9
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023f4:	f7fd ff3c 	bl	8000270 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002400:	e058      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	2200      	movs	r2, #0
 800240a:	4618      	mov	r0, r3
 800240c:	4611      	mov	r1, r2
 800240e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800241c:	4642      	mov	r2, r8
 800241e:	464b      	mov	r3, r9
 8002420:	f04f 0000 	mov.w	r0, #0
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	0159      	lsls	r1, r3, #5
 800242a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800242e:	0150      	lsls	r0, r2, #5
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4641      	mov	r1, r8
 8002436:	ebb2 0a01 	subs.w	sl, r2, r1
 800243a:	4649      	mov	r1, r9
 800243c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800244c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002454:	ebb2 040a 	subs.w	r4, r2, sl
 8002458:	eb63 050b 	sbc.w	r5, r3, fp
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	00eb      	lsls	r3, r5, #3
 8002466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800246a:	00e2      	lsls	r2, r4, #3
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4643      	mov	r3, r8
 8002472:	18e3      	adds	r3, r4, r3
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	464b      	mov	r3, r9
 8002478:	eb45 0303 	adc.w	r3, r5, r3
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800248a:	4629      	mov	r1, r5
 800248c:	028b      	lsls	r3, r1, #10
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002494:	4621      	mov	r1, r4
 8002496:	028a      	lsls	r2, r1, #10
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	61fa      	str	r2, [r7, #28]
 80024a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a8:	f7fd fee2 	bl	8000270 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3750      	adds	r7, #80	; 0x50
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200

080024f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e01d      	b.n	800253e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe faf2 	bl	8000b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 fb2a 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d101      	bne.n	8002566 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
 8002564:	e0f3      	b.n	800274e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10b      	bne.n	800258a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start_DMA+0x3a>
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0e5      	b.n	800274e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b0c      	cmp	r3, #12
 800258e:	f200 80ad 	bhi.w	80026ec <HAL_TIM_PWM_Start_DMA+0x1a4>
 8002592:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080026ed 	.word	0x080026ed
 80025a0:	080026ed 	.word	0x080026ed
 80025a4:	080026ed 	.word	0x080026ed
 80025a8:	08002615 	.word	0x08002615
 80025ac:	080026ed 	.word	0x080026ed
 80025b0:	080026ed 	.word	0x080026ed
 80025b4:	080026ed 	.word	0x080026ed
 80025b8:	0800265d 	.word	0x0800265d
 80025bc:	080026ed 	.word	0x080026ed
 80025c0:	080026ed 	.word	0x080026ed
 80025c4:	080026ed 	.word	0x080026ed
 80025c8:	080026a5 	.word	0x080026a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	4a61      	ldr	r2, [pc, #388]	; (8002758 <HAL_TIM_PWM_Start_DMA+0x210>)
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	4a60      	ldr	r2, [pc, #384]	; (800275c <HAL_TIM_PWM_Start_DMA+0x214>)
 80025da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x218>)
 80025e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3334      	adds	r3, #52	; 0x34
 80025f0:	461a      	mov	r2, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	f7fe fea2 	bl	800133c <HAL_DMA_Start_IT>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0a5      	b.n	800274e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	60da      	str	r2, [r3, #12]
      break;
 8002612:	e06c      	b.n	80026ee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_TIM_PWM_Start_DMA+0x210>)
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_TIM_PWM_Start_DMA+0x214>)
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	4a4d      	ldr	r2, [pc, #308]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x218>)
 800262a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3338      	adds	r3, #56	; 0x38
 8002638:	461a      	mov	r2, r3
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	f7fe fe7e 	bl	800133c <HAL_DMA_Start_IT>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e081      	b.n	800274e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002658:	60da      	str	r2, [r3, #12]
      break;
 800265a:	e048      	b.n	80026ee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <HAL_TIM_PWM_Start_DMA+0x210>)
 8002662:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4a3c      	ldr	r2, [pc, #240]	; (800275c <HAL_TIM_PWM_Start_DMA+0x214>)
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x218>)
 8002672:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	333c      	adds	r3, #60	; 0x3c
 8002680:	461a      	mov	r2, r3
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	f7fe fe5a 	bl	800133c <HAL_DMA_Start_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e05d      	b.n	800274e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a0:	60da      	str	r2, [r3, #12]
      break;
 80026a2:	e024      	b.n	80026ee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <HAL_TIM_PWM_Start_DMA+0x210>)
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a2a      	ldr	r2, [pc, #168]	; (800275c <HAL_TIM_PWM_Start_DMA+0x214>)
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x218>)
 80026ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3340      	adds	r3, #64	; 0x40
 80026c8:	461a      	mov	r2, r3
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	f7fe fe36 	bl	800133c <HAL_DMA_Start_IT>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e039      	b.n	800274e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026e8:	60da      	str	r2, [r3, #12]
      break;
 80026ea:	e000      	b.n	80026ee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80026ec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fc96 	bl	8003028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_TIM_PWM_Start_DMA+0x220>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d007      	beq.n	800274c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	08002aa9 	.word	0x08002aa9
 800275c:	08002b19 	.word	0x08002b19
 8002760:	08002a85 	.word	0x08002a85
 8002764:	40010000 	.word	0x40010000
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d855      	bhi.n	8002828 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800277c:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800277e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002782:	bf00      	nop
 8002784:	080027b9 	.word	0x080027b9
 8002788:	08002829 	.word	0x08002829
 800278c:	08002829 	.word	0x08002829
 8002790:	08002829 	.word	0x08002829
 8002794:	080027d5 	.word	0x080027d5
 8002798:	08002829 	.word	0x08002829
 800279c:	08002829 	.word	0x08002829
 80027a0:	08002829 	.word	0x08002829
 80027a4:	080027f1 	.word	0x080027f1
 80027a8:	08002829 	.word	0x08002829
 80027ac:	08002829 	.word	0x08002829
 80027b0:	08002829 	.word	0x08002829
 80027b4:	0800280d 	.word	0x0800280d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fe0d 	bl	80013ec <HAL_DMA_Abort_IT>
      break;
 80027d2:	e02a      	b.n	800282a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fdff 	bl	80013ec <HAL_DMA_Abort_IT>
      break;
 80027ee:	e01c      	b.n	800282a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fdf1 	bl	80013ec <HAL_DMA_Abort_IT>
      break;
 800280a:	e00e      	b.n	800282a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800281a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fde3 	bl	80013ec <HAL_DMA_Abort_IT>
      break;
 8002826:	e000      	b.n	800282a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8002828:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	6839      	ldr	r1, [r7, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fbf8 	bl	8003028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <HAL_TIM_PWM_Stop_DMA+0x15c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_TIM_PWM_Stop_DMA+0x160>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_TIM_PWM_Stop_DMA+0xe4>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d017      	beq.n	8002886 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	f240 4344 	movw	r3, #1092	; 0x444
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a1a      	ldr	r2, [r3, #32]
 800288c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	f240 4344 	movw	r3, #1092	; 0x444
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e0b4      	b.n	8002a54 <HAL_TIM_PWM_ConfigChannel+0x184>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	f200 809f 	bhi.w	8002a40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002902:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002a41 	.word	0x08002a41
 8002910:	08002a41 	.word	0x08002a41
 8002914:	08002a41 	.word	0x08002a41
 8002918:	0800297d 	.word	0x0800297d
 800291c:	08002a41 	.word	0x08002a41
 8002920:	08002a41 	.word	0x08002a41
 8002924:	08002a41 	.word	0x08002a41
 8002928:	080029bf 	.word	0x080029bf
 800292c:	08002a41 	.word	0x08002a41
 8002930:	08002a41 	.word	0x08002a41
 8002934:	08002a41 	.word	0x08002a41
 8002938:	080029ff 	.word	0x080029ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f9c0 	bl	8002cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0208 	orr.w	r2, r2, #8
 8002956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0204 	bic.w	r2, r2, #4
 8002966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6999      	ldr	r1, [r3, #24]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	619a      	str	r2, [r3, #24]
      break;
 800297a:	e062      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fa10 	bl	8002da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6999      	ldr	r1, [r3, #24]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	021a      	lsls	r2, r3, #8
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
      break;
 80029bc:	e041      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fa65 	bl	8002e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0208 	orr.w	r2, r2, #8
 80029d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0204 	bic.w	r2, r2, #4
 80029e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69d9      	ldr	r1, [r3, #28]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]
      break;
 80029fc:	e021      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fab9 	bl	8002f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	021a      	lsls	r2, r3, #8
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	61da      	str	r2, [r3, #28]
      break;
 8002a3e:	e000      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ffe8 	bl	8002a70 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d103      	bne.n	8002ad0 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	771a      	strb	r2, [r3, #28]
 8002ace:	e019      	b.n	8002b04 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d103      	bne.n	8002ae2 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	771a      	strb	r2, [r3, #28]
 8002ae0:	e010      	b.n	8002b04 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d103      	bne.n	8002af4 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2204      	movs	r2, #4
 8002af0:	771a      	strb	r2, [r3, #28]
 8002af2:	e007      	b.n	8002b04 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d102      	bne.n	8002b04 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2208      	movs	r2, #8
 8002b02:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7fd fdcf 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d103      	bne.n	8002b40 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	771a      	strb	r2, [r3, #28]
 8002b3e:	e019      	b.n	8002b74 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d103      	bne.n	8002b52 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	771a      	strb	r2, [r3, #28]
 8002b50:	e010      	b.n	8002b74 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d103      	bne.n	8002b64 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	771a      	strb	r2, [r3, #28]
 8002b62:	e007      	b.n	8002b74 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d102      	bne.n	8002b74 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2208      	movs	r2, #8
 8002b72:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ff71 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a40      	ldr	r2, [pc, #256]	; (8002c9c <TIM_Base_SetConfig+0x114>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d00f      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <TIM_Base_SetConfig+0x118>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <TIM_Base_SetConfig+0x120>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3a      	ldr	r2, [pc, #232]	; (8002cac <TIM_Base_SetConfig+0x124>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <TIM_Base_SetConfig+0x114>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02b      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d027      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <TIM_Base_SetConfig+0x118>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d023      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <TIM_Base_SetConfig+0x120>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01b      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <TIM_Base_SetConfig+0x124>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d017      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <TIM_Base_SetConfig+0x128>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <TIM_Base_SetConfig+0x12c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00f      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <TIM_Base_SetConfig+0x130>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <TIM_Base_SetConfig+0x134>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <TIM_Base_SetConfig+0x138>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <TIM_Base_SetConfig+0x13c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <TIM_Base_SetConfig+0x114>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <TIM_Base_SetConfig+0xf8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <TIM_Base_SetConfig+0x124>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	40000c00 	.word	0x40000c00
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40014400 	.word	0x40014400
 8002cb8:	40014800 	.word	0x40014800
 8002cbc:	40001800 	.word	0x40001800
 8002cc0:	40001c00 	.word	0x40001c00
 8002cc4:	40002000 	.word	0x40002000

08002cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0201 	bic.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 0302 	bic.w	r3, r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <TIM_OC1_SetConfig+0xd8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_OC1_SetConfig+0x64>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <TIM_OC1_SetConfig+0xdc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d10c      	bne.n	8002d46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0308 	bic.w	r3, r3, #8
 8002d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <TIM_OC1_SetConfig+0xd8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_OC1_SetConfig+0x8e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <TIM_OC1_SetConfig+0xdc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d111      	bne.n	8002d7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010400 	.word	0x40010400

08002da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0320 	bic.w	r3, r3, #32
 8002df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <TIM_OC2_SetConfig+0xe4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_OC2_SetConfig+0x68>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <TIM_OC2_SetConfig+0xe8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10d      	bne.n	8002e2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <TIM_OC2_SetConfig+0xe4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_OC2_SetConfig+0x94>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <TIM_OC2_SetConfig+0xe8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d113      	bne.n	8002e64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40010400 	.word	0x40010400

08002e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <TIM_OC3_SetConfig+0xe0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC3_SetConfig+0x66>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <TIM_OC3_SetConfig+0xe4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10d      	bne.n	8002f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <TIM_OC3_SetConfig+0xe0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_OC3_SetConfig+0x92>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <TIM_OC3_SetConfig+0xe4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d113      	bne.n	8002f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010400 	.word	0x40010400

08002f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <TIM_OC4_SetConfig+0xa4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x68>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a11      	ldr	r2, [pc, #68]	; (8003024 <TIM_OC4_SetConfig+0xa8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d109      	bne.n	8002ff8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40010400 	.word	0x40010400

08003028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2201      	movs	r2, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003088:	2302      	movs	r3, #2
 800308a:	e05a      	b.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d01d      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40010400 	.word	0x40010400
 8003164:	40014000 	.word	0x40014000
 8003168:	40001800 	.word	0x40001800

0800316c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003184:	2302      	movs	r3, #2
 8003186:	e03d      	b.n	8003204 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	2000000c 	.word	0x2000000c

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4d0d      	ldr	r5, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2600      	movs	r6, #0
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4d0b      	ldr	r5, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f001 f858 	bl	80042e4 <_init>
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2600      	movs	r6, #0
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08004464 	.word	0x08004464
 8003258:	08004464 	.word	0x08004464
 800325c:	08004464 	.word	0x08004464
 8003260:	08004468 	.word	0x08004468

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <rand>:
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <rand+0x5c>)
 8003276:	b510      	push	{r4, lr}
 8003278:	681c      	ldr	r4, [r3, #0]
 800327a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800327c:	b9b3      	cbnz	r3, 80032ac <rand+0x38>
 800327e:	2018      	movs	r0, #24
 8003280:	f000 f866 	bl	8003350 <malloc>
 8003284:	63a0      	str	r0, [r4, #56]	; 0x38
 8003286:	b928      	cbnz	r0, 8003294 <rand+0x20>
 8003288:	4602      	mov	r2, r0
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <rand+0x60>)
 800328c:	4812      	ldr	r0, [pc, #72]	; (80032d8 <rand+0x64>)
 800328e:	214e      	movs	r1, #78	; 0x4e
 8003290:	f000 f82e 	bl	80032f0 <__assert_func>
 8003294:	4a11      	ldr	r2, [pc, #68]	; (80032dc <rand+0x68>)
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <rand+0x6c>)
 8003298:	e9c0 2300 	strd	r2, r3, [r0]
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <rand+0x70>)
 800329e:	6083      	str	r3, [r0, #8]
 80032a0:	230b      	movs	r3, #11
 80032a2:	8183      	strh	r3, [r0, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	2300      	movs	r3, #0
 80032a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80032ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <rand+0x74>)
 80032b0:	6920      	ldr	r0, [r4, #16]
 80032b2:	6963      	ldr	r3, [r4, #20]
 80032b4:	490d      	ldr	r1, [pc, #52]	; (80032ec <rand+0x78>)
 80032b6:	4342      	muls	r2, r0
 80032b8:	fb01 2203 	mla	r2, r1, r3, r2
 80032bc:	fba0 0101 	umull	r0, r1, r0, r1
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	eb42 0001 	adc.w	r0, r2, r1
 80032c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80032ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80032ce:	bd10      	pop	{r4, pc}
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	08004318 	.word	0x08004318
 80032d8:	0800432f 	.word	0x0800432f
 80032dc:	abcd330e 	.word	0xabcd330e
 80032e0:	e66d1234 	.word	0xe66d1234
 80032e4:	0005deec 	.word	0x0005deec
 80032e8:	5851f42d 	.word	0x5851f42d
 80032ec:	4c957f2d 	.word	0x4c957f2d

080032f0 <__assert_func>:
 80032f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032f2:	4614      	mov	r4, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <__assert_func+0x2c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4605      	mov	r5, r0
 80032fc:	68d8      	ldr	r0, [r3, #12]
 80032fe:	b14c      	cbz	r4, 8003314 <__assert_func+0x24>
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <__assert_func+0x30>)
 8003302:	9100      	str	r1, [sp, #0]
 8003304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003308:	4906      	ldr	r1, [pc, #24]	; (8003324 <__assert_func+0x34>)
 800330a:	462b      	mov	r3, r5
 800330c:	f000 f80e 	bl	800332c <fiprintf>
 8003310:	f000 fcc4 	bl	8003c9c <abort>
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__assert_func+0x38>)
 8003316:	461c      	mov	r4, r3
 8003318:	e7f3      	b.n	8003302 <__assert_func+0x12>
 800331a:	bf00      	nop
 800331c:	2000000c 	.word	0x2000000c
 8003320:	0800438a 	.word	0x0800438a
 8003324:	08004397 	.word	0x08004397
 8003328:	080043c5 	.word	0x080043c5

0800332c <fiprintf>:
 800332c:	b40e      	push	{r1, r2, r3}
 800332e:	b503      	push	{r0, r1, lr}
 8003330:	4601      	mov	r1, r0
 8003332:	ab03      	add	r3, sp, #12
 8003334:	4805      	ldr	r0, [pc, #20]	; (800334c <fiprintf+0x20>)
 8003336:	f853 2b04 	ldr.w	r2, [r3], #4
 800333a:	6800      	ldr	r0, [r0, #0]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	f000 f919 	bl	8003574 <_vfiprintf_r>
 8003342:	b002      	add	sp, #8
 8003344:	f85d eb04 	ldr.w	lr, [sp], #4
 8003348:	b003      	add	sp, #12
 800334a:	4770      	bx	lr
 800334c:	2000000c 	.word	0x2000000c

08003350 <malloc>:
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <malloc+0xc>)
 8003352:	4601      	mov	r1, r0
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	f000 b86f 	b.w	8003438 <_malloc_r>
 800335a:	bf00      	nop
 800335c:	2000000c 	.word	0x2000000c

08003360 <_free_r>:
 8003360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003362:	2900      	cmp	r1, #0
 8003364:	d044      	beq.n	80033f0 <_free_r+0x90>
 8003366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336a:	9001      	str	r0, [sp, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f1a1 0404 	sub.w	r4, r1, #4
 8003372:	bfb8      	it	lt
 8003374:	18e4      	addlt	r4, r4, r3
 8003376:	f000 feb9 	bl	80040ec <__malloc_lock>
 800337a:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <_free_r+0x94>)
 800337c:	9801      	ldr	r0, [sp, #4]
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	b933      	cbnz	r3, 8003390 <_free_r+0x30>
 8003382:	6063      	str	r3, [r4, #4]
 8003384:	6014      	str	r4, [r2, #0]
 8003386:	b003      	add	sp, #12
 8003388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800338c:	f000 beb4 	b.w	80040f8 <__malloc_unlock>
 8003390:	42a3      	cmp	r3, r4
 8003392:	d908      	bls.n	80033a6 <_free_r+0x46>
 8003394:	6825      	ldr	r5, [r4, #0]
 8003396:	1961      	adds	r1, r4, r5
 8003398:	428b      	cmp	r3, r1
 800339a:	bf01      	itttt	eq
 800339c:	6819      	ldreq	r1, [r3, #0]
 800339e:	685b      	ldreq	r3, [r3, #4]
 80033a0:	1949      	addeq	r1, r1, r5
 80033a2:	6021      	streq	r1, [r4, #0]
 80033a4:	e7ed      	b.n	8003382 <_free_r+0x22>
 80033a6:	461a      	mov	r2, r3
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b10b      	cbz	r3, 80033b0 <_free_r+0x50>
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d9fa      	bls.n	80033a6 <_free_r+0x46>
 80033b0:	6811      	ldr	r1, [r2, #0]
 80033b2:	1855      	adds	r5, r2, r1
 80033b4:	42a5      	cmp	r5, r4
 80033b6:	d10b      	bne.n	80033d0 <_free_r+0x70>
 80033b8:	6824      	ldr	r4, [r4, #0]
 80033ba:	4421      	add	r1, r4
 80033bc:	1854      	adds	r4, r2, r1
 80033be:	42a3      	cmp	r3, r4
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	d1e0      	bne.n	8003386 <_free_r+0x26>
 80033c4:	681c      	ldr	r4, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	6053      	str	r3, [r2, #4]
 80033ca:	4421      	add	r1, r4
 80033cc:	6011      	str	r1, [r2, #0]
 80033ce:	e7da      	b.n	8003386 <_free_r+0x26>
 80033d0:	d902      	bls.n	80033d8 <_free_r+0x78>
 80033d2:	230c      	movs	r3, #12
 80033d4:	6003      	str	r3, [r0, #0]
 80033d6:	e7d6      	b.n	8003386 <_free_r+0x26>
 80033d8:	6825      	ldr	r5, [r4, #0]
 80033da:	1961      	adds	r1, r4, r5
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf04      	itt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	6063      	str	r3, [r4, #4]
 80033e6:	bf04      	itt	eq
 80033e8:	1949      	addeq	r1, r1, r5
 80033ea:	6021      	streq	r1, [r4, #0]
 80033ec:	6054      	str	r4, [r2, #4]
 80033ee:	e7ca      	b.n	8003386 <_free_r+0x26>
 80033f0:	b003      	add	sp, #12
 80033f2:	bd30      	pop	{r4, r5, pc}
 80033f4:	20000340 	.word	0x20000340

080033f8 <sbrk_aligned>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	4e0e      	ldr	r6, [pc, #56]	; (8003434 <sbrk_aligned+0x3c>)
 80033fc:	460c      	mov	r4, r1
 80033fe:	6831      	ldr	r1, [r6, #0]
 8003400:	4605      	mov	r5, r0
 8003402:	b911      	cbnz	r1, 800340a <sbrk_aligned+0x12>
 8003404:	f000 fb7a 	bl	8003afc <_sbrk_r>
 8003408:	6030      	str	r0, [r6, #0]
 800340a:	4621      	mov	r1, r4
 800340c:	4628      	mov	r0, r5
 800340e:	f000 fb75 	bl	8003afc <_sbrk_r>
 8003412:	1c43      	adds	r3, r0, #1
 8003414:	d00a      	beq.n	800342c <sbrk_aligned+0x34>
 8003416:	1cc4      	adds	r4, r0, #3
 8003418:	f024 0403 	bic.w	r4, r4, #3
 800341c:	42a0      	cmp	r0, r4
 800341e:	d007      	beq.n	8003430 <sbrk_aligned+0x38>
 8003420:	1a21      	subs	r1, r4, r0
 8003422:	4628      	mov	r0, r5
 8003424:	f000 fb6a 	bl	8003afc <_sbrk_r>
 8003428:	3001      	adds	r0, #1
 800342a:	d101      	bne.n	8003430 <sbrk_aligned+0x38>
 800342c:	f04f 34ff 	mov.w	r4, #4294967295
 8003430:	4620      	mov	r0, r4
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	20000344 	.word	0x20000344

08003438 <_malloc_r>:
 8003438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343c:	1ccd      	adds	r5, r1, #3
 800343e:	f025 0503 	bic.w	r5, r5, #3
 8003442:	3508      	adds	r5, #8
 8003444:	2d0c      	cmp	r5, #12
 8003446:	bf38      	it	cc
 8003448:	250c      	movcc	r5, #12
 800344a:	2d00      	cmp	r5, #0
 800344c:	4607      	mov	r7, r0
 800344e:	db01      	blt.n	8003454 <_malloc_r+0x1c>
 8003450:	42a9      	cmp	r1, r5
 8003452:	d905      	bls.n	8003460 <_malloc_r+0x28>
 8003454:	230c      	movs	r3, #12
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	2600      	movs	r6, #0
 800345a:	4630      	mov	r0, r6
 800345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003460:	4e2e      	ldr	r6, [pc, #184]	; (800351c <_malloc_r+0xe4>)
 8003462:	f000 fe43 	bl	80040ec <__malloc_lock>
 8003466:	6833      	ldr	r3, [r6, #0]
 8003468:	461c      	mov	r4, r3
 800346a:	bb34      	cbnz	r4, 80034ba <_malloc_r+0x82>
 800346c:	4629      	mov	r1, r5
 800346e:	4638      	mov	r0, r7
 8003470:	f7ff ffc2 	bl	80033f8 <sbrk_aligned>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	4604      	mov	r4, r0
 8003478:	d14d      	bne.n	8003516 <_malloc_r+0xde>
 800347a:	6834      	ldr	r4, [r6, #0]
 800347c:	4626      	mov	r6, r4
 800347e:	2e00      	cmp	r6, #0
 8003480:	d140      	bne.n	8003504 <_malloc_r+0xcc>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	4631      	mov	r1, r6
 8003486:	4638      	mov	r0, r7
 8003488:	eb04 0803 	add.w	r8, r4, r3
 800348c:	f000 fb36 	bl	8003afc <_sbrk_r>
 8003490:	4580      	cmp	r8, r0
 8003492:	d13a      	bne.n	800350a <_malloc_r+0xd2>
 8003494:	6821      	ldr	r1, [r4, #0]
 8003496:	3503      	adds	r5, #3
 8003498:	1a6d      	subs	r5, r5, r1
 800349a:	f025 0503 	bic.w	r5, r5, #3
 800349e:	3508      	adds	r5, #8
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	bf38      	it	cc
 80034a4:	250c      	movcc	r5, #12
 80034a6:	4629      	mov	r1, r5
 80034a8:	4638      	mov	r0, r7
 80034aa:	f7ff ffa5 	bl	80033f8 <sbrk_aligned>
 80034ae:	3001      	adds	r0, #1
 80034b0:	d02b      	beq.n	800350a <_malloc_r+0xd2>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	442b      	add	r3, r5
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	e00e      	b.n	80034d8 <_malloc_r+0xa0>
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	1b52      	subs	r2, r2, r5
 80034be:	d41e      	bmi.n	80034fe <_malloc_r+0xc6>
 80034c0:	2a0b      	cmp	r2, #11
 80034c2:	d916      	bls.n	80034f2 <_malloc_r+0xba>
 80034c4:	1961      	adds	r1, r4, r5
 80034c6:	42a3      	cmp	r3, r4
 80034c8:	6025      	str	r5, [r4, #0]
 80034ca:	bf18      	it	ne
 80034cc:	6059      	strne	r1, [r3, #4]
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	bf08      	it	eq
 80034d2:	6031      	streq	r1, [r6, #0]
 80034d4:	5162      	str	r2, [r4, r5]
 80034d6:	604b      	str	r3, [r1, #4]
 80034d8:	4638      	mov	r0, r7
 80034da:	f104 060b 	add.w	r6, r4, #11
 80034de:	f000 fe0b 	bl	80040f8 <__malloc_unlock>
 80034e2:	f026 0607 	bic.w	r6, r6, #7
 80034e6:	1d23      	adds	r3, r4, #4
 80034e8:	1af2      	subs	r2, r6, r3
 80034ea:	d0b6      	beq.n	800345a <_malloc_r+0x22>
 80034ec:	1b9b      	subs	r3, r3, r6
 80034ee:	50a3      	str	r3, [r4, r2]
 80034f0:	e7b3      	b.n	800345a <_malloc_r+0x22>
 80034f2:	6862      	ldr	r2, [r4, #4]
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	bf0c      	ite	eq
 80034f8:	6032      	streq	r2, [r6, #0]
 80034fa:	605a      	strne	r2, [r3, #4]
 80034fc:	e7ec      	b.n	80034d8 <_malloc_r+0xa0>
 80034fe:	4623      	mov	r3, r4
 8003500:	6864      	ldr	r4, [r4, #4]
 8003502:	e7b2      	b.n	800346a <_malloc_r+0x32>
 8003504:	4634      	mov	r4, r6
 8003506:	6876      	ldr	r6, [r6, #4]
 8003508:	e7b9      	b.n	800347e <_malloc_r+0x46>
 800350a:	230c      	movs	r3, #12
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4638      	mov	r0, r7
 8003510:	f000 fdf2 	bl	80040f8 <__malloc_unlock>
 8003514:	e7a1      	b.n	800345a <_malloc_r+0x22>
 8003516:	6025      	str	r5, [r4, #0]
 8003518:	e7de      	b.n	80034d8 <_malloc_r+0xa0>
 800351a:	bf00      	nop
 800351c:	20000340 	.word	0x20000340

08003520 <__sfputc_r>:
 8003520:	6893      	ldr	r3, [r2, #8]
 8003522:	3b01      	subs	r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	b410      	push	{r4}
 8003528:	6093      	str	r3, [r2, #8]
 800352a:	da08      	bge.n	800353e <__sfputc_r+0x1e>
 800352c:	6994      	ldr	r4, [r2, #24]
 800352e:	42a3      	cmp	r3, r4
 8003530:	db01      	blt.n	8003536 <__sfputc_r+0x16>
 8003532:	290a      	cmp	r1, #10
 8003534:	d103      	bne.n	800353e <__sfputc_r+0x1e>
 8003536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800353a:	f000 baef 	b.w	8003b1c <__swbuf_r>
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	1c58      	adds	r0, r3, #1
 8003542:	6010      	str	r0, [r2, #0]
 8003544:	7019      	strb	r1, [r3, #0]
 8003546:	4608      	mov	r0, r1
 8003548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800354c:	4770      	bx	lr

0800354e <__sfputs_r>:
 800354e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003550:	4606      	mov	r6, r0
 8003552:	460f      	mov	r7, r1
 8003554:	4614      	mov	r4, r2
 8003556:	18d5      	adds	r5, r2, r3
 8003558:	42ac      	cmp	r4, r5
 800355a:	d101      	bne.n	8003560 <__sfputs_r+0x12>
 800355c:	2000      	movs	r0, #0
 800355e:	e007      	b.n	8003570 <__sfputs_r+0x22>
 8003560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003564:	463a      	mov	r2, r7
 8003566:	4630      	mov	r0, r6
 8003568:	f7ff ffda 	bl	8003520 <__sfputc_r>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d1f3      	bne.n	8003558 <__sfputs_r+0xa>
 8003570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003574 <_vfiprintf_r>:
 8003574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003578:	460d      	mov	r5, r1
 800357a:	b09d      	sub	sp, #116	; 0x74
 800357c:	4614      	mov	r4, r2
 800357e:	4698      	mov	r8, r3
 8003580:	4606      	mov	r6, r0
 8003582:	b118      	cbz	r0, 800358c <_vfiprintf_r+0x18>
 8003584:	6983      	ldr	r3, [r0, #24]
 8003586:	b90b      	cbnz	r3, 800358c <_vfiprintf_r+0x18>
 8003588:	f000 fcaa 	bl	8003ee0 <__sinit>
 800358c:	4b89      	ldr	r3, [pc, #548]	; (80037b4 <_vfiprintf_r+0x240>)
 800358e:	429d      	cmp	r5, r3
 8003590:	d11b      	bne.n	80035ca <_vfiprintf_r+0x56>
 8003592:	6875      	ldr	r5, [r6, #4]
 8003594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003596:	07d9      	lsls	r1, r3, #31
 8003598:	d405      	bmi.n	80035a6 <_vfiprintf_r+0x32>
 800359a:	89ab      	ldrh	r3, [r5, #12]
 800359c:	059a      	lsls	r2, r3, #22
 800359e:	d402      	bmi.n	80035a6 <_vfiprintf_r+0x32>
 80035a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035a2:	f000 fd3b 	bl	800401c <__retarget_lock_acquire_recursive>
 80035a6:	89ab      	ldrh	r3, [r5, #12]
 80035a8:	071b      	lsls	r3, r3, #28
 80035aa:	d501      	bpl.n	80035b0 <_vfiprintf_r+0x3c>
 80035ac:	692b      	ldr	r3, [r5, #16]
 80035ae:	b9eb      	cbnz	r3, 80035ec <_vfiprintf_r+0x78>
 80035b0:	4629      	mov	r1, r5
 80035b2:	4630      	mov	r0, r6
 80035b4:	f000 fb04 	bl	8003bc0 <__swsetup_r>
 80035b8:	b1c0      	cbz	r0, 80035ec <_vfiprintf_r+0x78>
 80035ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035bc:	07dc      	lsls	r4, r3, #31
 80035be:	d50e      	bpl.n	80035de <_vfiprintf_r+0x6a>
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	b01d      	add	sp, #116	; 0x74
 80035c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ca:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <_vfiprintf_r+0x244>)
 80035cc:	429d      	cmp	r5, r3
 80035ce:	d101      	bne.n	80035d4 <_vfiprintf_r+0x60>
 80035d0:	68b5      	ldr	r5, [r6, #8]
 80035d2:	e7df      	b.n	8003594 <_vfiprintf_r+0x20>
 80035d4:	4b79      	ldr	r3, [pc, #484]	; (80037bc <_vfiprintf_r+0x248>)
 80035d6:	429d      	cmp	r5, r3
 80035d8:	bf08      	it	eq
 80035da:	68f5      	ldreq	r5, [r6, #12]
 80035dc:	e7da      	b.n	8003594 <_vfiprintf_r+0x20>
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	0598      	lsls	r0, r3, #22
 80035e2:	d4ed      	bmi.n	80035c0 <_vfiprintf_r+0x4c>
 80035e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035e6:	f000 fd1a 	bl	800401e <__retarget_lock_release_recursive>
 80035ea:	e7e9      	b.n	80035c0 <_vfiprintf_r+0x4c>
 80035ec:	2300      	movs	r3, #0
 80035ee:	9309      	str	r3, [sp, #36]	; 0x24
 80035f0:	2320      	movs	r3, #32
 80035f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035fa:	2330      	movs	r3, #48	; 0x30
 80035fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80037c0 <_vfiprintf_r+0x24c>
 8003600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003604:	f04f 0901 	mov.w	r9, #1
 8003608:	4623      	mov	r3, r4
 800360a:	469a      	mov	sl, r3
 800360c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003610:	b10a      	cbz	r2, 8003616 <_vfiprintf_r+0xa2>
 8003612:	2a25      	cmp	r2, #37	; 0x25
 8003614:	d1f9      	bne.n	800360a <_vfiprintf_r+0x96>
 8003616:	ebba 0b04 	subs.w	fp, sl, r4
 800361a:	d00b      	beq.n	8003634 <_vfiprintf_r+0xc0>
 800361c:	465b      	mov	r3, fp
 800361e:	4622      	mov	r2, r4
 8003620:	4629      	mov	r1, r5
 8003622:	4630      	mov	r0, r6
 8003624:	f7ff ff93 	bl	800354e <__sfputs_r>
 8003628:	3001      	adds	r0, #1
 800362a:	f000 80aa 	beq.w	8003782 <_vfiprintf_r+0x20e>
 800362e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003630:	445a      	add	r2, fp
 8003632:	9209      	str	r2, [sp, #36]	; 0x24
 8003634:	f89a 3000 	ldrb.w	r3, [sl]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a2 	beq.w	8003782 <_vfiprintf_r+0x20e>
 800363e:	2300      	movs	r3, #0
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003648:	f10a 0a01 	add.w	sl, sl, #1
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	9307      	str	r3, [sp, #28]
 8003650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003654:	931a      	str	r3, [sp, #104]	; 0x68
 8003656:	4654      	mov	r4, sl
 8003658:	2205      	movs	r2, #5
 800365a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365e:	4858      	ldr	r0, [pc, #352]	; (80037c0 <_vfiprintf_r+0x24c>)
 8003660:	f7fc fdb6 	bl	80001d0 <memchr>
 8003664:	9a04      	ldr	r2, [sp, #16]
 8003666:	b9d8      	cbnz	r0, 80036a0 <_vfiprintf_r+0x12c>
 8003668:	06d1      	lsls	r1, r2, #27
 800366a:	bf44      	itt	mi
 800366c:	2320      	movmi	r3, #32
 800366e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003672:	0713      	lsls	r3, r2, #28
 8003674:	bf44      	itt	mi
 8003676:	232b      	movmi	r3, #43	; 0x2b
 8003678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800367c:	f89a 3000 	ldrb.w	r3, [sl]
 8003680:	2b2a      	cmp	r3, #42	; 0x2a
 8003682:	d015      	beq.n	80036b0 <_vfiprintf_r+0x13c>
 8003684:	9a07      	ldr	r2, [sp, #28]
 8003686:	4654      	mov	r4, sl
 8003688:	2000      	movs	r0, #0
 800368a:	f04f 0c0a 	mov.w	ip, #10
 800368e:	4621      	mov	r1, r4
 8003690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003694:	3b30      	subs	r3, #48	; 0x30
 8003696:	2b09      	cmp	r3, #9
 8003698:	d94e      	bls.n	8003738 <_vfiprintf_r+0x1c4>
 800369a:	b1b0      	cbz	r0, 80036ca <_vfiprintf_r+0x156>
 800369c:	9207      	str	r2, [sp, #28]
 800369e:	e014      	b.n	80036ca <_vfiprintf_r+0x156>
 80036a0:	eba0 0308 	sub.w	r3, r0, r8
 80036a4:	fa09 f303 	lsl.w	r3, r9, r3
 80036a8:	4313      	orrs	r3, r2
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	46a2      	mov	sl, r4
 80036ae:	e7d2      	b.n	8003656 <_vfiprintf_r+0xe2>
 80036b0:	9b03      	ldr	r3, [sp, #12]
 80036b2:	1d19      	adds	r1, r3, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	9103      	str	r1, [sp, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bfbb      	ittet	lt
 80036bc:	425b      	neglt	r3, r3
 80036be:	f042 0202 	orrlt.w	r2, r2, #2
 80036c2:	9307      	strge	r3, [sp, #28]
 80036c4:	9307      	strlt	r3, [sp, #28]
 80036c6:	bfb8      	it	lt
 80036c8:	9204      	strlt	r2, [sp, #16]
 80036ca:	7823      	ldrb	r3, [r4, #0]
 80036cc:	2b2e      	cmp	r3, #46	; 0x2e
 80036ce:	d10c      	bne.n	80036ea <_vfiprintf_r+0x176>
 80036d0:	7863      	ldrb	r3, [r4, #1]
 80036d2:	2b2a      	cmp	r3, #42	; 0x2a
 80036d4:	d135      	bne.n	8003742 <_vfiprintf_r+0x1ce>
 80036d6:	9b03      	ldr	r3, [sp, #12]
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	9203      	str	r2, [sp, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bfb8      	it	lt
 80036e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036e6:	3402      	adds	r4, #2
 80036e8:	9305      	str	r3, [sp, #20]
 80036ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80037d0 <_vfiprintf_r+0x25c>
 80036ee:	7821      	ldrb	r1, [r4, #0]
 80036f0:	2203      	movs	r2, #3
 80036f2:	4650      	mov	r0, sl
 80036f4:	f7fc fd6c 	bl	80001d0 <memchr>
 80036f8:	b140      	cbz	r0, 800370c <_vfiprintf_r+0x198>
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	eba0 000a 	sub.w	r0, r0, sl
 8003700:	fa03 f000 	lsl.w	r0, r3, r0
 8003704:	9b04      	ldr	r3, [sp, #16]
 8003706:	4303      	orrs	r3, r0
 8003708:	3401      	adds	r4, #1
 800370a:	9304      	str	r3, [sp, #16]
 800370c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003710:	482c      	ldr	r0, [pc, #176]	; (80037c4 <_vfiprintf_r+0x250>)
 8003712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003716:	2206      	movs	r2, #6
 8003718:	f7fc fd5a 	bl	80001d0 <memchr>
 800371c:	2800      	cmp	r0, #0
 800371e:	d03f      	beq.n	80037a0 <_vfiprintf_r+0x22c>
 8003720:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <_vfiprintf_r+0x254>)
 8003722:	bb1b      	cbnz	r3, 800376c <_vfiprintf_r+0x1f8>
 8003724:	9b03      	ldr	r3, [sp, #12]
 8003726:	3307      	adds	r3, #7
 8003728:	f023 0307 	bic.w	r3, r3, #7
 800372c:	3308      	adds	r3, #8
 800372e:	9303      	str	r3, [sp, #12]
 8003730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003732:	443b      	add	r3, r7
 8003734:	9309      	str	r3, [sp, #36]	; 0x24
 8003736:	e767      	b.n	8003608 <_vfiprintf_r+0x94>
 8003738:	fb0c 3202 	mla	r2, ip, r2, r3
 800373c:	460c      	mov	r4, r1
 800373e:	2001      	movs	r0, #1
 8003740:	e7a5      	b.n	800368e <_vfiprintf_r+0x11a>
 8003742:	2300      	movs	r3, #0
 8003744:	3401      	adds	r4, #1
 8003746:	9305      	str	r3, [sp, #20]
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0c0a 	mov.w	ip, #10
 800374e:	4620      	mov	r0, r4
 8003750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003754:	3a30      	subs	r2, #48	; 0x30
 8003756:	2a09      	cmp	r2, #9
 8003758:	d903      	bls.n	8003762 <_vfiprintf_r+0x1ee>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0c5      	beq.n	80036ea <_vfiprintf_r+0x176>
 800375e:	9105      	str	r1, [sp, #20]
 8003760:	e7c3      	b.n	80036ea <_vfiprintf_r+0x176>
 8003762:	fb0c 2101 	mla	r1, ip, r1, r2
 8003766:	4604      	mov	r4, r0
 8003768:	2301      	movs	r3, #1
 800376a:	e7f0      	b.n	800374e <_vfiprintf_r+0x1da>
 800376c:	ab03      	add	r3, sp, #12
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	462a      	mov	r2, r5
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <_vfiprintf_r+0x258>)
 8003774:	a904      	add	r1, sp, #16
 8003776:	4630      	mov	r0, r6
 8003778:	f3af 8000 	nop.w
 800377c:	4607      	mov	r7, r0
 800377e:	1c78      	adds	r0, r7, #1
 8003780:	d1d6      	bne.n	8003730 <_vfiprintf_r+0x1bc>
 8003782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003784:	07d9      	lsls	r1, r3, #31
 8003786:	d405      	bmi.n	8003794 <_vfiprintf_r+0x220>
 8003788:	89ab      	ldrh	r3, [r5, #12]
 800378a:	059a      	lsls	r2, r3, #22
 800378c:	d402      	bmi.n	8003794 <_vfiprintf_r+0x220>
 800378e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003790:	f000 fc45 	bl	800401e <__retarget_lock_release_recursive>
 8003794:	89ab      	ldrh	r3, [r5, #12]
 8003796:	065b      	lsls	r3, r3, #25
 8003798:	f53f af12 	bmi.w	80035c0 <_vfiprintf_r+0x4c>
 800379c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800379e:	e711      	b.n	80035c4 <_vfiprintf_r+0x50>
 80037a0:	ab03      	add	r3, sp, #12
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	462a      	mov	r2, r5
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <_vfiprintf_r+0x258>)
 80037a8:	a904      	add	r1, sp, #16
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 f880 	bl	80038b0 <_printf_i>
 80037b0:	e7e4      	b.n	800377c <_vfiprintf_r+0x208>
 80037b2:	bf00      	nop
 80037b4:	0800441c 	.word	0x0800441c
 80037b8:	0800443c 	.word	0x0800443c
 80037bc:	080043fc 	.word	0x080043fc
 80037c0:	080043c6 	.word	0x080043c6
 80037c4:	080043d0 	.word	0x080043d0
 80037c8:	00000000 	.word	0x00000000
 80037cc:	0800354f 	.word	0x0800354f
 80037d0:	080043cc 	.word	0x080043cc

080037d4 <_printf_common>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	4616      	mov	r6, r2
 80037da:	4699      	mov	r9, r3
 80037dc:	688a      	ldr	r2, [r1, #8]
 80037de:	690b      	ldr	r3, [r1, #16]
 80037e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bfb8      	it	lt
 80037e8:	4613      	movlt	r3, r2
 80037ea:	6033      	str	r3, [r6, #0]
 80037ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f0:	4607      	mov	r7, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	b10a      	cbz	r2, 80037fa <_printf_common+0x26>
 80037f6:	3301      	adds	r3, #1
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	0699      	lsls	r1, r3, #26
 80037fe:	bf42      	ittt	mi
 8003800:	6833      	ldrmi	r3, [r6, #0]
 8003802:	3302      	addmi	r3, #2
 8003804:	6033      	strmi	r3, [r6, #0]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	f015 0506 	ands.w	r5, r5, #6
 800380c:	d106      	bne.n	800381c <_printf_common+0x48>
 800380e:	f104 0a19 	add.w	sl, r4, #25
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	6832      	ldr	r2, [r6, #0]
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	42ab      	cmp	r3, r5
 800381a:	dc26      	bgt.n	800386a <_printf_common+0x96>
 800381c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003820:	1e13      	subs	r3, r2, #0
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	bf18      	it	ne
 8003826:	2301      	movne	r3, #1
 8003828:	0692      	lsls	r2, r2, #26
 800382a:	d42b      	bmi.n	8003884 <_printf_common+0xb0>
 800382c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003830:	4649      	mov	r1, r9
 8003832:	4638      	mov	r0, r7
 8003834:	47c0      	blx	r8
 8003836:	3001      	adds	r0, #1
 8003838:	d01e      	beq.n	8003878 <_printf_common+0xa4>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	68e5      	ldr	r5, [r4, #12]
 800383e:	6832      	ldr	r2, [r6, #0]
 8003840:	f003 0306 	and.w	r3, r3, #6
 8003844:	2b04      	cmp	r3, #4
 8003846:	bf08      	it	eq
 8003848:	1aad      	subeq	r5, r5, r2
 800384a:	68a3      	ldr	r3, [r4, #8]
 800384c:	6922      	ldr	r2, [r4, #16]
 800384e:	bf0c      	ite	eq
 8003850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003854:	2500      	movne	r5, #0
 8003856:	4293      	cmp	r3, r2
 8003858:	bfc4      	itt	gt
 800385a:	1a9b      	subgt	r3, r3, r2
 800385c:	18ed      	addgt	r5, r5, r3
 800385e:	2600      	movs	r6, #0
 8003860:	341a      	adds	r4, #26
 8003862:	42b5      	cmp	r5, r6
 8003864:	d11a      	bne.n	800389c <_printf_common+0xc8>
 8003866:	2000      	movs	r0, #0
 8003868:	e008      	b.n	800387c <_printf_common+0xa8>
 800386a:	2301      	movs	r3, #1
 800386c:	4652      	mov	r2, sl
 800386e:	4649      	mov	r1, r9
 8003870:	4638      	mov	r0, r7
 8003872:	47c0      	blx	r8
 8003874:	3001      	adds	r0, #1
 8003876:	d103      	bne.n	8003880 <_printf_common+0xac>
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	3501      	adds	r5, #1
 8003882:	e7c6      	b.n	8003812 <_printf_common+0x3e>
 8003884:	18e1      	adds	r1, r4, r3
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	2030      	movs	r0, #48	; 0x30
 800388a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800388e:	4422      	add	r2, r4
 8003890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003898:	3302      	adds	r3, #2
 800389a:	e7c7      	b.n	800382c <_printf_common+0x58>
 800389c:	2301      	movs	r3, #1
 800389e:	4622      	mov	r2, r4
 80038a0:	4649      	mov	r1, r9
 80038a2:	4638      	mov	r0, r7
 80038a4:	47c0      	blx	r8
 80038a6:	3001      	adds	r0, #1
 80038a8:	d0e6      	beq.n	8003878 <_printf_common+0xa4>
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7d9      	b.n	8003862 <_printf_common+0x8e>
	...

080038b0 <_printf_i>:
 80038b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	7e0f      	ldrb	r7, [r1, #24]
 80038b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038b8:	2f78      	cmp	r7, #120	; 0x78
 80038ba:	4691      	mov	r9, r2
 80038bc:	4680      	mov	r8, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	469a      	mov	sl, r3
 80038c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038c6:	d807      	bhi.n	80038d8 <_printf_i+0x28>
 80038c8:	2f62      	cmp	r7, #98	; 0x62
 80038ca:	d80a      	bhi.n	80038e2 <_printf_i+0x32>
 80038cc:	2f00      	cmp	r7, #0
 80038ce:	f000 80d8 	beq.w	8003a82 <_printf_i+0x1d2>
 80038d2:	2f58      	cmp	r7, #88	; 0x58
 80038d4:	f000 80a3 	beq.w	8003a1e <_printf_i+0x16e>
 80038d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038e0:	e03a      	b.n	8003958 <_printf_i+0xa8>
 80038e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038e6:	2b15      	cmp	r3, #21
 80038e8:	d8f6      	bhi.n	80038d8 <_printf_i+0x28>
 80038ea:	a101      	add	r1, pc, #4	; (adr r1, 80038f0 <_printf_i+0x40>)
 80038ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038f0:	08003949 	.word	0x08003949
 80038f4:	0800395d 	.word	0x0800395d
 80038f8:	080038d9 	.word	0x080038d9
 80038fc:	080038d9 	.word	0x080038d9
 8003900:	080038d9 	.word	0x080038d9
 8003904:	080038d9 	.word	0x080038d9
 8003908:	0800395d 	.word	0x0800395d
 800390c:	080038d9 	.word	0x080038d9
 8003910:	080038d9 	.word	0x080038d9
 8003914:	080038d9 	.word	0x080038d9
 8003918:	080038d9 	.word	0x080038d9
 800391c:	08003a69 	.word	0x08003a69
 8003920:	0800398d 	.word	0x0800398d
 8003924:	08003a4b 	.word	0x08003a4b
 8003928:	080038d9 	.word	0x080038d9
 800392c:	080038d9 	.word	0x080038d9
 8003930:	08003a8b 	.word	0x08003a8b
 8003934:	080038d9 	.word	0x080038d9
 8003938:	0800398d 	.word	0x0800398d
 800393c:	080038d9 	.word	0x080038d9
 8003940:	080038d9 	.word	0x080038d9
 8003944:	08003a53 	.word	0x08003a53
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	1d1a      	adds	r2, r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	602a      	str	r2, [r5, #0]
 8003950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003958:	2301      	movs	r3, #1
 800395a:	e0a3      	b.n	8003aa4 <_printf_i+0x1f4>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	6829      	ldr	r1, [r5, #0]
 8003960:	0606      	lsls	r6, r0, #24
 8003962:	f101 0304 	add.w	r3, r1, #4
 8003966:	d50a      	bpl.n	800397e <_printf_i+0xce>
 8003968:	680e      	ldr	r6, [r1, #0]
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	2e00      	cmp	r6, #0
 800396e:	da03      	bge.n	8003978 <_printf_i+0xc8>
 8003970:	232d      	movs	r3, #45	; 0x2d
 8003972:	4276      	negs	r6, r6
 8003974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003978:	485e      	ldr	r0, [pc, #376]	; (8003af4 <_printf_i+0x244>)
 800397a:	230a      	movs	r3, #10
 800397c:	e019      	b.n	80039b2 <_printf_i+0x102>
 800397e:	680e      	ldr	r6, [r1, #0]
 8003980:	602b      	str	r3, [r5, #0]
 8003982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003986:	bf18      	it	ne
 8003988:	b236      	sxthne	r6, r6
 800398a:	e7ef      	b.n	800396c <_printf_i+0xbc>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	1d19      	adds	r1, r3, #4
 8003992:	6029      	str	r1, [r5, #0]
 8003994:	0601      	lsls	r1, r0, #24
 8003996:	d501      	bpl.n	800399c <_printf_i+0xec>
 8003998:	681e      	ldr	r6, [r3, #0]
 800399a:	e002      	b.n	80039a2 <_printf_i+0xf2>
 800399c:	0646      	lsls	r6, r0, #25
 800399e:	d5fb      	bpl.n	8003998 <_printf_i+0xe8>
 80039a0:	881e      	ldrh	r6, [r3, #0]
 80039a2:	4854      	ldr	r0, [pc, #336]	; (8003af4 <_printf_i+0x244>)
 80039a4:	2f6f      	cmp	r7, #111	; 0x6f
 80039a6:	bf0c      	ite	eq
 80039a8:	2308      	moveq	r3, #8
 80039aa:	230a      	movne	r3, #10
 80039ac:	2100      	movs	r1, #0
 80039ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039b2:	6865      	ldr	r5, [r4, #4]
 80039b4:	60a5      	str	r5, [r4, #8]
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	bfa2      	ittt	ge
 80039ba:	6821      	ldrge	r1, [r4, #0]
 80039bc:	f021 0104 	bicge.w	r1, r1, #4
 80039c0:	6021      	strge	r1, [r4, #0]
 80039c2:	b90e      	cbnz	r6, 80039c8 <_printf_i+0x118>
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	d04d      	beq.n	8003a64 <_printf_i+0x1b4>
 80039c8:	4615      	mov	r5, r2
 80039ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80039ce:	fb03 6711 	mls	r7, r3, r1, r6
 80039d2:	5dc7      	ldrb	r7, [r0, r7]
 80039d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039d8:	4637      	mov	r7, r6
 80039da:	42bb      	cmp	r3, r7
 80039dc:	460e      	mov	r6, r1
 80039de:	d9f4      	bls.n	80039ca <_printf_i+0x11a>
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d10b      	bne.n	80039fc <_printf_i+0x14c>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	07de      	lsls	r6, r3, #31
 80039e8:	d508      	bpl.n	80039fc <_printf_i+0x14c>
 80039ea:	6923      	ldr	r3, [r4, #16]
 80039ec:	6861      	ldr	r1, [r4, #4]
 80039ee:	4299      	cmp	r1, r3
 80039f0:	bfde      	ittt	le
 80039f2:	2330      	movle	r3, #48	; 0x30
 80039f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039fc:	1b52      	subs	r2, r2, r5
 80039fe:	6122      	str	r2, [r4, #16]
 8003a00:	f8cd a000 	str.w	sl, [sp]
 8003a04:	464b      	mov	r3, r9
 8003a06:	aa03      	add	r2, sp, #12
 8003a08:	4621      	mov	r1, r4
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	f7ff fee2 	bl	80037d4 <_printf_common>
 8003a10:	3001      	adds	r0, #1
 8003a12:	d14c      	bne.n	8003aae <_printf_i+0x1fe>
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	b004      	add	sp, #16
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1e:	4835      	ldr	r0, [pc, #212]	; (8003af4 <_printf_i+0x244>)
 8003a20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a24:	6829      	ldr	r1, [r5, #0]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a2c:	6029      	str	r1, [r5, #0]
 8003a2e:	061d      	lsls	r5, r3, #24
 8003a30:	d514      	bpl.n	8003a5c <_printf_i+0x1ac>
 8003a32:	07df      	lsls	r7, r3, #31
 8003a34:	bf44      	itt	mi
 8003a36:	f043 0320 	orrmi.w	r3, r3, #32
 8003a3a:	6023      	strmi	r3, [r4, #0]
 8003a3c:	b91e      	cbnz	r6, 8003a46 <_printf_i+0x196>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	f023 0320 	bic.w	r3, r3, #32
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	2310      	movs	r3, #16
 8003a48:	e7b0      	b.n	80039ac <_printf_i+0xfc>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	f043 0320 	orr.w	r3, r3, #32
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	2378      	movs	r3, #120	; 0x78
 8003a54:	4828      	ldr	r0, [pc, #160]	; (8003af8 <_printf_i+0x248>)
 8003a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a5a:	e7e3      	b.n	8003a24 <_printf_i+0x174>
 8003a5c:	0659      	lsls	r1, r3, #25
 8003a5e:	bf48      	it	mi
 8003a60:	b2b6      	uxthmi	r6, r6
 8003a62:	e7e6      	b.n	8003a32 <_printf_i+0x182>
 8003a64:	4615      	mov	r5, r2
 8003a66:	e7bb      	b.n	80039e0 <_printf_i+0x130>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	6826      	ldr	r6, [r4, #0]
 8003a6c:	6961      	ldr	r1, [r4, #20]
 8003a6e:	1d18      	adds	r0, r3, #4
 8003a70:	6028      	str	r0, [r5, #0]
 8003a72:	0635      	lsls	r5, r6, #24
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	d501      	bpl.n	8003a7c <_printf_i+0x1cc>
 8003a78:	6019      	str	r1, [r3, #0]
 8003a7a:	e002      	b.n	8003a82 <_printf_i+0x1d2>
 8003a7c:	0670      	lsls	r0, r6, #25
 8003a7e:	d5fb      	bpl.n	8003a78 <_printf_i+0x1c8>
 8003a80:	8019      	strh	r1, [r3, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	4615      	mov	r5, r2
 8003a88:	e7ba      	b.n	8003a00 <_printf_i+0x150>
 8003a8a:	682b      	ldr	r3, [r5, #0]
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	602a      	str	r2, [r5, #0]
 8003a90:	681d      	ldr	r5, [r3, #0]
 8003a92:	6862      	ldr	r2, [r4, #4]
 8003a94:	2100      	movs	r1, #0
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7fc fb9a 	bl	80001d0 <memchr>
 8003a9c:	b108      	cbz	r0, 8003aa2 <_printf_i+0x1f2>
 8003a9e:	1b40      	subs	r0, r0, r5
 8003aa0:	6060      	str	r0, [r4, #4]
 8003aa2:	6863      	ldr	r3, [r4, #4]
 8003aa4:	6123      	str	r3, [r4, #16]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aac:	e7a8      	b.n	8003a00 <_printf_i+0x150>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	47d0      	blx	sl
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d0ab      	beq.n	8003a14 <_printf_i+0x164>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	079b      	lsls	r3, r3, #30
 8003ac0:	d413      	bmi.n	8003aea <_printf_i+0x23a>
 8003ac2:	68e0      	ldr	r0, [r4, #12]
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	4298      	cmp	r0, r3
 8003ac8:	bfb8      	it	lt
 8003aca:	4618      	movlt	r0, r3
 8003acc:	e7a4      	b.n	8003a18 <_printf_i+0x168>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	47d0      	blx	sl
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d09b      	beq.n	8003a14 <_printf_i+0x164>
 8003adc:	3501      	adds	r5, #1
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	9903      	ldr	r1, [sp, #12]
 8003ae2:	1a5b      	subs	r3, r3, r1
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dcf2      	bgt.n	8003ace <_printf_i+0x21e>
 8003ae8:	e7eb      	b.n	8003ac2 <_printf_i+0x212>
 8003aea:	2500      	movs	r5, #0
 8003aec:	f104 0619 	add.w	r6, r4, #25
 8003af0:	e7f5      	b.n	8003ade <_printf_i+0x22e>
 8003af2:	bf00      	nop
 8003af4:	080043d7 	.word	0x080043d7
 8003af8:	080043e8 	.word	0x080043e8

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4d06      	ldr	r5, [pc, #24]	; (8003b18 <_sbrk_r+0x1c>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fd f94c 	bl	8000da4 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	2000034c 	.word	0x2000034c

08003b1c <__swbuf_r>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	460e      	mov	r6, r1
 8003b20:	4614      	mov	r4, r2
 8003b22:	4605      	mov	r5, r0
 8003b24:	b118      	cbz	r0, 8003b2e <__swbuf_r+0x12>
 8003b26:	6983      	ldr	r3, [r0, #24]
 8003b28:	b90b      	cbnz	r3, 8003b2e <__swbuf_r+0x12>
 8003b2a:	f000 f9d9 	bl	8003ee0 <__sinit>
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <__swbuf_r+0x98>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d12b      	bne.n	8003b8c <__swbuf_r+0x70>
 8003b34:	686c      	ldr	r4, [r5, #4]
 8003b36:	69a3      	ldr	r3, [r4, #24]
 8003b38:	60a3      	str	r3, [r4, #8]
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	071a      	lsls	r2, r3, #28
 8003b3e:	d52f      	bpl.n	8003ba0 <__swbuf_r+0x84>
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	b36b      	cbz	r3, 8003ba0 <__swbuf_r+0x84>
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	6820      	ldr	r0, [r4, #0]
 8003b48:	1ac0      	subs	r0, r0, r3
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	b2f6      	uxtb	r6, r6
 8003b4e:	4283      	cmp	r3, r0
 8003b50:	4637      	mov	r7, r6
 8003b52:	dc04      	bgt.n	8003b5e <__swbuf_r+0x42>
 8003b54:	4621      	mov	r1, r4
 8003b56:	4628      	mov	r0, r5
 8003b58:	f000 f92e 	bl	8003db8 <_fflush_r>
 8003b5c:	bb30      	cbnz	r0, 8003bac <__swbuf_r+0x90>
 8003b5e:	68a3      	ldr	r3, [r4, #8]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60a3      	str	r3, [r4, #8]
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	6022      	str	r2, [r4, #0]
 8003b6a:	701e      	strb	r6, [r3, #0]
 8003b6c:	6963      	ldr	r3, [r4, #20]
 8003b6e:	3001      	adds	r0, #1
 8003b70:	4283      	cmp	r3, r0
 8003b72:	d004      	beq.n	8003b7e <__swbuf_r+0x62>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	07db      	lsls	r3, r3, #31
 8003b78:	d506      	bpl.n	8003b88 <__swbuf_r+0x6c>
 8003b7a:	2e0a      	cmp	r6, #10
 8003b7c:	d104      	bne.n	8003b88 <__swbuf_r+0x6c>
 8003b7e:	4621      	mov	r1, r4
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 f919 	bl	8003db8 <_fflush_r>
 8003b86:	b988      	cbnz	r0, 8003bac <__swbuf_r+0x90>
 8003b88:	4638      	mov	r0, r7
 8003b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <__swbuf_r+0x9c>)
 8003b8e:	429c      	cmp	r4, r3
 8003b90:	d101      	bne.n	8003b96 <__swbuf_r+0x7a>
 8003b92:	68ac      	ldr	r4, [r5, #8]
 8003b94:	e7cf      	b.n	8003b36 <__swbuf_r+0x1a>
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <__swbuf_r+0xa0>)
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	bf08      	it	eq
 8003b9c:	68ec      	ldreq	r4, [r5, #12]
 8003b9e:	e7ca      	b.n	8003b36 <__swbuf_r+0x1a>
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f000 f80c 	bl	8003bc0 <__swsetup_r>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d0cb      	beq.n	8003b44 <__swbuf_r+0x28>
 8003bac:	f04f 37ff 	mov.w	r7, #4294967295
 8003bb0:	e7ea      	b.n	8003b88 <__swbuf_r+0x6c>
 8003bb2:	bf00      	nop
 8003bb4:	0800441c 	.word	0x0800441c
 8003bb8:	0800443c 	.word	0x0800443c
 8003bbc:	080043fc 	.word	0x080043fc

08003bc0 <__swsetup_r>:
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <__swsetup_r+0xcc>)
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	681d      	ldr	r5, [r3, #0]
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	b125      	cbz	r5, 8003bd6 <__swsetup_r+0x16>
 8003bcc:	69ab      	ldr	r3, [r5, #24]
 8003bce:	b913      	cbnz	r3, 8003bd6 <__swsetup_r+0x16>
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 f985 	bl	8003ee0 <__sinit>
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <__swsetup_r+0xd0>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d10f      	bne.n	8003bfc <__swsetup_r+0x3c>
 8003bdc:	686c      	ldr	r4, [r5, #4]
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003be4:	0719      	lsls	r1, r3, #28
 8003be6:	d42c      	bmi.n	8003c42 <__swsetup_r+0x82>
 8003be8:	06dd      	lsls	r5, r3, #27
 8003bea:	d411      	bmi.n	8003c10 <__swsetup_r+0x50>
 8003bec:	2309      	movs	r3, #9
 8003bee:	6033      	str	r3, [r6, #0]
 8003bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfa:	e03e      	b.n	8003c7a <__swsetup_r+0xba>
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <__swsetup_r+0xd4>)
 8003bfe:	429c      	cmp	r4, r3
 8003c00:	d101      	bne.n	8003c06 <__swsetup_r+0x46>
 8003c02:	68ac      	ldr	r4, [r5, #8]
 8003c04:	e7eb      	b.n	8003bde <__swsetup_r+0x1e>
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <__swsetup_r+0xd8>)
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	bf08      	it	eq
 8003c0c:	68ec      	ldreq	r4, [r5, #12]
 8003c0e:	e7e6      	b.n	8003bde <__swsetup_r+0x1e>
 8003c10:	0758      	lsls	r0, r3, #29
 8003c12:	d512      	bpl.n	8003c3a <__swsetup_r+0x7a>
 8003c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c16:	b141      	cbz	r1, 8003c2a <__swsetup_r+0x6a>
 8003c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c1c:	4299      	cmp	r1, r3
 8003c1e:	d002      	beq.n	8003c26 <__swsetup_r+0x66>
 8003c20:	4630      	mov	r0, r6
 8003c22:	f7ff fb9d 	bl	8003360 <_free_r>
 8003c26:	2300      	movs	r3, #0
 8003c28:	6363      	str	r3, [r4, #52]	; 0x34
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	2300      	movs	r3, #0
 8003c34:	6063      	str	r3, [r4, #4]
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	b94b      	cbnz	r3, 8003c5a <__swsetup_r+0x9a>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c50:	d003      	beq.n	8003c5a <__swsetup_r+0x9a>
 8003c52:	4621      	mov	r1, r4
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 fa09 	bl	800406c <__smakebuf_r>
 8003c5a:	89a0      	ldrh	r0, [r4, #12]
 8003c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c60:	f010 0301 	ands.w	r3, r0, #1
 8003c64:	d00a      	beq.n	8003c7c <__swsetup_r+0xbc>
 8003c66:	2300      	movs	r3, #0
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	6963      	ldr	r3, [r4, #20]
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	61a3      	str	r3, [r4, #24]
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	b943      	cbnz	r3, 8003c86 <__swsetup_r+0xc6>
 8003c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c78:	d1ba      	bne.n	8003bf0 <__swsetup_r+0x30>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	0781      	lsls	r1, r0, #30
 8003c7e:	bf58      	it	pl
 8003c80:	6963      	ldrpl	r3, [r4, #20]
 8003c82:	60a3      	str	r3, [r4, #8]
 8003c84:	e7f4      	b.n	8003c70 <__swsetup_r+0xb0>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e7f7      	b.n	8003c7a <__swsetup_r+0xba>
 8003c8a:	bf00      	nop
 8003c8c:	2000000c 	.word	0x2000000c
 8003c90:	0800441c 	.word	0x0800441c
 8003c94:	0800443c 	.word	0x0800443c
 8003c98:	080043fc 	.word	0x080043fc

08003c9c <abort>:
 8003c9c:	b508      	push	{r3, lr}
 8003c9e:	2006      	movs	r0, #6
 8003ca0:	f000 fa58 	bl	8004154 <raise>
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f7fd f805 	bl	8000cb4 <_exit>
	...

08003cac <__sflush_r>:
 8003cac:	898a      	ldrh	r2, [r1, #12]
 8003cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	0710      	lsls	r0, r2, #28
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	d458      	bmi.n	8003d6c <__sflush_r+0xc0>
 8003cba:	684b      	ldr	r3, [r1, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	dc05      	bgt.n	8003ccc <__sflush_r+0x20>
 8003cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dc02      	bgt.n	8003ccc <__sflush_r+0x20>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	d0f9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cd8:	682f      	ldr	r7, [r5, #0]
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	d032      	beq.n	8003d44 <__sflush_r+0x98>
 8003cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	075a      	lsls	r2, r3, #29
 8003ce4:	d505      	bpl.n	8003cf2 <__sflush_r+0x46>
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	1ac0      	subs	r0, r0, r3
 8003cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cec:	b10b      	cbz	r3, 8003cf2 <__sflush_r+0x46>
 8003cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf0:	1ac0      	subs	r0, r0, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cf8:	6a21      	ldr	r1, [r4, #32]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b0      	blx	r6
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	d106      	bne.n	8003d12 <__sflush_r+0x66>
 8003d04:	6829      	ldr	r1, [r5, #0]
 8003d06:	291d      	cmp	r1, #29
 8003d08:	d82c      	bhi.n	8003d64 <__sflush_r+0xb8>
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <__sflush_r+0x108>)
 8003d0c:	40ca      	lsrs	r2, r1
 8003d0e:	07d6      	lsls	r6, r2, #31
 8003d10:	d528      	bpl.n	8003d64 <__sflush_r+0xb8>
 8003d12:	2200      	movs	r2, #0
 8003d14:	6062      	str	r2, [r4, #4]
 8003d16:	04d9      	lsls	r1, r3, #19
 8003d18:	6922      	ldr	r2, [r4, #16]
 8003d1a:	6022      	str	r2, [r4, #0]
 8003d1c:	d504      	bpl.n	8003d28 <__sflush_r+0x7c>
 8003d1e:	1c42      	adds	r2, r0, #1
 8003d20:	d101      	bne.n	8003d26 <__sflush_r+0x7a>
 8003d22:	682b      	ldr	r3, [r5, #0]
 8003d24:	b903      	cbnz	r3, 8003d28 <__sflush_r+0x7c>
 8003d26:	6560      	str	r0, [r4, #84]	; 0x54
 8003d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d2a:	602f      	str	r7, [r5, #0]
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	d0ca      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d34:	4299      	cmp	r1, r3
 8003d36:	d002      	beq.n	8003d3e <__sflush_r+0x92>
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f7ff fb11 	bl	8003360 <_free_r>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	6360      	str	r0, [r4, #52]	; 0x34
 8003d42:	e7c1      	b.n	8003cc8 <__sflush_r+0x1c>
 8003d44:	6a21      	ldr	r1, [r4, #32]
 8003d46:	2301      	movs	r3, #1
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	1c41      	adds	r1, r0, #1
 8003d4e:	d1c7      	bne.n	8003ce0 <__sflush_r+0x34>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c4      	beq.n	8003ce0 <__sflush_r+0x34>
 8003d56:	2b1d      	cmp	r3, #29
 8003d58:	d001      	beq.n	8003d5e <__sflush_r+0xb2>
 8003d5a:	2b16      	cmp	r3, #22
 8003d5c:	d101      	bne.n	8003d62 <__sflush_r+0xb6>
 8003d5e:	602f      	str	r7, [r5, #0]
 8003d60:	e7b1      	b.n	8003cc6 <__sflush_r+0x1a>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	e7ad      	b.n	8003cc8 <__sflush_r+0x1c>
 8003d6c:	690f      	ldr	r7, [r1, #16]
 8003d6e:	2f00      	cmp	r7, #0
 8003d70:	d0a9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003d72:	0793      	lsls	r3, r2, #30
 8003d74:	680e      	ldr	r6, [r1, #0]
 8003d76:	bf08      	it	eq
 8003d78:	694b      	ldreq	r3, [r1, #20]
 8003d7a:	600f      	str	r7, [r1, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	2300      	movne	r3, #0
 8003d80:	eba6 0807 	sub.w	r8, r6, r7
 8003d84:	608b      	str	r3, [r1, #8]
 8003d86:	f1b8 0f00 	cmp.w	r8, #0
 8003d8a:	dd9c      	ble.n	8003cc6 <__sflush_r+0x1a>
 8003d8c:	6a21      	ldr	r1, [r4, #32]
 8003d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d90:	4643      	mov	r3, r8
 8003d92:	463a      	mov	r2, r7
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b0      	blx	r6
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dc06      	bgt.n	8003daa <__sflush_r+0xfe>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e78e      	b.n	8003cc8 <__sflush_r+0x1c>
 8003daa:	4407      	add	r7, r0
 8003dac:	eba8 0800 	sub.w	r8, r8, r0
 8003db0:	e7e9      	b.n	8003d86 <__sflush_r+0xda>
 8003db2:	bf00      	nop
 8003db4:	20400001 	.word	0x20400001

08003db8 <_fflush_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	690b      	ldr	r3, [r1, #16]
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	b913      	cbnz	r3, 8003dc8 <_fflush_r+0x10>
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	b118      	cbz	r0, 8003dd2 <_fflush_r+0x1a>
 8003dca:	6983      	ldr	r3, [r0, #24]
 8003dcc:	b90b      	cbnz	r3, 8003dd2 <_fflush_r+0x1a>
 8003dce:	f000 f887 	bl	8003ee0 <__sinit>
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <_fflush_r+0x6c>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d11b      	bne.n	8003e10 <_fflush_r+0x58>
 8003dd8:	686c      	ldr	r4, [r5, #4]
 8003dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <_fflush_r+0xa>
 8003de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003de4:	07d0      	lsls	r0, r2, #31
 8003de6:	d404      	bmi.n	8003df2 <_fflush_r+0x3a>
 8003de8:	0599      	lsls	r1, r3, #22
 8003dea:	d402      	bmi.n	8003df2 <_fflush_r+0x3a>
 8003dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dee:	f000 f915 	bl	800401c <__retarget_lock_acquire_recursive>
 8003df2:	4628      	mov	r0, r5
 8003df4:	4621      	mov	r1, r4
 8003df6:	f7ff ff59 	bl	8003cac <__sflush_r>
 8003dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dfc:	07da      	lsls	r2, r3, #31
 8003dfe:	4605      	mov	r5, r0
 8003e00:	d4e0      	bmi.n	8003dc4 <_fflush_r+0xc>
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	059b      	lsls	r3, r3, #22
 8003e06:	d4dd      	bmi.n	8003dc4 <_fflush_r+0xc>
 8003e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e0a:	f000 f908 	bl	800401e <__retarget_lock_release_recursive>
 8003e0e:	e7d9      	b.n	8003dc4 <_fflush_r+0xc>
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <_fflush_r+0x70>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	d101      	bne.n	8003e1a <_fflush_r+0x62>
 8003e16:	68ac      	ldr	r4, [r5, #8]
 8003e18:	e7df      	b.n	8003dda <_fflush_r+0x22>
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <_fflush_r+0x74>)
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	bf08      	it	eq
 8003e20:	68ec      	ldreq	r4, [r5, #12]
 8003e22:	e7da      	b.n	8003dda <_fflush_r+0x22>
 8003e24:	0800441c 	.word	0x0800441c
 8003e28:	0800443c 	.word	0x0800443c
 8003e2c:	080043fc 	.word	0x080043fc

08003e30 <std>:
 8003e30:	2300      	movs	r3, #0
 8003e32:	b510      	push	{r4, lr}
 8003e34:	4604      	mov	r4, r0
 8003e36:	e9c0 3300 	strd	r3, r3, [r0]
 8003e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e3e:	6083      	str	r3, [r0, #8]
 8003e40:	8181      	strh	r1, [r0, #12]
 8003e42:	6643      	str	r3, [r0, #100]	; 0x64
 8003e44:	81c2      	strh	r2, [r0, #14]
 8003e46:	6183      	str	r3, [r0, #24]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	305c      	adds	r0, #92	; 0x5c
 8003e4e:	f7ff fa09 	bl	8003264 <memset>
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <std+0x38>)
 8003e54:	6263      	str	r3, [r4, #36]	; 0x24
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <std+0x3c>)
 8003e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <std+0x40>)
 8003e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <std+0x44>)
 8003e60:	6224      	str	r4, [r4, #32]
 8003e62:	6323      	str	r3, [r4, #48]	; 0x30
 8003e64:	bd10      	pop	{r4, pc}
 8003e66:	bf00      	nop
 8003e68:	0800418d 	.word	0x0800418d
 8003e6c:	080041af 	.word	0x080041af
 8003e70:	080041e7 	.word	0x080041e7
 8003e74:	0800420b 	.word	0x0800420b

08003e78 <_cleanup_r>:
 8003e78:	4901      	ldr	r1, [pc, #4]	; (8003e80 <_cleanup_r+0x8>)
 8003e7a:	f000 b8af 	b.w	8003fdc <_fwalk_reent>
 8003e7e:	bf00      	nop
 8003e80:	08003db9 	.word	0x08003db9

08003e84 <__sfmoreglue>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	2268      	movs	r2, #104	; 0x68
 8003e88:	1e4d      	subs	r5, r1, #1
 8003e8a:	4355      	muls	r5, r2
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e92:	f7ff fad1 	bl	8003438 <_malloc_r>
 8003e96:	4604      	mov	r4, r0
 8003e98:	b140      	cbz	r0, 8003eac <__sfmoreglue+0x28>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003ea0:	300c      	adds	r0, #12
 8003ea2:	60a0      	str	r0, [r4, #8]
 8003ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ea8:	f7ff f9dc 	bl	8003264 <memset>
 8003eac:	4620      	mov	r0, r4
 8003eae:	bd70      	pop	{r4, r5, r6, pc}

08003eb0 <__sfp_lock_acquire>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__sfp_lock_acquire+0x8>)
 8003eb2:	f000 b8b3 	b.w	800401c <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20000349 	.word	0x20000349

08003ebc <__sfp_lock_release>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	; (8003ec4 <__sfp_lock_release+0x8>)
 8003ebe:	f000 b8ae 	b.w	800401e <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	20000349 	.word	0x20000349

08003ec8 <__sinit_lock_acquire>:
 8003ec8:	4801      	ldr	r0, [pc, #4]	; (8003ed0 <__sinit_lock_acquire+0x8>)
 8003eca:	f000 b8a7 	b.w	800401c <__retarget_lock_acquire_recursive>
 8003ece:	bf00      	nop
 8003ed0:	2000034a 	.word	0x2000034a

08003ed4 <__sinit_lock_release>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__sinit_lock_release+0x8>)
 8003ed6:	f000 b8a2 	b.w	800401e <__retarget_lock_release_recursive>
 8003eda:	bf00      	nop
 8003edc:	2000034a 	.word	0x2000034a

08003ee0 <__sinit>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	f7ff fff0 	bl	8003ec8 <__sinit_lock_acquire>
 8003ee8:	69a3      	ldr	r3, [r4, #24]
 8003eea:	b11b      	cbz	r3, 8003ef4 <__sinit+0x14>
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef0:	f7ff bff0 	b.w	8003ed4 <__sinit_lock_release>
 8003ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <__sinit+0x68>)
 8003efc:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <__sinit+0x6c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	bf04      	itt	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	61a3      	streq	r3, [r4, #24]
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 f820 	bl	8003f50 <__sfp>
 8003f10:	6060      	str	r0, [r4, #4]
 8003f12:	4620      	mov	r0, r4
 8003f14:	f000 f81c 	bl	8003f50 <__sfp>
 8003f18:	60a0      	str	r0, [r4, #8]
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f000 f818 	bl	8003f50 <__sfp>
 8003f20:	2200      	movs	r2, #0
 8003f22:	60e0      	str	r0, [r4, #12]
 8003f24:	2104      	movs	r1, #4
 8003f26:	6860      	ldr	r0, [r4, #4]
 8003f28:	f7ff ff82 	bl	8003e30 <std>
 8003f2c:	68a0      	ldr	r0, [r4, #8]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	2109      	movs	r1, #9
 8003f32:	f7ff ff7d 	bl	8003e30 <std>
 8003f36:	68e0      	ldr	r0, [r4, #12]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	2112      	movs	r1, #18
 8003f3c:	f7ff ff78 	bl	8003e30 <std>
 8003f40:	2301      	movs	r3, #1
 8003f42:	61a3      	str	r3, [r4, #24]
 8003f44:	e7d2      	b.n	8003eec <__sinit+0xc>
 8003f46:	bf00      	nop
 8003f48:	08004314 	.word	0x08004314
 8003f4c:	08003e79 	.word	0x08003e79

08003f50 <__sfp>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	4607      	mov	r7, r0
 8003f54:	f7ff ffac 	bl	8003eb0 <__sfp_lock_acquire>
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <__sfp+0x84>)
 8003f5a:	681e      	ldr	r6, [r3, #0]
 8003f5c:	69b3      	ldr	r3, [r6, #24]
 8003f5e:	b913      	cbnz	r3, 8003f66 <__sfp+0x16>
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff ffbd 	bl	8003ee0 <__sinit>
 8003f66:	3648      	adds	r6, #72	; 0x48
 8003f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	d503      	bpl.n	8003f78 <__sfp+0x28>
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	b30b      	cbz	r3, 8003fb8 <__sfp+0x68>
 8003f74:	6836      	ldr	r6, [r6, #0]
 8003f76:	e7f7      	b.n	8003f68 <__sfp+0x18>
 8003f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f7c:	b9d5      	cbnz	r5, 8003fb4 <__sfp+0x64>
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <__sfp+0x88>)
 8003f80:	60e3      	str	r3, [r4, #12]
 8003f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f86:	6665      	str	r5, [r4, #100]	; 0x64
 8003f88:	f000 f847 	bl	800401a <__retarget_lock_init_recursive>
 8003f8c:	f7ff ff96 	bl	8003ebc <__sfp_lock_release>
 8003f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f98:	6025      	str	r5, [r4, #0]
 8003f9a:	61a5      	str	r5, [r4, #24]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fa4:	f7ff f95e 	bl	8003264 <memset>
 8003fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb4:	3468      	adds	r4, #104	; 0x68
 8003fb6:	e7d9      	b.n	8003f6c <__sfp+0x1c>
 8003fb8:	2104      	movs	r1, #4
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f7ff ff62 	bl	8003e84 <__sfmoreglue>
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	6030      	str	r0, [r6, #0]
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1d5      	bne.n	8003f74 <__sfp+0x24>
 8003fc8:	f7ff ff78 	bl	8003ebc <__sfp_lock_release>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	e7ee      	b.n	8003fb0 <__sfp+0x60>
 8003fd2:	bf00      	nop
 8003fd4:	08004314 	.word	0x08004314
 8003fd8:	ffff0001 	.word	0xffff0001

08003fdc <_fwalk_reent>:
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003fe8:	2700      	movs	r7, #0
 8003fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fee:	f1b9 0901 	subs.w	r9, r9, #1
 8003ff2:	d505      	bpl.n	8004000 <_fwalk_reent+0x24>
 8003ff4:	6824      	ldr	r4, [r4, #0]
 8003ff6:	2c00      	cmp	r4, #0
 8003ff8:	d1f7      	bne.n	8003fea <_fwalk_reent+0xe>
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004000:	89ab      	ldrh	r3, [r5, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d907      	bls.n	8004016 <_fwalk_reent+0x3a>
 8004006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800400a:	3301      	adds	r3, #1
 800400c:	d003      	beq.n	8004016 <_fwalk_reent+0x3a>
 800400e:	4629      	mov	r1, r5
 8004010:	4630      	mov	r0, r6
 8004012:	47c0      	blx	r8
 8004014:	4307      	orrs	r7, r0
 8004016:	3568      	adds	r5, #104	; 0x68
 8004018:	e7e9      	b.n	8003fee <_fwalk_reent+0x12>

0800401a <__retarget_lock_init_recursive>:
 800401a:	4770      	bx	lr

0800401c <__retarget_lock_acquire_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_release_recursive>:
 800401e:	4770      	bx	lr

08004020 <__swhatbuf_r>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	460e      	mov	r6, r1
 8004024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004028:	2900      	cmp	r1, #0
 800402a:	b096      	sub	sp, #88	; 0x58
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	da08      	bge.n	8004044 <__swhatbuf_r+0x24>
 8004032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	061a      	lsls	r2, r3, #24
 800403c:	d410      	bmi.n	8004060 <__swhatbuf_r+0x40>
 800403e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004042:	e00e      	b.n	8004062 <__swhatbuf_r+0x42>
 8004044:	466a      	mov	r2, sp
 8004046:	f000 f907 	bl	8004258 <_fstat_r>
 800404a:	2800      	cmp	r0, #0
 800404c:	dbf1      	blt.n	8004032 <__swhatbuf_r+0x12>
 800404e:	9a01      	ldr	r2, [sp, #4]
 8004050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004058:	425a      	negs	r2, r3
 800405a:	415a      	adcs	r2, r3
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	e7ee      	b.n	800403e <__swhatbuf_r+0x1e>
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	2000      	movs	r0, #0
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	b016      	add	sp, #88	; 0x58
 8004068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800406c <__smakebuf_r>:
 800406c:	898b      	ldrh	r3, [r1, #12]
 800406e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004070:	079d      	lsls	r5, r3, #30
 8004072:	4606      	mov	r6, r0
 8004074:	460c      	mov	r4, r1
 8004076:	d507      	bpl.n	8004088 <__smakebuf_r+0x1c>
 8004078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	2301      	movs	r3, #1
 8004082:	6163      	str	r3, [r4, #20]
 8004084:	b002      	add	sp, #8
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	ab01      	add	r3, sp, #4
 800408a:	466a      	mov	r2, sp
 800408c:	f7ff ffc8 	bl	8004020 <__swhatbuf_r>
 8004090:	9900      	ldr	r1, [sp, #0]
 8004092:	4605      	mov	r5, r0
 8004094:	4630      	mov	r0, r6
 8004096:	f7ff f9cf 	bl	8003438 <_malloc_r>
 800409a:	b948      	cbnz	r0, 80040b0 <__smakebuf_r+0x44>
 800409c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d4ef      	bmi.n	8004084 <__smakebuf_r+0x18>
 80040a4:	f023 0303 	bic.w	r3, r3, #3
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	e7e3      	b.n	8004078 <__smakebuf_r+0xc>
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <__smakebuf_r+0x7c>)
 80040b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	6020      	str	r0, [r4, #0]
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	9b00      	ldr	r3, [sp, #0]
 80040c0:	6163      	str	r3, [r4, #20]
 80040c2:	9b01      	ldr	r3, [sp, #4]
 80040c4:	6120      	str	r0, [r4, #16]
 80040c6:	b15b      	cbz	r3, 80040e0 <__smakebuf_r+0x74>
 80040c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 f8d5 	bl	800427c <_isatty_r>
 80040d2:	b128      	cbz	r0, 80040e0 <__smakebuf_r+0x74>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	89a0      	ldrh	r0, [r4, #12]
 80040e2:	4305      	orrs	r5, r0
 80040e4:	81a5      	strh	r5, [r4, #12]
 80040e6:	e7cd      	b.n	8004084 <__smakebuf_r+0x18>
 80040e8:	08003e79 	.word	0x08003e79

080040ec <__malloc_lock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_lock+0x8>)
 80040ee:	f7ff bf95 	b.w	800401c <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000348 	.word	0x20000348

080040f8 <__malloc_unlock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__malloc_unlock+0x8>)
 80040fa:	f7ff bf90 	b.w	800401e <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	20000348 	.word	0x20000348

08004104 <_raise_r>:
 8004104:	291f      	cmp	r1, #31
 8004106:	b538      	push	{r3, r4, r5, lr}
 8004108:	4604      	mov	r4, r0
 800410a:	460d      	mov	r5, r1
 800410c:	d904      	bls.n	8004118 <_raise_r+0x14>
 800410e:	2316      	movs	r3, #22
 8004110:	6003      	str	r3, [r0, #0]
 8004112:	f04f 30ff 	mov.w	r0, #4294967295
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800411a:	b112      	cbz	r2, 8004122 <_raise_r+0x1e>
 800411c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004120:	b94b      	cbnz	r3, 8004136 <_raise_r+0x32>
 8004122:	4620      	mov	r0, r4
 8004124:	f000 f830 	bl	8004188 <_getpid_r>
 8004128:	462a      	mov	r2, r5
 800412a:	4601      	mov	r1, r0
 800412c:	4620      	mov	r0, r4
 800412e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004132:	f000 b817 	b.w	8004164 <_kill_r>
 8004136:	2b01      	cmp	r3, #1
 8004138:	d00a      	beq.n	8004150 <_raise_r+0x4c>
 800413a:	1c59      	adds	r1, r3, #1
 800413c:	d103      	bne.n	8004146 <_raise_r+0x42>
 800413e:	2316      	movs	r3, #22
 8004140:	6003      	str	r3, [r0, #0]
 8004142:	2001      	movs	r0, #1
 8004144:	e7e7      	b.n	8004116 <_raise_r+0x12>
 8004146:	2400      	movs	r4, #0
 8004148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800414c:	4628      	mov	r0, r5
 800414e:	4798      	blx	r3
 8004150:	2000      	movs	r0, #0
 8004152:	e7e0      	b.n	8004116 <_raise_r+0x12>

08004154 <raise>:
 8004154:	4b02      	ldr	r3, [pc, #8]	; (8004160 <raise+0xc>)
 8004156:	4601      	mov	r1, r0
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f7ff bfd3 	b.w	8004104 <_raise_r>
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <_kill_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4d07      	ldr	r5, [pc, #28]	; (8004184 <_kill_r+0x20>)
 8004168:	2300      	movs	r3, #0
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	f7fc fd8f 	bl	8000c94 <_kill>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d102      	bne.n	8004180 <_kill_r+0x1c>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	b103      	cbz	r3, 8004180 <_kill_r+0x1c>
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	bd38      	pop	{r3, r4, r5, pc}
 8004182:	bf00      	nop
 8004184:	2000034c 	.word	0x2000034c

08004188 <_getpid_r>:
 8004188:	f7fc bd7c 	b.w	8000c84 <_getpid>

0800418c <__sread>:
 800418c:	b510      	push	{r4, lr}
 800418e:	460c      	mov	r4, r1
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f894 	bl	80042c0 <_read_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	bfab      	itete	ge
 800419c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800419e:	89a3      	ldrhlt	r3, [r4, #12]
 80041a0:	181b      	addge	r3, r3, r0
 80041a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041a6:	bfac      	ite	ge
 80041a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80041aa:	81a3      	strhlt	r3, [r4, #12]
 80041ac:	bd10      	pop	{r4, pc}

080041ae <__swrite>:
 80041ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	461f      	mov	r7, r3
 80041b4:	898b      	ldrh	r3, [r1, #12]
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	4605      	mov	r5, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	4616      	mov	r6, r2
 80041be:	d505      	bpl.n	80041cc <__swrite+0x1e>
 80041c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c4:	2302      	movs	r3, #2
 80041c6:	2200      	movs	r2, #0
 80041c8:	f000 f868 	bl	800429c <_lseek_r>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	4632      	mov	r2, r6
 80041da:	463b      	mov	r3, r7
 80041dc:	4628      	mov	r0, r5
 80041de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e2:	f000 b817 	b.w	8004214 <_write_r>

080041e6 <__sseek>:
 80041e6:	b510      	push	{r4, lr}
 80041e8:	460c      	mov	r4, r1
 80041ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ee:	f000 f855 	bl	800429c <_lseek_r>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	bf15      	itete	ne
 80041f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80041fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004202:	81a3      	strheq	r3, [r4, #12]
 8004204:	bf18      	it	ne
 8004206:	81a3      	strhne	r3, [r4, #12]
 8004208:	bd10      	pop	{r4, pc}

0800420a <__sclose>:
 800420a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800420e:	f000 b813 	b.w	8004238 <_close_r>
	...

08004214 <_write_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d07      	ldr	r5, [pc, #28]	; (8004234 <_write_r+0x20>)
 8004218:	4604      	mov	r4, r0
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	2200      	movs	r2, #0
 8004220:	602a      	str	r2, [r5, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fc fd6d 	bl	8000d02 <_write>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_write_r+0x1e>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_write_r+0x1e>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000034c 	.word	0x2000034c

08004238 <_close_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d06      	ldr	r5, [pc, #24]	; (8004254 <_close_r+0x1c>)
 800423c:	2300      	movs	r3, #0
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f7fc fd79 	bl	8000d3a <_close>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_close_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_close_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	2000034c 	.word	0x2000034c

08004258 <_fstat_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d07      	ldr	r5, [pc, #28]	; (8004278 <_fstat_r+0x20>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	f7fc fd74 	bl	8000d52 <_fstat>
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	d102      	bne.n	8004274 <_fstat_r+0x1c>
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	b103      	cbz	r3, 8004274 <_fstat_r+0x1c>
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	2000034c 	.word	0x2000034c

0800427c <_isatty_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4d06      	ldr	r5, [pc, #24]	; (8004298 <_isatty_r+0x1c>)
 8004280:	2300      	movs	r3, #0
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fc fd73 	bl	8000d72 <_isatty>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_isatty_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_isatty_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	2000034c 	.word	0x2000034c

0800429c <_lseek_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4d07      	ldr	r5, [pc, #28]	; (80042bc <_lseek_r+0x20>)
 80042a0:	4604      	mov	r4, r0
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7fc fd6c 	bl	8000d88 <_lseek>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_lseek_r+0x1e>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_lseek_r+0x1e>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	2000034c 	.word	0x2000034c

080042c0 <_read_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d07      	ldr	r5, [pc, #28]	; (80042e0 <_read_r+0x20>)
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	2200      	movs	r2, #0
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc fcfa 	bl	8000cc8 <_read>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_read_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_read_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	2000034c 	.word	0x2000034c

080042e4 <_init>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr

080042f0 <_fini>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr
