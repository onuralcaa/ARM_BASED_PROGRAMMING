
016_1_Ethernet_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f264  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c7c  0800f3f4  0800f3f4  0001f3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012070  08012070  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012070  08012070  00022070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012078  08012078  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012078  08012078  00022078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801207c  0801207c  0002207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012080  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006834  20000078  080120f8  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200068ac  080120f8  000368ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016319  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000489d  00000000  00000000  000463c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0004ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0004bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2d7  00000000  00000000  0004cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fcc0  00000000  00000000  00078ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8061  00000000  00000000  00098b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170bf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  00170c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3dc 	.word	0x0800f3dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f3dc 	.word	0x0800f3dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc62 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f80e 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f876 	bl	8000670 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000584:	f002 fb5e 	bl	8002c44 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8000588:	f000 f9ea 	bl	8000960 <tcp_echoserver_init>
  udp_echoserver_init();
 800058c:	f000 fbee 	bl	8000d6c <udp_echoserver_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000590:	f002 fc78 	bl	8002e84 <MX_LWIP_Process>
	  HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	; 0x32
 8000596:	f000 fcc5 	bl	8000f24 <HAL_Delay>
	  MX_LWIP_Process();
 800059a:	e7f9      	b.n	8000590 <main+0x1c>

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f00d febe 	bl	800e32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000610:	23a8      	movs	r3, #168	; 0xa8
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fea9 	bl	8002378 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 f864 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2105      	movs	r1, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f900 	bl	8002854 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065a:	f000 f84d 	bl	80006f8 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_GPIO_Init+0x84>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <MX_GPIO_Init+0x84>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x84>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_GPIO_Init+0x84>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_GPIO_Init+0x84>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6453      	str	r3, [r2, #68]	; 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 fb9a 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_kill>:

int _kill(int pid, int sig)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <_kill+0x20>)
 80007d0:	2216      	movs	r2, #22
 80007d2:	601a      	str	r2, [r3, #0]
	return -1;
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	2000689c 	.word	0x2000689c

080007e8 <_exit>:

void _exit (int status)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ffe5 	bl	80007c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007fa:	e7fe      	b.n	80007fa <_exit+0x12>

080007fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e00a      	b.n	8000824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800080e:	f3af 8000 	nop.w
 8000812:	4601      	mov	r1, r0
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf0      	blt.n	800080e <_read+0x12>
	}

return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e009      	b.n	800085c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf1      	blt.n	8000848 <_write+0x12>
	}
	return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_close>:

int _close(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000896:	605a      	str	r2, [r3, #4]
	return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_isatty>:

int _isatty(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
	return 1;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x50>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x16>
		heap_end = &end;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <_sbrk+0x50>)
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <_sbrk+0x54>)
 80008ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <_sbrk+0x50>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <_sbrk+0x50>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	466a      	mov	r2, sp
 80008fe:	4293      	cmp	r3, r2
 8000900:	d905      	bls.n	800090e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <_sbrk+0x58>)
 8000904:	220c      	movs	r2, #12
 8000906:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	e006      	b.n	800091c <_sbrk+0x44>
	}

	heap_end += incr;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <_sbrk+0x50>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <_sbrk+0x50>)
 8000918:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	20000094 	.word	0x20000094
 800092c:	200068b0 	.word	0x200068b0
 8000930:	2000689c 	.word	0x2000689c

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <SystemInit+0x28>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <SystemInit+0x28>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <SystemInit+0x28>)
 800094a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800094e:	609a      	str	r2, [r3, #8]
#endif
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8000966:	f005 fe71 	bl	800664c <tcp_new>
 800096a:	4603      	mov	r3, r0
 800096c:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <tcp_echoserver_init+0x68>)
 800096e:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <tcp_echoserver_init+0x68>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d022      	beq.n	80009be <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <tcp_echoserver_init+0x68>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2207      	movs	r2, #7
 800097e:	4913      	ldr	r1, [pc, #76]	; (80009cc <tcp_echoserver_init+0x6c>)
 8000980:	4618      	mov	r0, r3
 8000982:	f004 fdbf 	bl	8005504 <tcp_bind>
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10f      	bne.n	80009b2 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <tcp_echoserver_init+0x68>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	21ff      	movs	r1, #255	; 0xff
 8000998:	4618      	mov	r0, r3
 800099a:	f004 fe6b 	bl	8005674 <tcp_listen_with_backlog>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <tcp_echoserver_init+0x68>)
 80009a2:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <tcp_echoserver_init+0x68>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4909      	ldr	r1, [pc, #36]	; (80009d0 <tcp_echoserver_init+0x70>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fece 	bl	800674c <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80009b0:	e005      	b.n	80009be <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <tcp_echoserver_init+0x68>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2001      	movs	r0, #1
 80009ba:	f003 fa01 	bl	8003dc0 <memp_free>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000098 	.word	0x20000098
 80009cc:	08011f14 	.word	0x08011f14
 80009d0:	080009d5 	.word	0x080009d5

080009d4 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	4613      	mov	r3, r2
 80009e0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80009e2:	2101      	movs	r1, #1
 80009e4:	68b8      	ldr	r0, [r7, #8]
 80009e6:	f005 fc3f 	bl	8006268 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80009ea:	200c      	movs	r0, #12
 80009ec:	f003 f82e 	bl	8003a4c <mem_malloc>
 80009f0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d01f      	beq.n	8000a38 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2200      	movs	r2, #0
 8000a08:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000a10:	6939      	ldr	r1, [r7, #16]
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f005 fe22 	bl	800665c <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000a18:	490d      	ldr	r1, [pc, #52]	; (8000a50 <tcp_echoserver_accept+0x7c>)
 8000a1a:	68b8      	ldr	r0, [r7, #8]
 8000a1c:	f005 fe30 	bl	8006680 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <tcp_echoserver_accept+0x80>)
 8000a22:	68b8      	ldr	r0, [r7, #8]
 8000a24:	f005 fe70 	bl	8006708 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	490b      	ldr	r1, [pc, #44]	; (8000a58 <tcp_echoserver_accept+0x84>)
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f005 fea5 	bl	800677c <tcp_poll>
    
    ret_err = ERR_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]
 8000a36:	e005      	b.n	8000a44 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000a38:	6939      	ldr	r1, [r7, #16]
 8000a3a:	68b8      	ldr	r0, [r7, #8]
 8000a3c:	f000 f96f 	bl	8000d1e <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000a40:	23ff      	movs	r3, #255	; 0xff
 8000a42:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000a44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08000a5d 	.word	0x08000a5d
 8000a54:	08000ba5 	.word	0x08000ba5
 8000a58:	08000bc9 	.word	0x08000bc9

08000a5c <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d105      	bne.n	8000a7c <tcp_echoserver_recv+0x20>
 8000a70:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <tcp_echoserver_recv+0x134>)
 8000a72:	22ad      	movs	r2, #173	; 0xad
 8000a74:	4947      	ldr	r1, [pc, #284]	; (8000b94 <tcp_echoserver_recv+0x138>)
 8000a76:	4848      	ldr	r0, [pc, #288]	; (8000b98 <tcp_echoserver_recv+0x13c>)
 8000a78:	f00d fc60 	bl	800e33c <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d116      	bne.n	8000ab4 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000a94:	69b9      	ldr	r1, [r7, #24]
 8000a96:	68b8      	ldr	r0, [r7, #8]
 8000a98:	f000 f941 	bl	8000d1e <tcp_echoserver_connection_close>
 8000a9c:	e007      	b.n	8000aae <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000a9e:	493f      	ldr	r1, [pc, #252]	; (8000b9c <tcp_echoserver_recv+0x140>)
 8000aa0:	68b8      	ldr	r0, [r7, #8]
 8000aa2:	f005 fe0f 	bl	80066c4 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000aa6:	69b9      	ldr	r1, [r7, #24]
 8000aa8:	68b8      	ldr	r0, [r7, #8]
 8000aaa:	f000 f8e5 	bl	8000c78 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
 8000ab2:	e067      	b.n	8000b84 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d005      	beq.n	8000ace <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f003 ff77 	bl	80049bc <pbuf_free>
    }
    ret_err = err;
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	77fb      	strb	r3, [r7, #31]
 8000ad2:	e057      	b.n	8000b84 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d114      	bne.n	8000b06 <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000ae8:	492c      	ldr	r1, [pc, #176]	; (8000b9c <tcp_echoserver_recv+0x140>)
 8000aea:	68b8      	ldr	r0, [r7, #8]
 8000aec:	f005 fdea 	bl	80066c4 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a2a      	ldr	r2, [pc, #168]	; (8000ba0 <tcp_echoserver_recv+0x144>)
 8000af6:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000af8:	69b9      	ldr	r1, [r7, #24]
 8000afa:	68b8      	ldr	r0, [r7, #8]
 8000afc:	f000 f8bc 	bl	8000c78 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	77fb      	strb	r3, [r7, #31]
 8000b04:	e03e      	b.n	8000b84 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d119      	bne.n	8000b42 <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10b      	bne.n	8000b2e <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <tcp_echoserver_recv+0x144>)
 8000b22:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000b24:	69b9      	ldr	r1, [r7, #24]
 8000b26:	68b8      	ldr	r0, [r7, #8]
 8000b28:	f000 f8a6 	bl	8000c78 <tcp_echoserver_send>
 8000b2c:	e006      	b.n	8000b3c <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f004 f858 	bl	8004bec <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	77fb      	strb	r3, [r7, #31]
 8000b40:	e020      	b.n	8000b84 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d10e      	bne.n	8000b68 <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	891b      	ldrh	r3, [r3, #8]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	68b8      	ldr	r0, [r7, #8]
 8000b52:	f004 fea5 	bl	80058a0 <tcp_recved>
    es->p = NULL;
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f003 ff2d 	bl	80049bc <pbuf_free>
    ret_err = ERR_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	77fb      	strb	r3, [r7, #31]
 8000b66:	e00d      	b.n	8000b84 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	891b      	ldrh	r3, [r3, #8]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	68b8      	ldr	r0, [r7, #8]
 8000b70:	f004 fe96 	bl	80058a0 <tcp_recved>
    es->p = NULL;
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f003 ff1e 	bl	80049bc <pbuf_free>
    ret_err = ERR_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000b84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	0800f3f4 	.word	0x0800f3f4
 8000b94:	0800f414 	.word	0x0800f414
 8000b98:	0800f420 	.word	0x0800f420
 8000b9c:	08000c29 	.word	0x08000c29
 8000ba0:	0800f448 	.word	0x0800f448

08000ba4 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f002 fde0 	bl	8003780 <mem_free>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d017      	beq.n	8000c0c <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000be4:	490f      	ldr	r1, [pc, #60]	; (8000c24 <tcp_echoserver_poll+0x5c>)
 8000be6:	6838      	ldr	r0, [r7, #0]
 8000be8:	f005 fd6c 	bl	80066c4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6838      	ldr	r0, [r7, #0]
 8000bf0:	f000 f842 	bl	8000c78 <tcp_echoserver_send>
 8000bf4:	e007      	b.n	8000c06 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d103      	bne.n	8000c06 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f000 f88c 	bl	8000d1e <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	e004      	b.n	8000c16 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f004 fc6d 	bl	80054ec <tcp_abort>
    ret_err = ERR_ABRT;
 8000c12:	23f3      	movs	r3, #243	; 0xf3
 8000c14:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08000c29 	.word	0x08000c29

08000c28 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	4613      	mov	r3, r2
 8000c34:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d008      	beq.n	8000c5a <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000c48:	490a      	ldr	r1, [pc, #40]	; (8000c74 <tcp_echoserver_sent+0x4c>)
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f005 fd3a 	bl	80066c4 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000c50:	6979      	ldr	r1, [r7, #20]
 8000c52:	68b8      	ldr	r0, [r7, #8]
 8000c54:	f000 f810 	bl	8000c78 <tcp_echoserver_send>
 8000c58:	e007      	b.n	8000c6a <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d103      	bne.n	8000c6a <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000c62:	6979      	ldr	r1, [r7, #20]
 8000c64:	68b8      	ldr	r0, [r7, #8]
 8000c66:	f000 f85a 	bl	8000d1e <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08000c29 	.word	0x08000c29

08000c78 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000c86:	e036      	b.n	8000cf6 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6859      	ldr	r1, [r3, #4]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	895a      	ldrh	r2, [r3, #10]
 8000c96:	2301      	movs	r3, #1
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f008 fc21 	bl	80094e0 <tcp_write>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d11d      	bne.n	8000ce6 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	895b      	ldrh	r3, [r3, #10]
 8000cae:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d004      	beq.n	8000cca <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 ff19 	bl	8004afc <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000cca:	6938      	ldr	r0, [r7, #16]
 8000ccc:	f003 fe76 	bl	80049bc <pbuf_free>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f7      	beq.n	8000cca <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f004 fdde 	bl	80058a0 <tcp_recved>
 8000ce4:	e007      	b.n	8000cf6 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cee:	d102      	bne.n	8000cf6 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10b      	bne.n	8000d16 <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d007      	beq.n	8000d16 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	895a      	ldrh	r2, [r3, #10]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d9b8      	bls.n	8000c88 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f005 fc96 	bl	800665c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000d30:	2100      	movs	r1, #0
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f005 fcc6 	bl	80066c4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f005 fca0 	bl	8006680 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000d40:	2100      	movs	r1, #0
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f005 fce0 	bl	8006708 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f005 fd15 	bl	800677c <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000d58:	6838      	ldr	r0, [r7, #0]
 8000d5a:	f002 fd11 	bl	8003780 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f004 fada 	bl	8005318 <tcp_close>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000d72:	f00a ff8b 	bl	800bc8c <udp_new>
 8000d76:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d013      	beq.n	8000da6 <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000d7e:	2207      	movs	r2, #7
 8000d80:	490b      	ldr	r1, [pc, #44]	; (8000db0 <udp_echoserver_init+0x44>)
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f00a fe02 	bl	800b98c <udp_bind>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d105      	bne.n	8000da0 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000d94:	2200      	movs	r2, #0
 8000d96:	4907      	ldr	r1, [pc, #28]	; (8000db4 <udp_echoserver_init+0x48>)
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f00a ff15 	bl	800bbc8 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000d9e:	e002      	b.n	8000da6 <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f00a ff31 	bl	800bc08 <udp_remove>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08011f14 	.word	0x08011f14
 8000db4:	08000db9 	.word	0x08000db9

08000db8 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	68b8      	ldr	r0, [r7, #8]
 8000dcc:	f00a fe66 	bl	800ba9c <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	68b8      	ldr	r0, [r7, #8]
 8000dd4:	f00a fbf0 	bl	800b5b8 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000dd8:	68b8      	ldr	r0, [r7, #8]
 8000dda:	f00a fecd 	bl	800bb78 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f003 fdec 	bl	80049bc <pbuf_free>
   
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000df2:	e003      	b.n	8000dfc <LoopCopyDataInit>

08000df4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000df6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000df8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dfa:	3104      	adds	r1, #4

08000dfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e04:	d3f6      	bcc.n	8000df4 <CopyDataInit>
  ldr  r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e08:	e002      	b.n	8000e10 <LoopFillZerobss>

08000e0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e0c:	f842 3b04 	str.w	r3, [r2], #4

08000e10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e14:	d3f9      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e16:	f7ff fd8d 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f00d fa45 	bl	800e2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fba9 	bl	8000574 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e28:	08012080 	.word	0x08012080
  ldr  r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e30:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000e34:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000e38:	200068ac 	.word	0x200068ac

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f931 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fc48 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f93b 	bl	800111e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f911 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	2000009c 	.word	0x2000009c

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000009c 	.word	0x2000009c

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff47 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff5c 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb0 	bl	800108c <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001148:	4ba1      	ldr	r3, [pc, #644]	; (80013d0 <HAL_ETH_Init+0x298>)
 800114a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e182      	b.n	8001464 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f001 fe92 	bl	8002e9c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	4b95      	ldr	r3, [pc, #596]	; (80013d4 <HAL_ETH_Init+0x29c>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	4a94      	ldr	r2, [pc, #592]	; (80013d4 <HAL_ETH_Init+0x29c>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6453      	str	r3, [r2, #68]	; 0x44
 8001188:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <HAL_ETH_Init+0x29c>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001194:	4b90      	ldr	r3, [pc, #576]	; (80013d8 <HAL_ETH_Init+0x2a0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a8f      	ldr	r2, [pc, #572]	; (80013d8 <HAL_ETH_Init+0x2a0>)
 800119a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800119e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011a0:	4b8d      	ldr	r3, [pc, #564]	; (80013d8 <HAL_ETH_Init+0x2a0>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	498b      	ldr	r1, [pc, #556]	; (80013d8 <HAL_ETH_Init+0x2a0>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011c4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011c6:	f7ff fea1 	bl	8000f0c <HAL_GetTick>
 80011ca:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011cc:	e011      	b.n	80011f2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011ce:	f7ff fe9d 	bl	8000f0c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011dc:	d909      	bls.n	80011f2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e138      	b.n	8001464 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e4      	bne.n	80011ce <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f023 031c 	bic.w	r3, r3, #28
 8001212:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001214:	f001 fd0a 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8001218:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4a6f      	ldr	r2, [pc, #444]	; (80013dc <HAL_ETH_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d908      	bls.n	8001234 <HAL_ETH_Init+0xfc>
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4a6e      	ldr	r2, [pc, #440]	; (80013e0 <HAL_ETH_Init+0x2a8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d804      	bhi.n	8001234 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e027      	b.n	8001284 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	4a6a      	ldr	r2, [pc, #424]	; (80013e0 <HAL_ETH_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d908      	bls.n	800124e <HAL_ETH_Init+0x116>
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4a64      	ldr	r2, [pc, #400]	; (80013d0 <HAL_ETH_Init+0x298>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d204      	bcs.n	800124e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f043 030c 	orr.w	r3, r3, #12
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	e01a      	b.n	8001284 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a5f      	ldr	r2, [pc, #380]	; (80013d0 <HAL_ETH_Init+0x298>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d303      	bcc.n	800125e <HAL_ETH_Init+0x126>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4a62      	ldr	r2, [pc, #392]	; (80013e4 <HAL_ETH_Init+0x2ac>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d911      	bls.n	8001282 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4a60      	ldr	r2, [pc, #384]	; (80013e4 <HAL_ETH_Init+0x2ac>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d908      	bls.n	8001278 <HAL_ETH_Init+0x140>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4a5f      	ldr	r2, [pc, #380]	; (80013e8 <HAL_ETH_Init+0x2b0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d804      	bhi.n	8001278 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e005      	b.n	8001284 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e000      	b.n	8001284 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001282:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800128c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001290:	2100      	movs	r1, #0
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fb94 	bl	80019c0 <HAL_ETH_WritePHYRegister>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012a2:	6939      	ldr	r1, [r7, #16]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fc21 	bl	8001aec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0d6      	b.n	8001464 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012b6:	20ff      	movs	r0, #255	; 0xff
 80012b8:	f7ff fe34 	bl	8000f24 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a4 	beq.w	800140e <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012c6:	f7ff fe21 	bl	8000f0c <HAL_GetTick>
 80012ca:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	461a      	mov	r2, r3
 80012d2:	2101      	movs	r1, #1
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fb0b 	bl	80018f0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012da:	f7ff fe17 	bl	8000f0c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d90f      	bls.n	800130c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012f0:	6939      	ldr	r1, [r7, #16]
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fbfa 	bl	8001aec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0ab      	b.n	8001464 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0da      	beq.n	80012cc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001316:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131a:	2100      	movs	r1, #0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fb4f 	bl	80019c0 <HAL_ETH_WritePHYRegister>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800132c:	6939      	ldr	r1, [r7, #16]
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fbdc 	bl	8001aec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800133c:	2301      	movs	r3, #1
 800133e:	e091      	b.n	8001464 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fde4 	bl	8000f0c <HAL_GetTick>
 8001344:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	461a      	mov	r2, r3
 800134c:	2101      	movs	r1, #1
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 face 	bl	80018f0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001354:	f7ff fdda 	bl	8000f0c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d90f      	bls.n	8001386 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fbbd 	bl	8001aec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e06e      	b.n	8001464 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0da      	beq.n	8001346 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	461a      	mov	r2, r3
 8001396:	211f      	movs	r1, #31
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 faa9 	bl	80018f0 <HAL_ETH_ReadPHYRegister>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013a8:	6939      	ldr	r1, [r7, #16]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fb9e 	bl	8001aec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013b8:	2301      	movs	r3, #1
 80013ba:	e053      	b.n	8001464 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d012      	beq.n	80013ec <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e010      	b.n	80013f2 <HAL_ETH_Init+0x2ba>
 80013d0:	03938700 	.word	0x03938700
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	01312cff 	.word	0x01312cff
 80013e0:	02160ebf 	.word	0x02160ebf
 80013e4:	05f5e0ff 	.word	0x05f5e0ff
 80013e8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	e026      	b.n	8001452 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e021      	b.n	8001452 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800141e:	4313      	orrs	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 faca 	bl	80019c0 <HAL_ETH_WritePHYRegister>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fb57 	bl	8001aec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00c      	b.n	8001464 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800144a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800144e:	f7ff fd69 	bl	8000f24 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fb49 	bl	8001aec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ETH_DMATxDescListInit+0x20>
 8001488:	2302      	movs	r3, #2
 800148a:	e051      	b.n	8001530 <HAL_ETH_DMATxDescListInit+0xc4>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e030      	b.n	800150a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014b8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d208      	bcs.n	80014fe <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	e002      	b.n	8001504 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3ca      	bcc.n	80014a8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_ETH_DMARxDescListInit+0x20>
 8001558:	2302      	movs	r3, #2
 800155a:	e055      	b.n	8001608 <HAL_ETH_DMARxDescListInit+0xcc>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2202      	movs	r2, #2
 8001568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e034      	b.n	80015e2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	015b      	lsls	r3, r3, #5
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	4413      	add	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001588:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001590:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d208      	bcs.n	80015d6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4413      	add	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	e002      	b.n	80015dc <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3c6      	bcc.n	8001578 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015f4:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ETH_TransmitFrame+0x24>
 8001634:	2302      	movs	r3, #2
 8001636:	e0cc      	b.n	80017d2 <HAL_ETH_TransmitFrame+0x1be>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800165e:	2301      	movs	r3, #1
 8001660:	e0b7      	b.n	80017d2 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da09      	bge.n	8001680 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2212      	movs	r2, #18
 8001670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0a8      	b.n	80017d2 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001686:	4293      	cmp	r3, r2
 8001688:	d915      	bls.n	80016b6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4a54      	ldr	r2, [pc, #336]	; (80017e0 <HAL_ETH_TransmitFrame+0x1cc>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0a9b      	lsrs	r3, r3, #10
 8001694:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <HAL_ETH_TransmitFrame+0x1cc>)
 800169a:	fba3 1302 	umull	r1, r3, r3, r2
 800169e:	0a9b      	lsrs	r3, r3, #10
 80016a0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e001      	b.n	80016ba <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016b6:	2301      	movs	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d11c      	bne.n	80016fa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016ce:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016da:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016ea:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f8:	e04b      	b.n	8001792 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e044      	b.n	800178a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800170e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d107      	bne.n	8001726 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001724:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800172e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3b01      	subs	r3, #1
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	429a      	cmp	r2, r3
 8001738:	d116      	bne.n	8001768 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001748:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <HAL_ETH_TransmitFrame+0x1d0>)
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	4413      	add	r3, r2
 8001756:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800175a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001766:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001776:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3301      	adds	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3b6      	bcc.n	8001700 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00d      	beq.n	80017c0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	461a      	mov	r2, r3
 80017ae:	2304      	movs	r3, #4
 80017b0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ba:	461a      	mov	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	ac02b00b 	.word	0xac02b00b
 80017e4:	fffffa0c 	.word	0xfffffa0c

080017e8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ETH_GetReceivedFrame+0x1a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e070      	b.n	80018e4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2202      	movs	r2, #2
 800180e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db5a      	blt.n	80018d2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	2b01      	cmp	r3, #1
 800183a:	d103      	bne.n	8001844 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001858:	3b04      	subs	r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	e02b      	b.n	80018e4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
 80018ba:	e00a      	b.n	80018d2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	460b      	mov	r3, r1
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b82      	cmp	r3, #130	; 0x82
 8001910:	d101      	bne.n	8001916 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001912:	2302      	movs	r3, #2
 8001914:	e050      	b.n	80019b8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2282      	movs	r2, #130	; 0x82
 800191a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 031c 	and.w	r3, r3, #28
 800192c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8a1b      	ldrh	r3, [r3, #16]
 8001932:	02db      	lsls	r3, r3, #11
 8001934:	b29b      	uxth	r3, r3
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800193c:	897b      	ldrh	r3, [r7, #10]
 800193e:	019b      	lsls	r3, r3, #6
 8001940:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f023 0302 	bic.w	r3, r3, #2
 8001950:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001962:	f7ff fad3 	bl	8000f0c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001968:	e015      	b.n	8001996 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800196a:	f7ff facf 	bl	8000f0c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d309      	bcc.n	800198e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e014      	b.n	80019b8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e4      	bne.n	800196a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	460b      	mov	r3, r1
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b42      	cmp	r3, #66	; 0x42
 80019e0:	d101      	bne.n	80019e6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
 80019e4:	e04e      	b.n	8001a84 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2242      	movs	r2, #66	; 0x42
 80019ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 031c 	and.w	r3, r3, #28
 80019fc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8a1b      	ldrh	r3, [r3, #16]
 8001a02:	02db      	lsls	r3, r3, #11
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a3c:	f7ff fa66 	bl	8000f0c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a42:	e015      	b.n	8001a70 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a44:	f7ff fa62 	bl	8000f0c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a52:	d309      	bcc.n	8001a68 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e00d      	b.n	8001a84 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e4      	bne.n	8001a44 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ETH_Start+0x16>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e01f      	b.n	8001ae2 <HAL_ETH_Start+0x56>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2202      	movs	r2, #2
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fa18 	bl	8001ee8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa32 	bl	8001f22 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa78 	bl	8001fb4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fa49 	bl	8001f5c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fa5c 	bl	8001f88 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0b0      	sub	sp, #192	; 0xc0
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b08:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b36:	663b      	str	r3, [r7, #96]	; 0x60
 8001b38:	e001      	b.n	8001b3e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b42:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b58:	2340      	movs	r3, #64	; 0x40
 8001b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc4:	4baa      	ldr	r3, [pc, #680]	; (8001e70 <ETH_MACDMAConfig+0x384>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bd0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001bd4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001bd8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001bde:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001be2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001be6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001bec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bf0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bf4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bf8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001bfc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c00:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c14:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f7ff f97f 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c2e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c34:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c38:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c3e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c44:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c4a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c50:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c5c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c5e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff f95a 	bl	8000f24 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c78:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c82:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c8c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c9c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001caa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cb0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cb6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001cbc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001cc2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001cc8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cdc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f91b 	bl	8000f24 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cf8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001cfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7ff f906 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d20:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d34:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d46:	2304      	movs	r3, #4
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d80:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <ETH_MACDMAConfig+0x388>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d88:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d8c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d8e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d90:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d92:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d94:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d96:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d98:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d9a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d9c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001da0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001da4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001da8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001daa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dc2:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7ff f8a6 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de0:	461a      	mov	r2, r3
 8001de2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001de6:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dec:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001df0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001df4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001df8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dfe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e02:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e10:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff f87f 	bl	8000f24 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e34:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10d      	bne.n	8001e5a <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e58:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f808 	bl	8001e78 <ETH_MACAddressConfig>
}
 8001e68:	bf00      	nop
 8001e6a:	37c0      	adds	r7, #192	; 0xc0
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	ff20810f 	.word	0xff20810f
 8001e74:	f8de3f23 	.word	0xf8de3f23

08001e78 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3305      	adds	r3, #5
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	3204      	adds	r2, #4
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <ETH_MACAddressConfig+0x68>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	061a      	lsls	r2, r3, #24
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3302      	adds	r3, #2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <ETH_MACAddressConfig+0x6c>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40028040 	.word	0x40028040
 8001ee4:	40028044 	.word	0x40028044

08001ee8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f000 f877 	bl	8002000 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0204 	orr.w	r2, r2, #4
 8001f3c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 f85a 	bl	8002000 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f7a:	6193      	str	r3, [r2, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fa6:	6193      	str	r3, [r2, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fd6:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f000 f80b 	bl	8002000 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ff4:	6193      	str	r3, [r2, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <ETH_Delay+0x38>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <ETH_Delay+0x3c>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800201c:	bf00      	nop
  } 
  while (Delay --);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	60fa      	str	r2, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <ETH_Delay+0x1c>
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e16b      	b.n	8002334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 815a 	bne.w	800232e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00b      	beq.n	800209a <HAL_GPIO_Init+0x5a>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208e:	2b11      	cmp	r3, #17
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b12      	cmp	r3, #18
 8002098:	d130      	bne.n	80020fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0201 	and.w	r2, r3, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0xfc>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80b4 	beq.w	800232e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b60      	ldr	r3, [pc, #384]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a5f      	ldr	r2, [pc, #380]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_GPIO_Init+0x310>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_GPIO_Init+0x314>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_GPIO_Init+0x318>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_GPIO_Init+0x31c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x320>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <HAL_GPIO_Init+0x324>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x328>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_GPIO_Init+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x20a>
 8002246:	2307      	movs	r3, #7
 8002248:	e00e      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224a:	2308      	movs	r3, #8
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224e:	2306      	movs	r3, #6
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x310>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022aa:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_GPIO_Init+0x334>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f ae90 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40013800 	.word	0x40013800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40021400 	.word	0x40021400
 800236c:	40021800 	.word	0x40021800
 8002370:	40021c00 	.word	0x40021c00
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e25e      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d075      	beq.n	8002482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00c      	beq.n	80023bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e239      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x74>
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x98>
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fd6c 	bl	8000f0c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fd68 	bl	8000f0c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1fe      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xc0>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fd58 	bl	8000f0c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fd54 	bl	8000f0c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1ea      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0xe8>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1be      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fd0d 	bl	8000f0c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fd09 	bl	8000f0c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e19f      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4925      	ldr	r1, [pc, #148]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fcec 	bl	8000f0c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fce8 	bl	8000f0c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e17e      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fccc 	bl	8000f0c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fcc8 	bl	8000f0c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e15e      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fcb5 	bl	8000f0c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	e00e      	b.n	80025c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe fcb1 	bl	8000f0c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d907      	bls.n	80025c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e147      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	42470000 	.word	0x42470000
 80025c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ea      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8097 	beq.w	800270c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b7a      	ldr	r3, [pc, #488]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b77      	ldr	r3, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a73      	ldr	r2, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fc71 	bl	8000f0c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fc6d 	bl	8000f0c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e103      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x2ea>
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e01c      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x30c>
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a5b      	ldr	r2, [pc, #364]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fc32 	bl	8000f0c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe fc2e 	bl	8000f0c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0c2      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ee      	beq.n	80026ac <HAL_RCC_OscConfig+0x334>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fc1c 	bl	8000f0c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fc18 	bl	8000f0c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0ac      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8098 	beq.w	8002846 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d05c      	beq.n	80027dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d141      	bne.n	80027ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fbec 	bl	8000f0c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fbe8 	bl	8000f0c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e07e      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	491b      	ldr	r1, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fbc1 	bl	8000f0c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fbbd 	bl	8000f0c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e053      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x416>
 80027ac:	e04b      	b.n	8002846 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fbaa 	bl	8000f0c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fba6 	bl	8000f0c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e03c      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x444>
 80027da:	e034      	b.n	8002846 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e02f      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_RCC_OscConfig+0x4d8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	429a      	cmp	r2, r3
 8002806:	d11c      	bne.n	8002842 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d115      	bne.n	8002842 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002822:	4293      	cmp	r3, r2
 8002824:	d10d      	bne.n	8002842 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fae2 	bl	8000f0c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fade 	bl	8000f0c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fa42 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08011e34 	.word	0x08011e34
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b094      	sub	sp, #80	; 0x50
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a30:	2300      	movs	r3, #0
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x40>
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f200 80e1 	bhi.w	8002c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a52:	e0db      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a58:	e0db      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5a:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5e:	e0d8      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a60:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	0159      	lsls	r1, r3, #5
 8002aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa4:	0150      	lsls	r0, r2, #5
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4621      	mov	r1, r4
 8002aac:	1a51      	subs	r1, r2, r1
 8002aae:	6139      	str	r1, [r7, #16]
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	018b      	lsls	r3, r1, #6
 8002ac8:	4651      	mov	r1, sl
 8002aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ace:	4651      	mov	r1, sl
 8002ad0:	018a      	lsls	r2, r1, #6
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ad8:	4659      	mov	r1, fp
 8002ada:	eb63 0901 	sbc.w	r9, r3, r1
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af2:	4690      	mov	r8, r2
 8002af4:	4699      	mov	r9, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	eb18 0303 	adds.w	r3, r8, r3
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	462b      	mov	r3, r5
 8002b00:	eb49 0303 	adc.w	r3, r9, r3
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b12:	4629      	mov	r1, r5
 8002b14:	024b      	lsls	r3, r1, #9
 8002b16:	4621      	mov	r1, r4
 8002b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	024a      	lsls	r2, r1, #9
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b26:	2200      	movs	r2, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b30:	f7fd fb9e 	bl	8000270 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3c:	e058      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	2200      	movs	r2, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	4611      	mov	r1, r2
 8002b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b58:	4642      	mov	r2, r8
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	f04f 0000 	mov.w	r0, #0
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	0159      	lsls	r1, r3, #5
 8002b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6a:	0150      	lsls	r0, r2, #5
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4641      	mov	r1, r8
 8002b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b76:	4649      	mov	r1, r9
 8002b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b90:	ebb2 040a 	subs.w	r4, r2, sl
 8002b94:	eb63 050b 	sbc.w	r5, r3, fp
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	00eb      	lsls	r3, r5, #3
 8002ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba6:	00e2      	lsls	r2, r4, #3
 8002ba8:	4614      	mov	r4, r2
 8002baa:	461d      	mov	r5, r3
 8002bac:	4643      	mov	r3, r8
 8002bae:	18e3      	adds	r3, r4, r3
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	eb45 0303 	adc.w	r3, r5, r3
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	028b      	lsls	r3, r1, #10
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	028a      	lsls	r2, r1, #10
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	61fa      	str	r2, [r7, #28]
 8002be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be4:	f7fd fb44 	bl	8000270 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3750      	adds	r7, #80	; 0x50
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000

08002c44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	IP_ADDRESS[0] = 192;
 8002c4a:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c4c:	22c0      	movs	r2, #192	; 0xc0
 8002c4e:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = 168;
 8002c50:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c52:	22a8      	movs	r2, #168	; 0xa8
 8002c54:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = 0;
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = 10;
 8002c5c:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c5e:	220a      	movs	r2, #10
 8002c60:	70da      	strb	r2, [r3, #3]
	NETMASK_ADDRESS[0] = 255;
 8002c62:	4b80      	ldr	r3, [pc, #512]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = 255;
 8002c68:	4b7e      	ldr	r3, [pc, #504]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = 255;
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = 0;
 8002c74:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002c7a:	f000 fc2e 	bl	80034da <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002c7e:	4b78      	ldr	r3, [pc, #480]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	061a      	lsls	r2, r3, #24
 8002c84:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c8e:	789b      	ldrb	r3, [r3, #2]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	4313      	orrs	r3, r2
 8002c94:	4a72      	ldr	r2, [pc, #456]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c96:	78d2      	ldrb	r2, [r2, #3]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	061a      	lsls	r2, r3, #24
 8002c9c:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	0619      	lsls	r1, r3, #24
 8002ca2:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	4319      	orrs	r1, r3
 8002caa:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cac:	789b      	ldrb	r3, [r3, #2]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	496b      	ldr	r1, [pc, #428]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cb4:	78c9      	ldrb	r1, [r1, #3]
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	0619      	lsls	r1, r3, #24
 8002cc6:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	4319      	orrs	r1, r3
 8002cce:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cd0:	789b      	ldrb	r3, [r3, #2]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	4962      	ldr	r1, [pc, #392]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cd8:	78c9      	ldrb	r1, [r1, #3]
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	0619      	lsls	r1, r3, #24
 8002cea:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	4319      	orrs	r1, r3
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cf4:	789b      	ldrb	r3, [r3, #2]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	4959      	ldr	r1, [pc, #356]	; (8002e60 <MX_LWIP_Init+0x21c>)
 8002cfc:	78c9      	ldrb	r1, [r1, #3]
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	0e1b      	lsrs	r3, r3, #24
 8002d02:	4313      	orrs	r3, r2
 8002d04:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <MX_LWIP_Init+0x224>)
 8002d06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	061a      	lsls	r2, r3, #24
 8002d0e:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d18:	789b      	ldrb	r3, [r3, #2]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	4a51      	ldr	r2, [pc, #324]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d20:	78d2      	ldrb	r2, [r2, #3]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	061a      	lsls	r2, r3, #24
 8002d26:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	0619      	lsls	r1, r3, #24
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	4319      	orrs	r1, r3
 8002d34:	4b4b      	ldr	r3, [pc, #300]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d36:	789b      	ldrb	r3, [r3, #2]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	4949      	ldr	r1, [pc, #292]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d3e:	78c9      	ldrb	r1, [r1, #3]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	0619      	lsls	r1, r3, #24
 8002d50:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	4319      	orrs	r1, r3
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d5a:	789b      	ldrb	r3, [r3, #2]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	4940      	ldr	r1, [pc, #256]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d62:	78c9      	ldrb	r1, [r1, #3]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	0619      	lsls	r1, r3, #24
 8002d74:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	4319      	orrs	r1, r3
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d7e:	789b      	ldrb	r3, [r3, #2]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	430b      	orrs	r3, r1
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <MX_LWIP_Init+0x220>)
 8002d86:	78c9      	ldrb	r1, [r1, #3]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	0e1b      	lsrs	r3, r3, #24
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	4a37      	ldr	r2, [pc, #220]	; (8002e6c <MX_LWIP_Init+0x228>)
 8002d90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d92:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	061a      	lsls	r2, r3, #24
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002da2:	789b      	ldrb	r3, [r3, #2]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	4313      	orrs	r3, r2
 8002da8:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002daa:	78d2      	ldrb	r2, [r2, #3]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	061a      	lsls	r2, r3, #24
 8002db0:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	0619      	lsls	r1, r3, #24
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002db8:	785b      	ldrb	r3, [r3, #1]
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	4319      	orrs	r1, r3
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002dc0:	789b      	ldrb	r3, [r3, #2]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	492a      	ldr	r1, [pc, #168]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002dc8:	78c9      	ldrb	r1, [r1, #3]
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0619      	lsls	r1, r3, #24
 8002dda:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	4319      	orrs	r1, r3
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002de4:	789b      	ldrb	r3, [r3, #2]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	430b      	orrs	r3, r1
 8002dea:	4921      	ldr	r1, [pc, #132]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002dec:	78c9      	ldrb	r1, [r1, #3]
 8002dee:	430b      	orrs	r3, r1
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002df6:	431a      	orrs	r2, r3
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	0619      	lsls	r1, r3, #24
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002e00:	785b      	ldrb	r3, [r3, #1]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	4319      	orrs	r1, r3
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002e08:	789b      	ldrb	r3, [r3, #2]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	4918      	ldr	r1, [pc, #96]	; (8002e70 <MX_LWIP_Init+0x22c>)
 8002e10:	78c9      	ldrb	r1, [r1, #3]
 8002e12:	430b      	orrs	r3, r1
 8002e14:	0e1b      	lsrs	r3, r3, #24
 8002e16:	4313      	orrs	r3, r2
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <MX_LWIP_Init+0x230>)
 8002e1a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <MX_LWIP_Init+0x234>)
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_LWIP_Init+0x238>)
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2300      	movs	r3, #0
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <MX_LWIP_Init+0x230>)
 8002e2a:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <MX_LWIP_Init+0x228>)
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <MX_LWIP_Init+0x224>)
 8002e2e:	4814      	ldr	r0, [pc, #80]	; (8002e80 <MX_LWIP_Init+0x23c>)
 8002e30:	f000 fff8 	bl	8003e24 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002e34:	4812      	ldr	r0, [pc, #72]	; (8002e80 <MX_LWIP_Init+0x23c>)
 8002e36:	f001 f9a5 	bl	8004184 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_LWIP_Init+0x23c>)
 8002e3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <MX_LWIP_Init+0x210>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002e4c:	480c      	ldr	r0, [pc, #48]	; (8002e80 <MX_LWIP_Init+0x23c>)
 8002e4e:	f001 f9a9 	bl	80041a4 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002e52:	e002      	b.n	8002e5a <MX_LWIP_Init+0x216>
    netif_set_down(&gnetif);
 8002e54:	480a      	ldr	r0, [pc, #40]	; (8002e80 <MX_LWIP_Init+0x23c>)
 8002e56:	f001 fa11 	bl	800427c <netif_set_down>
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200000dc 	.word	0x200000dc
 8002e64:	200000e0 	.word	0x200000e0
 8002e68:	200000d0 	.word	0x200000d0
 8002e6c:	200000d4 	.word	0x200000d4
 8002e70:	200000e4 	.word	0x200000e4
 8002e74:	200000d8 	.word	0x200000d8
 8002e78:	0800e0fd 	.word	0x0800e0fd
 8002e7c:	08003415 	.word	0x08003415
 8002e80:	200000a0 	.word	0x200000a0

08002e84 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002e88:	4803      	ldr	r0, [pc, #12]	; (8002e98 <MX_LWIP_Process+0x14>)
 8002e8a:	f000 faa3 	bl	80033d4 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8002e8e:	f008 f98f 	bl	800b1b0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200000a0 	.word	0x200000a0

08002e9c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a46      	ldr	r2, [pc, #280]	; (8002fd4 <HAL_ETH_MspInit+0x138>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	f040 8085 	bne.w	8002fca <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eea:	6313      	str	r3, [r2, #48]	; 0x30
 8002eec:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f06:	6313      	str	r3, [r2, #48]	; 0x30
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6313      	str	r3, [r2, #48]	; 0x30
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_ETH_MspInit+0x13c>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f68:	2332      	movs	r3, #50	; 0x32
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f78:	230b      	movs	r3, #11
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	4816      	ldr	r0, [pc, #88]	; (8002fdc <HAL_ETH_MspInit+0x140>)
 8002f84:	f7ff f85c 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002f88:	2386      	movs	r3, #134	; 0x86
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f98:	230b      	movs	r3, #11
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <HAL_ETH_MspInit+0x144>)
 8002fa4:	f7ff f84c 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002fa8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fba:	230b      	movs	r3, #11
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <HAL_ETH_MspInit+0x148>)
 8002fc6:	f7ff f83b 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3738      	adds	r7, #56	; 0x38
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40028000 	.word	0x40028000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400

08002fe8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002ff4:	4b49      	ldr	r3, [pc, #292]	; (800311c <low_level_init+0x134>)
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <low_level_init+0x138>)
 8002ff8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002ffa:	4b48      	ldr	r3, [pc, #288]	; (800311c <low_level_init+0x134>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <low_level_init+0x134>)
 8003002:	2201      	movs	r2, #1
 8003004:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800300e:	23e1      	movs	r3, #225	; 0xe1
 8003010:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800301e:	4a3f      	ldr	r2, [pc, #252]	; (800311c <low_level_init+0x134>)
 8003020:	f107 0308 	add.w	r3, r7, #8
 8003024:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <low_level_init+0x134>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800302c:	4b3b      	ldr	r3, [pc, #236]	; (800311c <low_level_init+0x134>)
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003032:	4b3a      	ldr	r3, [pc, #232]	; (800311c <low_level_init+0x134>)
 8003034:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003038:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800303a:	4838      	ldr	r0, [pc, #224]	; (800311c <low_level_init+0x134>)
 800303c:	f7fe f87c 	bl	8001138 <HAL_ETH_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	b2da      	uxtb	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800305c:	2304      	movs	r3, #4
 800305e:	4a31      	ldr	r2, [pc, #196]	; (8003124 <low_level_init+0x13c>)
 8003060:	4931      	ldr	r1, [pc, #196]	; (8003128 <low_level_init+0x140>)
 8003062:	482e      	ldr	r0, [pc, #184]	; (800311c <low_level_init+0x134>)
 8003064:	f7fe fa02 	bl	800146c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003068:	2304      	movs	r3, #4
 800306a:	4a30      	ldr	r2, [pc, #192]	; (800312c <low_level_init+0x144>)
 800306c:	4930      	ldr	r1, [pc, #192]	; (8003130 <low_level_init+0x148>)
 800306e:	482b      	ldr	r0, [pc, #172]	; (800311c <low_level_init+0x134>)
 8003070:	f7fe fa64 	bl	800153c <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2206      	movs	r2, #6
 8003078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <low_level_init+0x134>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <low_level_init+0x134>)
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	785a      	ldrb	r2, [r3, #1]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <low_level_init+0x134>)
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	789a      	ldrb	r2, [r3, #2]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <low_level_init+0x134>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	78da      	ldrb	r2, [r3, #3]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <low_level_init+0x134>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	791a      	ldrb	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <low_level_init+0x134>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	795a      	ldrb	r2, [r3, #5]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80030ca:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030d2:	f043 030a 	orr.w	r3, r3, #10
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80030de:	480f      	ldr	r0, [pc, #60]	; (800311c <low_level_init+0x134>)
 80030e0:	f7fe fcd4 	bl	8001a8c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	461a      	mov	r2, r3
 80030ea:	211d      	movs	r1, #29
 80030ec:	480b      	ldr	r0, [pc, #44]	; (800311c <low_level_init+0x134>)
 80030ee:	f7fe fbff 	bl	80018f0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f043 030b 	orr.w	r3, r3, #11
 80030f8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	461a      	mov	r2, r3
 80030fe:	211d      	movs	r1, #29
 8003100:	4806      	ldr	r0, [pc, #24]	; (800311c <low_level_init+0x134>)
 8003102:	f7fe fc5d 	bl	80019c0 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003106:	f107 0310 	add.w	r3, r7, #16
 800310a:	461a      	mov	r2, r3
 800310c:	211d      	movs	r1, #29
 800310e:	4803      	ldr	r0, [pc, #12]	; (800311c <low_level_init+0x134>)
 8003110:	f7fe fbee 	bl	80018f0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20003188 	.word	0x20003188
 8003120:	40028000 	.word	0x40028000
 8003124:	200019b8 	.word	0x200019b8
 8003128:	20000168 	.word	0x20000168
 800312c:	200001e8 	.word	0x200001e8
 8003130:	200000e8 	.word	0x200000e8

08003134 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <low_level_output+0x138>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003156:	4b45      	ldr	r3, [pc, #276]	; (800326c <low_level_output+0x138>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	e05a      	b.n	800321c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	da03      	bge.n	8003176 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800316e:	23f8      	movs	r3, #248	; 0xf8
 8003170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003174:	e05c      	b.n	8003230 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	895b      	ldrh	r3, [r3, #10]
 800317a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003180:	e02f      	b.n	80031e2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	18d0      	adds	r0, r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	18d1      	adds	r1, r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003196:	3304      	adds	r3, #4
 8003198:	461a      	mov	r2, r3
 800319a:	f00b f8b9 	bl	800e310 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da03      	bge.n	80031b4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80031ac:	23f8      	movs	r3, #248	; 0xf8
 80031ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80031b2:	e03d      	b.n	8003230 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80031c4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80031d0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80031dc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d8c8      	bhi.n	8003182 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	18d0      	adds	r0, r2, r3
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4413      	add	r3, r2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4619      	mov	r1, r3
 8003202:	f00b f885 	bl	800e310 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1a1      	bne.n	8003166 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	4811      	ldr	r0, [pc, #68]	; (800326c <low_level_output+0x138>)
 8003226:	f7fe f9f5 	bl	8001614 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <low_level_output+0x138>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <low_level_output+0x138>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324a:	461a      	mov	r2, r3
 800324c:	2320      	movs	r3, #32
 800324e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <low_level_output+0x138>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003258:	461a      	mov	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800325e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003262:	4618      	mov	r0, r3
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20003188 	.word	0x20003188

08003270 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003294:	484e      	ldr	r0, [pc, #312]	; (80033d0 <low_level_input+0x160>)
 8003296:	f7fe faa7 	bl	80017e8 <HAL_ETH_GetReceivedFrame>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <low_level_input+0x34>
  
    return NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e091      	b.n	80033c8 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80032a4:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <low_level_input+0x160>)
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <low_level_input+0x160>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80032bc:	4619      	mov	r1, r3
 80032be:	2000      	movs	r0, #0
 80032c0:	f001 f898 	bl	80043f4 <pbuf_alloc>
 80032c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d04b      	beq.n	8003364 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <low_level_input+0x160>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032da:	e040      	b.n	800335e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	895b      	ldrh	r3, [r3, #10]
 80032e0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80032e6:	e021      	b.n	800332c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	18d0      	adds	r0, r2, r3
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	18d1      	adds	r1, r2, r3
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80032fc:	3304      	adds	r3, #4
 80032fe:	461a      	mov	r2, r3
 8003300:	f00b f806 	bl	800e310 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	4413      	add	r3, r2
 8003316:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800331a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003326:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003336:	4293      	cmp	r3, r2
 8003338:	d8d6      	bhi.n	80032e8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	18d0      	adds	r0, r2, r3
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4619      	mov	r1, r3
 800334c:	f00a ffe0 	bl	800e310 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4413      	add	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1bb      	bne.n	80032dc <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <low_level_input+0x160>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e00b      	b.n	8003388 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	3301      	adds	r3, #1
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <low_level_input+0x160>)
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3ee      	bcc.n	8003370 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <low_level_input+0x160>)
 8003394:	2200      	movs	r2, #0
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <low_level_input+0x160>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <low_level_input+0x160>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b2:	461a      	mov	r2, r3
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <low_level_input+0x160>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c0:	461a      	mov	r2, r3
 80033c2:	2300      	movs	r3, #0
 80033c4:	6093      	str	r3, [r2, #8]
  }
  return p;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3730      	adds	r7, #48	; 0x30
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20003188 	.word	0x20003188

080033d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff47 	bl	8003270 <low_level_input>
 80033e2:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	4798      	blx	r3
 80033f4:	4603      	mov	r3, r0
 80033f6:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80033f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f001 fadb 	bl	80049bc <pbuf_free>
    p = NULL;    
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e000      	b.n	800340e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800340c:	bf00      	nop
  }
}
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <ethernetif_init+0x1c>
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <ethernetif_init+0x48>)
 8003424:	f240 2207 	movw	r2, #519	; 0x207
 8003428:	490d      	ldr	r1, [pc, #52]	; (8003460 <ethernetif_init+0x4c>)
 800342a:	480e      	ldr	r0, [pc, #56]	; (8003464 <ethernetif_init+0x50>)
 800342c:	f00a ff86 	bl	800e33c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2273      	movs	r2, #115	; 0x73
 8003434:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2274      	movs	r2, #116	; 0x74
 800343c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <ethernetif_init+0x54>)
 8003444:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a08      	ldr	r2, [pc, #32]	; (800346c <ethernetif_init+0x58>)
 800344a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fdcb 	bl	8002fe8 <low_level_init>

  return ERR_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	0800f454 	.word	0x0800f454
 8003460:	0800f470 	.word	0x0800f470
 8003464:	0800f480 	.word	0x0800f480
 8003468:	0800c5b5 	.word	0x0800c5b5
 800346c:	08003135 	.word	0x08003135

08003470 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003474:	f7fd fd4a 	bl	8000f0c <HAL_GetTick>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}

0800347e <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	b21a      	sxth	r2, r3
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	b29b      	uxth	r3, r3
 8003494:	b21b      	sxth	r3, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	b21b      	sxth	r3, r3
 800349a:	b29b      	uxth	r3, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	061a      	lsls	r2, r3, #24
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0e1b      	lsrs	r3, r3, #24
 80034cc:	4313      	orrs	r3, r2
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80034e4:	f000 f8d4 	bl	8003690 <mem_init>
  memp_init();
 80034e8:	f000 fbda 	bl	8003ca0 <memp_init>
  pbuf_init();
  netif_init();
 80034ec:	f000 fc92 	bl	8003e14 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80034f0:	f007 fea0 	bl	800b234 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80034f4:	f001 fd00 	bl	8004ef8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80034f8:	f007 fe12 	bl	800b120 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <ptr_to_mem+0x20>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	4413      	add	r3, r2
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	2000383c 	.word	0x2000383c

08003528 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <mem_to_ptr+0x20>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b29b      	uxth	r3, r3
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000383c 	.word	0x2000383c

0800354c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003554:	4b45      	ldr	r3, [pc, #276]	; (800366c <plug_holes+0x120>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d206      	bcs.n	800356c <plug_holes+0x20>
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <plug_holes+0x124>)
 8003560:	f240 12df 	movw	r2, #479	; 0x1df
 8003564:	4943      	ldr	r1, [pc, #268]	; (8003674 <plug_holes+0x128>)
 8003566:	4844      	ldr	r0, [pc, #272]	; (8003678 <plug_holes+0x12c>)
 8003568:	f00a fee8 	bl	800e33c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800356c:	4b43      	ldr	r3, [pc, #268]	; (800367c <plug_holes+0x130>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d306      	bcc.n	8003584 <plug_holes+0x38>
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <plug_holes+0x124>)
 8003578:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800357c:	4940      	ldr	r1, [pc, #256]	; (8003680 <plug_holes+0x134>)
 800357e:	483e      	ldr	r0, [pc, #248]	; (8003678 <plug_holes+0x12c>)
 8003580:	f00a fedc 	bl	800e33c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <plug_holes+0x4e>
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <plug_holes+0x124>)
 800358e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003592:	493c      	ldr	r1, [pc, #240]	; (8003684 <plug_holes+0x138>)
 8003594:	4838      	ldr	r0, [pc, #224]	; (8003678 <plug_holes+0x12c>)
 8003596:	f00a fed1 	bl	800e33c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80035a2:	d906      	bls.n	80035b2 <plug_holes+0x66>
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <plug_holes+0x124>)
 80035a6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80035aa:	4937      	ldr	r1, [pc, #220]	; (8003688 <plug_holes+0x13c>)
 80035ac:	4832      	ldr	r0, [pc, #200]	; (8003678 <plug_holes+0x12c>)
 80035ae:	f00a fec5 	bl	800e33c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffa4 	bl	8003504 <ptr_to_mem>
 80035bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d024      	beq.n	8003610 <plug_holes+0xc4>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d120      	bne.n	8003610 <plug_holes+0xc4>
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <plug_holes+0x130>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d01b      	beq.n	8003610 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80035d8:	4b2c      	ldr	r3, [pc, #176]	; (800368c <plug_holes+0x140>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d102      	bne.n	80035e8 <plug_holes+0x9c>
      lfree = mem;
 80035e2:	4a2a      	ldr	r2, [pc, #168]	; (800368c <plug_holes+0x140>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80035f8:	d00a      	beq.n	8003610 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff80 	bl	8003504 <ptr_to_mem>
 8003604:	4604      	mov	r4, r0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff8e 	bl	8003528 <mem_to_ptr>
 800360c:	4603      	mov	r3, r0
 800360e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	885b      	ldrh	r3, [r3, #2]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff75 	bl	8003504 <ptr_to_mem>
 800361a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d01f      	beq.n	8003664 <plug_holes+0x118>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	791b      	ldrb	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11b      	bne.n	8003664 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <plug_holes+0x140>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d102      	bne.n	800363c <plug_holes+0xf0>
      lfree = pmem;
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <plug_holes+0x140>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800364c:	d00a      	beq.n	8003664 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff56 	bl	8003504 <ptr_to_mem>
 8003658:	4604      	mov	r4, r0
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f7ff ff64 	bl	8003528 <mem_to_ptr>
 8003660:	4603      	mov	r3, r0
 8003662:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}
 800366c:	2000383c 	.word	0x2000383c
 8003670:	0800f4a8 	.word	0x0800f4a8
 8003674:	0800f4d8 	.word	0x0800f4d8
 8003678:	0800f4f0 	.word	0x0800f4f0
 800367c:	20003840 	.word	0x20003840
 8003680:	0800f518 	.word	0x0800f518
 8003684:	0800f534 	.word	0x0800f534
 8003688:	0800f550 	.word	0x0800f550
 800368c:	20003844 	.word	0x20003844

08003690 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <mem_init+0x68>)
 8003698:	3303      	adds	r3, #3
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	461a      	mov	r2, r3
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <mem_init+0x6c>)
 80036a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <mem_init+0x6c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80036b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80036be:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80036c2:	f7ff ff1f 	bl	8003504 <ptr_to_mem>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <mem_init+0x70>)
 80036ca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <mem_init+0x70>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <mem_init+0x70>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80036dc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <mem_init+0x70>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80036e6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <mem_init+0x6c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a05      	ldr	r2, [pc, #20]	; (8003704 <mem_init+0x74>)
 80036ee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200031e8 	.word	0x200031e8
 80036fc:	2000383c 	.word	0x2000383c
 8003700:	20003840 	.word	0x20003840
 8003704:	20003844 	.word	0x20003844

08003708 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff09 	bl	8003528 <mem_to_ptr>
 8003716:	4603      	mov	r3, r0
 8003718:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fef0 	bl	8003504 <ptr_to_mem>
 8003724:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	885b      	ldrh	r3, [r3, #2]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff feea 	bl	8003504 <ptr_to_mem>
 8003730:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800373a:	d818      	bhi.n	800376e <mem_link_valid+0x66>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	885b      	ldrh	r3, [r3, #2]
 8003740:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003744:	d813      	bhi.n	800376e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800374a:	8afa      	ldrh	r2, [r7, #22]
 800374c:	429a      	cmp	r2, r3
 800374e:	d004      	beq.n	800375a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	8afa      	ldrh	r2, [r7, #22]
 8003756:	429a      	cmp	r2, r3
 8003758:	d109      	bne.n	800376e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <mem_link_valid+0x74>)
 800375c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d006      	beq.n	8003772 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	885b      	ldrh	r3, [r3, #2]
 8003768:	8afa      	ldrh	r2, [r7, #22]
 800376a:	429a      	cmp	r2, r3
 800376c:	d001      	beq.n	8003772 <mem_link_valid+0x6a>
    return 0;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <mem_link_valid+0x6c>
  }
  return 1;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20003840 	.word	0x20003840

08003780 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d04c      	beq.n	8003828 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <mem_free+0xb0>)
 800379a:	f240 2273 	movw	r2, #627	; 0x273
 800379e:	4925      	ldr	r1, [pc, #148]	; (8003834 <mem_free+0xb4>)
 80037a0:	4825      	ldr	r0, [pc, #148]	; (8003838 <mem_free+0xb8>)
 80037a2:	f00a fdcb 	bl	800e33c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80037a6:	e040      	b.n	800382a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b08      	subs	r3, #8
 80037ac:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <mem_free+0xbc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d306      	bcc.n	80037c6 <mem_free+0x46>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f103 020c 	add.w	r2, r3, #12
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <mem_free+0xc0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d907      	bls.n	80037d6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <mem_free+0xb0>)
 80037c8:	f240 227f 	movw	r2, #639	; 0x27f
 80037cc:	491d      	ldr	r1, [pc, #116]	; (8003844 <mem_free+0xc4>)
 80037ce:	481a      	ldr	r0, [pc, #104]	; (8003838 <mem_free+0xb8>)
 80037d0:	f00a fdb4 	bl	800e33c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80037d4:	e029      	b.n	800382a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	791b      	ldrb	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <mem_free+0xb0>)
 80037e0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80037e4:	4918      	ldr	r1, [pc, #96]	; (8003848 <mem_free+0xc8>)
 80037e6:	4814      	ldr	r0, [pc, #80]	; (8003838 <mem_free+0xb8>)
 80037e8:	f00a fda8 	bl	800e33c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80037ec:	e01d      	b.n	800382a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff ff8a 	bl	8003708 <mem_link_valid>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <mem_free+0xb0>)
 80037fc:	f240 2295 	movw	r2, #661	; 0x295
 8003800:	4912      	ldr	r1, [pc, #72]	; (800384c <mem_free+0xcc>)
 8003802:	480d      	ldr	r0, [pc, #52]	; (8003838 <mem_free+0xb8>)
 8003804:	f00a fd9a 	bl	800e33c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003808:	e00f      	b.n	800382a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <mem_free+0xd0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	429a      	cmp	r2, r3
 8003818:	d202      	bcs.n	8003820 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <mem_free+0xd0>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff fe93 	bl	800354c <plug_holes>
 8003826:	e000      	b.n	800382a <mem_free+0xaa>
    return;
 8003828:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	0800f4a8 	.word	0x0800f4a8
 8003834:	0800f57c 	.word	0x0800f57c
 8003838:	0800f4f0 	.word	0x0800f4f0
 800383c:	2000383c 	.word	0x2000383c
 8003840:	20003840 	.word	0x20003840
 8003844:	0800f5a0 	.word	0x0800f5a0
 8003848:	0800f5bc 	.word	0x0800f5bc
 800384c:	0800f5e4 	.word	0x0800f5e4
 8003850:	20003844 	.word	0x20003844

08003854 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	3303      	adds	r3, #3
 8003864:	b29b      	uxth	r3, r3
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800386c:	8bfb      	ldrh	r3, [r7, #30]
 800386e:	2b0b      	cmp	r3, #11
 8003870:	d801      	bhi.n	8003876 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003872:	230c      	movs	r3, #12
 8003874:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003876:	8bfb      	ldrh	r3, [r7, #30]
 8003878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800387c:	d803      	bhi.n	8003886 <mem_trim+0x32>
 800387e:	8bfa      	ldrh	r2, [r7, #30]
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	429a      	cmp	r2, r3
 8003884:	d201      	bcs.n	800388a <mem_trim+0x36>
    return NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	e0cc      	b.n	8003a24 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800388a:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <mem_trim+0x1d8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d304      	bcc.n	800389e <mem_trim+0x4a>
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <mem_trim+0x1dc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d306      	bcc.n	80038ac <mem_trim+0x58>
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <mem_trim+0x1e0>)
 80038a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80038a4:	4964      	ldr	r1, [pc, #400]	; (8003a38 <mem_trim+0x1e4>)
 80038a6:	4865      	ldr	r0, [pc, #404]	; (8003a3c <mem_trim+0x1e8>)
 80038a8:	f00a fd48 	bl	800e33c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80038ac:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <mem_trim+0x1d8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d304      	bcc.n	80038c0 <mem_trim+0x6c>
 80038b6:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <mem_trim+0x1dc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d301      	bcc.n	80038c4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	e0af      	b.n	8003a24 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b08      	subs	r3, #8
 80038c8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80038ca:	69b8      	ldr	r0, [r7, #24]
 80038cc:	f7ff fe2c 	bl	8003528 <mem_to_ptr>
 80038d0:	4603      	mov	r3, r0
 80038d2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	8afb      	ldrh	r3, [r7, #22]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b08      	subs	r3, #8
 80038e0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80038e2:	8bfa      	ldrh	r2, [r7, #30]
 80038e4:	8abb      	ldrh	r3, [r7, #20]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d906      	bls.n	80038f8 <mem_trim+0xa4>
 80038ea:	4b52      	ldr	r3, [pc, #328]	; (8003a34 <mem_trim+0x1e0>)
 80038ec:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80038f0:	4953      	ldr	r1, [pc, #332]	; (8003a40 <mem_trim+0x1ec>)
 80038f2:	4852      	ldr	r0, [pc, #328]	; (8003a3c <mem_trim+0x1e8>)
 80038f4:	f00a fd22 	bl	800e33c <iprintf>
  if (newsize > size) {
 80038f8:	8bfa      	ldrh	r2, [r7, #30]
 80038fa:	8abb      	ldrh	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d901      	bls.n	8003904 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	e08f      	b.n	8003a24 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003904:	8bfa      	ldrh	r2, [r7, #30]
 8003906:	8abb      	ldrh	r3, [r7, #20]
 8003908:	429a      	cmp	r2, r3
 800390a:	d101      	bne.n	8003910 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	e089      	b.n	8003a24 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fdf5 	bl	8003504 <ptr_to_mem>
 800391a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	791b      	ldrb	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d13f      	bne.n	80039a4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800392c:	d106      	bne.n	800393c <mem_trim+0xe8>
 800392e:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <mem_trim+0x1e0>)
 8003930:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003934:	4943      	ldr	r1, [pc, #268]	; (8003a44 <mem_trim+0x1f0>)
 8003936:	4841      	ldr	r0, [pc, #260]	; (8003a3c <mem_trim+0x1e8>)
 8003938:	f00a fd00 	bl	800e33c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003942:	8afa      	ldrh	r2, [r7, #22]
 8003944:	8bfb      	ldrh	r3, [r7, #30]
 8003946:	4413      	add	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	3308      	adds	r3, #8
 800394c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <mem_trim+0x1f4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	429a      	cmp	r2, r3
 8003956:	d106      	bne.n	8003966 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003958:	89fb      	ldrh	r3, [r7, #14]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fdd2 	bl	8003504 <ptr_to_mem>
 8003960:	4603      	mov	r3, r0
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <mem_trim+0x1f4>)
 8003964:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003966:	89fb      	ldrh	r3, [r7, #14]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fdcb 	bl	8003504 <ptr_to_mem>
 800396e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2200      	movs	r2, #0
 8003974:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	89ba      	ldrh	r2, [r7, #12]
 800397a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	8afa      	ldrh	r2, [r7, #22]
 8003980:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	89fa      	ldrh	r2, [r7, #14]
 8003986:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003990:	d047      	beq.n	8003a22 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fdb4 	bl	8003504 <ptr_to_mem>
 800399c:	4602      	mov	r2, r0
 800399e:	89fb      	ldrh	r3, [r7, #14]
 80039a0:	8053      	strh	r3, [r2, #2]
 80039a2:	e03e      	b.n	8003a22 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80039a4:	8bfb      	ldrh	r3, [r7, #30]
 80039a6:	f103 0214 	add.w	r2, r3, #20
 80039aa:	8abb      	ldrh	r3, [r7, #20]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d838      	bhi.n	8003a22 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80039b0:	8afa      	ldrh	r2, [r7, #22]
 80039b2:	8bfb      	ldrh	r3, [r7, #30]
 80039b4:	4413      	add	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3308      	adds	r3, #8
 80039ba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039c4:	d106      	bne.n	80039d4 <mem_trim+0x180>
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <mem_trim+0x1e0>)
 80039c8:	f240 3216 	movw	r2, #790	; 0x316
 80039cc:	491d      	ldr	r1, [pc, #116]	; (8003a44 <mem_trim+0x1f0>)
 80039ce:	481b      	ldr	r0, [pc, #108]	; (8003a3c <mem_trim+0x1e8>)
 80039d0:	f00a fcb4 	bl	800e33c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80039d4:	89fb      	ldrh	r3, [r7, #14]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fd94 	bl	8003504 <ptr_to_mem>
 80039dc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <mem_trim+0x1f4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d202      	bcs.n	80039ee <mem_trim+0x19a>
      lfree = mem2;
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <mem_trim+0x1f4>)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2200      	movs	r2, #0
 80039f2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	8afa      	ldrh	r2, [r7, #22]
 8003a00:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	89fa      	ldrh	r2, [r7, #14]
 8003a06:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a10:	d007      	beq.n	8003a22 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fd74 	bl	8003504 <ptr_to_mem>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003a22:	687b      	ldr	r3, [r7, #4]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	2000383c 	.word	0x2000383c
 8003a30:	20003840 	.word	0x20003840
 8003a34:	0800f4a8 	.word	0x0800f4a8
 8003a38:	0800f618 	.word	0x0800f618
 8003a3c:	0800f4f0 	.word	0x0800f4f0
 8003a40:	0800f630 	.word	0x0800f630
 8003a44:	0800f650 	.word	0x0800f650
 8003a48:	20003844 	.word	0x20003844

08003a4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <mem_malloc+0x14>
    return NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e0d9      	b.n	8003c14 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	3303      	adds	r3, #3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003a6c:	8bbb      	ldrh	r3, [r7, #28]
 8003a6e:	2b0b      	cmp	r3, #11
 8003a70:	d801      	bhi.n	8003a76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003a72:	230c      	movs	r3, #12
 8003a74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003a76:	8bbb      	ldrh	r3, [r7, #28]
 8003a78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a7c:	d803      	bhi.n	8003a86 <mem_malloc+0x3a>
 8003a7e:	8bba      	ldrh	r2, [r7, #28]
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d201      	bcs.n	8003a8a <mem_malloc+0x3e>
    return NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e0c4      	b.n	8003c14 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003a8a:	4b64      	ldr	r3, [pc, #400]	; (8003c1c <mem_malloc+0x1d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fd4a 	bl	8003528 <mem_to_ptr>
 8003a94:	4603      	mov	r3, r0
 8003a96:	83fb      	strh	r3, [r7, #30]
 8003a98:	e0b4      	b.n	8003c04 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003a9a:	8bfb      	ldrh	r3, [r7, #30]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fd31 	bl	8003504 <ptr_to_mem>
 8003aa2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 80a4 	bne.w	8003bf6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	8bfb      	ldrh	r3, [r7, #30]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f1a3 0208 	sub.w	r2, r3, #8
 8003abc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	f0c0 8099 	bcc.w	8003bf6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	8bfb      	ldrh	r3, [r7, #30]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f1a3 0208 	sub.w	r2, r3, #8
 8003ad2:	8bbb      	ldrh	r3, [r7, #28]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d333      	bcc.n	8003b42 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003ada:	8bfa      	ldrh	r2, [r7, #30]
 8003adc:	8bbb      	ldrh	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003ae6:	8a7b      	ldrh	r3, [r7, #18]
 8003ae8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003aec:	d106      	bne.n	8003afc <mem_malloc+0xb0>
 8003aee:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <mem_malloc+0x1d4>)
 8003af0:	f240 3287 	movw	r2, #903	; 0x387
 8003af4:	494b      	ldr	r1, [pc, #300]	; (8003c24 <mem_malloc+0x1d8>)
 8003af6:	484c      	ldr	r0, [pc, #304]	; (8003c28 <mem_malloc+0x1dc>)
 8003af8:	f00a fc20 	bl	800e33c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003afc:	8a7b      	ldrh	r3, [r7, #18]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fd00 	bl	8003504 <ptr_to_mem>
 8003b04:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	881a      	ldrh	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8bfa      	ldrh	r2, [r7, #30]
 8003b18:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	8a7a      	ldrh	r2, [r7, #18]
 8003b1e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2201      	movs	r2, #1
 8003b24:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003b2e:	d00b      	beq.n	8003b48 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fce5 	bl	8003504 <ptr_to_mem>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	8a7b      	ldrh	r3, [r7, #18]
 8003b3e:	8053      	strh	r3, [r2, #2]
 8003b40:	e002      	b.n	8003b48 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2201      	movs	r2, #1
 8003b46:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003b48:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <mem_malloc+0x1d0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d127      	bne.n	8003ba2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <mem_malloc+0x1d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003b58:	e005      	b.n	8003b66 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fcd0 	bl	8003504 <ptr_to_mem>
 8003b64:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	791b      	ldrb	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <mem_malloc+0x12c>
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <mem_malloc+0x1e0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1f0      	bne.n	8003b5a <mem_malloc+0x10e>
          }
          lfree = cur;
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <mem_malloc+0x1d0>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <mem_malloc+0x1d0>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <mem_malloc+0x1e0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d00b      	beq.n	8003ba2 <mem_malloc+0x156>
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <mem_malloc+0x1d0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <mem_malloc+0x156>
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <mem_malloc+0x1d4>)
 8003b96:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003b9a:	4925      	ldr	r1, [pc, #148]	; (8003c30 <mem_malloc+0x1e4>)
 8003b9c:	4822      	ldr	r0, [pc, #136]	; (8003c28 <mem_malloc+0x1dc>)
 8003b9e:	f00a fbcd 	bl	800e33c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ba2:	8bba      	ldrh	r2, [r7, #28]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3308      	adds	r3, #8
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <mem_malloc+0x1e0>)
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d906      	bls.n	8003bc0 <mem_malloc+0x174>
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <mem_malloc+0x1d4>)
 8003bb4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003bb8:	491e      	ldr	r1, [pc, #120]	; (8003c34 <mem_malloc+0x1e8>)
 8003bba:	481b      	ldr	r0, [pc, #108]	; (8003c28 <mem_malloc+0x1dc>)
 8003bbc:	f00a fbbe 	bl	800e33c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <mem_malloc+0x18c>
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <mem_malloc+0x1d4>)
 8003bcc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003bd0:	4919      	ldr	r1, [pc, #100]	; (8003c38 <mem_malloc+0x1ec>)
 8003bd2:	4815      	ldr	r0, [pc, #84]	; (8003c28 <mem_malloc+0x1dc>)
 8003bd4:	f00a fbb2 	bl	800e33c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <mem_malloc+0x1a4>
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <mem_malloc+0x1d4>)
 8003be4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003be8:	4914      	ldr	r1, [pc, #80]	; (8003c3c <mem_malloc+0x1f0>)
 8003bea:	480f      	ldr	r0, [pc, #60]	; (8003c28 <mem_malloc+0x1dc>)
 8003bec:	f00a fba6 	bl	800e33c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	e00e      	b.n	8003c14 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fc83 	bl	8003504 <ptr_to_mem>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003c04:	8bfa      	ldrh	r2, [r7, #30]
 8003c06:	8bbb      	ldrh	r3, [r7, #28]
 8003c08:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f4ff af44 	bcc.w	8003a9a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20003844 	.word	0x20003844
 8003c20:	0800f4a8 	.word	0x0800f4a8
 8003c24:	0800f650 	.word	0x0800f650
 8003c28:	0800f4f0 	.word	0x0800f4f0
 8003c2c:	20003840 	.word	0x20003840
 8003c30:	0800f664 	.word	0x0800f664
 8003c34:	0800f680 	.word	0x0800f680
 8003c38:	0800f6b0 	.word	0x0800f6b0
 8003c3c:	0800f6e0 	.word	0x0800f6e0

08003c40 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	3303      	adds	r3, #3
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e011      	b.n	8003c86 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3301      	adds	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	885b      	ldrh	r3, [r3, #2]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	dbe7      	blt.n	8003c62 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	80fb      	strh	r3, [r7, #6]
 8003caa:	e009      	b.n	8003cc0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <memp_init+0x30>)
 8003cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ffc3 	bl	8003c40 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	80fb      	strh	r3, [r7, #6]
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d9f2      	bls.n	8003cac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08011eb0 	.word	0x08011eb0

08003cd4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <do_memp_malloc_pool+0x38>
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <do_memp_malloc_pool+0x48>)
 8003d00:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003d04:	4906      	ldr	r1, [pc, #24]	; (8003d20 <do_memp_malloc_pool+0x4c>)
 8003d06:	4807      	ldr	r0, [pc, #28]	; (8003d24 <do_memp_malloc_pool+0x50>)
 8003d08:	f00a fb18 	bl	800e33c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	e000      	b.n	8003d12 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	0800f704 	.word	0x0800f704
 8003d20:	0800f734 	.word	0x0800f734
 8003d24:	0800f758 	.word	0x0800f758

08003d28 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d908      	bls.n	8003d4a <memp_malloc+0x22>
 8003d38:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <memp_malloc+0x3c>)
 8003d3a:	f240 1257 	movw	r2, #343	; 0x157
 8003d3e:	490a      	ldr	r1, [pc, #40]	; (8003d68 <memp_malloc+0x40>)
 8003d40:	480a      	ldr	r0, [pc, #40]	; (8003d6c <memp_malloc+0x44>)
 8003d42:	f00a fafb 	bl	800e33c <iprintf>
 8003d46:	2300      	movs	r3, #0
 8003d48:	e008      	b.n	8003d5c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <memp_malloc+0x48>)
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ffbe 	bl	8003cd4 <do_memp_malloc_pool>
 8003d58:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	0800f704 	.word	0x0800f704
 8003d68:	0800f794 	.word	0x0800f794
 8003d6c:	0800f758 	.word	0x0800f758
 8003d70:	08011eb0 	.word	0x08011eb0

08003d74 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <do_memp_free_pool+0x22>
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <do_memp_free_pool+0x40>)
 8003d8a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003d8e:	490a      	ldr	r1, [pc, #40]	; (8003db8 <do_memp_free_pool+0x44>)
 8003d90:	480a      	ldr	r0, [pc, #40]	; (8003dbc <do_memp_free_pool+0x48>)
 8003d92:	f00a fad3 	bl	800e33c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	0800f704 	.word	0x0800f704
 8003db8:	0800f7b4 	.word	0x0800f7b4
 8003dbc:	0800f758 	.word	0x0800f758

08003dc0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d907      	bls.n	8003de2 <memp_free+0x22>
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <memp_free+0x44>)
 8003dd4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003dd8:	490b      	ldr	r1, [pc, #44]	; (8003e08 <memp_free+0x48>)
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <memp_free+0x4c>)
 8003ddc:	f00a faae 	bl	800e33c <iprintf>
 8003de0:	e00c      	b.n	8003dfc <memp_free+0x3c>

  if (mem == NULL) {
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <memp_free+0x50>)
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ffbe 	bl	8003d74 <do_memp_free_pool>
 8003df8:	e000      	b.n	8003dfc <memp_free+0x3c>
    return;
 8003dfa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	0800f704 	.word	0x0800f704
 8003e08:	0800f7d4 	.word	0x0800f7d4
 8003e0c:	0800f758 	.word	0x0800f758
 8003e10:	08011eb0 	.word	0x08011eb0

08003e14 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d108      	bne.n	8003e4a <netif_add+0x26>
 8003e38:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <netif_add+0x170>)
 8003e3a:	f240 1227 	movw	r2, #295	; 0x127
 8003e3e:	4956      	ldr	r1, [pc, #344]	; (8003f98 <netif_add+0x174>)
 8003e40:	4856      	ldr	r0, [pc, #344]	; (8003f9c <netif_add+0x178>)
 8003e42:	f00a fa7b 	bl	800e33c <iprintf>
 8003e46:	2300      	movs	r3, #0
 8003e48:	e09f      	b.n	8003f8a <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d108      	bne.n	8003e62 <netif_add+0x3e>
 8003e50:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <netif_add+0x170>)
 8003e52:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003e56:	4952      	ldr	r1, [pc, #328]	; (8003fa0 <netif_add+0x17c>)
 8003e58:	4850      	ldr	r0, [pc, #320]	; (8003f9c <netif_add+0x178>)
 8003e5a:	f00a fa6f 	bl	800e33c <iprintf>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e093      	b.n	8003f8a <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8003e68:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <netif_add+0x180>)
 8003e6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <netif_add+0x180>)
 8003e74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8003e7c:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <netif_add+0x180>)
 8003e7e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a44      	ldr	r2, [pc, #272]	; (8003fa8 <netif_add+0x184>)
 8003e96:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <netif_add+0x188>)
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eba:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f914 	bl	80040f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	4798      	blx	r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <netif_add+0xb4>
    return NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e058      	b.n	8003f8a <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ede:	2bff      	cmp	r3, #255	; 0xff
 8003ee0:	d103      	bne.n	8003eea <netif_add+0xc6>
        netif->num = 0;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003eee:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <netif_add+0x18c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e02b      	b.n	8003f4e <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d106      	bne.n	8003f0c <netif_add+0xe8>
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <netif_add+0x170>)
 8003f00:	f240 128b 	movw	r2, #395	; 0x18b
 8003f04:	492b      	ldr	r1, [pc, #172]	; (8003fb4 <netif_add+0x190>)
 8003f06:	4825      	ldr	r0, [pc, #148]	; (8003f9c <netif_add+0x178>)
 8003f08:	f00a fa18 	bl	800e33c <iprintf>
        num_netifs++;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2bff      	cmp	r3, #255	; 0xff
 8003f16:	dd06      	ble.n	8003f26 <netif_add+0x102>
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <netif_add+0x170>)
 8003f1a:	f240 128d 	movw	r2, #397	; 0x18d
 8003f1e:	4926      	ldr	r1, [pc, #152]	; (8003fb8 <netif_add+0x194>)
 8003f20:	481e      	ldr	r0, [pc, #120]	; (8003f9c <netif_add+0x178>)
 8003f22:	f00a fa0b 	bl	800e33c <iprintf>
        if (netif2->num == netif->num) {
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d108      	bne.n	8003f48 <netif_add+0x124>
          netif->num++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8003f46:	e005      	b.n	8003f54 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1d0      	bne.n	8003ef6 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1be      	bne.n	8003ed8 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f60:	2bfe      	cmp	r3, #254	; 0xfe
 8003f62:	d103      	bne.n	8003f6c <netif_add+0x148>
    netif_num = 0;
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <netif_add+0x188>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e006      	b.n	8003f7a <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f72:	3301      	adds	r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <netif_add+0x188>)
 8003f78:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <netif_add+0x18c>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003f82:	4a0b      	ldr	r2, [pc, #44]	; (8003fb0 <netif_add+0x18c>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800f7f0 	.word	0x0800f7f0
 8003f98:	0800f884 	.word	0x0800f884
 8003f9c:	0800f840 	.word	0x0800f840
 8003fa0:	0800f8a0 	.word	0x0800f8a0
 8003fa4:	08011f14 	.word	0x08011f14
 8003fa8:	080042e1 	.word	0x080042e1
 8003fac:	2000673c 	.word	0x2000673c
 8003fb0:	20006734 	.word	0x20006734
 8003fb4:	0800f8c4 	.word	0x0800f8c4
 8003fb8:	0800f8d8 	.word	0x0800f8d8

08003fbc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f002 fd7d 	bl	8006ac8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f007 fe73 	bl	800bcbc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <netif_do_set_ipaddr+0x20>
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <netif_do_set_ipaddr+0x88>)
 8003ff4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8003ff8:	491c      	ldr	r1, [pc, #112]	; (800406c <netif_do_set_ipaddr+0x8c>)
 8003ffa:	481d      	ldr	r0, [pc, #116]	; (8004070 <netif_do_set_ipaddr+0x90>)
 8003ffc:	f00a f99e 	bl	800e33c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <netif_do_set_ipaddr+0x34>
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <netif_do_set_ipaddr+0x88>)
 8004008:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800400c:	4917      	ldr	r1, [pc, #92]	; (800406c <netif_do_set_ipaddr+0x8c>)
 800400e:	4818      	ldr	r0, [pc, #96]	; (8004070 <netif_do_set_ipaddr+0x90>)
 8004010:	f00a f994 	bl	800e33c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3304      	adds	r3, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d01c      	beq.n	800405c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3304      	adds	r3, #4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ffbf 	bl	8003fbc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <netif_do_set_ipaddr+0x6a>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	e000      	b.n	800404c <netif_do_set_ipaddr+0x6c>
 800404a:	2300      	movs	r3, #0
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004050:	2101      	movs	r1, #1
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f8d2 	bl	80041fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	0800f7f0 	.word	0x0800f7f0
 800406c:	0800f908 	.word	0x0800f908
 8004070:	0800f840 	.word	0x0800f840

08004074 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3308      	adds	r3, #8
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d00a      	beq.n	80040a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <netif_do_set_netmask+0x26>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	e000      	b.n	800409c <netif_do_set_netmask+0x28>
 800409a:	2300      	movs	r3, #0
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	330c      	adds	r3, #12
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d00a      	beq.n	80040e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <netif_do_set_gw+0x26>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	e000      	b.n	80040da <netif_do_set_gw+0x28>
 80040d8:	2300      	movs	r3, #0
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800410c:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <netif_set_addr+0x90>)
 800410e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004116:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <netif_set_addr+0x90>)
 8004118:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <netif_set_addr+0x90>)
 8004122:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <netif_set_addr+0x42>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <netif_set_addr+0x46>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <netif_set_addr+0x48>
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  if (remove) {
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004140:	f107 0310 	add.w	r3, r7, #16
 8004144:	461a      	mov	r2, r3
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff ff49 	bl	8003fe0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff ff8e 	bl	8004074 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff ffa8 	bl	80040b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	461a      	mov	r2, r3
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff ff35 	bl	8003fe0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004176:	bf00      	nop
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	08011f14 	.word	0x08011f14

08004184 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <netif_set_default+0x1c>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20006738 	.word	0x20006738

080041a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <netif_set_up+0x1e>
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <netif_set_up+0x4c>)
 80041b4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80041b8:	490e      	ldr	r1, [pc, #56]	; (80041f4 <netif_set_up+0x50>)
 80041ba:	480f      	ldr	r0, [pc, #60]	; (80041f8 <netif_set_up+0x54>)
 80041bc:	f00a f8be 	bl	800e33c <iprintf>
 80041c0:	e013      	b.n	80041ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10c      	bne.n	80041ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80041e2:	2103      	movs	r1, #3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f809 	bl	80041fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	0800f7f0 	.word	0x0800f7f0
 80041f4:	0800f978 	.word	0x0800f978
 80041f8:	0800f840 	.word	0x0800f840

080041fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <netif_issue_reports+0x20>
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <netif_issue_reports+0x74>)
 8004210:	f240 326d 	movw	r2, #877	; 0x36d
 8004214:	4917      	ldr	r1, [pc, #92]	; (8004274 <netif_issue_reports+0x78>)
 8004216:	4818      	ldr	r0, [pc, #96]	; (8004278 <netif_issue_reports+0x7c>)
 8004218:	f00a f890 	bl	800e33c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01e      	beq.n	8004268 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004230:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004234:	2b00      	cmp	r3, #0
 8004236:	d017      	beq.n	8004268 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d013      	beq.n	800426a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00e      	beq.n	800426a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f008 fc95 	bl	800cb90 <etharp_request>
 8004266:	e000      	b.n	800426a <netif_issue_reports+0x6e>
    return;
 8004268:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	0800f7f0 	.word	0x0800f7f0
 8004274:	0800f994 	.word	0x0800f994
 8004278:	0800f840 	.word	0x0800f840

0800427c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <netif_set_down+0x1e>
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <netif_set_down+0x58>)
 800428c:	f240 329b 	movw	r2, #923	; 0x39b
 8004290:	4911      	ldr	r1, [pc, #68]	; (80042d8 <netif_set_down+0x5c>)
 8004292:	4812      	ldr	r0, [pc, #72]	; (80042dc <netif_set_down+0x60>)
 8004294:	f00a f852 	bl	800e33c <iprintf>
 8004298:	e019      	b.n	80042ce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d012      	beq.n	80042ce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f008 f81f 	bl	800c30c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	0800f7f0 	.word	0x0800f7f0
 80042d8:	0800f9b8 	.word	0x0800f9b8
 80042dc:	0800f840 	.word	0x0800f840

080042e0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80042ec:	f06f 030b 	mvn.w	r3, #11
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800430c:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <netif_get_by_index+0x48>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e00c      	b.n	800432e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800431a:	3301      	adds	r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	79fa      	ldrb	r2, [r7, #7]
 8004320:	429a      	cmp	r2, r3
 8004322:	d101      	bne.n	8004328 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	e006      	b.n	8004336 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ef      	bne.n	8004314 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20006734 	.word	0x20006734

08004348 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <pbuf_free_ooseq+0x38>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <pbuf_free_ooseq+0x3c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	e00a      	b.n	8004372 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f002 fbed 	bl	8006b44 <tcp_free_ooseq>
      return;
 800436a:	e005      	b.n	8004378 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f1      	bne.n	800435c <pbuf_free_ooseq+0x14>
    }
  }
}
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	2000673d 	.word	0x2000673d
 8004384:	2000674c 	.word	0x2000674c

08004388 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <pbuf_pool_is_empty+0x14>)
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	2000673d 	.word	0x2000673d

080043a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4611      	mov	r1, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	460b      	mov	r3, r1
 80043b0:	80fb      	strh	r3, [r7, #6]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	88ba      	ldrh	r2, [r7, #4]
 80043cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80043ce:	8b3b      	ldrh	r3, [r7, #24]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	7f3a      	ldrb	r2, [r7, #28]
 80043da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	73da      	strb	r2, [r3, #15]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
 80043fe:	460b      	mov	r3, r1
 8004400:	80bb      	strh	r3, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004410:	d07f      	beq.n	8004512 <pbuf_alloc+0x11e>
 8004412:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004416:	f300 80c8 	bgt.w	80045aa <pbuf_alloc+0x1b6>
 800441a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800441e:	d010      	beq.n	8004442 <pbuf_alloc+0x4e>
 8004420:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004424:	f300 80c1 	bgt.w	80045aa <pbuf_alloc+0x1b6>
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <pbuf_alloc+0x3e>
 800442c:	2b41      	cmp	r3, #65	; 0x41
 800442e:	f040 80bc 	bne.w	80045aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	88bb      	ldrh	r3, [r7, #4]
 8004436:	4619      	mov	r1, r3
 8004438:	2000      	movs	r0, #0
 800443a:	f000 f8d1 	bl	80045e0 <pbuf_alloc_reference>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004440:	e0bd      	b.n	80045be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800444a:	88bb      	ldrh	r3, [r7, #4]
 800444c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800444e:	2008      	movs	r0, #8
 8004450:	f7ff fc6a 	bl	8003d28 <memp_malloc>
 8004454:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800445c:	f7ff ff94 	bl	8004388 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <pbuf_alloc+0x78>
            pbuf_free(p);
 8004466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004468:	f000 faa8 	bl	80049bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	e0a7      	b.n	80045c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004472:	3303      	adds	r3, #3
 8004474:	b29b      	uxth	r3, r3
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	b29b      	uxth	r3, r3
 800447c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004480:	b29b      	uxth	r3, r3
 8004482:	8b7a      	ldrh	r2, [r7, #26]
 8004484:	4293      	cmp	r3, r2
 8004486:	bf28      	it	cs
 8004488:	4613      	movcs	r3, r2
 800448a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800448c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800448e:	3310      	adds	r3, #16
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	3303      	adds	r3, #3
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	4618      	mov	r0, r3
 800449c:	89f9      	ldrh	r1, [r7, #14]
 800449e:	8b7a      	ldrh	r2, [r7, #26]
 80044a0:	2300      	movs	r3, #0
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	460b      	mov	r3, r1
 80044aa:	4601      	mov	r1, r0
 80044ac:	6938      	ldr	r0, [r7, #16]
 80044ae:	f7ff ff77 	bl	80043a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <pbuf_alloc+0xd8>
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <pbuf_alloc+0x1d4>)
 80044c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c4:	4941      	ldr	r1, [pc, #260]	; (80045cc <pbuf_alloc+0x1d8>)
 80044c6:	4842      	ldr	r0, [pc, #264]	; (80045d0 <pbuf_alloc+0x1dc>)
 80044c8:	f009 ff38 	bl	800e33c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80044cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044ce:	3303      	adds	r3, #3
 80044d0:	f023 0303 	bic.w	r3, r3, #3
 80044d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80044d8:	d106      	bne.n	80044e8 <pbuf_alloc+0xf4>
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <pbuf_alloc+0x1d4>)
 80044dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80044e0:	493c      	ldr	r1, [pc, #240]	; (80045d4 <pbuf_alloc+0x1e0>)
 80044e2:	483b      	ldr	r0, [pc, #236]	; (80045d0 <pbuf_alloc+0x1dc>)
 80044e4:	f009 ff2a 	bl	800e33c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	e002      	b.n	80044fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80044fe:	8b7a      	ldrh	r2, [r7, #26]
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800450a:	8b7b      	ldrh	r3, [r7, #26]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d19e      	bne.n	800444e <pbuf_alloc+0x5a>
      break;
 8004510:	e055      	b.n	80045be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004512:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004514:	3303      	adds	r3, #3
 8004516:	b29b      	uxth	r3, r3
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	b29a      	uxth	r2, r3
 800451e:	88bb      	ldrh	r3, [r7, #4]
 8004520:	3303      	adds	r3, #3
 8004522:	b29b      	uxth	r3, r3
 8004524:	f023 0303 	bic.w	r3, r3, #3
 8004528:	b29b      	uxth	r3, r3
 800452a:	4413      	add	r3, r2
 800452c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800452e:	8b3b      	ldrh	r3, [r7, #24]
 8004530:	3310      	adds	r3, #16
 8004532:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004534:	8b3a      	ldrh	r2, [r7, #24]
 8004536:	88bb      	ldrh	r3, [r7, #4]
 8004538:	3303      	adds	r3, #3
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	429a      	cmp	r2, r3
 8004540:	d306      	bcc.n	8004550 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004542:	8afa      	ldrh	r2, [r7, #22]
 8004544:	88bb      	ldrh	r3, [r7, #4]
 8004546:	3303      	adds	r3, #3
 8004548:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d201      	bcs.n	8004554 <pbuf_alloc+0x160>
        return NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	e035      	b.n	80045c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004554:	8afb      	ldrh	r3, [r7, #22]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fa78 	bl	8003a4c <mem_malloc>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <pbuf_alloc+0x174>
        return NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	e02b      	b.n	80045c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800456a:	3310      	adds	r3, #16
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	4413      	add	r3, r2
 8004570:	3303      	adds	r3, #3
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	4618      	mov	r0, r3
 8004578:	88b9      	ldrh	r1, [r7, #4]
 800457a:	88ba      	ldrh	r2, [r7, #4]
 800457c:	2300      	movs	r3, #0
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	460b      	mov	r3, r1
 8004586:	4601      	mov	r1, r0
 8004588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800458a:	f7ff ff09 	bl	80043a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <pbuf_alloc+0x1c8>
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <pbuf_alloc+0x1d4>)
 800459c:	f44f 7291 	mov.w	r2, #290	; 0x122
 80045a0:	490d      	ldr	r1, [pc, #52]	; (80045d8 <pbuf_alloc+0x1e4>)
 80045a2:	480b      	ldr	r0, [pc, #44]	; (80045d0 <pbuf_alloc+0x1dc>)
 80045a4:	f009 feca 	bl	800e33c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80045a8:	e008      	b.n	80045bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <pbuf_alloc+0x1d4>)
 80045ac:	f240 1227 	movw	r2, #295	; 0x127
 80045b0:	490a      	ldr	r1, [pc, #40]	; (80045dc <pbuf_alloc+0x1e8>)
 80045b2:	4807      	ldr	r0, [pc, #28]	; (80045d0 <pbuf_alloc+0x1dc>)
 80045b4:	f009 fec2 	bl	800e33c <iprintf>
      return NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e001      	b.n	80045c0 <pbuf_alloc+0x1cc>
      break;
 80045bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	0800fa20 	.word	0x0800fa20
 80045cc:	0800fa50 	.word	0x0800fa50
 80045d0:	0800fa80 	.word	0x0800fa80
 80045d4:	0800faa8 	.word	0x0800faa8
 80045d8:	0800fadc 	.word	0x0800fadc
 80045dc:	0800fb08 	.word	0x0800fb08

080045e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
 80045ec:	4613      	mov	r3, r2
 80045ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80045f0:	883b      	ldrh	r3, [r7, #0]
 80045f2:	2b41      	cmp	r3, #65	; 0x41
 80045f4:	d009      	beq.n	800460a <pbuf_alloc_reference+0x2a>
 80045f6:	883b      	ldrh	r3, [r7, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d006      	beq.n	800460a <pbuf_alloc_reference+0x2a>
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <pbuf_alloc_reference+0x5c>)
 80045fe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004602:	490f      	ldr	r1, [pc, #60]	; (8004640 <pbuf_alloc_reference+0x60>)
 8004604:	480f      	ldr	r0, [pc, #60]	; (8004644 <pbuf_alloc_reference+0x64>)
 8004606:	f009 fe99 	bl	800e33c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800460a:	2007      	movs	r0, #7
 800460c:	f7ff fb8c 	bl	8003d28 <memp_malloc>
 8004610:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	e00b      	b.n	8004634 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800461c:	8879      	ldrh	r1, [r7, #2]
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	2300      	movs	r3, #0
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	883b      	ldrh	r3, [r7, #0]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	460b      	mov	r3, r1
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff feb7 	bl	80043a0 <pbuf_init_alloced_pbuf>
  return p;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	0800fa20 	.word	0x0800fa20
 8004640:	0800fb24 	.word	0x0800fb24
 8004644:	0800fa80 	.word	0x0800fa80

08004648 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	460b      	mov	r3, r1
 8004656:	81bb      	strh	r3, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004660:	8a7b      	ldrh	r3, [r7, #18]
 8004662:	3303      	adds	r3, #3
 8004664:	f023 0203 	bic.w	r2, r3, #3
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	441a      	add	r2, r3
 800466c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d901      	bls.n	8004676 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	e018      	b.n	80046a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800467c:	8a7b      	ldrh	r3, [r7, #18]
 800467e:	3303      	adds	r3, #3
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	4413      	add	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e001      	b.n	8004690 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	89b9      	ldrh	r1, [r7, #12]
 8004694:	89ba      	ldrh	r2, [r7, #12]
 8004696:	2302      	movs	r3, #2
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	897b      	ldrh	r3, [r7, #10]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	460b      	mov	r3, r1
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	f7ff fe7d 	bl	80043a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80046a6:	687b      	ldr	r3, [r7, #4]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <pbuf_realloc+0x20>
 80046c2:	4b3a      	ldr	r3, [pc, #232]	; (80047ac <pbuf_realloc+0xfc>)
 80046c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80046c8:	4939      	ldr	r1, [pc, #228]	; (80047b0 <pbuf_realloc+0x100>)
 80046ca:	483a      	ldr	r0, [pc, #232]	; (80047b4 <pbuf_realloc+0x104>)
 80046cc:	f009 fe36 	bl	800e33c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	891b      	ldrh	r3, [r3, #8]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d263      	bcs.n	80047a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	891a      	ldrh	r2, [r3, #8]
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	817b      	strh	r3, [r7, #10]
  q = p;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80046ec:	e018      	b.n	8004720 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	895b      	ldrh	r3, [r3, #10]
 80046f2:	897a      	ldrh	r2, [r7, #10]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	891a      	ldrh	r2, [r3, #8]
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <pbuf_realloc+0x70>
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <pbuf_realloc+0xfc>)
 8004714:	f240 12af 	movw	r2, #431	; 0x1af
 8004718:	4927      	ldr	r1, [pc, #156]	; (80047b8 <pbuf_realloc+0x108>)
 800471a:	4826      	ldr	r0, [pc, #152]	; (80047b4 <pbuf_realloc+0x104>)
 800471c:	f009 fe0e 	bl	800e33c <iprintf>
  while (rem_len > q->len) {
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	895b      	ldrh	r3, [r3, #10]
 8004724:	897a      	ldrh	r2, [r7, #10]
 8004726:	429a      	cmp	r2, r3
 8004728:	d8e1      	bhi.n	80046ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	7b1b      	ldrb	r3, [r3, #12]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <pbuf_realloc+0xca>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	895b      	ldrh	r3, [r3, #10]
 800473a:	897a      	ldrh	r2, [r7, #10]
 800473c:	429a      	cmp	r2, r3
 800473e:	d01c      	beq.n	800477a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	7b5b      	ldrb	r3, [r3, #13]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d116      	bne.n	800477a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	b29a      	uxth	r2, r3
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	4413      	add	r3, r2
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff f878 	bl	8003854 <mem_trim>
 8004764:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <pbuf_realloc+0xca>
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <pbuf_realloc+0xfc>)
 800476e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004772:	4912      	ldr	r1, [pc, #72]	; (80047bc <pbuf_realloc+0x10c>)
 8004774:	480f      	ldr	r0, [pc, #60]	; (80047b4 <pbuf_realloc+0x104>)
 8004776:	f009 fde1 	bl	800e33c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	897a      	ldrh	r2, [r7, #10]
 800477e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	895a      	ldrh	r2, [r3, #10]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f911 	bl	80049bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e000      	b.n	80047a4 <pbuf_realloc+0xf4>
    return;
 80047a2:	bf00      	nop

}
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	0800fa20 	.word	0x0800fa20
 80047b0:	0800fb38 	.word	0x0800fb38
 80047b4:	0800fa80 	.word	0x0800fa80
 80047b8:	0800fb50 	.word	0x0800fb50
 80047bc:	0800fb68 	.word	0x0800fb68

080047c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <pbuf_add_header_impl+0x22>
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <pbuf_add_header_impl+0xc4>)
 80047d6:	f240 12df 	movw	r2, #479	; 0x1df
 80047da:	492b      	ldr	r1, [pc, #172]	; (8004888 <pbuf_add_header_impl+0xc8>)
 80047dc:	482b      	ldr	r0, [pc, #172]	; (800488c <pbuf_add_header_impl+0xcc>)
 80047de:	f009 fdad 	bl	800e33c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <pbuf_add_header_impl+0x30>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d301      	bcc.n	80047f4 <pbuf_add_header_impl+0x34>
    return 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e043      	b.n	800487c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <pbuf_add_header_impl+0x3e>
    return 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e03e      	b.n	800487c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	891a      	ldrh	r2, [r3, #8]
 8004806:	8a7b      	ldrh	r3, [r7, #18]
 8004808:	4413      	add	r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	8a7a      	ldrh	r2, [r7, #18]
 800480e:	429a      	cmp	r2, r3
 8004810:	d901      	bls.n	8004816 <pbuf_add_header_impl+0x56>
    return 1;
 8004812:	2301      	movs	r3, #1
 8004814:	e032      	b.n	800487c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	7b1b      	ldrb	r3, [r3, #12]
 800481a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800481c:	8a3b      	ldrh	r3, [r7, #16]
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	425b      	negs	r3, r3
 800482e:	4413      	add	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3310      	adds	r3, #16
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d20d      	bcs.n	8004858 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800483c:	2301      	movs	r3, #1
 800483e:	e01d      	b.n	800487c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d006      	beq.n	8004854 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	425b      	negs	r3, r3
 800484e:	4413      	add	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e001      	b.n	8004858 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004854:	2301      	movs	r3, #1
 8004856:	e011      	b.n	800487c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	895a      	ldrh	r2, [r3, #10]
 8004862:	8a7b      	ldrh	r3, [r7, #18]
 8004864:	4413      	add	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	891a      	ldrh	r2, [r3, #8]
 8004870:	8a7b      	ldrh	r3, [r7, #18]
 8004872:	4413      	add	r3, r2
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	811a      	strh	r2, [r3, #8]


  return 0;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	0800fa20 	.word	0x0800fa20
 8004888:	0800fb84 	.word	0x0800fb84
 800488c:	0800fa80 	.word	0x0800fa80

08004890 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff8e 	bl	80047c0 <pbuf_add_header_impl>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <pbuf_remove_header+0x1e>
 80048c0:	4b20      	ldr	r3, [pc, #128]	; (8004944 <pbuf_remove_header+0x94>)
 80048c2:	f240 224b 	movw	r2, #587	; 0x24b
 80048c6:	4920      	ldr	r1, [pc, #128]	; (8004948 <pbuf_remove_header+0x98>)
 80048c8:	4820      	ldr	r0, [pc, #128]	; (800494c <pbuf_remove_header+0x9c>)
 80048ca:	f009 fd37 	bl	800e33c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <pbuf_remove_header+0x2c>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d301      	bcc.n	80048e0 <pbuf_remove_header+0x30>
    return 1;
 80048dc:	2301      	movs	r3, #1
 80048de:	e02c      	b.n	800493a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <pbuf_remove_header+0x3a>
    return 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e027      	b.n	800493a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	895b      	ldrh	r3, [r3, #10]
 80048f2:	89fa      	ldrh	r2, [r7, #14]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d908      	bls.n	800490a <pbuf_remove_header+0x5a>
 80048f8:	4b12      	ldr	r3, [pc, #72]	; (8004944 <pbuf_remove_header+0x94>)
 80048fa:	f240 2255 	movw	r2, #597	; 0x255
 80048fe:	4914      	ldr	r1, [pc, #80]	; (8004950 <pbuf_remove_header+0xa0>)
 8004900:	4812      	ldr	r0, [pc, #72]	; (800494c <pbuf_remove_header+0x9c>)
 8004902:	f009 fd1b 	bl	800e33c <iprintf>
 8004906:	2301      	movs	r3, #1
 8004908:	e017      	b.n	800493a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	441a      	add	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	895a      	ldrh	r2, [r3, #10]
 8004920:	89fb      	ldrh	r3, [r7, #14]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	891a      	ldrh	r2, [r3, #8]
 800492e:	89fb      	ldrh	r3, [r7, #14]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	0800fa20 	.word	0x0800fa20
 8004948:	0800fb84 	.word	0x0800fb84
 800494c:	0800fa80 	.word	0x0800fa80
 8004950:	0800fb90 	.word	0x0800fb90

08004954 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	807b      	strh	r3, [r7, #2]
 8004960:	4613      	mov	r3, r2
 8004962:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004964:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004968:	2b00      	cmp	r3, #0
 800496a:	da08      	bge.n	800497e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800496c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004970:	425b      	negs	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff9b 	bl	80048b0 <pbuf_remove_header>
 800497a:	4603      	mov	r3, r0
 800497c:	e007      	b.n	800498e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800497e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004982:	787a      	ldrb	r2, [r7, #1]
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff1a 	bl	80047c0 <pbuf_add_header_impl>
 800498c:	4603      	mov	r3, r0
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80049a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffd2 	bl	8004954 <pbuf_header_impl>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <pbuf_free+0x22>
 80049d0:	4b38      	ldr	r3, [pc, #224]	; (8004ab4 <pbuf_free+0xf8>)
 80049d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80049d6:	4938      	ldr	r1, [pc, #224]	; (8004ab8 <pbuf_free+0xfc>)
 80049d8:	4838      	ldr	r0, [pc, #224]	; (8004abc <pbuf_free+0x100>)
 80049da:	f009 fcaf 	bl	800e33c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	e063      	b.n	8004aaa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80049e6:	e05c      	b.n	8004aa2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7b9b      	ldrb	r3, [r3, #14]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <pbuf_free+0x42>
 80049f0:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <pbuf_free+0xf8>)
 80049f2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80049f6:	4932      	ldr	r1, [pc, #200]	; (8004ac0 <pbuf_free+0x104>)
 80049f8:	4830      	ldr	r0, [pc, #192]	; (8004abc <pbuf_free+0x100>)
 80049fa:	f009 fc9f 	bl	800e33c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	7b9b      	ldrb	r3, [r3, #14]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	739a      	strb	r2, [r3, #14]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	7b9b      	ldrb	r3, [r3, #14]
 8004a0e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004a10:	7dbb      	ldrb	r3, [r7, #22]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d143      	bne.n	8004a9e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7b1b      	ldrb	r3, [r3, #12]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7b5b      	ldrb	r3, [r3, #13]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <pbuf_free+0x90>
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <pbuf_free+0xf8>)
 8004a40:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004a44:	491f      	ldr	r1, [pc, #124]	; (8004ac4 <pbuf_free+0x108>)
 8004a46:	481d      	ldr	r0, [pc, #116]	; (8004abc <pbuf_free+0x100>)
 8004a48:	f009 fc78 	bl	800e33c <iprintf>
        pc->custom_free_function(p);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e01d      	b.n	8004a92 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d104      	bne.n	8004a66 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	2008      	movs	r0, #8
 8004a60:	f7ff f9ae 	bl	8003dc0 <memp_free>
 8004a64:	e015      	b.n	8004a92 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d104      	bne.n	8004a76 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	2007      	movs	r0, #7
 8004a70:	f7ff f9a6 	bl	8003dc0 <memp_free>
 8004a74:	e00d      	b.n	8004a92 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <pbuf_free+0xc8>
          mem_free(p);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fe fe7f 	bl	8003780 <mem_free>
 8004a82:	e006      	b.n	8004a92 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <pbuf_free+0xf8>)
 8004a86:	f240 320f 	movw	r2, #783	; 0x30f
 8004a8a:	490f      	ldr	r1, [pc, #60]	; (8004ac8 <pbuf_free+0x10c>)
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <pbuf_free+0x100>)
 8004a8e:	f009 fc55 	bl	800e33c <iprintf>
        }
      }
      count++;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	3301      	adds	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	e001      	b.n	8004aa2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d19f      	bne.n	80049e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	0800fa20 	.word	0x0800fa20
 8004ab8:	0800fb84 	.word	0x0800fb84
 8004abc:	0800fa80 	.word	0x0800fa80
 8004ac0:	0800fbb0 	.word	0x0800fbb0
 8004ac4:	0800fbc8 	.word	0x0800fbc8
 8004ac8:	0800fbec 	.word	0x0800fbec

08004acc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004ad8:	e005      	b.n	8004ae6 <pbuf_clen+0x1a>
    ++len;
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	3301      	adds	r3, #1
 8004ade:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f6      	bne.n	8004ada <pbuf_clen+0xe>
  }
  return len;
 8004aec:	89fb      	ldrh	r3, [r7, #14]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	7b9b      	ldrb	r3, [r3, #14]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	7b9b      	ldrb	r3, [r3, #14]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <pbuf_ref+0x30>
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <pbuf_ref+0x38>)
 8004b20:	f240 3242 	movw	r2, #834	; 0x342
 8004b24:	4904      	ldr	r1, [pc, #16]	; (8004b38 <pbuf_ref+0x3c>)
 8004b26:	4805      	ldr	r0, [pc, #20]	; (8004b3c <pbuf_ref+0x40>)
 8004b28:	f009 fc08 	bl	800e33c <iprintf>
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	0800fa20 	.word	0x0800fa20
 8004b38:	0800fc00 	.word	0x0800fc00
 8004b3c:	0800fa80 	.word	0x0800fa80

08004b40 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <pbuf_cat+0x16>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d107      	bne.n	8004b66 <pbuf_cat+0x26>
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <pbuf_cat+0x98>)
 8004b58:	f240 3259 	movw	r2, #857	; 0x359
 8004b5c:	491f      	ldr	r1, [pc, #124]	; (8004bdc <pbuf_cat+0x9c>)
 8004b5e:	4820      	ldr	r0, [pc, #128]	; (8004be0 <pbuf_cat+0xa0>)
 8004b60:	f009 fbec 	bl	800e33c <iprintf>
 8004b64:	e034      	b.n	8004bd0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e00a      	b.n	8004b82 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	891a      	ldrh	r2, [r3, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	891b      	ldrh	r3, [r3, #8]
 8004b74:	4413      	add	r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	891a      	ldrh	r2, [r3, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	895b      	ldrh	r3, [r3, #10]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d006      	beq.n	8004ba4 <pbuf_cat+0x64>
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <pbuf_cat+0x98>)
 8004b98:	f240 3262 	movw	r2, #866	; 0x362
 8004b9c:	4911      	ldr	r1, [pc, #68]	; (8004be4 <pbuf_cat+0xa4>)
 8004b9e:	4810      	ldr	r0, [pc, #64]	; (8004be0 <pbuf_cat+0xa0>)
 8004ba0:	f009 fbcc 	bl	800e33c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <pbuf_cat+0x7a>
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <pbuf_cat+0x98>)
 8004bae:	f240 3263 	movw	r2, #867	; 0x363
 8004bb2:	490d      	ldr	r1, [pc, #52]	; (8004be8 <pbuf_cat+0xa8>)
 8004bb4:	480a      	ldr	r0, [pc, #40]	; (8004be0 <pbuf_cat+0xa0>)
 8004bb6:	f009 fbc1 	bl	800e33c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	891a      	ldrh	r2, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	891b      	ldrh	r3, [r3, #8]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	0800fa20 	.word	0x0800fa20
 8004bdc:	0800fc14 	.word	0x0800fc14
 8004be0:	0800fa80 	.word	0x0800fa80
 8004be4:	0800fc4c 	.word	0x0800fc4c
 8004be8:	0800fc7c 	.word	0x0800fc7c

08004bec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ffa1 	bl	8004b40 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004bfe:	6838      	ldr	r0, [r7, #0]
 8004c00:	f7ff ff7c 	bl	8004afc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <pbuf_copy+0x2a>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <pbuf_copy+0x2a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	891a      	ldrh	r2, [r3, #8]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	891b      	ldrh	r3, [r3, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d209      	bcs.n	8004c4a <pbuf_copy+0x3e>
 8004c36:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <pbuf_copy+0x188>)
 8004c38:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004c3c:	4956      	ldr	r1, [pc, #344]	; (8004d98 <pbuf_copy+0x18c>)
 8004c3e:	4857      	ldr	r0, [pc, #348]	; (8004d9c <pbuf_copy+0x190>)
 8004c40:	f009 fb7c 	bl	800e33c <iprintf>
 8004c44:	f06f 030f 	mvn.w	r3, #15
 8004c48:	e09f      	b.n	8004d8a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	895b      	ldrh	r3, [r3, #10]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	895b      	ldrh	r3, [r3, #10]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1acb      	subs	r3, r1, r3
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d306      	bcc.n	8004c70 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	895b      	ldrh	r3, [r3, #10]
 8004c66:	461a      	mov	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e005      	b.n	8004c7c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	895b      	ldrh	r3, [r3, #10]
 8004c74:	461a      	mov	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	18d0      	adds	r0, r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f009 fb3e 	bl	800e310 <memcpy>
    offset_to += len;
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	895b      	ldrh	r3, [r3, #10]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d906      	bls.n	8004cbe <pbuf_copy+0xb2>
 8004cb0:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <pbuf_copy+0x188>)
 8004cb2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004cb6:	493a      	ldr	r1, [pc, #232]	; (8004da0 <pbuf_copy+0x194>)
 8004cb8:	4838      	ldr	r0, [pc, #224]	; (8004d9c <pbuf_copy+0x190>)
 8004cba:	f009 fb3f 	bl	800e33c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	895b      	ldrh	r3, [r3, #10]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d906      	bls.n	8004cd8 <pbuf_copy+0xcc>
 8004cca:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <pbuf_copy+0x188>)
 8004ccc:	f240 32da 	movw	r2, #986	; 0x3da
 8004cd0:	4934      	ldr	r1, [pc, #208]	; (8004da4 <pbuf_copy+0x198>)
 8004cd2:	4832      	ldr	r0, [pc, #200]	; (8004d9c <pbuf_copy+0x190>)
 8004cd4:	f009 fb32 	bl	800e33c <iprintf>
    if (offset_from >= p_from->len) {
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	895b      	ldrh	r3, [r3, #10]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d304      	bcc.n	8004cee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	895b      	ldrh	r3, [r3, #10]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d114      	bne.n	8004d24 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <pbuf_copy+0x118>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <pbuf_copy+0x118>
 8004d10:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <pbuf_copy+0x188>)
 8004d12:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8004d16:	4924      	ldr	r1, [pc, #144]	; (8004da8 <pbuf_copy+0x19c>)
 8004d18:	4820      	ldr	r0, [pc, #128]	; (8004d9c <pbuf_copy+0x190>)
 8004d1a:	f009 fb0f 	bl	800e33c <iprintf>
 8004d1e:	f06f 030f 	mvn.w	r3, #15
 8004d22:	e032      	b.n	8004d8a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <pbuf_copy+0x146>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	895a      	ldrh	r2, [r3, #10]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	891b      	ldrh	r3, [r3, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d10d      	bne.n	8004d52 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <pbuf_copy+0x146>
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <pbuf_copy+0x188>)
 8004d40:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8004d44:	4919      	ldr	r1, [pc, #100]	; (8004dac <pbuf_copy+0x1a0>)
 8004d46:	4815      	ldr	r0, [pc, #84]	; (8004d9c <pbuf_copy+0x190>)
 8004d48:	f009 faf8 	bl	800e33c <iprintf>
 8004d4c:	f06f 0305 	mvn.w	r3, #5
 8004d50:	e01b      	b.n	8004d8a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <pbuf_copy+0x174>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	895a      	ldrh	r2, [r3, #10]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	891b      	ldrh	r3, [r3, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d10d      	bne.n	8004d80 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d009      	beq.n	8004d80 <pbuf_copy+0x174>
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <pbuf_copy+0x188>)
 8004d6e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004d72:	490e      	ldr	r1, [pc, #56]	; (8004dac <pbuf_copy+0x1a0>)
 8004d74:	4809      	ldr	r0, [pc, #36]	; (8004d9c <pbuf_copy+0x190>)
 8004d76:	f009 fae1 	bl	800e33c <iprintf>
 8004d7a:	f06f 0305 	mvn.w	r3, #5
 8004d7e:	e004      	b.n	8004d8a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f47f af61 	bne.w	8004c4a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	0800fa20 	.word	0x0800fa20
 8004d98:	0800fcc8 	.word	0x0800fcc8
 8004d9c:	0800fa80 	.word	0x0800fa80
 8004da0:	0800fcf8 	.word	0x0800fcf8
 8004da4:	0800fd10 	.word	0x0800fd10
 8004da8:	0800fd2c 	.word	0x0800fd2c
 8004dac:	0800fd3c 	.word	0x0800fd3c

08004db0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <pbuf_copy_partial+0x36>
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <pbuf_copy_partial+0xd4>)
 8004dd6:	f240 420a 	movw	r2, #1034	; 0x40a
 8004dda:	492b      	ldr	r1, [pc, #172]	; (8004e88 <pbuf_copy_partial+0xd8>)
 8004ddc:	482b      	ldr	r0, [pc, #172]	; (8004e8c <pbuf_copy_partial+0xdc>)
 8004dde:	f009 faad 	bl	800e33c <iprintf>
 8004de2:	2300      	movs	r3, #0
 8004de4:	e04a      	b.n	8004e7c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <pbuf_copy_partial+0x4e>
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <pbuf_copy_partial+0xd4>)
 8004dee:	f240 420b 	movw	r2, #1035	; 0x40b
 8004df2:	4927      	ldr	r1, [pc, #156]	; (8004e90 <pbuf_copy_partial+0xe0>)
 8004df4:	4825      	ldr	r0, [pc, #148]	; (8004e8c <pbuf_copy_partial+0xdc>)
 8004df6:	f009 faa1 	bl	800e33c <iprintf>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e03e      	b.n	8004e7c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e034      	b.n	8004e6e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8004e04:	88bb      	ldrh	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <pbuf_copy_partial+0x70>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	895b      	ldrh	r3, [r3, #10]
 8004e0e:	88ba      	ldrh	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d305      	bcc.n	8004e20 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	895b      	ldrh	r3, [r3, #10]
 8004e18:	88ba      	ldrh	r2, [r7, #4]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	80bb      	strh	r3, [r7, #4]
 8004e1e:	e023      	b.n	8004e68 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	895a      	ldrh	r2, [r3, #10]
 8004e24:	88bb      	ldrh	r3, [r7, #4]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004e2a:	8b3a      	ldrh	r2, [r7, #24]
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d901      	bls.n	8004e36 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004e36:	8b7b      	ldrh	r3, [r7, #26]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	18d0      	adds	r0, r2, r3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	88bb      	ldrh	r3, [r7, #4]
 8004e42:	4413      	add	r3, r2
 8004e44:	8b3a      	ldrh	r2, [r7, #24]
 8004e46:	4619      	mov	r1, r3
 8004e48:	f009 fa62 	bl	800e310 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004e4c:	8afa      	ldrh	r2, [r7, #22]
 8004e4e:	8b3b      	ldrh	r3, [r7, #24]
 8004e50:	4413      	add	r3, r2
 8004e52:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8004e54:	8b7a      	ldrh	r2, [r7, #26]
 8004e56:	8b3b      	ldrh	r3, [r7, #24]
 8004e58:	4413      	add	r3, r2
 8004e5a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	8b3b      	ldrh	r3, [r7, #24]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <pbuf_copy_partial+0xca>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1c4      	bne.n	8004e04 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004e7a:	8afb      	ldrh	r3, [r7, #22]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	0800fa20 	.word	0x0800fa20
 8004e88:	0800fd68 	.word	0x0800fd68
 8004e8c:	0800fa80 	.word	0x0800fa80
 8004e90:	0800fd88 	.word	0x0800fd88

08004e94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	603a      	str	r2, [r7, #0]
 8004e9e:	71fb      	strb	r3, [r7, #7]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	8919      	ldrh	r1, [r3, #8]
 8004ea8:	88ba      	ldrh	r2, [r7, #4]
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff faa1 	bl	80043f4 <pbuf_alloc>
 8004eb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <pbuf_clone+0x2a>
    return NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e011      	b.n	8004ee2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff fea3 	bl	8004c0c <pbuf_copy>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8004eca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d006      	beq.n	8004ee0 <pbuf_clone+0x4c>
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <pbuf_clone+0x58>)
 8004ed4:	f240 5224 	movw	r2, #1316	; 0x524
 8004ed8:	4905      	ldr	r1, [pc, #20]	; (8004ef0 <pbuf_clone+0x5c>)
 8004eda:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <pbuf_clone+0x60>)
 8004edc:	f009 fa2e 	bl	800e33c <iprintf>
  return q;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	0800fa20 	.word	0x0800fa20
 8004ef0:	0800fe94 	.word	0x0800fe94
 8004ef4:	0800fa80 	.word	0x0800fa80

08004ef8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004efc:	f009 fa36 	bl	800e36c <rand>
 8004f00:	4603      	mov	r3, r0
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <tcp_init+0x20>)
 8004f12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000000a 	.word	0x2000000a

08004f1c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7d1b      	ldrb	r3, [r3, #20]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d105      	bne.n	8004f38 <tcp_free+0x1c>
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <tcp_free+0x2c>)
 8004f2e:	22d4      	movs	r2, #212	; 0xd4
 8004f30:	4906      	ldr	r1, [pc, #24]	; (8004f4c <tcp_free+0x30>)
 8004f32:	4807      	ldr	r0, [pc, #28]	; (8004f50 <tcp_free+0x34>)
 8004f34:	f009 fa02 	bl	800e33c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7fe ff40 	bl	8003dc0 <memp_free>
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0800ff20 	.word	0x0800ff20
 8004f4c:	0800ff50 	.word	0x0800ff50
 8004f50:	0800ff64 	.word	0x0800ff64

08004f54 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7d1b      	ldrb	r3, [r3, #20]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <tcp_free_listen+0x1c>
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <tcp_free_listen+0x2c>)
 8004f66:	22df      	movs	r2, #223	; 0xdf
 8004f68:	4906      	ldr	r1, [pc, #24]	; (8004f84 <tcp_free_listen+0x30>)
 8004f6a:	4807      	ldr	r0, [pc, #28]	; (8004f88 <tcp_free_listen+0x34>)
 8004f6c:	f009 f9e6 	bl	800e33c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	2002      	movs	r0, #2
 8004f74:	f7fe ff24 	bl	8003dc0 <memp_free>
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	0800ff20 	.word	0x0800ff20
 8004f84:	0800ff8c 	.word	0x0800ff8c
 8004f88:	0800ff64 	.word	0x0800ff64

08004f8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004f90:	f001 f85c 	bl	800604c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <tcp_tmr+0x28>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <tcp_tmr+0x28>)
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <tcp_tmr+0x28>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004fac:	f000 fd0e 	bl	80059cc <tcp_slowtmr>
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20006755 	.word	0x20006755

08004fb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <tcp_remove_listener+0x1c>
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <tcp_remove_listener+0x48>)
 8004fca:	22ff      	movs	r2, #255	; 0xff
 8004fcc:	490d      	ldr	r1, [pc, #52]	; (8005004 <tcp_remove_listener+0x4c>)
 8004fce:	480e      	ldr	r0, [pc, #56]	; (8005008 <tcp_remove_listener+0x50>)
 8004fd0:	f009 f9b4 	bl	800e33c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e00a      	b.n	8004ff0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d102      	bne.n	8004fea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f1      	bne.n	8004fda <tcp_remove_listener+0x22>
    }
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	0800ff20 	.word	0x0800ff20
 8005004:	0800ffa8 	.word	0x0800ffa8
 8005008:	0800ff64 	.word	0x0800ff64

0800500c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <tcp_listen_closed+0x1c>
 800501a:	4b14      	ldr	r3, [pc, #80]	; (800506c <tcp_listen_closed+0x60>)
 800501c:	f240 1211 	movw	r2, #273	; 0x111
 8005020:	4913      	ldr	r1, [pc, #76]	; (8005070 <tcp_listen_closed+0x64>)
 8005022:	4814      	ldr	r0, [pc, #80]	; (8005074 <tcp_listen_closed+0x68>)
 8005024:	f009 f98a 	bl	800e33c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7d1b      	ldrb	r3, [r3, #20]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d006      	beq.n	800503e <tcp_listen_closed+0x32>
 8005030:	4b0e      	ldr	r3, [pc, #56]	; (800506c <tcp_listen_closed+0x60>)
 8005032:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005036:	4910      	ldr	r1, [pc, #64]	; (8005078 <tcp_listen_closed+0x6c>)
 8005038:	480e      	ldr	r0, [pc, #56]	; (8005074 <tcp_listen_closed+0x68>)
 800503a:	f009 f97f 	bl	800e33c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800503e:	2301      	movs	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e00b      	b.n	800505c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <tcp_listen_closed+0x70>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ffb1 	bl	8004fb8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3301      	adds	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d9f0      	bls.n	8005044 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	0800ff20 	.word	0x0800ff20
 8005070:	0800ffd0 	.word	0x0800ffd0
 8005074:	0800ff64 	.word	0x0800ff64
 8005078:	0800ffdc 	.word	0x0800ffdc
 800507c:	08011eec 	.word	0x08011eec

08005080 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005080:	b5b0      	push	{r4, r5, r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af04      	add	r7, sp, #16
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <tcp_close_shutdown+0x20>
 8005092:	4b63      	ldr	r3, [pc, #396]	; (8005220 <tcp_close_shutdown+0x1a0>)
 8005094:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005098:	4962      	ldr	r1, [pc, #392]	; (8005224 <tcp_close_shutdown+0x1a4>)
 800509a:	4863      	ldr	r0, [pc, #396]	; (8005228 <tcp_close_shutdown+0x1a8>)
 800509c:	f009 f94e 	bl	800e33c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d066      	beq.n	8005174 <tcp_close_shutdown+0xf4>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7d1b      	ldrb	r3, [r3, #20]
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d003      	beq.n	80050b6 <tcp_close_shutdown+0x36>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7d1b      	ldrb	r3, [r3, #20]
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	d15e      	bne.n	8005174 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <tcp_close_shutdown+0x48>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80050c6:	d055      	beq.n	8005174 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8b5b      	ldrh	r3, [r3, #26]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <tcp_close_shutdown+0x62>
 80050d4:	4b52      	ldr	r3, [pc, #328]	; (8005220 <tcp_close_shutdown+0x1a0>)
 80050d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80050da:	4954      	ldr	r1, [pc, #336]	; (800522c <tcp_close_shutdown+0x1ac>)
 80050dc:	4852      	ldr	r0, [pc, #328]	; (8005228 <tcp_close_shutdown+0x1a8>)
 80050de:	f009 f92d 	bl	800e33c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80050ea:	687d      	ldr	r5, [r7, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	8ad2      	ldrh	r2, [r2, #22]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	8b09      	ldrh	r1, [r1, #24]
 80050f8:	9102      	str	r1, [sp, #8]
 80050fa:	9201      	str	r2, [sp, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462b      	mov	r3, r5
 8005100:	4622      	mov	r2, r4
 8005102:	4601      	mov	r1, r0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f005 fd89 	bl	800ac1c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fb66 	bl	80067dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005110:	4b47      	ldr	r3, [pc, #284]	; (8005230 <tcp_close_shutdown+0x1b0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d105      	bne.n	8005126 <tcp_close_shutdown+0xa6>
 800511a:	4b45      	ldr	r3, [pc, #276]	; (8005230 <tcp_close_shutdown+0x1b0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4a43      	ldr	r2, [pc, #268]	; (8005230 <tcp_close_shutdown+0x1b0>)
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e013      	b.n	800514e <tcp_close_shutdown+0xce>
 8005126:	4b42      	ldr	r3, [pc, #264]	; (8005230 <tcp_close_shutdown+0x1b0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e00c      	b.n	8005148 <tcp_close_shutdown+0xc8>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	d104      	bne.n	8005142 <tcp_close_shutdown+0xc2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e005      	b.n	800514e <tcp_close_shutdown+0xce>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ef      	bne.n	800512e <tcp_close_shutdown+0xae>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	4b37      	ldr	r3, [pc, #220]	; (8005234 <tcp_close_shutdown+0x1b4>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800515a:	4b37      	ldr	r3, [pc, #220]	; (8005238 <tcp_close_shutdown+0x1b8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d102      	bne.n	800516a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005164:	f003 fffe 	bl	8009164 <tcp_trigger_input_pcb_close>
 8005168:	e002      	b.n	8005170 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fed6 	bl	8004f1c <tcp_free>
      }
      return ERR_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e050      	b.n	8005216 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7d1b      	ldrb	r3, [r3, #20]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d03b      	beq.n	80051f4 <tcp_close_shutdown+0x174>
 800517c:	2b02      	cmp	r3, #2
 800517e:	dc44      	bgt.n	800520a <tcp_close_shutdown+0x18a>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <tcp_close_shutdown+0x10a>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d02a      	beq.n	80051de <tcp_close_shutdown+0x15e>
 8005188:	e03f      	b.n	800520a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8adb      	ldrh	r3, [r3, #22]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d021      	beq.n	80051d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005192:	4b2a      	ldr	r3, [pc, #168]	; (800523c <tcp_close_shutdown+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d105      	bne.n	80051a8 <tcp_close_shutdown+0x128>
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <tcp_close_shutdown+0x1bc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4a26      	ldr	r2, [pc, #152]	; (800523c <tcp_close_shutdown+0x1bc>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e013      	b.n	80051d0 <tcp_close_shutdown+0x150>
 80051a8:	4b24      	ldr	r3, [pc, #144]	; (800523c <tcp_close_shutdown+0x1bc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	e00c      	b.n	80051ca <tcp_close_shutdown+0x14a>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d104      	bne.n	80051c4 <tcp_close_shutdown+0x144>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e005      	b.n	80051d0 <tcp_close_shutdown+0x150>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1ef      	bne.n	80051b0 <tcp_close_shutdown+0x130>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fea0 	bl	8004f1c <tcp_free>
      break;
 80051dc:	e01a      	b.n	8005214 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ff14 	bl	800500c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4816      	ldr	r0, [pc, #88]	; (8005240 <tcp_close_shutdown+0x1c0>)
 80051e8:	f001 fb48 	bl	800687c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff feb1 	bl	8004f54 <tcp_free_listen>
      break;
 80051f2:	e00f      	b.n	8005214 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	480e      	ldr	r0, [pc, #56]	; (8005230 <tcp_close_shutdown+0x1b0>)
 80051f8:	f001 fb40 	bl	800687c <tcp_pcb_remove>
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <tcp_close_shutdown+0x1b4>)
 80051fe:	2201      	movs	r2, #1
 8005200:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fe8a 	bl	8004f1c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005208:	e004      	b.n	8005214 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f81a 	bl	8005244 <tcp_close_shutdown_fin>
 8005210:	4603      	mov	r3, r0
 8005212:	e000      	b.n	8005216 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bdb0      	pop	{r4, r5, r7, pc}
 800521e:	bf00      	nop
 8005220:	0800ff20 	.word	0x0800ff20
 8005224:	0800fff4 	.word	0x0800fff4
 8005228:	0800ff64 	.word	0x0800ff64
 800522c:	08010014 	.word	0x08010014
 8005230:	2000674c 	.word	0x2000674c
 8005234:	20006754 	.word	0x20006754
 8005238:	2000678c 	.word	0x2000678c
 800523c:	20006744 	.word	0x20006744
 8005240:	20006748 	.word	0x20006748

08005244 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <tcp_close_shutdown_fin+0x1c>
 8005252:	4b2e      	ldr	r3, [pc, #184]	; (800530c <tcp_close_shutdown_fin+0xc8>)
 8005254:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005258:	492d      	ldr	r1, [pc, #180]	; (8005310 <tcp_close_shutdown_fin+0xcc>)
 800525a:	482e      	ldr	r0, [pc, #184]	; (8005314 <tcp_close_shutdown_fin+0xd0>)
 800525c:	f009 f86e 	bl	800e33c <iprintf>

  switch (pcb->state) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	7d1b      	ldrb	r3, [r3, #20]
 8005264:	2b07      	cmp	r3, #7
 8005266:	d020      	beq.n	80052aa <tcp_close_shutdown_fin+0x66>
 8005268:	2b07      	cmp	r3, #7
 800526a:	dc2b      	bgt.n	80052c4 <tcp_close_shutdown_fin+0x80>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d002      	beq.n	8005276 <tcp_close_shutdown_fin+0x32>
 8005270:	2b04      	cmp	r3, #4
 8005272:	d00d      	beq.n	8005290 <tcp_close_shutdown_fin+0x4c>
 8005274:	e026      	b.n	80052c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f004 fdde 	bl	8009e38 <tcp_send_fin>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11f      	bne.n	80052c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2205      	movs	r2, #5
 800528c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800528e:	e01b      	b.n	80052c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f004 fdd1 	bl	8009e38 <tcp_send_fin>
 8005296:	4603      	mov	r3, r0
 8005298:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d114      	bne.n	80052cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2205      	movs	r2, #5
 80052a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80052a8:	e010      	b.n	80052cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f004 fdc4 	bl	8009e38 <tcp_send_fin>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80052b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2209      	movs	r2, #9
 80052c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80052c2:	e005      	b.n	80052d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e01c      	b.n	8005302 <tcp_close_shutdown_fin+0xbe>
      break;
 80052c8:	bf00      	nop
 80052ca:	e002      	b.n	80052d2 <tcp_close_shutdown_fin+0x8e>
      break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <tcp_close_shutdown_fin+0x8e>
      break;
 80052d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80052d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f004 feea 	bl	800a0b4 <tcp_output>
 80052e0:	e00d      	b.n	80052fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80052e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d108      	bne.n	80052fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8b5b      	ldrh	r3, [r3, #26]
 80052f0:	f043 0308 	orr.w	r3, r3, #8
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e001      	b.n	8005302 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80052fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	0800ff20 	.word	0x0800ff20
 8005310:	0800ffd0 	.word	0x0800ffd0
 8005314:	0800ff64 	.word	0x0800ff64

08005318 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <tcp_close+0x22>
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <tcp_close+0x4c>)
 8005328:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800532c:	490e      	ldr	r1, [pc, #56]	; (8005368 <tcp_close+0x50>)
 800532e:	480f      	ldr	r0, [pc, #60]	; (800536c <tcp_close+0x54>)
 8005330:	f009 f804 	bl	800e33c <iprintf>
 8005334:	f06f 030f 	mvn.w	r3, #15
 8005338:	e00f      	b.n	800535a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	7d1b      	ldrb	r3, [r3, #20]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d006      	beq.n	8005350 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8b5b      	ldrh	r3, [r3, #26]
 8005346:	f043 0310 	orr.w	r3, r3, #16
 800534a:	b29a      	uxth	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005350:	2101      	movs	r1, #1
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fe94 	bl	8005080 <tcp_close_shutdown>
 8005358:	4603      	mov	r3, r0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	0800ff20 	.word	0x0800ff20
 8005368:	08010030 	.word	0x08010030
 800536c:	0800ff64 	.word	0x0800ff64

08005370 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af04      	add	r7, sp, #16
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <tcp_abandon+0x20>
 8005380:	4b52      	ldr	r3, [pc, #328]	; (80054cc <tcp_abandon+0x15c>)
 8005382:	f240 223d 	movw	r2, #573	; 0x23d
 8005386:	4952      	ldr	r1, [pc, #328]	; (80054d0 <tcp_abandon+0x160>)
 8005388:	4852      	ldr	r0, [pc, #328]	; (80054d4 <tcp_abandon+0x164>)
 800538a:	f008 ffd7 	bl	800e33c <iprintf>
 800538e:	e099      	b.n	80054c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	7d1b      	ldrb	r3, [r3, #20]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <tcp_abandon+0x36>
 8005398:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <tcp_abandon+0x15c>)
 800539a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800539e:	494e      	ldr	r1, [pc, #312]	; (80054d8 <tcp_abandon+0x168>)
 80053a0:	484c      	ldr	r0, [pc, #304]	; (80054d4 <tcp_abandon+0x164>)
 80053a2:	f008 ffcb 	bl	800e33c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7d1b      	ldrb	r3, [r3, #20]
 80053aa:	2b0a      	cmp	r3, #10
 80053ac:	d107      	bne.n	80053be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	484a      	ldr	r0, [pc, #296]	; (80054dc <tcp_abandon+0x16c>)
 80053b2:	f001 fa63 	bl	800687c <tcp_pcb_remove>
    tcp_free(pcb);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fdb0 	bl	8004f1c <tcp_free>
 80053bc:	e082      	b.n	80054c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7d1b      	ldrb	r3, [r3, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d126      	bne.n	8005436 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8adb      	ldrh	r3, [r3, #22]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02e      	beq.n	800544e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <tcp_abandon+0x170>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d105      	bne.n	8005406 <tcp_abandon+0x96>
 80053fa:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <tcp_abandon+0x170>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <tcp_abandon+0x170>)
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e013      	b.n	800542e <tcp_abandon+0xbe>
 8005406:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <tcp_abandon+0x170>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e00c      	b.n	8005428 <tcp_abandon+0xb8>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d104      	bne.n	8005422 <tcp_abandon+0xb2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e005      	b.n	800542e <tcp_abandon+0xbe>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ef      	bne.n	800540e <tcp_abandon+0x9e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e00b      	b.n	800544e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8adb      	ldrh	r3, [r3, #22]
 800543e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4828      	ldr	r0, [pc, #160]	; (80054e4 <tcp_abandon+0x174>)
 8005444:	f001 fa1a 	bl	800687c <tcp_pcb_remove>
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <tcp_abandon+0x178>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fed6 	bl	800620c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fecd 	bl	800620c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fec4 	bl	800620c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	8b12      	ldrh	r2, [r2, #24]
 8005494:	9202      	str	r2, [sp, #8]
 8005496:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005498:	9201      	str	r2, [sp, #4]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	460b      	mov	r3, r1
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	69b9      	ldr	r1, [r7, #24]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f005 fbba 	bl	800ac1c <tcp_rst>
    }
    last_state = pcb->state;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	7d1b      	ldrb	r3, [r3, #20]
 80054ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fd34 	bl	8004f1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <tcp_abandon+0x154>
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f06f 010c 	mvn.w	r1, #12
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	4798      	blx	r3
  }
}
 80054c4:	3728      	adds	r7, #40	; 0x28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	0800ff20 	.word	0x0800ff20
 80054d0:	08010064 	.word	0x08010064
 80054d4:	0800ff64 	.word	0x0800ff64
 80054d8:	08010080 	.word	0x08010080
 80054dc:	20006750 	.word	0x20006750
 80054e0:	20006744 	.word	0x20006744
 80054e4:	2000674c 	.word	0x2000674c
 80054e8:	20006754 	.word	0x20006754

080054ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80054f4:	2101      	movs	r1, #1
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff ff3a 	bl	8005370 <tcp_abandon>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005512:	2304      	movs	r3, #4
 8005514:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800551c:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <tcp_bind+0x114>)
 800551e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <tcp_bind+0x36>
 8005526:	4b3d      	ldr	r3, [pc, #244]	; (800561c <tcp_bind+0x118>)
 8005528:	f240 22a9 	movw	r2, #681	; 0x2a9
 800552c:	493c      	ldr	r1, [pc, #240]	; (8005620 <tcp_bind+0x11c>)
 800552e:	483d      	ldr	r0, [pc, #244]	; (8005624 <tcp_bind+0x120>)
 8005530:	f008 ff04 	bl	800e33c <iprintf>
 8005534:	f06f 030f 	mvn.w	r3, #15
 8005538:	e06a      	b.n	8005610 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	7d1b      	ldrb	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <tcp_bind+0x52>
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <tcp_bind+0x118>)
 8005544:	f240 22ab 	movw	r2, #683	; 0x2ab
 8005548:	4937      	ldr	r1, [pc, #220]	; (8005628 <tcp_bind+0x124>)
 800554a:	4836      	ldr	r0, [pc, #216]	; (8005624 <tcp_bind+0x120>)
 800554c:	f008 fef6 	bl	800e33c <iprintf>
 8005550:	f06f 0305 	mvn.w	r3, #5
 8005554:	e05c      	b.n	8005610 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <tcp_bind+0x6c>
    port = tcp_new_port();
 800555c:	f000 f9f0 	bl	8005940 <tcp_new_port>
 8005560:	4603      	mov	r3, r0
 8005562:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d135      	bne.n	80055d6 <tcp_bind+0xd2>
      return ERR_BUF;
 800556a:	f06f 0301 	mvn.w	r3, #1
 800556e:	e04f      	b.n	8005610 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	e02b      	b.n	80055ce <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005576:	4a2d      	ldr	r2, [pc, #180]	; (800562c <tcp_bind+0x128>)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	e01e      	b.n	80055c2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	8adb      	ldrh	r3, [r3, #22]
 8005588:	88fa      	ldrh	r2, [r7, #6]
 800558a:	429a      	cmp	r2, r3
 800558c:	d116      	bne.n	80055bc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800558e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00c      	beq.n	80055b6 <tcp_bind+0xb2>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d102      	bne.n	80055bc <tcp_bind+0xb8>
              return ERR_USE;
 80055b6:	f06f 0307 	mvn.w	r3, #7
 80055ba:	e029      	b.n	8005610 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1dd      	bne.n	8005584 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	dbcf      	blt.n	8005576 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <tcp_bind+0xf2>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <tcp_bind+0xec>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	e000      	b.n	80055f2 <tcp_bind+0xee>
 80055f0:	2300      	movs	r3, #0
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <tcp_bind+0x12c>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <tcp_bind+0x12c>)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	f005 fcc9 	bl	800afa0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08011f14 	.word	0x08011f14
 800561c:	0800ff20 	.word	0x0800ff20
 8005620:	080100b4 	.word	0x080100b4
 8005624:	0800ff64 	.word	0x0800ff64
 8005628:	080100cc 	.word	0x080100cc
 800562c:	08011eec 	.word	0x08011eec
 8005630:	20006744 	.word	0x20006744

08005634 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <tcp_accept_null+0x22>
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <tcp_accept_null+0x34>)
 800564a:	f240 320f 	movw	r2, #783	; 0x30f
 800564e:	4907      	ldr	r1, [pc, #28]	; (800566c <tcp_accept_null+0x38>)
 8005650:	4807      	ldr	r0, [pc, #28]	; (8005670 <tcp_accept_null+0x3c>)
 8005652:	f008 fe73 	bl	800e33c <iprintf>

  tcp_abort(pcb);
 8005656:	68b8      	ldr	r0, [r7, #8]
 8005658:	f7ff ff48 	bl	80054ec <tcp_abort>

  return ERR_ABRT;
 800565c:	f06f 030c 	mvn.w	r3, #12
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	0800ff20 	.word	0x0800ff20
 800566c:	080100f4 	.word	0x080100f4
 8005670:	0800ff64 	.word	0x0800ff64

08005674 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2200      	movs	r2, #0
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f806 	bl	8005698 <tcp_listen_with_backlog_and_err>
 800568c:	4603      	mov	r3, r0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	460b      	mov	r3, r1
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <tcp_listen_with_backlog_and_err+0x2c>
 80056b0:	4b47      	ldr	r3, [pc, #284]	; (80057d0 <tcp_listen_with_backlog_and_err+0x138>)
 80056b2:	f240 3259 	movw	r2, #857	; 0x359
 80056b6:	4947      	ldr	r1, [pc, #284]	; (80057d4 <tcp_listen_with_backlog_and_err+0x13c>)
 80056b8:	4847      	ldr	r0, [pc, #284]	; (80057d8 <tcp_listen_with_backlog_and_err+0x140>)
 80056ba:	f008 fe3f 	bl	800e33c <iprintf>
 80056be:	23f0      	movs	r3, #240	; 0xf0
 80056c0:	76fb      	strb	r3, [r7, #27]
 80056c2:	e079      	b.n	80057b8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	7d1b      	ldrb	r3, [r3, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <tcp_listen_with_backlog_and_err+0x48>
 80056cc:	4b40      	ldr	r3, [pc, #256]	; (80057d0 <tcp_listen_with_backlog_and_err+0x138>)
 80056ce:	f240 325a 	movw	r2, #858	; 0x35a
 80056d2:	4942      	ldr	r1, [pc, #264]	; (80057dc <tcp_listen_with_backlog_and_err+0x144>)
 80056d4:	4840      	ldr	r0, [pc, #256]	; (80057d8 <tcp_listen_with_backlog_and_err+0x140>)
 80056d6:	f008 fe31 	bl	800e33c <iprintf>
 80056da:	23f1      	movs	r3, #241	; 0xf1
 80056dc:	76fb      	strb	r3, [r7, #27]
 80056de:	e06b      	b.n	80057b8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	7d1b      	ldrb	r3, [r3, #20]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d104      	bne.n	80056f2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80056ec:	23f7      	movs	r3, #247	; 0xf7
 80056ee:	76fb      	strb	r3, [r7, #27]
    goto done;
 80056f0:	e062      	b.n	80057b8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80056f2:	2002      	movs	r0, #2
 80056f4:	f7fe fb18 	bl	8003d28 <memp_malloc>
 80056f8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8005700:	23ff      	movs	r3, #255	; 0xff
 8005702:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005704:	e058      	b.n	80057b8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8ada      	ldrh	r2, [r3, #22]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2201      	movs	r2, #1
 800571a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	7d5a      	ldrb	r2, [r3, #21]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	7a5a      	ldrb	r2, [r3, #9]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2200      	movs	r2, #0
 8005730:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	7ada      	ldrb	r2, [r3, #11]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	7a9a      	ldrb	r2, [r3, #10]
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8adb      	ldrh	r3, [r3, #22]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d021      	beq.n	8005796 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <tcp_listen_with_backlog_and_err+0x148>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	429a      	cmp	r2, r3
 800575a:	d105      	bne.n	8005768 <tcp_listen_with_backlog_and_err+0xd0>
 800575c:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <tcp_listen_with_backlog_and_err+0x148>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <tcp_listen_with_backlog_and_err+0x148>)
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e013      	b.n	8005790 <tcp_listen_with_backlog_and_err+0xf8>
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <tcp_listen_with_backlog_and_err+0x148>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e00c      	b.n	800578a <tcp_listen_with_backlog_and_err+0xf2>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	429a      	cmp	r2, r3
 8005778:	d104      	bne.n	8005784 <tcp_listen_with_backlog_and_err+0xec>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	e005      	b.n	8005790 <tcp_listen_with_backlog_and_err+0xf8>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ef      	bne.n	8005770 <tcp_listen_with_backlog_and_err+0xd8>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fbc0 	bl	8004f1c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <tcp_listen_with_backlog_and_err+0x14c>)
 80057a0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <tcp_listen_with_backlog_and_err+0x150>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	4a0f      	ldr	r2, [pc, #60]	; (80057e8 <tcp_listen_with_backlog_and_err+0x150>)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	f005 fbf6 	bl	800afa0 <tcp_timer_needed>
  res = ERR_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7efa      	ldrb	r2, [r7, #27]
 80057c2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80057c4:	69fb      	ldr	r3, [r7, #28]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	0800ff20 	.word	0x0800ff20
 80057d4:	08010114 	.word	0x08010114
 80057d8:	0800ff64 	.word	0x0800ff64
 80057dc:	08010144 	.word	0x08010144
 80057e0:	20006744 	.word	0x20006744
 80057e4:	08005635 	.word	0x08005635
 80057e8:	20006748 	.word	0x20006748

080057ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <tcp_update_rcv_ann_wnd+0x1c>
 80057fa:	4b25      	ldr	r3, [pc, #148]	; (8005890 <tcp_update_rcv_ann_wnd+0xa4>)
 80057fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005800:	4924      	ldr	r1, [pc, #144]	; (8005894 <tcp_update_rcv_ann_wnd+0xa8>)
 8005802:	4825      	ldr	r0, [pc, #148]	; (8005898 <tcp_update_rcv_ann_wnd+0xac>)
 8005804:	f008 fd9a 	bl	800e33c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005810:	4413      	add	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800581c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005820:	bf28      	it	cs
 8005822:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005826:	b292      	uxth	r2, r2
 8005828:	4413      	add	r3, r2
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	db08      	blt.n	8005844 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	e020      	b.n	8005886 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd03      	ble.n	800585a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005858:	e014      	b.n	8005884 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586c:	d306      	bcc.n	800587c <tcp_update_rcv_ann_wnd+0x90>
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <tcp_update_rcv_ann_wnd+0xa4>)
 8005870:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005874:	4909      	ldr	r1, [pc, #36]	; (800589c <tcp_update_rcv_ann_wnd+0xb0>)
 8005876:	4808      	ldr	r0, [pc, #32]	; (8005898 <tcp_update_rcv_ann_wnd+0xac>)
 8005878:	f008 fd60 	bl	800e33c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	b29a      	uxth	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005884:	2300      	movs	r3, #0
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	0800ff20 	.word	0x0800ff20
 8005894:	0801017c 	.word	0x0801017c
 8005898:	0800ff64 	.word	0x0800ff64
 800589c:	080101a0 	.word	0x080101a0

080058a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <tcp_recved+0x22>
 80058b2:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <tcp_recved+0x90>)
 80058b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80058b8:	491e      	ldr	r1, [pc, #120]	; (8005934 <tcp_recved+0x94>)
 80058ba:	481f      	ldr	r0, [pc, #124]	; (8005938 <tcp_recved+0x98>)
 80058bc:	f008 fd3e 	bl	800e33c <iprintf>
 80058c0:	e032      	b.n	8005928 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	7d1b      	ldrb	r3, [r3, #20]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d106      	bne.n	80058d8 <tcp_recved+0x38>
 80058ca:	4b19      	ldr	r3, [pc, #100]	; (8005930 <tcp_recved+0x90>)
 80058cc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80058d0:	491a      	ldr	r1, [pc, #104]	; (800593c <tcp_recved+0x9c>)
 80058d2:	4819      	ldr	r0, [pc, #100]	; (8005938 <tcp_recved+0x98>)
 80058d4:	f008 fd32 	bl	800e33c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80058dc:	887b      	ldrh	r3, [r7, #2]
 80058de:	4413      	add	r3, r2
 80058e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80058e8:	d804      	bhi.n	80058f4 <tcp_recved+0x54>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ee:	89fa      	ldrh	r2, [r7, #14]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d204      	bcs.n	80058fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80058fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80058fc:	e002      	b.n	8005904 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	89fa      	ldrh	r2, [r7, #14]
 8005902:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff ff71 	bl	80057ec <tcp_update_rcv_ann_wnd>
 800590a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005912:	d309      	bcc.n	8005928 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8b5b      	ldrh	r3, [r3, #26]
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f004 fbc6 	bl	800a0b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	0800ff20 	.word	0x0800ff20
 8005934:	080101bc 	.word	0x080101bc
 8005938:	0800ff64 	.word	0x0800ff64
 800593c:	080101d4 	.word	0x080101d4

08005940 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800594a:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <tcp_new_port+0x84>)
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	3301      	adds	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	4b1c      	ldr	r3, [pc, #112]	; (80059c4 <tcp_new_port+0x84>)
 8005954:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8005956:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <tcp_new_port+0x84>)
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595e:	4293      	cmp	r3, r2
 8005960:	d103      	bne.n	800596a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <tcp_new_port+0x84>)
 8005964:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005968:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800596a:	2300      	movs	r3, #0
 800596c:	71fb      	strb	r3, [r7, #7]
 800596e:	e01e      	b.n	80059ae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <tcp_new_port+0x88>)
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	e011      	b.n	80059a2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	8ada      	ldrh	r2, [r3, #22]
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <tcp_new_port+0x84>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d108      	bne.n	800599c <tcp_new_port+0x5c>
        n++;
 800598a:	88bb      	ldrh	r3, [r7, #4]
 800598c:	3301      	adds	r3, #1
 800598e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005990:	88bb      	ldrh	r3, [r7, #4]
 8005992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005996:	d3d8      	bcc.n	800594a <tcp_new_port+0xa>
          return 0;
 8005998:	2300      	movs	r3, #0
 800599a:	e00d      	b.n	80059b8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ea      	bne.n	800597e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	3301      	adds	r3, #1
 80059ac:	71fb      	strb	r3, [r7, #7]
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d9dd      	bls.n	8005970 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <tcp_new_port+0x84>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	2000000a 	.word	0x2000000a
 80059c8:	08011eec 	.word	0x08011eec

080059cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	b090      	sub	sp, #64	; 0x40
 80059d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80059d8:	4b94      	ldr	r3, [pc, #592]	; (8005c2c <tcp_slowtmr+0x260>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	4a93      	ldr	r2, [pc, #588]	; (8005c2c <tcp_slowtmr+0x260>)
 80059e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80059e2:	4b93      	ldr	r3, [pc, #588]	; (8005c30 <tcp_slowtmr+0x264>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b91      	ldr	r3, [pc, #580]	; (8005c30 <tcp_slowtmr+0x264>)
 80059ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80059f2:	4b90      	ldr	r3, [pc, #576]	; (8005c34 <tcp_slowtmr+0x268>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80059f8:	e29f      	b.n	8005f3a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	7d1b      	ldrb	r3, [r3, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <tcp_slowtmr+0x44>
 8005a02:	4b8d      	ldr	r3, [pc, #564]	; (8005c38 <tcp_slowtmr+0x26c>)
 8005a04:	f240 42be 	movw	r2, #1214	; 0x4be
 8005a08:	498c      	ldr	r1, [pc, #560]	; (8005c3c <tcp_slowtmr+0x270>)
 8005a0a:	488d      	ldr	r0, [pc, #564]	; (8005c40 <tcp_slowtmr+0x274>)
 8005a0c:	f008 fc96 	bl	800e33c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	7d1b      	ldrb	r3, [r3, #20]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d106      	bne.n	8005a26 <tcp_slowtmr+0x5a>
 8005a18:	4b87      	ldr	r3, [pc, #540]	; (8005c38 <tcp_slowtmr+0x26c>)
 8005a1a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005a1e:	4989      	ldr	r1, [pc, #548]	; (8005c44 <tcp_slowtmr+0x278>)
 8005a20:	4887      	ldr	r0, [pc, #540]	; (8005c40 <tcp_slowtmr+0x274>)
 8005a22:	f008 fc8b 	bl	800e33c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	7d1b      	ldrb	r3, [r3, #20]
 8005a2a:	2b0a      	cmp	r3, #10
 8005a2c:	d106      	bne.n	8005a3c <tcp_slowtmr+0x70>
 8005a2e:	4b82      	ldr	r3, [pc, #520]	; (8005c38 <tcp_slowtmr+0x26c>)
 8005a30:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005a34:	4984      	ldr	r1, [pc, #528]	; (8005c48 <tcp_slowtmr+0x27c>)
 8005a36:	4882      	ldr	r0, [pc, #520]	; (8005c40 <tcp_slowtmr+0x274>)
 8005a38:	f008 fc80 	bl	800e33c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	7f9a      	ldrb	r2, [r3, #30]
 8005a40:	4b7b      	ldr	r3, [pc, #492]	; (8005c30 <tcp_slowtmr+0x264>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d105      	bne.n	8005a54 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005a52:	e272      	b.n	8005f3a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005a54:	4b76      	ldr	r3, [pc, #472]	; (8005c30 <tcp_slowtmr+0x264>)
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	7d1b      	ldrb	r3, [r3, #20]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d10a      	bne.n	8005a86 <tcp_slowtmr+0xba>
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d905      	bls.n	8005a86 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a84:	e11e      	b.n	8005cc4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a8c:	2b0b      	cmp	r3, #11
 8005a8e:	d905      	bls.n	8005a9c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a94:	3301      	adds	r3, #1
 8005a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a9a:	e113      	b.n	8005cc4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d075      	beq.n	8005b92 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <tcp_slowtmr+0xf0>
 8005aae:	4b62      	ldr	r3, [pc, #392]	; (8005c38 <tcp_slowtmr+0x26c>)
 8005ab0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005ab4:	4965      	ldr	r1, [pc, #404]	; (8005c4c <tcp_slowtmr+0x280>)
 8005ab6:	4862      	ldr	r0, [pc, #392]	; (8005c40 <tcp_slowtmr+0x274>)
 8005ab8:	f008 fc40 	bl	800e33c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <tcp_slowtmr+0x106>
 8005ac4:	4b5c      	ldr	r3, [pc, #368]	; (8005c38 <tcp_slowtmr+0x26c>)
 8005ac6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005aca:	4961      	ldr	r1, [pc, #388]	; (8005c50 <tcp_slowtmr+0x284>)
 8005acc:	485c      	ldr	r0, [pc, #368]	; (8005c40 <tcp_slowtmr+0x274>)
 8005ace:	f008 fc35 	bl	800e33c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005ad8:	2b0b      	cmp	r3, #11
 8005ada:	d905      	bls.n	8005ae8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ae6:	e0ed      	b.n	8005cc4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005aee:	3b01      	subs	r3, #1
 8005af0:	4a58      	ldr	r2, [pc, #352]	; (8005c54 <tcp_slowtmr+0x288>)
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005afc:	7c7a      	ldrb	r2, [r7, #17]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d907      	bls.n	8005b12 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b08:	3301      	adds	r3, #1
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b18:	7c7a      	ldrb	r2, [r7, #17]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f200 80d2 	bhi.w	8005cc4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005b20:	2301      	movs	r3, #1
 8005b22:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b30:	f005 f968 	bl	800ae04 <tcp_zero_window_probe>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d014      	beq.n	8005b64 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	e011      	b.n	8005b64 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b46:	4619      	mov	r1, r3
 8005b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4a:	f004 f82d 	bl	8009ba8 <tcp_split_unsent_seg>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d107      	bne.n	8005b64 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b56:	f004 faad 	bl	800a0b4 <tcp_output>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80ac 	beq.w	8005cc4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	f200 80a2 	bhi.w	8005cc4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005b86:	3301      	adds	r3, #1
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005b90:	e098      	b.n	8005cc4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db0f      	blt.n	8005bbc <tcp_slowtmr+0x1f0>
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005ba2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d008      	beq.n	8005bbc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b21a      	sxth	r2, r3
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	db7b      	blt.n	8005cc4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bce:	f004 fd63 	bl	800a698 <tcp_rexmit_rto_prepare>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <tcp_slowtmr+0x21c>
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d171      	bne.n	8005cc4 <tcp_slowtmr+0x2f8>
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d06d      	beq.n	8005cc4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	7d1b      	ldrb	r3, [r3, #20]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d03a      	beq.n	8005c66 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf6:	2b0c      	cmp	r3, #12
 8005bf8:	bf28      	it	cs
 8005bfa:	230c      	movcs	r3, #12
 8005bfc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005c04:	10db      	asrs	r3, r3, #3
 8005c06:	b21b      	sxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005c10:	4413      	add	r3, r2
 8005c12:	7efa      	ldrb	r2, [r7, #27]
 8005c14:	4910      	ldr	r1, [pc, #64]	; (8005c58 <tcp_slowtmr+0x28c>)
 8005c16:	5c8a      	ldrb	r2, [r1, r2]
 8005c18:	4093      	lsls	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005c22:	4293      	cmp	r3, r2
 8005c24:	dc1a      	bgt.n	8005c5c <tcp_slowtmr+0x290>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	b21a      	sxth	r2, r3
 8005c2a:	e019      	b.n	8005c60 <tcp_slowtmr+0x294>
 8005c2c:	20006740 	.word	0x20006740
 8005c30:	20006756 	.word	0x20006756
 8005c34:	2000674c 	.word	0x2000674c
 8005c38:	0800ff20 	.word	0x0800ff20
 8005c3c:	08010264 	.word	0x08010264
 8005c40:	0800ff64 	.word	0x0800ff64
 8005c44:	08010290 	.word	0x08010290
 8005c48:	080102bc 	.word	0x080102bc
 8005c4c:	080102ec 	.word	0x080102ec
 8005c50:	08010320 	.word	0x08010320
 8005c54:	08011ee4 	.word	0x08011ee4
 8005c58:	08011ed4 	.word	0x08011ed4
 8005c5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	2200      	movs	r2, #0
 8005c6a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bf28      	it	cs
 8005c7c:	4613      	movcs	r3, r2
 8005c7e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005c80:	8a7b      	ldrh	r3, [r7, #18]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d206      	bcs.n	8005cac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cc0:	f004 fd5a 	bl	800a778 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	7d1b      	ldrb	r3, [r3, #20]
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d111      	bne.n	8005cf0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	8b5b      	ldrh	r3, [r3, #26]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cd8:	4b9d      	ldr	r3, [pc, #628]	; (8005f50 <tcp_slowtmr+0x584>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b28      	cmp	r3, #40	; 0x28
 8005ce4:	d904      	bls.n	8005cf0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cea:	3301      	adds	r3, #1
 8005cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	7a5b      	ldrb	r3, [r3, #9]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d04c      	beq.n	8005d96 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d003      	beq.n	8005d0c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005d08:	2b07      	cmp	r3, #7
 8005d0a:	d144      	bne.n	8005d96 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d0c:	4b90      	ldr	r3, [pc, #576]	; (8005f50 <tcp_slowtmr+0x584>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d1c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005d20:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005d24:	498b      	ldr	r1, [pc, #556]	; (8005f54 <tcp_slowtmr+0x588>)
 8005d26:	fba1 1303 	umull	r1, r3, r1, r3
 8005d2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d90a      	bls.n	8005d46 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d34:	3301      	adds	r3, #1
 8005d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d44:	e027      	b.n	8005d96 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d46:	4b82      	ldr	r3, [pc, #520]	; (8005f50 <tcp_slowtmr+0x584>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	4b7e      	ldr	r3, [pc, #504]	; (8005f58 <tcp_slowtmr+0x58c>)
 8005d60:	fb00 f303 	mul.w	r3, r0, r3
 8005d64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005d66:	497b      	ldr	r1, [pc, #492]	; (8005f54 <tcp_slowtmr+0x588>)
 8005d68:	fba1 1303 	umull	r1, r3, r1, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d911      	bls.n	8005d96 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d74:	f005 f806 	bl	800ad84 <tcp_keepalive>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005d7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d107      	bne.n	8005d96 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d011      	beq.n	8005dc2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005d9e:	4b6c      	ldr	r3, [pc, #432]	; (8005f50 <tcp_slowtmr+0x584>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005dae:	4619      	mov	r1, r3
 8005db0:	460b      	mov	r3, r1
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	440b      	add	r3, r1
 8005db6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d302      	bcc.n	8005dc2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dbe:	f000 fec1 	bl	8006b44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	7d1b      	ldrb	r3, [r3, #20]
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d10b      	bne.n	8005de2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <tcp_slowtmr+0x584>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b28      	cmp	r3, #40	; 0x28
 8005dd6:	d904      	bls.n	8005de2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	7d1b      	ldrb	r3, [r3, #20]
 8005de6:	2b09      	cmp	r3, #9
 8005de8:	d10b      	bne.n	8005e02 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005dea:	4b59      	ldr	r3, [pc, #356]	; (8005f50 <tcp_slowtmr+0x584>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2bf0      	cmp	r3, #240	; 0xf0
 8005df6:	d904      	bls.n	8005e02 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d060      	beq.n	8005ecc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e14:	f000 fce2 	bl	80067dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d010      	beq.n	8005e40 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <tcp_slowtmr+0x590>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d106      	bne.n	8005e36 <tcp_slowtmr+0x46a>
 8005e28:	4b4d      	ldr	r3, [pc, #308]	; (8005f60 <tcp_slowtmr+0x594>)
 8005e2a:	f240 526d 	movw	r2, #1389	; 0x56d
 8005e2e:	494d      	ldr	r1, [pc, #308]	; (8005f64 <tcp_slowtmr+0x598>)
 8005e30:	484d      	ldr	r0, [pc, #308]	; (8005f68 <tcp_slowtmr+0x59c>)
 8005e32:	f008 fa83 	bl	800e33c <iprintf>
        prev->next = pcb->next;
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	e00f      	b.n	8005e60 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005e40:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <tcp_slowtmr+0x590>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d006      	beq.n	8005e58 <tcp_slowtmr+0x48c>
 8005e4a:	4b45      	ldr	r3, [pc, #276]	; (8005f60 <tcp_slowtmr+0x594>)
 8005e4c:	f240 5271 	movw	r2, #1393	; 0x571
 8005e50:	4946      	ldr	r1, [pc, #280]	; (8005f6c <tcp_slowtmr+0x5a0>)
 8005e52:	4845      	ldr	r0, [pc, #276]	; (8005f68 <tcp_slowtmr+0x59c>)
 8005e54:	f008 fa72 	bl	800e33c <iprintf>
        tcp_active_pcbs = pcb->next;
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4a3f      	ldr	r2, [pc, #252]	; (8005f5c <tcp_slowtmr+0x590>)
 8005e5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005e60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d013      	beq.n	8005e90 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	3304      	adds	r3, #4
 8005e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e78:	8ad2      	ldrh	r2, [r2, #22]
 8005e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e7c:	8b09      	ldrh	r1, [r1, #24]
 8005e7e:	9102      	str	r1, [sp, #8]
 8005e80:	9201      	str	r2, [sp, #4]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	462b      	mov	r3, r5
 8005e86:	4622      	mov	r2, r4
 8005e88:	4601      	mov	r1, r0
 8005e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e8c:	f004 fec6 	bl	800ac1c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	7d1b      	ldrb	r3, [r3, #20]
 8005e9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f7ff f838 	bl	8004f1c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005eac:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <tcp_slowtmr+0x5a4>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <tcp_slowtmr+0x4f6>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f06f 010c 	mvn.w	r1, #12
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005ec2:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <tcp_slowtmr+0x5a4>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d037      	beq.n	8005f3a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8005eca:	e590      	b.n	80059ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	7f1b      	ldrb	r3, [r3, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	7f1a      	ldrb	r2, [r3, #28]
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	7f5b      	ldrb	r3, [r3, #29]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d325      	bcc.n	8005f3a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <tcp_slowtmr+0x5a4>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <tcp_slowtmr+0x550>
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0c:	6912      	ldr	r2, [r2, #16]
 8005f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005f1a:	e002      	b.n	8005f22 <tcp_slowtmr+0x556>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <tcp_slowtmr+0x5a4>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d000      	beq.n	8005f2c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8005f2a:	e560      	b.n	80059ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005f2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8005f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f36:	f004 f8bd 	bl	800a0b4 <tcp_output>
  while (pcb != NULL) {
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f ad5c 	bne.w	80059fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <tcp_slowtmr+0x5a8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005f4c:	e067      	b.n	800601e <tcp_slowtmr+0x652>
 8005f4e:	bf00      	nop
 8005f50:	20006740 	.word	0x20006740
 8005f54:	10624dd3 	.word	0x10624dd3
 8005f58:	000124f8 	.word	0x000124f8
 8005f5c:	2000674c 	.word	0x2000674c
 8005f60:	0800ff20 	.word	0x0800ff20
 8005f64:	08010358 	.word	0x08010358
 8005f68:	0800ff64 	.word	0x0800ff64
 8005f6c:	08010384 	.word	0x08010384
 8005f70:	20006754 	.word	0x20006754
 8005f74:	20006750 	.word	0x20006750
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	7d1b      	ldrb	r3, [r3, #20]
 8005f7c:	2b0a      	cmp	r3, #10
 8005f7e:	d006      	beq.n	8005f8e <tcp_slowtmr+0x5c2>
 8005f80:	4b2b      	ldr	r3, [pc, #172]	; (8006030 <tcp_slowtmr+0x664>)
 8005f82:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005f86:	492b      	ldr	r1, [pc, #172]	; (8006034 <tcp_slowtmr+0x668>)
 8005f88:	482b      	ldr	r0, [pc, #172]	; (8006038 <tcp_slowtmr+0x66c>)
 8005f8a:	f008 f9d7 	bl	800e33c <iprintf>
    pcb_remove = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <tcp_slowtmr+0x670>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2bf0      	cmp	r3, #240	; 0xf0
 8005fa0:	d904      	bls.n	8005fac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d02f      	beq.n	8006014 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb6:	f000 fc11 	bl	80067dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d010      	beq.n	8005fe2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <tcp_slowtmr+0x674>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d106      	bne.n	8005fd8 <tcp_slowtmr+0x60c>
 8005fca:	4b19      	ldr	r3, [pc, #100]	; (8006030 <tcp_slowtmr+0x664>)
 8005fcc:	f240 52af 	movw	r2, #1455	; 0x5af
 8005fd0:	491c      	ldr	r1, [pc, #112]	; (8006044 <tcp_slowtmr+0x678>)
 8005fd2:	4819      	ldr	r0, [pc, #100]	; (8006038 <tcp_slowtmr+0x66c>)
 8005fd4:	f008 f9b2 	bl	800e33c <iprintf>
        prev->next = pcb->next;
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	60da      	str	r2, [r3, #12]
 8005fe0:	e00f      	b.n	8006002 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <tcp_slowtmr+0x674>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d006      	beq.n	8005ffa <tcp_slowtmr+0x62e>
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <tcp_slowtmr+0x664>)
 8005fee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005ff2:	4915      	ldr	r1, [pc, #84]	; (8006048 <tcp_slowtmr+0x67c>)
 8005ff4:	4810      	ldr	r0, [pc, #64]	; (8006038 <tcp_slowtmr+0x66c>)
 8005ff6:	f008 f9a1 	bl	800e33c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <tcp_slowtmr+0x674>)
 8006000:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800600c:	69f8      	ldr	r0, [r7, #28]
 800600e:	f7fe ff85 	bl	8004f1c <tcp_free>
 8006012:	e004      	b.n	800601e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1a9      	bne.n	8005f78 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3730      	adds	r7, #48	; 0x30
 800602a:	46bd      	mov	sp, r7
 800602c:	bdb0      	pop	{r4, r5, r7, pc}
 800602e:	bf00      	nop
 8006030:	0800ff20 	.word	0x0800ff20
 8006034:	080103b0 	.word	0x080103b0
 8006038:	0800ff64 	.word	0x0800ff64
 800603c:	20006740 	.word	0x20006740
 8006040:	20006750 	.word	0x20006750
 8006044:	080103e0 	.word	0x080103e0
 8006048:	08010408 	.word	0x08010408

0800604c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006052:	4b2d      	ldr	r3, [pc, #180]	; (8006108 <tcp_fasttmr+0xbc>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <tcp_fasttmr+0xbc>)
 800605c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800605e:	4b2b      	ldr	r3, [pc, #172]	; (800610c <tcp_fasttmr+0xc0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006064:	e048      	b.n	80060f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7f9a      	ldrb	r2, [r3, #30]
 800606a:	4b27      	ldr	r3, [pc, #156]	; (8006108 <tcp_fasttmr+0xbc>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d03f      	beq.n	80060f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006072:	4b25      	ldr	r3, [pc, #148]	; (8006108 <tcp_fasttmr+0xbc>)
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8b5b      	ldrh	r3, [r3, #26]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d010      	beq.n	80060a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8b5b      	ldrh	r3, [r3, #26]
 800608a:	f043 0302 	orr.w	r3, r3, #2
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f004 f80d 	bl	800a0b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8b5b      	ldrh	r3, [r3, #26]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8b5b      	ldrh	r3, [r3, #26]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8b5b      	ldrh	r3, [r3, #26]
 80060b8:	f023 0308 	bic.w	r3, r3, #8
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff f8be 	bl	8005244 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <tcp_fasttmr+0xc4>)
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f819 	bl	8006114 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <tcp_fasttmr+0xc4>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d000      	beq.n	80060ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80060ea:	e7b8      	b.n	800605e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	e002      	b.n	80060f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1b3      	bne.n	8006066 <tcp_fasttmr+0x1a>
    }
  }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20006756 	.word	0x20006756
 800610c:	2000674c 	.word	0x2000674c
 8006110:	20006754 	.word	0x20006754

08006114 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <tcp_process_refused_data+0x22>
 8006122:	4b37      	ldr	r3, [pc, #220]	; (8006200 <tcp_process_refused_data+0xec>)
 8006124:	f240 6209 	movw	r2, #1545	; 0x609
 8006128:	4936      	ldr	r1, [pc, #216]	; (8006204 <tcp_process_refused_data+0xf0>)
 800612a:	4837      	ldr	r0, [pc, #220]	; (8006208 <tcp_process_refused_data+0xf4>)
 800612c:	f008 f906 	bl	800e33c <iprintf>
 8006130:	f06f 030f 	mvn.w	r3, #15
 8006134:	e060      	b.n	80061f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800613a:	7b5b      	ldrb	r3, [r3, #13]
 800613c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006142:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <tcp_process_refused_data+0x58>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6918      	ldr	r0, [r3, #16]
 800615e:	2300      	movs	r3, #0
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	47a0      	blx	r4
 8006166:	4603      	mov	r3, r0
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e007      	b.n	800617c <tcp_process_refused_data+0x68>
 800616c:	2300      	movs	r3, #0
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	2000      	movs	r0, #0
 8006174:	f000 f8c2 	bl	80062fc <tcp_recv_null>
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800617c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d12a      	bne.n	80061da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d033      	beq.n	80061f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006196:	d005      	beq.n	80061a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	3301      	adds	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <tcp_process_refused_data+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6918      	ldr	r0, [r3, #16]
 80061b8:	2300      	movs	r3, #0
 80061ba:	2200      	movs	r2, #0
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	47a0      	blx	r4
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
 80061c4:	e001      	b.n	80061ca <tcp_process_refused_data+0xb6>
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80061ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ce:	f113 0f0d 	cmn.w	r3, #13
 80061d2:	d110      	bne.n	80061f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80061d4:	f06f 030c 	mvn.w	r3, #12
 80061d8:	e00e      	b.n	80061f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80061da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061de:	f113 0f0d 	cmn.w	r3, #13
 80061e2:	d102      	bne.n	80061ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80061e4:	f06f 030c 	mvn.w	r3, #12
 80061e8:	e006      	b.n	80061f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80061f0:	f06f 0304 	mvn.w	r3, #4
 80061f4:	e000      	b.n	80061f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd90      	pop	{r4, r7, pc}
 8006200:	0800ff20 	.word	0x0800ff20
 8006204:	08010430 	.word	0x08010430
 8006208:	0800ff64 	.word	0x0800ff64

0800620c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006214:	e007      	b.n	8006226 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f80a 	bl	8006236 <tcp_seg_free>
    seg = next;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f4      	bne.n	8006216 <tcp_segs_free+0xa>
  }
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00c      	beq.n	800625e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fbb3 	bl	80049bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	2003      	movs	r0, #3
 800625a:	f7fd fdb1 	bl	8003dc0 <memp_free>
  }
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d107      	bne.n	800628a <tcp_setprio+0x22>
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <tcp_setprio+0x30>)
 800627c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006280:	4906      	ldr	r1, [pc, #24]	; (800629c <tcp_setprio+0x34>)
 8006282:	4807      	ldr	r0, [pc, #28]	; (80062a0 <tcp_setprio+0x38>)
 8006284:	f008 f85a 	bl	800e33c <iprintf>
 8006288:	e002      	b.n	8006290 <tcp_setprio+0x28>

  pcb->prio = prio;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	755a      	strb	r2, [r3, #21]
}
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	0800ff20 	.word	0x0800ff20
 800629c:	08010458 	.word	0x08010458
 80062a0:	0800ff64 	.word	0x0800ff64

080062a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <tcp_seg_copy+0x1c>
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <tcp_seg_copy+0x4c>)
 80062b4:	f240 6282 	movw	r2, #1666	; 0x682
 80062b8:	490e      	ldr	r1, [pc, #56]	; (80062f4 <tcp_seg_copy+0x50>)
 80062ba:	480f      	ldr	r0, [pc, #60]	; (80062f8 <tcp_seg_copy+0x54>)
 80062bc:	f008 f83e 	bl	800e33c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80062c0:	2003      	movs	r0, #3
 80062c2:	f7fd fd31 	bl	8003d28 <memp_malloc>
 80062c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <tcp_seg_copy+0x2e>
    return NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e00a      	b.n	80062e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80062d2:	2210      	movs	r2, #16
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f008 f81a 	bl	800e310 <memcpy>
  pbuf_ref(cseg->p);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fc0b 	bl	8004afc <pbuf_ref>
  return cseg;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	0800ff20 	.word	0x0800ff20
 80062f4:	08010474 	.word	0x08010474
 80062f8:	0800ff64 	.word	0x0800ff64

080062fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <tcp_recv_null+0x28>
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <tcp_recv_null+0x60>)
 8006312:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006316:	4912      	ldr	r1, [pc, #72]	; (8006360 <tcp_recv_null+0x64>)
 8006318:	4812      	ldr	r0, [pc, #72]	; (8006364 <tcp_recv_null+0x68>)
 800631a:	f008 f80f 	bl	800e33c <iprintf>
 800631e:	f06f 030f 	mvn.w	r3, #15
 8006322:	e016      	b.n	8006352 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	891b      	ldrh	r3, [r3, #8]
 800632e:	4619      	mov	r1, r3
 8006330:	68b8      	ldr	r0, [r7, #8]
 8006332:	f7ff fab5 	bl	80058a0 <tcp_recved>
    pbuf_free(p);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fe fb40 	bl	80049bc <pbuf_free>
 800633c:	e008      	b.n	8006350 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800633e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006346:	68b8      	ldr	r0, [r7, #8]
 8006348:	f7fe ffe6 	bl	8005318 <tcp_close>
 800634c:	4603      	mov	r3, r0
 800634e:	e000      	b.n	8006352 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	0800ff20 	.word	0x0800ff20
 8006360:	08010490 	.word	0x08010490
 8006364:	0800ff64 	.word	0x0800ff64

08006368 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	db01      	blt.n	800637e <tcp_kill_prio+0x16>
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	e000      	b.n	8006380 <tcp_kill_prio+0x18>
 800637e:	237f      	movs	r3, #127	; 0x7f
 8006380:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d034      	beq.n	80063f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006388:	7afb      	ldrb	r3, [r7, #11]
 800638a:	3b01      	subs	r3, #1
 800638c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <tcp_kill_prio+0x94>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e01f      	b.n	80063de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	7d5b      	ldrb	r3, [r3, #21]
 80063a2:	7afa      	ldrb	r2, [r7, #11]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d80c      	bhi.n	80063c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80063ac:	7afa      	ldrb	r2, [r7, #11]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d112      	bne.n	80063d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80063b2:	4b13      	ldr	r3, [pc, #76]	; (8006400 <tcp_kill_prio+0x98>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d80a      	bhi.n	80063d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80063c2:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <tcp_kill_prio+0x98>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	7d5b      	ldrb	r3, [r3, #21]
 80063d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1dc      	bne.n	800639e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f7ff f87e 	bl	80054ec <tcp_abort>
 80063f0:	e000      	b.n	80063f4 <tcp_kill_prio+0x8c>
    return;
 80063f2:	bf00      	nop
  }
}
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	2000674c 	.word	0x2000674c
 8006400:	20006740 	.word	0x20006740

08006404 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d009      	beq.n	8006428 <tcp_kill_state+0x24>
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b09      	cmp	r3, #9
 8006418:	d006      	beq.n	8006428 <tcp_kill_state+0x24>
 800641a:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <tcp_kill_state+0x80>)
 800641c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006420:	4919      	ldr	r1, [pc, #100]	; (8006488 <tcp_kill_state+0x84>)
 8006422:	481a      	ldr	r0, [pc, #104]	; (800648c <tcp_kill_state+0x88>)
 8006424:	f007 ff8a 	bl	800e33c <iprintf>

  inactivity = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <tcp_kill_state+0x8c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e017      	b.n	8006468 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	7d1b      	ldrb	r3, [r3, #20]
 800643c:	79fa      	ldrb	r2, [r7, #7]
 800643e:	429a      	cmp	r2, r3
 8006440:	d10f      	bne.n	8006462 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006442:	4b14      	ldr	r3, [pc, #80]	; (8006494 <tcp_kill_state+0x90>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	429a      	cmp	r2, r3
 8006450:	d807      	bhi.n	8006462 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <tcp_kill_state+0x90>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e4      	bne.n	8006438 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006474:	2100      	movs	r1, #0
 8006476:	6938      	ldr	r0, [r7, #16]
 8006478:	f7fe ff7a 	bl	8005370 <tcp_abandon>
  }
}
 800647c:	bf00      	nop
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	0800ff20 	.word	0x0800ff20
 8006488:	080104ac 	.word	0x080104ac
 800648c:	0800ff64 	.word	0x0800ff64
 8006490:	2000674c 	.word	0x2000674c
 8006494:	20006740 	.word	0x20006740

08006498 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <tcp_kill_timewait+0x58>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e012      	b.n	80064d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <tcp_kill_timewait+0x5c>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d807      	bhi.n	80064ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <tcp_kill_timewait+0x5c>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e9      	bne.n	80064ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f7ff f803 	bl	80054ec <tcp_abort>
  }
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20006750 	.word	0x20006750
 80064f4:	20006740 	.word	0x20006740

080064f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <tcp_handle_closepend+0x48>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006504:	e014      	b.n	8006530 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8b5b      	ldrh	r3, [r3, #26]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8b5b      	ldrh	r3, [r3, #26]
 800651c:	f023 0308 	bic.w	r3, r3, #8
 8006520:	b29a      	uxth	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fe fe8c 	bl	8005244 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e7      	bne.n	8006506 <tcp_handle_closepend+0xe>
  }
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	2000674c 	.word	0x2000674c

08006544 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800654e:	2001      	movs	r0, #1
 8006550:	f7fd fbea 	bl	8003d28 <memp_malloc>
 8006554:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d126      	bne.n	80065aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800655c:	f7ff ffcc 	bl	80064f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006560:	f7ff ff9a 	bl	8006498 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006564:	2001      	movs	r0, #1
 8006566:	f7fd fbdf 	bl	8003d28 <memp_malloc>
 800656a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11b      	bne.n	80065aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006572:	2009      	movs	r0, #9
 8006574:	f7ff ff46 	bl	8006404 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006578:	2001      	movs	r0, #1
 800657a:	f7fd fbd5 	bl	8003d28 <memp_malloc>
 800657e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d111      	bne.n	80065aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006586:	2008      	movs	r0, #8
 8006588:	f7ff ff3c 	bl	8006404 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800658c:	2001      	movs	r0, #1
 800658e:	f7fd fbcb 	bl	8003d28 <memp_malloc>
 8006592:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d107      	bne.n	80065aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff fee3 	bl	8006368 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80065a2:	2001      	movs	r0, #1
 80065a4:	f7fd fbc0 	bl	8003d28 <memp_malloc>
 80065a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d03f      	beq.n	8006630 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80065b0:	229c      	movs	r2, #156	; 0x9c
 80065b2:	2100      	movs	r1, #0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f007 feb9 	bl	800e32c <memset>
    pcb->prio = prio;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	79fa      	ldrb	r2, [r7, #7]
 80065be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80065c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80065e6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2206      	movs	r2, #6
 80065ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2206      	movs	r2, #6
 80065f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065fc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <tcp_alloc+0xf8>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <tcp_alloc+0xfc>)
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800661c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a08      	ldr	r2, [pc, #32]	; (8006644 <tcp_alloc+0x100>)
 8006624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4a07      	ldr	r2, [pc, #28]	; (8006648 <tcp_alloc+0x104>)
 800662c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006630:	68fb      	ldr	r3, [r7, #12]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20006740 	.word	0x20006740
 8006640:	20006756 	.word	0x20006756
 8006644:	080062fd 	.word	0x080062fd
 8006648:	006ddd00 	.word	0x006ddd00

0800664c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006650:	2040      	movs	r0, #64	; 0x40
 8006652:	f7ff ff77 	bl	8006544 <tcp_alloc>
 8006656:	4603      	mov	r3, r0
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}

0800665c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	611a      	str	r2, [r3, #16]
  }
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7d1b      	ldrb	r3, [r3, #20]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <tcp_recv+0x26>
 8006698:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <tcp_recv+0x38>)
 800669a:	f240 72df 	movw	r2, #2015	; 0x7df
 800669e:	4907      	ldr	r1, [pc, #28]	; (80066bc <tcp_recv+0x3c>)
 80066a0:	4807      	ldr	r0, [pc, #28]	; (80066c0 <tcp_recv+0x40>)
 80066a2:	f007 fe4b 	bl	800e33c <iprintf>
    pcb->recv = recv;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	0800ff20 	.word	0x0800ff20
 80066bc:	080104bc 	.word	0x080104bc
 80066c0:	0800ff64 	.word	0x0800ff64

080066c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00e      	beq.n	80066f2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	7d1b      	ldrb	r3, [r3, #20]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d106      	bne.n	80066ea <tcp_sent+0x26>
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <tcp_sent+0x38>)
 80066de:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80066e2:	4907      	ldr	r1, [pc, #28]	; (8006700 <tcp_sent+0x3c>)
 80066e4:	4807      	ldr	r0, [pc, #28]	; (8006704 <tcp_sent+0x40>)
 80066e6:	f007 fe29 	bl	800e33c <iprintf>
    pcb->sent = sent;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	0800ff20 	.word	0x0800ff20
 8006700:	080104e4 	.word	0x080104e4
 8006704:	0800ff64 	.word	0x0800ff64

08006708 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7d1b      	ldrb	r3, [r3, #20]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d106      	bne.n	800672e <tcp_err+0x26>
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <tcp_err+0x38>)
 8006722:	f640 020d 	movw	r2, #2061	; 0x80d
 8006726:	4907      	ldr	r1, [pc, #28]	; (8006744 <tcp_err+0x3c>)
 8006728:	4807      	ldr	r0, [pc, #28]	; (8006748 <tcp_err+0x40>)
 800672a:	f007 fe07 	bl	800e33c <iprintf>
    pcb->errf = err;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	0800ff20 	.word	0x0800ff20
 8006744:	0801050c 	.word	0x0801050c
 8006748:	0800ff64 	.word	0x0800ff64

0800674c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <tcp_accept+0x22>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7d1b      	ldrb	r3, [r3, #20]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d104      	bne.n	800676e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	619a      	str	r2, [r3, #24]
  }
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d107      	bne.n	80067a0 <tcp_poll+0x24>
 8006790:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <tcp_poll+0x50>)
 8006792:	f640 023d 	movw	r2, #2109	; 0x83d
 8006796:	490e      	ldr	r1, [pc, #56]	; (80067d0 <tcp_poll+0x54>)
 8006798:	480e      	ldr	r0, [pc, #56]	; (80067d4 <tcp_poll+0x58>)
 800679a:	f007 fdcf 	bl	800e33c <iprintf>
 800679e:	e011      	b.n	80067c4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7d1b      	ldrb	r3, [r3, #20]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d106      	bne.n	80067b6 <tcp_poll+0x3a>
 80067a8:	4b08      	ldr	r3, [pc, #32]	; (80067cc <tcp_poll+0x50>)
 80067aa:	f640 023e 	movw	r2, #2110	; 0x83e
 80067ae:	490a      	ldr	r1, [pc, #40]	; (80067d8 <tcp_poll+0x5c>)
 80067b0:	4808      	ldr	r0, [pc, #32]	; (80067d4 <tcp_poll+0x58>)
 80067b2:	f007 fdc3 	bl	800e33c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	79fa      	ldrb	r2, [r7, #7]
 80067c2:	775a      	strb	r2, [r3, #29]
}
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	0800ff20 	.word	0x0800ff20
 80067d0:	08010534 	.word	0x08010534
 80067d4:	0800ff64 	.word	0x0800ff64
 80067d8:	0801054c 	.word	0x0801054c

080067dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d107      	bne.n	80067fa <tcp_pcb_purge+0x1e>
 80067ea:	4b21      	ldr	r3, [pc, #132]	; (8006870 <tcp_pcb_purge+0x94>)
 80067ec:	f640 0251 	movw	r2, #2129	; 0x851
 80067f0:	4920      	ldr	r1, [pc, #128]	; (8006874 <tcp_pcb_purge+0x98>)
 80067f2:	4821      	ldr	r0, [pc, #132]	; (8006878 <tcp_pcb_purge+0x9c>)
 80067f4:	f007 fda2 	bl	800e33c <iprintf>
 80067f8:	e037      	b.n	800686a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	7d1b      	ldrb	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d033      	beq.n	800686a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006806:	2b0a      	cmp	r3, #10
 8006808:	d02f      	beq.n	800686a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800680e:	2b01      	cmp	r3, #1
 8006810:	d02b      	beq.n	800686a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe f8cc 	bl	80049bc <pbuf_free>
      pcb->refused_data = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f986 	bl	8006b44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800683e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fce1 	bl	800620c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fcdc 	bl	800620c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	66da      	str	r2, [r3, #108]	; 0x6c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	0800ff20 	.word	0x0800ff20
 8006874:	0801056c 	.word	0x0801056c
 8006878:	0800ff64 	.word	0x0800ff64

0800687c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <tcp_pcb_remove+0x1e>
 800688c:	4b3e      	ldr	r3, [pc, #248]	; (8006988 <tcp_pcb_remove+0x10c>)
 800688e:	f640 0283 	movw	r2, #2179	; 0x883
 8006892:	493e      	ldr	r1, [pc, #248]	; (800698c <tcp_pcb_remove+0x110>)
 8006894:	483e      	ldr	r0, [pc, #248]	; (8006990 <tcp_pcb_remove+0x114>)
 8006896:	f007 fd51 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <tcp_pcb_remove+0x32>
 80068a0:	4b39      	ldr	r3, [pc, #228]	; (8006988 <tcp_pcb_remove+0x10c>)
 80068a2:	f640 0284 	movw	r2, #2180	; 0x884
 80068a6:	493b      	ldr	r1, [pc, #236]	; (8006994 <tcp_pcb_remove+0x118>)
 80068a8:	4839      	ldr	r0, [pc, #228]	; (8006990 <tcp_pcb_remove+0x114>)
 80068aa:	f007 fd47 	bl	800e33c <iprintf>

  TCP_RMV(pcblist, pcb);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d105      	bne.n	80068c4 <tcp_pcb_remove+0x48>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e013      	b.n	80068ec <tcp_pcb_remove+0x70>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e00c      	b.n	80068e6 <tcp_pcb_remove+0x6a>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d104      	bne.n	80068e0 <tcp_pcb_remove+0x64>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	e005      	b.n	80068ec <tcp_pcb_remove+0x70>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ef      	bne.n	80068cc <tcp_pcb_remove+0x50>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80068f2:	6838      	ldr	r0, [r7, #0]
 80068f4:	f7ff ff72 	bl	80067dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	7d1b      	ldrb	r3, [r3, #20]
 80068fc:	2b0a      	cmp	r3, #10
 80068fe:	d013      	beq.n	8006928 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006904:	2b01      	cmp	r3, #1
 8006906:	d00f      	beq.n	8006928 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	8b5b      	ldrh	r3, [r3, #26]
 800690c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	8b5b      	ldrh	r3, [r3, #26]
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	b29a      	uxth	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006922:	6838      	ldr	r0, [r7, #0]
 8006924:	f003 fbc6 	bl	800a0b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	7d1b      	ldrb	r3, [r3, #20]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d020      	beq.n	8006972 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <tcp_pcb_remove+0xca>
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <tcp_pcb_remove+0x10c>)
 800693a:	f640 0293 	movw	r2, #2195	; 0x893
 800693e:	4916      	ldr	r1, [pc, #88]	; (8006998 <tcp_pcb_remove+0x11c>)
 8006940:	4813      	ldr	r0, [pc, #76]	; (8006990 <tcp_pcb_remove+0x114>)
 8006942:	f007 fcfb 	bl	800e33c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <tcp_pcb_remove+0xe0>
 800694e:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <tcp_pcb_remove+0x10c>)
 8006950:	f640 0294 	movw	r2, #2196	; 0x894
 8006954:	4911      	ldr	r1, [pc, #68]	; (800699c <tcp_pcb_remove+0x120>)
 8006956:	480e      	ldr	r0, [pc, #56]	; (8006990 <tcp_pcb_remove+0x114>)
 8006958:	f007 fcf0 	bl	800e33c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <tcp_pcb_remove+0xf6>
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <tcp_pcb_remove+0x10c>)
 8006966:	f640 0296 	movw	r2, #2198	; 0x896
 800696a:	490d      	ldr	r1, [pc, #52]	; (80069a0 <tcp_pcb_remove+0x124>)
 800696c:	4808      	ldr	r0, [pc, #32]	; (8006990 <tcp_pcb_remove+0x114>)
 800696e:	f007 fce5 	bl	800e33c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	0800ff20 	.word	0x0800ff20
 800698c:	08010588 	.word	0x08010588
 8006990:	0800ff64 	.word	0x0800ff64
 8006994:	080105a4 	.word	0x080105a4
 8006998:	080105c4 	.word	0x080105c4
 800699c:	080105dc 	.word	0x080105dc
 80069a0:	080105f8 	.word	0x080105f8

080069a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <tcp_next_iss+0x1c>
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <tcp_next_iss+0x38>)
 80069b4:	f640 02af 	movw	r2, #2223	; 0x8af
 80069b8:	4909      	ldr	r1, [pc, #36]	; (80069e0 <tcp_next_iss+0x3c>)
 80069ba:	480a      	ldr	r0, [pc, #40]	; (80069e4 <tcp_next_iss+0x40>)
 80069bc:	f007 fcbe 	bl	800e33c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <tcp_next_iss+0x44>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b09      	ldr	r3, [pc, #36]	; (80069ec <tcp_next_iss+0x48>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <tcp_next_iss+0x44>)
 80069cc:	6013      	str	r3, [r2, #0]
  return iss;
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <tcp_next_iss+0x44>)
 80069d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	0800ff20 	.word	0x0800ff20
 80069e0:	08010610 	.word	0x08010610
 80069e4:	0800ff64 	.word	0x0800ff64
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	20006740 	.word	0x20006740

080069f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <tcp_eff_send_mss_netif+0x22>
 8006a04:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <tcp_eff_send_mss_netif+0x68>)
 8006a06:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006a0a:	4914      	ldr	r1, [pc, #80]	; (8006a5c <tcp_eff_send_mss_netif+0x6c>)
 8006a0c:	4814      	ldr	r0, [pc, #80]	; (8006a60 <tcp_eff_send_mss_netif+0x70>)
 8006a0e:	f007 fc95 	bl	800e33c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006a18:	89fb      	ldrh	r3, [r7, #14]
 8006a1a:	e019      	b.n	8006a50 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	8c1b      	ldrh	r3, [r3, #32]
 8006a20:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d012      	beq.n	8006a4e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006a28:	2328      	movs	r3, #40	; 0x28
 8006a2a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006a2c:	8afa      	ldrh	r2, [r7, #22]
 8006a2e:	8abb      	ldrh	r3, [r7, #20]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d904      	bls.n	8006a3e <tcp_eff_send_mss_netif+0x4e>
 8006a34:	8afa      	ldrh	r2, [r7, #22]
 8006a36:	8abb      	ldrh	r3, [r7, #20]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	e000      	b.n	8006a40 <tcp_eff_send_mss_netif+0x50>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006a42:	8a7a      	ldrh	r2, [r7, #18]
 8006a44:	89fb      	ldrh	r3, [r7, #14]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bf28      	it	cs
 8006a4a:	4613      	movcs	r3, r2
 8006a4c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006a4e:	89fb      	ldrh	r3, [r7, #14]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	0800ff20 	.word	0x0800ff20
 8006a5c:	0801062c 	.word	0x0801062c
 8006a60:	0800ff64 	.word	0x0800ff64

08006a64 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d119      	bne.n	8006aac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006a78:	4b10      	ldr	r3, [pc, #64]	; (8006abc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006a7a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006a7e:	4910      	ldr	r1, [pc, #64]	; (8006ac0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006a80:	4810      	ldr	r0, [pc, #64]	; (8006ac4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006a82:	f007 fc5b 	bl	800e33c <iprintf>

  while (pcb != NULL) {
 8006a86:	e011      	b.n	8006aac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d108      	bne.n	8006aa6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7fe fd26 	bl	80054ec <tcp_abort>
      pcb = next;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e002      	b.n	8006aac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1ea      	bne.n	8006a88 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	0800ff20 	.word	0x0800ff20
 8006ac0:	08010654 	.word	0x08010654
 8006ac4:	0800ff64 	.word	0x0800ff64

08006ac8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d02a      	beq.n	8006b2e <tcp_netif_ip_addr_changed+0x66>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d026      	beq.n	8006b2e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006ae0:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <tcp_netif_ip_addr_changed+0x70>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ffbc 	bl	8006a64 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <tcp_netif_ip_addr_changed+0x74>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ffb6 	bl	8006a64 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d017      	beq.n	8006b2e <tcp_netif_ip_addr_changed+0x66>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b06:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <tcp_netif_ip_addr_changed+0x78>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e00c      	b.n	8006b28 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d103      	bne.n	8006b22 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1ef      	bne.n	8006b0e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	2000674c 	.word	0x2000674c
 8006b3c:	20006744 	.word	0x20006744
 8006b40:	20006748 	.word	0x20006748

08006b44 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fb57 	bl	800620c <tcp_segs_free>
    pcb->ooseq = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b08d      	sub	sp, #52	; 0x34
 8006b70:	af04      	add	r7, sp, #16
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <tcp_input+0x1c>
 8006b7c:	4b9b      	ldr	r3, [pc, #620]	; (8006dec <tcp_input+0x280>)
 8006b7e:	2283      	movs	r2, #131	; 0x83
 8006b80:	499b      	ldr	r1, [pc, #620]	; (8006df0 <tcp_input+0x284>)
 8006b82:	489c      	ldr	r0, [pc, #624]	; (8006df4 <tcp_input+0x288>)
 8006b84:	f007 fbda 	bl	800e33c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a9a      	ldr	r2, [pc, #616]	; (8006df8 <tcp_input+0x28c>)
 8006b8e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	895b      	ldrh	r3, [r3, #10]
 8006b94:	2b13      	cmp	r3, #19
 8006b96:	f240 83d1 	bls.w	800733c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b9a:	4b98      	ldr	r3, [pc, #608]	; (8006dfc <tcp_input+0x290>)
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	4a97      	ldr	r2, [pc, #604]	; (8006dfc <tcp_input+0x290>)
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f006 fc29 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f040 83c7 	bne.w	8007340 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006bb2:	4b92      	ldr	r3, [pc, #584]	; (8006dfc <tcp_input+0x290>)
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006bba:	2be0      	cmp	r3, #224	; 0xe0
 8006bbc:	f000 83c0 	beq.w	8007340 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006bc0:	4b8d      	ldr	r3, [pc, #564]	; (8006df8 <tcp_input+0x28c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	899b      	ldrh	r3, [r3, #12]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fc fc58 	bl	800347e <lwip_htons>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	0b1b      	lsrs	r3, r3, #12
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006bda:	7cbb      	ldrb	r3, [r7, #18]
 8006bdc:	2b13      	cmp	r3, #19
 8006bde:	f240 83b1 	bls.w	8007344 <tcp_input+0x7d8>
 8006be2:	7cbb      	ldrb	r3, [r7, #18]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	891b      	ldrh	r3, [r3, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	f200 83aa 	bhi.w	8007344 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006bf0:	7cbb      	ldrb	r3, [r7, #18]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b14      	subs	r3, #20
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4b81      	ldr	r3, [pc, #516]	; (8006e00 <tcp_input+0x294>)
 8006bfa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006bfc:	4b81      	ldr	r3, [pc, #516]	; (8006e04 <tcp_input+0x298>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	895a      	ldrh	r2, [r3, #10]
 8006c06:	7cbb      	ldrb	r3, [r7, #18]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d309      	bcc.n	8006c22 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006c0e:	4b7c      	ldr	r3, [pc, #496]	; (8006e00 <tcp_input+0x294>)
 8006c10:	881a      	ldrh	r2, [r3, #0]
 8006c12:	4b7d      	ldr	r3, [pc, #500]	; (8006e08 <tcp_input+0x29c>)
 8006c14:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006c16:	7cbb      	ldrb	r3, [r7, #18]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fd fe48 	bl	80048b0 <pbuf_remove_header>
 8006c20:	e04e      	b.n	8006cc0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <tcp_input+0xca>
 8006c2a:	4b70      	ldr	r3, [pc, #448]	; (8006dec <tcp_input+0x280>)
 8006c2c:	22c2      	movs	r2, #194	; 0xc2
 8006c2e:	4977      	ldr	r1, [pc, #476]	; (8006e0c <tcp_input+0x2a0>)
 8006c30:	4870      	ldr	r0, [pc, #448]	; (8006df4 <tcp_input+0x288>)
 8006c32:	f007 fb83 	bl	800e33c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006c36:	2114      	movs	r1, #20
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fd fe39 	bl	80048b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	895a      	ldrh	r2, [r3, #10]
 8006c42:	4b71      	ldr	r3, [pc, #452]	; (8006e08 <tcp_input+0x29c>)
 8006c44:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006c46:	4b6e      	ldr	r3, [pc, #440]	; (8006e00 <tcp_input+0x294>)
 8006c48:	881a      	ldrh	r2, [r3, #0]
 8006c4a:	4b6f      	ldr	r3, [pc, #444]	; (8006e08 <tcp_input+0x29c>)
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006c52:	4b6d      	ldr	r3, [pc, #436]	; (8006e08 <tcp_input+0x29c>)
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fd fe29 	bl	80048b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	895b      	ldrh	r3, [r3, #10]
 8006c64:	8a3a      	ldrh	r2, [r7, #16]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	f200 836e 	bhi.w	8007348 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4a64      	ldr	r2, [pc, #400]	; (8006e04 <tcp_input+0x298>)
 8006c74:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	8a3a      	ldrh	r2, [r7, #16]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd fe16 	bl	80048b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	891a      	ldrh	r2, [r3, #8]
 8006c88:	8a3b      	ldrh	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	895b      	ldrh	r3, [r3, #10]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <tcp_input+0x13a>
 8006c9a:	4b54      	ldr	r3, [pc, #336]	; (8006dec <tcp_input+0x280>)
 8006c9c:	22df      	movs	r2, #223	; 0xdf
 8006c9e:	495c      	ldr	r1, [pc, #368]	; (8006e10 <tcp_input+0x2a4>)
 8006ca0:	4854      	ldr	r0, [pc, #336]	; (8006df4 <tcp_input+0x288>)
 8006ca2:	f007 fb4b 	bl	800e33c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	891a      	ldrh	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	891b      	ldrh	r3, [r3, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d005      	beq.n	8006cc0 <tcp_input+0x154>
 8006cb4:	4b4d      	ldr	r3, [pc, #308]	; (8006dec <tcp_input+0x280>)
 8006cb6:	22e0      	movs	r2, #224	; 0xe0
 8006cb8:	4956      	ldr	r1, [pc, #344]	; (8006e14 <tcp_input+0x2a8>)
 8006cba:	484e      	ldr	r0, [pc, #312]	; (8006df4 <tcp_input+0x288>)
 8006cbc:	f007 fb3e 	bl	800e33c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	; (8006df8 <tcp_input+0x28c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	4a4b      	ldr	r2, [pc, #300]	; (8006df8 <tcp_input+0x28c>)
 8006cca:	6814      	ldr	r4, [r2, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fc fbd6 	bl	800347e <lwip_htons>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006cd6:	4b48      	ldr	r3, [pc, #288]	; (8006df8 <tcp_input+0x28c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	885b      	ldrh	r3, [r3, #2]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4a46      	ldr	r2, [pc, #280]	; (8006df8 <tcp_input+0x28c>)
 8006ce0:	6814      	ldr	r4, [r2, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fc fbcb 	bl	800347e <lwip_htons>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006cec:	4b42      	ldr	r3, [pc, #264]	; (8006df8 <tcp_input+0x28c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4a41      	ldr	r2, [pc, #260]	; (8006df8 <tcp_input+0x28c>)
 8006cf4:	6814      	ldr	r4, [r2, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fc fbd6 	bl	80034a8 <lwip_htonl>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	4a45      	ldr	r2, [pc, #276]	; (8006e18 <tcp_input+0x2ac>)
 8006d04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006d06:	4b3c      	ldr	r3, [pc, #240]	; (8006df8 <tcp_input+0x28c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <tcp_input+0x28c>)
 8006d0e:	6814      	ldr	r4, [r2, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fc fbc9 	bl	80034a8 <lwip_htonl>
 8006d16:	4603      	mov	r3, r0
 8006d18:	60a3      	str	r3, [r4, #8]
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	4a3f      	ldr	r2, [pc, #252]	; (8006e1c <tcp_input+0x2b0>)
 8006d1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006d20:	4b35      	ldr	r3, [pc, #212]	; (8006df8 <tcp_input+0x28c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	89db      	ldrh	r3, [r3, #14]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	4a33      	ldr	r2, [pc, #204]	; (8006df8 <tcp_input+0x28c>)
 8006d2a:	6814      	ldr	r4, [r2, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fc fba6 	bl	800347e <lwip_htons>
 8006d32:	4603      	mov	r3, r0
 8006d34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006d36:	4b30      	ldr	r3, [pc, #192]	; (8006df8 <tcp_input+0x28c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	899b      	ldrh	r3, [r3, #12]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fc fb9d 	bl	800347e <lwip_htons>
 8006d44:	4603      	mov	r3, r0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	4b34      	ldr	r3, [pc, #208]	; (8006e20 <tcp_input+0x2b4>)
 8006d50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	891a      	ldrh	r2, [r3, #8]
 8006d56:	4b33      	ldr	r3, [pc, #204]	; (8006e24 <tcp_input+0x2b8>)
 8006d58:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006d5a:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <tcp_input+0x2b4>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <tcp_input+0x214>
    tcplen++;
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <tcp_input+0x2b8>)
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <tcp_input+0x2b8>)
 8006d70:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	891a      	ldrh	r2, [r3, #8]
 8006d76:	4b2b      	ldr	r3, [pc, #172]	; (8006e24 <tcp_input+0x2b8>)
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f200 82e6 	bhi.w	800734c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <tcp_input+0x2bc>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e09d      	b.n	8006ec8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	7d1b      	ldrb	r3, [r3, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <tcp_input+0x234>
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <tcp_input+0x280>)
 8006d96:	22fb      	movs	r2, #251	; 0xfb
 8006d98:	4924      	ldr	r1, [pc, #144]	; (8006e2c <tcp_input+0x2c0>)
 8006d9a:	4816      	ldr	r0, [pc, #88]	; (8006df4 <tcp_input+0x288>)
 8006d9c:	f007 face 	bl	800e33c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	7d1b      	ldrb	r3, [r3, #20]
 8006da4:	2b0a      	cmp	r3, #10
 8006da6:	d105      	bne.n	8006db4 <tcp_input+0x248>
 8006da8:	4b10      	ldr	r3, [pc, #64]	; (8006dec <tcp_input+0x280>)
 8006daa:	22fc      	movs	r2, #252	; 0xfc
 8006dac:	4920      	ldr	r1, [pc, #128]	; (8006e30 <tcp_input+0x2c4>)
 8006dae:	4811      	ldr	r0, [pc, #68]	; (8006df4 <tcp_input+0x288>)
 8006db0:	f007 fac4 	bl	800e33c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	7d1b      	ldrb	r3, [r3, #20]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d105      	bne.n	8006dc8 <tcp_input+0x25c>
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <tcp_input+0x280>)
 8006dbe:	22fd      	movs	r2, #253	; 0xfd
 8006dc0:	491c      	ldr	r1, [pc, #112]	; (8006e34 <tcp_input+0x2c8>)
 8006dc2:	480c      	ldr	r0, [pc, #48]	; (8006df4 <tcp_input+0x288>)
 8006dc4:	f007 faba 	bl	800e33c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	7a1b      	ldrb	r3, [r3, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d033      	beq.n	8006e38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	7a1a      	ldrb	r2, [r3, #8]
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <tcp_input+0x290>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ddc:	3301      	adds	r3, #1
 8006dde:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d029      	beq.n	8006e38 <tcp_input+0x2cc>
      prev = pcb;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	61bb      	str	r3, [r7, #24]
      continue;
 8006de8:	e06b      	b.n	8006ec2 <tcp_input+0x356>
 8006dea:	bf00      	nop
 8006dec:	08010688 	.word	0x08010688
 8006df0:	080106bc 	.word	0x080106bc
 8006df4:	080106d4 	.word	0x080106d4
 8006df8:	20006768 	.word	0x20006768
 8006dfc:	200031d0 	.word	0x200031d0
 8006e00:	2000676c 	.word	0x2000676c
 8006e04:	20006770 	.word	0x20006770
 8006e08:	2000676e 	.word	0x2000676e
 8006e0c:	080106fc 	.word	0x080106fc
 8006e10:	0801070c 	.word	0x0801070c
 8006e14:	08010718 	.word	0x08010718
 8006e18:	20006778 	.word	0x20006778
 8006e1c:	2000677c 	.word	0x2000677c
 8006e20:	20006784 	.word	0x20006784
 8006e24:	20006782 	.word	0x20006782
 8006e28:	2000674c 	.word	0x2000674c
 8006e2c:	08010738 	.word	0x08010738
 8006e30:	08010760 	.word	0x08010760
 8006e34:	0801078c 	.word	0x0801078c
    }

    if (pcb->remote_port == tcphdr->src &&
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	8b1a      	ldrh	r2, [r3, #24]
 8006e3c:	4b72      	ldr	r3, [pc, #456]	; (8007008 <tcp_input+0x49c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d13a      	bne.n	8006ebe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	8ada      	ldrh	r2, [r3, #22]
 8006e4c:	4b6e      	ldr	r3, [pc, #440]	; (8007008 <tcp_input+0x49c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d132      	bne.n	8006ebe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b6b      	ldr	r3, [pc, #428]	; (800700c <tcp_input+0x4a0>)
 8006e5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d12c      	bne.n	8006ebe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b68      	ldr	r3, [pc, #416]	; (800700c <tcp_input+0x4a0>)
 8006e6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d126      	bne.n	8006ebe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d106      	bne.n	8006e88 <tcp_input+0x31c>
 8006e7a:	4b65      	ldr	r3, [pc, #404]	; (8007010 <tcp_input+0x4a4>)
 8006e7c:	f240 120d 	movw	r2, #269	; 0x10d
 8006e80:	4964      	ldr	r1, [pc, #400]	; (8007014 <tcp_input+0x4a8>)
 8006e82:	4865      	ldr	r0, [pc, #404]	; (8007018 <tcp_input+0x4ac>)
 8006e84:	f007 fa5a 	bl	800e33c <iprintf>
      if (prev != NULL) {
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <tcp_input+0x338>
        prev->next = pcb->next;
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006e96:	4b61      	ldr	r3, [pc, #388]	; (800701c <tcp_input+0x4b0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006e9e:	4a5f      	ldr	r2, [pc, #380]	; (800701c <tcp_input+0x4b0>)
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d111      	bne.n	8006ed2 <tcp_input+0x366>
 8006eae:	4b58      	ldr	r3, [pc, #352]	; (8007010 <tcp_input+0x4a4>)
 8006eb0:	f240 1215 	movw	r2, #277	; 0x115
 8006eb4:	495a      	ldr	r1, [pc, #360]	; (8007020 <tcp_input+0x4b4>)
 8006eb6:	4858      	ldr	r0, [pc, #352]	; (8007018 <tcp_input+0x4ac>)
 8006eb8:	f007 fa40 	bl	800e33c <iprintf>
      break;
 8006ebc:	e009      	b.n	8006ed2 <tcp_input+0x366>
    }
    prev = pcb;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f47f af5e 	bne.w	8006d8c <tcp_input+0x220>
 8006ed0:	e000      	b.n	8006ed4 <tcp_input+0x368>
      break;
 8006ed2:	bf00      	nop
  }

  if (pcb == NULL) {
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 80aa 	bne.w	8007030 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006edc:	4b51      	ldr	r3, [pc, #324]	; (8007024 <tcp_input+0x4b8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	e03f      	b.n	8006f64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	7d1b      	ldrb	r3, [r3, #20]
 8006ee8:	2b0a      	cmp	r3, #10
 8006eea:	d006      	beq.n	8006efa <tcp_input+0x38e>
 8006eec:	4b48      	ldr	r3, [pc, #288]	; (8007010 <tcp_input+0x4a4>)
 8006eee:	f240 121f 	movw	r2, #287	; 0x11f
 8006ef2:	494d      	ldr	r1, [pc, #308]	; (8007028 <tcp_input+0x4bc>)
 8006ef4:	4848      	ldr	r0, [pc, #288]	; (8007018 <tcp_input+0x4ac>)
 8006ef6:	f007 fa21 	bl	800e33c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	7a1b      	ldrb	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	7a1a      	ldrb	r2, [r3, #8]
 8006f06:	4b41      	ldr	r3, [pc, #260]	; (800700c <tcp_input+0x4a0>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d122      	bne.n	8006f5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	8b1a      	ldrh	r2, [r3, #24]
 8006f1a:	4b3b      	ldr	r3, [pc, #236]	; (8007008 <tcp_input+0x49c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d11b      	bne.n	8006f5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	8ada      	ldrh	r2, [r3, #22]
 8006f2a:	4b37      	ldr	r3, [pc, #220]	; (8007008 <tcp_input+0x49c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	885b      	ldrh	r3, [r3, #2]
 8006f30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d113      	bne.n	8006f5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	4b34      	ldr	r3, [pc, #208]	; (800700c <tcp_input+0x4a0>)
 8006f3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d10d      	bne.n	8006f5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b31      	ldr	r3, [pc, #196]	; (800700c <tcp_input+0x4a0>)
 8006f48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d107      	bne.n	8006f5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006f4e:	69f8      	ldr	r0, [r7, #28]
 8006f50:	f000 fb56 	bl	8007600 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7fd fd31 	bl	80049bc <pbuf_free>
        return;
 8006f5a:	e1fd      	b.n	8007358 <tcp_input+0x7ec>
        continue;
 8006f5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1bc      	bne.n	8006ee4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	; (800702c <tcp_input+0x4c0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e02a      	b.n	8006fcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	7a1b      	ldrb	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00c      	beq.n	8006f98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	7a1a      	ldrb	r2, [r3, #8]
 8006f82:	4b22      	ldr	r3, [pc, #136]	; (800700c <tcp_input+0x4a0>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d002      	beq.n	8006f98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	61bb      	str	r3, [r7, #24]
        continue;
 8006f96:	e016      	b.n	8006fc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	8ada      	ldrh	r2, [r3, #22]
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <tcp_input+0x49c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	885b      	ldrh	r3, [r3, #2]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d10c      	bne.n	8006fc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	4b17      	ldr	r3, [pc, #92]	; (800700c <tcp_input+0x4a0>)
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d00f      	beq.n	8006fd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00d      	beq.n	8006fd6 <tcp_input+0x46a>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1d1      	bne.n	8006f76 <tcp_input+0x40a>
 8006fd2:	e000      	b.n	8006fd6 <tcp_input+0x46a>
            break;
 8006fd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d029      	beq.n	8007030 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <tcp_input+0x4c0>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <tcp_input+0x4c0>)
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006ff8:	6978      	ldr	r0, [r7, #20]
 8006ffa:	f000 fa03 	bl	8007404 <tcp_listen_input>
      }
      pbuf_free(p);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fd fcdc 	bl	80049bc <pbuf_free>
      return;
 8007004:	e1a8      	b.n	8007358 <tcp_input+0x7ec>
 8007006:	bf00      	nop
 8007008:	20006768 	.word	0x20006768
 800700c:	200031d0 	.word	0x200031d0
 8007010:	08010688 	.word	0x08010688
 8007014:	080107b4 	.word	0x080107b4
 8007018:	080106d4 	.word	0x080106d4
 800701c:	2000674c 	.word	0x2000674c
 8007020:	080107e0 	.word	0x080107e0
 8007024:	20006750 	.word	0x20006750
 8007028:	0801080c 	.word	0x0801080c
 800702c:	20006748 	.word	0x20006748
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8158 	beq.w	80072e8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007038:	4b95      	ldr	r3, [pc, #596]	; (8007290 <tcp_input+0x724>)
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	891a      	ldrh	r2, [r3, #8]
 8007042:	4b93      	ldr	r3, [pc, #588]	; (8007290 <tcp_input+0x724>)
 8007044:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007046:	4a92      	ldr	r2, [pc, #584]	; (8007290 <tcp_input+0x724>)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800704c:	4b91      	ldr	r3, [pc, #580]	; (8007294 <tcp_input+0x728>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a8f      	ldr	r2, [pc, #572]	; (8007290 <tcp_input+0x724>)
 8007052:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007054:	4b90      	ldr	r3, [pc, #576]	; (8007298 <tcp_input+0x72c>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800705a:	4b90      	ldr	r3, [pc, #576]	; (800729c <tcp_input+0x730>)
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007060:	4b8f      	ldr	r3, [pc, #572]	; (80072a0 <tcp_input+0x734>)
 8007062:	2200      	movs	r2, #0
 8007064:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007066:	4b8f      	ldr	r3, [pc, #572]	; (80072a4 <tcp_input+0x738>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	7b5b      	ldrb	r3, [r3, #13]
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007084:	2b00      	cmp	r3, #0
 8007086:	d017      	beq.n	80070b8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007088:	69f8      	ldr	r0, [r7, #28]
 800708a:	f7ff f843 	bl	8006114 <tcp_process_refused_data>
 800708e:	4603      	mov	r3, r0
 8007090:	f113 0f0d 	cmn.w	r3, #13
 8007094:	d007      	beq.n	80070a6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00c      	beq.n	80070b8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800709e:	4b82      	ldr	r3, [pc, #520]	; (80072a8 <tcp_input+0x73c>)
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80e3 	bne.w	8007276 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80070b0:	69f8      	ldr	r0, [r7, #28]
 80070b2:	f003 fe05 	bl	800acc0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80070b6:	e0de      	b.n	8007276 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80070b8:	4a7c      	ldr	r2, [pc, #496]	; (80072ac <tcp_input+0x740>)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80070be:	69f8      	ldr	r0, [r7, #28]
 80070c0:	f000 fb18 	bl	80076f4 <tcp_process>
 80070c4:	4603      	mov	r3, r0
 80070c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80070c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80070cc:	f113 0f0d 	cmn.w	r3, #13
 80070d0:	f000 80d3 	beq.w	800727a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80070d4:	4b71      	ldr	r3, [pc, #452]	; (800729c <tcp_input+0x730>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d015      	beq.n	800710c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <tcp_input+0x590>
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	6912      	ldr	r2, [r2, #16]
 80070f4:	f06f 010d 	mvn.w	r1, #13
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80070fc:	69f9      	ldr	r1, [r7, #28]
 80070fe:	486c      	ldr	r0, [pc, #432]	; (80072b0 <tcp_input+0x744>)
 8007100:	f7ff fbbc 	bl	800687c <tcp_pcb_remove>
        tcp_free(pcb);
 8007104:	69f8      	ldr	r0, [r7, #28]
 8007106:	f7fd ff09 	bl	8004f1c <tcp_free>
 800710a:	e0da      	b.n	80072c2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007110:	4b63      	ldr	r3, [pc, #396]	; (80072a0 <tcp_input+0x734>)
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01d      	beq.n	8007154 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007118:	4b61      	ldr	r3, [pc, #388]	; (80072a0 <tcp_input+0x734>)
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <tcp_input+0x5d2>
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	6910      	ldr	r0, [r2, #16]
 8007132:	89fa      	ldrh	r2, [r7, #14]
 8007134:	69f9      	ldr	r1, [r7, #28]
 8007136:	4798      	blx	r3
 8007138:	4603      	mov	r3, r0
 800713a:	74fb      	strb	r3, [r7, #19]
 800713c:	e001      	b.n	8007142 <tcp_input+0x5d6>
 800713e:	2300      	movs	r3, #0
 8007140:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007142:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007146:	f113 0f0d 	cmn.w	r3, #13
 800714a:	f000 8098 	beq.w	800727e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800714e:	4b54      	ldr	r3, [pc, #336]	; (80072a0 <tcp_input+0x734>)
 8007150:	2200      	movs	r2, #0
 8007152:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007154:	69f8      	ldr	r0, [r7, #28]
 8007156:	f000 f915 	bl	8007384 <tcp_input_delayed_close>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 8090 	bne.w	8007282 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007162:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <tcp_input+0x72c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d041      	beq.n	80071ee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716e:	2b00      	cmp	r3, #0
 8007170:	d006      	beq.n	8007180 <tcp_input+0x614>
 8007172:	4b50      	ldr	r3, [pc, #320]	; (80072b4 <tcp_input+0x748>)
 8007174:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007178:	494f      	ldr	r1, [pc, #316]	; (80072b8 <tcp_input+0x74c>)
 800717a:	4850      	ldr	r0, [pc, #320]	; (80072bc <tcp_input+0x750>)
 800717c:	f007 f8de 	bl	800e33c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	8b5b      	ldrh	r3, [r3, #26]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800718c:	4b42      	ldr	r3, [pc, #264]	; (8007298 <tcp_input+0x72c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	f7fd fc13 	bl	80049bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007196:	69f8      	ldr	r0, [r7, #28]
 8007198:	f7fe f9a8 	bl	80054ec <tcp_abort>
            goto aborted;
 800719c:	e091      	b.n	80072c2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <tcp_input+0x656>
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	6918      	ldr	r0, [r3, #16]
 80071b2:	4b39      	ldr	r3, [pc, #228]	; (8007298 <tcp_input+0x72c>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	2300      	movs	r3, #0
 80071b8:	69f9      	ldr	r1, [r7, #28]
 80071ba:	47a0      	blx	r4
 80071bc:	4603      	mov	r3, r0
 80071be:	74fb      	strb	r3, [r7, #19]
 80071c0:	e008      	b.n	80071d4 <tcp_input+0x668>
 80071c2:	4b35      	ldr	r3, [pc, #212]	; (8007298 <tcp_input+0x72c>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	2300      	movs	r3, #0
 80071c8:	69f9      	ldr	r1, [r7, #28]
 80071ca:	2000      	movs	r0, #0
 80071cc:	f7ff f896 	bl	80062fc <tcp_recv_null>
 80071d0:	4603      	mov	r3, r0
 80071d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80071d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071d8:	f113 0f0d 	cmn.w	r3, #13
 80071dc:	d053      	beq.n	8007286 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80071de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80071e6:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <tcp_input+0x72c>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80071ee:	4b2b      	ldr	r3, [pc, #172]	; (800729c <tcp_input+0x730>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d030      	beq.n	800725c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007206:	7b5a      	ldrb	r2, [r3, #13]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800720c:	f042 0220 	orr.w	r2, r2, #32
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	735a      	strb	r2, [r3, #13]
 8007214:	e022      	b.n	800725c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800721e:	d005      	beq.n	800722c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007224:	3301      	adds	r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <tcp_input+0x6e2>
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	6918      	ldr	r0, [r3, #16]
 8007240:	2300      	movs	r3, #0
 8007242:	2200      	movs	r2, #0
 8007244:	69f9      	ldr	r1, [r7, #28]
 8007246:	47a0      	blx	r4
 8007248:	4603      	mov	r3, r0
 800724a:	74fb      	strb	r3, [r7, #19]
 800724c:	e001      	b.n	8007252 <tcp_input+0x6e6>
 800724e:	2300      	movs	r3, #0
 8007250:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007252:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007256:	f113 0f0d 	cmn.w	r3, #13
 800725a:	d016      	beq.n	800728a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <tcp_input+0x740>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007262:	69f8      	ldr	r0, [r7, #28]
 8007264:	f000 f88e 	bl	8007384 <tcp_input_delayed_close>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d128      	bne.n	80072c0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800726e:	69f8      	ldr	r0, [r7, #28]
 8007270:	f002 ff20 	bl	800a0b4 <tcp_output>
 8007274:	e025      	b.n	80072c2 <tcp_input+0x756>
        goto aborted;
 8007276:	bf00      	nop
 8007278:	e023      	b.n	80072c2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800727a:	bf00      	nop
 800727c:	e021      	b.n	80072c2 <tcp_input+0x756>
              goto aborted;
 800727e:	bf00      	nop
 8007280:	e01f      	b.n	80072c2 <tcp_input+0x756>
          goto aborted;
 8007282:	bf00      	nop
 8007284:	e01d      	b.n	80072c2 <tcp_input+0x756>
            goto aborted;
 8007286:	bf00      	nop
 8007288:	e01b      	b.n	80072c2 <tcp_input+0x756>
              goto aborted;
 800728a:	bf00      	nop
 800728c:	e019      	b.n	80072c2 <tcp_input+0x756>
 800728e:	bf00      	nop
 8007290:	20006758 	.word	0x20006758
 8007294:	20006768 	.word	0x20006768
 8007298:	20006788 	.word	0x20006788
 800729c:	20006785 	.word	0x20006785
 80072a0:	20006780 	.word	0x20006780
 80072a4:	20006784 	.word	0x20006784
 80072a8:	20006782 	.word	0x20006782
 80072ac:	2000678c 	.word	0x2000678c
 80072b0:	2000674c 	.word	0x2000674c
 80072b4:	08010688 	.word	0x08010688
 80072b8:	0801083c 	.word	0x0801083c
 80072bc:	080106d4 	.word	0x080106d4
          goto aborted;
 80072c0:	bf00      	nop
    tcp_input_pcb = NULL;
 80072c2:	4b27      	ldr	r3, [pc, #156]	; (8007360 <tcp_input+0x7f4>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80072c8:	4b26      	ldr	r3, [pc, #152]	; (8007364 <tcp_input+0x7f8>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80072ce:	4b26      	ldr	r3, [pc, #152]	; (8007368 <tcp_input+0x7fc>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d03f      	beq.n	8007356 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80072d6:	4b24      	ldr	r3, [pc, #144]	; (8007368 <tcp_input+0x7fc>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fd fb6e 	bl	80049bc <pbuf_free>
      inseg.p = NULL;
 80072e0:	4b21      	ldr	r3, [pc, #132]	; (8007368 <tcp_input+0x7fc>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80072e6:	e036      	b.n	8007356 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80072e8:	4b20      	ldr	r3, [pc, #128]	; (800736c <tcp_input+0x800>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	899b      	ldrh	r3, [r3, #12]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fc f8c4 	bl	800347e <lwip_htons>
 80072f6:	4603      	mov	r3, r0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d118      	bne.n	8007334 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007302:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <tcp_input+0x804>)
 8007304:	6819      	ldr	r1, [r3, #0]
 8007306:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <tcp_input+0x808>)
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	4b1a      	ldr	r3, [pc, #104]	; (8007378 <tcp_input+0x80c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <tcp_input+0x800>)
 8007314:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007316:	885b      	ldrh	r3, [r3, #2]
 8007318:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800731a:	4a14      	ldr	r2, [pc, #80]	; (800736c <tcp_input+0x800>)
 800731c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800731e:	8812      	ldrh	r2, [r2, #0]
 8007320:	b292      	uxth	r2, r2
 8007322:	9202      	str	r2, [sp, #8]
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <tcp_input+0x810>)
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <tcp_input+0x814>)
 800732c:	4602      	mov	r2, r0
 800732e:	2000      	movs	r0, #0
 8007330:	f003 fc74 	bl	800ac1c <tcp_rst>
    pbuf_free(p);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fd fb41 	bl	80049bc <pbuf_free>
  return;
 800733a:	e00c      	b.n	8007356 <tcp_input+0x7ea>
    goto dropped;
 800733c:	bf00      	nop
 800733e:	e006      	b.n	800734e <tcp_input+0x7e2>
    goto dropped;
 8007340:	bf00      	nop
 8007342:	e004      	b.n	800734e <tcp_input+0x7e2>
    goto dropped;
 8007344:	bf00      	nop
 8007346:	e002      	b.n	800734e <tcp_input+0x7e2>
      goto dropped;
 8007348:	bf00      	nop
 800734a:	e000      	b.n	800734e <tcp_input+0x7e2>
      goto dropped;
 800734c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fd fb34 	bl	80049bc <pbuf_free>
 8007354:	e000      	b.n	8007358 <tcp_input+0x7ec>
  return;
 8007356:	bf00      	nop
}
 8007358:	3724      	adds	r7, #36	; 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	2000678c 	.word	0x2000678c
 8007364:	20006788 	.word	0x20006788
 8007368:	20006758 	.word	0x20006758
 800736c:	20006768 	.word	0x20006768
 8007370:	2000677c 	.word	0x2000677c
 8007374:	20006782 	.word	0x20006782
 8007378:	20006778 	.word	0x20006778
 800737c:	200031e0 	.word	0x200031e0
 8007380:	200031e4 	.word	0x200031e4

08007384 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <tcp_input_delayed_close+0x1c>
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <tcp_input_delayed_close+0x6c>)
 8007394:	f240 225a 	movw	r2, #602	; 0x25a
 8007398:	4916      	ldr	r1, [pc, #88]	; (80073f4 <tcp_input_delayed_close+0x70>)
 800739a:	4817      	ldr	r0, [pc, #92]	; (80073f8 <tcp_input_delayed_close+0x74>)
 800739c:	f006 ffce 	bl	800e33c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80073a0:	4b16      	ldr	r3, [pc, #88]	; (80073fc <tcp_input_delayed_close+0x78>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01c      	beq.n	80073e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8b5b      	ldrh	r3, [r3, #26]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d008      	beq.n	80073d4 <tcp_input_delayed_close+0x50>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6912      	ldr	r2, [r2, #16]
 80073cc:	f06f 010e 	mvn.w	r1, #14
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	480a      	ldr	r0, [pc, #40]	; (8007400 <tcp_input_delayed_close+0x7c>)
 80073d8:	f7ff fa50 	bl	800687c <tcp_pcb_remove>
    tcp_free(pcb);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fd fd9d 	bl	8004f1c <tcp_free>
    return 1;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	08010688 	.word	0x08010688
 80073f4:	08010858 	.word	0x08010858
 80073f8:	080106d4 	.word	0x080106d4
 80073fc:	20006785 	.word	0x20006785
 8007400:	2000674c 	.word	0x2000674c

08007404 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b08b      	sub	sp, #44	; 0x2c
 8007408:	af04      	add	r7, sp, #16
 800740a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800740c:	4b6f      	ldr	r3, [pc, #444]	; (80075cc <tcp_listen_input+0x1c8>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	f040 80d2 	bne.w	80075be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <tcp_listen_input+0x2a>
 8007420:	4b6b      	ldr	r3, [pc, #428]	; (80075d0 <tcp_listen_input+0x1cc>)
 8007422:	f240 2281 	movw	r2, #641	; 0x281
 8007426:	496b      	ldr	r1, [pc, #428]	; (80075d4 <tcp_listen_input+0x1d0>)
 8007428:	486b      	ldr	r0, [pc, #428]	; (80075d8 <tcp_listen_input+0x1d4>)
 800742a:	f006 ff87 	bl	800e33c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800742e:	4b67      	ldr	r3, [pc, #412]	; (80075cc <tcp_listen_input+0x1c8>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d019      	beq.n	800746e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800743a:	4b68      	ldr	r3, [pc, #416]	; (80075dc <tcp_listen_input+0x1d8>)
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	4b68      	ldr	r3, [pc, #416]	; (80075e0 <tcp_listen_input+0x1dc>)
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	4b67      	ldr	r3, [pc, #412]	; (80075e4 <tcp_listen_input+0x1e0>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800744a:	4b67      	ldr	r3, [pc, #412]	; (80075e8 <tcp_listen_input+0x1e4>)
 800744c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800744e:	885b      	ldrh	r3, [r3, #2]
 8007450:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007452:	4a65      	ldr	r2, [pc, #404]	; (80075e8 <tcp_listen_input+0x1e4>)
 8007454:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007456:	8812      	ldrh	r2, [r2, #0]
 8007458:	b292      	uxth	r2, r2
 800745a:	9202      	str	r2, [sp, #8]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	4b63      	ldr	r3, [pc, #396]	; (80075ec <tcp_listen_input+0x1e8>)
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	4b63      	ldr	r3, [pc, #396]	; (80075f0 <tcp_listen_input+0x1ec>)
 8007464:	4602      	mov	r2, r0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f003 fbd8 	bl	800ac1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800746c:	e0a9      	b.n	80075c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800746e:	4b57      	ldr	r3, [pc, #348]	; (80075cc <tcp_listen_input+0x1c8>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 80a3 	beq.w	80075c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7d5b      	ldrb	r3, [r3, #21]
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff f85f 	bl	8006544 <tcp_alloc>
 8007486:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d111      	bne.n	80074b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <tcp_listen_input+0xa8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6910      	ldr	r0, [r2, #16]
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	2100      	movs	r1, #0
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	73bb      	strb	r3, [r7, #14]
      return;
 80074aa:	e08b      	b.n	80075c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80074ac:	23f0      	movs	r3, #240	; 0xf0
 80074ae:	73bb      	strb	r3, [r7, #14]
      return;
 80074b0:	e088      	b.n	80075c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80074b2:	4b50      	ldr	r3, [pc, #320]	; (80075f4 <tcp_listen_input+0x1f0>)
 80074b4:	695a      	ldr	r2, [r3, #20]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80074ba:	4b4e      	ldr	r3, [pc, #312]	; (80075f4 <tcp_listen_input+0x1f0>)
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8ada      	ldrh	r2, [r3, #22]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80074ca:	4b47      	ldr	r3, [pc, #284]	; (80075e8 <tcp_listen_input+0x1e4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2203      	movs	r2, #3
 80074da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80074dc:	4b41      	ldr	r3, [pc, #260]	; (80075e4 <tcp_listen_input+0x1e0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80074ee:	6978      	ldr	r0, [r7, #20]
 80074f0:	f7ff fa58 	bl	80069a4 <tcp_next_iss>
 80074f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800750e:	4b35      	ldr	r3, [pc, #212]	; (80075e4 <tcp_listen_input+0x1e0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7a5b      	ldrb	r3, [r3, #9]
 800752a:	f003 030c 	and.w	r3, r3, #12
 800752e:	b2da      	uxtb	r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7a1a      	ldrb	r2, [r3, #8]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800753c:	4b2e      	ldr	r3, [pc, #184]	; (80075f8 <tcp_listen_input+0x1f4>)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	4a2c      	ldr	r2, [pc, #176]	; (80075f8 <tcp_listen_input+0x1f4>)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	f003 fd29 	bl	800afa0 <tcp_timer_needed>
 800754e:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <tcp_listen_input+0x1f8>)
 8007550:	2201      	movs	r2, #1
 8007552:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007554:	6978      	ldr	r0, [r7, #20]
 8007556:	f001 fd8f 	bl	8009078 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800755a:	4b23      	ldr	r3, [pc, #140]	; (80075e8 <tcp_listen_input+0x1e4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	89db      	ldrh	r3, [r3, #14]
 8007560:	b29a      	uxth	r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3304      	adds	r3, #4
 800757c:	4618      	mov	r0, r3
 800757e:	f005 fca7 	bl	800ced0 <ip4_route>
 8007582:	4601      	mov	r1, r0
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3304      	adds	r3, #4
 8007588:	461a      	mov	r2, r3
 800758a:	4620      	mov	r0, r4
 800758c:	f7ff fa30 	bl	80069f0 <tcp_eff_send_mss_netif>
 8007590:	4603      	mov	r3, r0
 8007592:	461a      	mov	r2, r3
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007598:	2112      	movs	r1, #18
 800759a:	6978      	ldr	r0, [r7, #20]
 800759c:	f002 fc9c 	bl	8009ed8 <tcp_enqueue_flags>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80075a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80075ac:	2100      	movs	r1, #0
 80075ae:	6978      	ldr	r0, [r7, #20]
 80075b0:	f7fd fede 	bl	8005370 <tcp_abandon>
      return;
 80075b4:	e006      	b.n	80075c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f002 fd7c 	bl	800a0b4 <tcp_output>
  return;
 80075bc:	e001      	b.n	80075c2 <tcp_listen_input+0x1be>
    return;
 80075be:	bf00      	nop
 80075c0:	e000      	b.n	80075c4 <tcp_listen_input+0x1c0>
  return;
 80075c2:	bf00      	nop
}
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd90      	pop	{r4, r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20006784 	.word	0x20006784
 80075d0:	08010688 	.word	0x08010688
 80075d4:	08010880 	.word	0x08010880
 80075d8:	080106d4 	.word	0x080106d4
 80075dc:	2000677c 	.word	0x2000677c
 80075e0:	20006782 	.word	0x20006782
 80075e4:	20006778 	.word	0x20006778
 80075e8:	20006768 	.word	0x20006768
 80075ec:	200031e0 	.word	0x200031e0
 80075f0:	200031e4 	.word	0x200031e4
 80075f4:	200031d0 	.word	0x200031d0
 80075f8:	2000674c 	.word	0x2000674c
 80075fc:	20006754 	.word	0x20006754

08007600 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af04      	add	r7, sp, #16
 8007606:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007608:	4b2f      	ldr	r3, [pc, #188]	; (80076c8 <tcp_timewait_input+0xc8>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d153      	bne.n	80076bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <tcp_timewait_input+0x28>
 800761a:	4b2c      	ldr	r3, [pc, #176]	; (80076cc <tcp_timewait_input+0xcc>)
 800761c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007620:	492b      	ldr	r1, [pc, #172]	; (80076d0 <tcp_timewait_input+0xd0>)
 8007622:	482c      	ldr	r0, [pc, #176]	; (80076d4 <tcp_timewait_input+0xd4>)
 8007624:	f006 fe8a 	bl	800e33c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007628:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <tcp_timewait_input+0xc8>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02a      	beq.n	800768a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <tcp_timewait_input+0xd8>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	db2d      	blt.n	800769e <tcp_timewait_input+0x9e>
 8007642:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <tcp_timewait_input+0xd8>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800764e:	440b      	add	r3, r1
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	dc23      	bgt.n	800769e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007656:	4b21      	ldr	r3, [pc, #132]	; (80076dc <tcp_timewait_input+0xdc>)
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	4b21      	ldr	r3, [pc, #132]	; (80076e0 <tcp_timewait_input+0xe0>)
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <tcp_timewait_input+0xd8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007666:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <tcp_timewait_input+0xe4>)
 8007668:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800766e:	4a1d      	ldr	r2, [pc, #116]	; (80076e4 <tcp_timewait_input+0xe4>)
 8007670:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007672:	8812      	ldrh	r2, [r2, #0]
 8007674:	b292      	uxth	r2, r2
 8007676:	9202      	str	r2, [sp, #8]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <tcp_timewait_input+0xe8>)
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <tcp_timewait_input+0xec>)
 8007680:	4602      	mov	r2, r0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f003 faca 	bl	800ac1c <tcp_rst>
      return;
 8007688:	e01b      	b.n	80076c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800768a:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <tcp_timewait_input+0xc8>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007696:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <tcp_timewait_input+0xf0>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <tcp_timewait_input+0xe0>)
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00c      	beq.n	80076c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	8b5b      	ldrh	r3, [r3, #26]
 80076aa:	f043 0302 	orr.w	r3, r3, #2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f002 fcfd 	bl	800a0b4 <tcp_output>
  }
  return;
 80076ba:	e001      	b.n	80076c0 <tcp_timewait_input+0xc0>
    return;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <tcp_timewait_input+0xc2>
  return;
 80076c0:	bf00      	nop
}
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20006784 	.word	0x20006784
 80076cc:	08010688 	.word	0x08010688
 80076d0:	080108a0 	.word	0x080108a0
 80076d4:	080106d4 	.word	0x080106d4
 80076d8:	20006778 	.word	0x20006778
 80076dc:	2000677c 	.word	0x2000677c
 80076e0:	20006782 	.word	0x20006782
 80076e4:	20006768 	.word	0x20006768
 80076e8:	200031e0 	.word	0x200031e0
 80076ec:	200031e4 	.word	0x200031e4
 80076f0:	20006740 	.word	0x20006740

080076f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b08d      	sub	sp, #52	; 0x34
 80076f8:	af04      	add	r7, sp, #16
 80076fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <tcp_process+0x24>
 800770a:	4b9d      	ldr	r3, [pc, #628]	; (8007980 <tcp_process+0x28c>)
 800770c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007710:	499c      	ldr	r1, [pc, #624]	; (8007984 <tcp_process+0x290>)
 8007712:	489d      	ldr	r0, [pc, #628]	; (8007988 <tcp_process+0x294>)
 8007714:	f006 fe12 	bl	800e33c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007718:	4b9c      	ldr	r3, [pc, #624]	; (800798c <tcp_process+0x298>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d04e      	beq.n	80077c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7d1b      	ldrb	r3, [r3, #20]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d108      	bne.n	800773e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007730:	4b97      	ldr	r3, [pc, #604]	; (8007990 <tcp_process+0x29c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d123      	bne.n	8007780 <tcp_process+0x8c>
        acceptable = 1;
 8007738:	2301      	movs	r3, #1
 800773a:	76fb      	strb	r3, [r7, #27]
 800773c:	e020      	b.n	8007780 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007742:	4b94      	ldr	r3, [pc, #592]	; (8007994 <tcp_process+0x2a0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d102      	bne.n	8007750 <tcp_process+0x5c>
        acceptable = 1;
 800774a:	2301      	movs	r3, #1
 800774c:	76fb      	strb	r3, [r7, #27]
 800774e:	e017      	b.n	8007780 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007750:	4b90      	ldr	r3, [pc, #576]	; (8007994 <tcp_process+0x2a0>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	db10      	blt.n	8007780 <tcp_process+0x8c>
 800775e:	4b8d      	ldr	r3, [pc, #564]	; (8007994 <tcp_process+0x2a0>)
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800776a:	440b      	add	r3, r1
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	dc06      	bgt.n	8007780 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8b5b      	ldrh	r3, [r3, #26]
 8007776:	f043 0302 	orr.w	r3, r3, #2
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007780:	7efb      	ldrb	r3, [r7, #27]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01b      	beq.n	80077be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7d1b      	ldrb	r3, [r3, #20]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <tcp_process+0xa8>
 800778e:	4b7c      	ldr	r3, [pc, #496]	; (8007980 <tcp_process+0x28c>)
 8007790:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007794:	4980      	ldr	r1, [pc, #512]	; (8007998 <tcp_process+0x2a4>)
 8007796:	487c      	ldr	r0, [pc, #496]	; (8007988 <tcp_process+0x294>)
 8007798:	f006 fdd0 	bl	800e33c <iprintf>
      recv_flags |= TF_RESET;
 800779c:	4b7f      	ldr	r3, [pc, #508]	; (800799c <tcp_process+0x2a8>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f043 0308 	orr.w	r3, r3, #8
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	4b7d      	ldr	r3, [pc, #500]	; (800799c <tcp_process+0x2a8>)
 80077a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8b5b      	ldrh	r3, [r3, #26]
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80077b8:	f06f 030d 	mvn.w	r3, #13
 80077bc:	e37a      	b.n	8007eb4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e378      	b.n	8007eb4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80077c2:	4b72      	ldr	r3, [pc, #456]	; (800798c <tcp_process+0x298>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d010      	beq.n	80077f0 <tcp_process+0xfc>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7d1b      	ldrb	r3, [r3, #20]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d00c      	beq.n	80077f0 <tcp_process+0xfc>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7d1b      	ldrb	r3, [r3, #20]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d008      	beq.n	80077f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8b5b      	ldrh	r3, [r3, #26]
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e361      	b.n	8007eb4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8b5b      	ldrh	r3, [r3, #26]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80077fc:	4b68      	ldr	r3, [pc, #416]	; (80079a0 <tcp_process+0x2ac>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fc2f 	bl	8009078 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7d1b      	ldrb	r3, [r3, #20]
 800781e:	3b02      	subs	r3, #2
 8007820:	2b07      	cmp	r3, #7
 8007822:	f200 8337 	bhi.w	8007e94 <tcp_process+0x7a0>
 8007826:	a201      	add	r2, pc, #4	; (adr r2, 800782c <tcp_process+0x138>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	0800784d 	.word	0x0800784d
 8007830:	08007a7d 	.word	0x08007a7d
 8007834:	08007bf5 	.word	0x08007bf5
 8007838:	08007c1f 	.word	0x08007c1f
 800783c:	08007d43 	.word	0x08007d43
 8007840:	08007bf5 	.word	0x08007bf5
 8007844:	08007dcf 	.word	0x08007dcf
 8007848:	08007e5f 	.word	0x08007e5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800784c:	4b4f      	ldr	r3, [pc, #316]	; (800798c <tcp_process+0x298>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80e4 	beq.w	8007a22 <tcp_process+0x32e>
 800785a:	4b4c      	ldr	r3, [pc, #304]	; (800798c <tcp_process+0x298>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80dd 	beq.w	8007a22 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	4b48      	ldr	r3, [pc, #288]	; (8007990 <tcp_process+0x29c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	f040 80d5 	bne.w	8007a22 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007878:	4b46      	ldr	r3, [pc, #280]	; (8007994 <tcp_process+0x2a0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800788a:	4b41      	ldr	r3, [pc, #260]	; (8007990 <tcp_process+0x29c>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007892:	4b44      	ldr	r3, [pc, #272]	; (80079a4 <tcp_process+0x2b0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	89db      	ldrh	r3, [r3, #14]
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80078ac:	4b39      	ldr	r3, [pc, #228]	; (8007994 <tcp_process+0x2a0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	1e5a      	subs	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f005 fb03 	bl	800ced0 <ip4_route>
 80078ca:	4601      	mov	r1, r0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3304      	adds	r3, #4
 80078d0:	461a      	mov	r2, r3
 80078d2:	4620      	mov	r0, r4
 80078d4:	f7ff f88c 	bl	80069f0 <tcp_eff_send_mss_netif>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078e4:	009a      	lsls	r2, r3, #2
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80078f0:	428b      	cmp	r3, r1
 80078f2:	bf38      	it	cc
 80078f4:	460b      	movcc	r3, r1
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d204      	bcs.n	8007904 <tcp_process+0x210>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	b29b      	uxth	r3, r3
 8007902:	e00d      	b.n	8007920 <tcp_process+0x22c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	f241 121c 	movw	r2, #4380	; 0x111c
 800790e:	4293      	cmp	r3, r2
 8007910:	d904      	bls.n	800791c <tcp_process+0x228>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	b29b      	uxth	r3, r3
 800791a:	e001      	b.n	8007920 <tcp_process+0x22c>
 800791c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <tcp_process+0x24a>
 8007930:	4b13      	ldr	r3, [pc, #76]	; (8007980 <tcp_process+0x28c>)
 8007932:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007936:	491c      	ldr	r1, [pc, #112]	; (80079a8 <tcp_process+0x2b4>)
 8007938:	4813      	ldr	r0, [pc, #76]	; (8007988 <tcp_process+0x294>)
 800793a:	f006 fcff 	bl	800e33c <iprintf>
        --pcb->snd_queuelen;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007952:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d12a      	bne.n	80079b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <tcp_process+0x280>
 8007966:	4b06      	ldr	r3, [pc, #24]	; (8007980 <tcp_process+0x28c>)
 8007968:	f44f 725d 	mov.w	r2, #884	; 0x374
 800796c:	490f      	ldr	r1, [pc, #60]	; (80079ac <tcp_process+0x2b8>)
 800796e:	4806      	ldr	r0, [pc, #24]	; (8007988 <tcp_process+0x294>)
 8007970:	f006 fce4 	bl	800e33c <iprintf>
          pcb->unsent = rseg->next;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	66da      	str	r2, [r3, #108]	; 0x6c
 800797c:	e01c      	b.n	80079b8 <tcp_process+0x2c4>
 800797e:	bf00      	nop
 8007980:	08010688 	.word	0x08010688
 8007984:	080108c0 	.word	0x080108c0
 8007988:	080106d4 	.word	0x080106d4
 800798c:	20006784 	.word	0x20006784
 8007990:	2000677c 	.word	0x2000677c
 8007994:	20006778 	.word	0x20006778
 8007998:	080108dc 	.word	0x080108dc
 800799c:	20006785 	.word	0x20006785
 80079a0:	20006740 	.word	0x20006740
 80079a4:	20006768 	.word	0x20006768
 80079a8:	080108fc 	.word	0x080108fc
 80079ac:	08010914 	.word	0x08010914
        } else {
          pcb->unacked = rseg->next;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80079b8:	69f8      	ldr	r0, [r7, #28]
 80079ba:	f7fe fc3c 	bl	8006236 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d104      	bne.n	80079d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80079ce:	e006      	b.n	80079de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <tcp_process+0x30a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6910      	ldr	r0, [r2, #16]
 80079f2:	2200      	movs	r2, #0
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4798      	blx	r3
 80079f8:	4603      	mov	r3, r0
 80079fa:	76bb      	strb	r3, [r7, #26]
 80079fc:	e001      	b.n	8007a02 <tcp_process+0x30e>
 80079fe:	2300      	movs	r3, #0
 8007a00:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007a02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a06:	f113 0f0d 	cmn.w	r3, #13
 8007a0a:	d102      	bne.n	8007a12 <tcp_process+0x31e>
          return ERR_ABRT;
 8007a0c:	f06f 030c 	mvn.w	r3, #12
 8007a10:	e250      	b.n	8007eb4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	8b5b      	ldrh	r3, [r3, #26]
 8007a16:	f043 0302 	orr.w	r3, r3, #2
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007a20:	e23a      	b.n	8007e98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007a22:	4b98      	ldr	r3, [pc, #608]	; (8007c84 <tcp_process+0x590>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8234 	beq.w	8007e98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a30:	4b95      	ldr	r3, [pc, #596]	; (8007c88 <tcp_process+0x594>)
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	4b95      	ldr	r3, [pc, #596]	; (8007c8c <tcp_process+0x598>)
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b95      	ldr	r3, [pc, #596]	; (8007c90 <tcp_process+0x59c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a40:	4b94      	ldr	r3, [pc, #592]	; (8007c94 <tcp_process+0x5a0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a48:	4a92      	ldr	r2, [pc, #584]	; (8007c94 <tcp_process+0x5a0>)
 8007a4a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a4c:	8812      	ldrh	r2, [r2, #0]
 8007a4e:	b292      	uxth	r2, r2
 8007a50:	9202      	str	r2, [sp, #8]
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	4b90      	ldr	r3, [pc, #576]	; (8007c98 <tcp_process+0x5a4>)
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4b90      	ldr	r3, [pc, #576]	; (8007c9c <tcp_process+0x5a8>)
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f003 f8dd 	bl	800ac1c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	f200 8215 	bhi.w	8007e98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f002 fea7 	bl	800a7c8 <tcp_rexmit_rto>
      break;
 8007a7a:	e20d      	b.n	8007e98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007a7c:	4b81      	ldr	r3, [pc, #516]	; (8007c84 <tcp_process+0x590>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80a1 	beq.w	8007bcc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007a8a:	4b7f      	ldr	r3, [pc, #508]	; (8007c88 <tcp_process+0x594>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	db7e      	blt.n	8007b98 <tcp_process+0x4a4>
 8007a9a:	4b7b      	ldr	r3, [pc, #492]	; (8007c88 <tcp_process+0x594>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc77      	bgt.n	8007b98 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007ab6:	23fa      	movs	r3, #250	; 0xfa
 8007ab8:	76bb      	strb	r3, [r7, #26]
 8007aba:	e01d      	b.n	8007af8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <tcp_process+0x3e0>
 8007ac6:	4b76      	ldr	r3, [pc, #472]	; (8007ca0 <tcp_process+0x5ac>)
 8007ac8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007acc:	4975      	ldr	r1, [pc, #468]	; (8007ca4 <tcp_process+0x5b0>)
 8007ace:	4876      	ldr	r0, [pc, #472]	; (8007ca8 <tcp_process+0x5b4>)
 8007ad0:	f006 fc34 	bl	800e33c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <tcp_process+0x400>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6910      	ldr	r0, [r2, #16]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	76bb      	strb	r3, [r7, #26]
 8007af2:	e001      	b.n	8007af8 <tcp_process+0x404>
 8007af4:	23f0      	movs	r3, #240	; 0xf0
 8007af6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007af8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007b00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007b04:	f113 0f0d 	cmn.w	r3, #13
 8007b08:	d002      	beq.n	8007b10 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fd fcee 	bl	80054ec <tcp_abort>
            }
            return ERR_ABRT;
 8007b10:	f06f 030c 	mvn.w	r3, #12
 8007b14:	e1ce      	b.n	8007eb4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fae0 	bl	80080dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007b1c:	4b63      	ldr	r3, [pc, #396]	; (8007cac <tcp_process+0x5b8>)
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <tcp_process+0x43c>
            recv_acked--;
 8007b24:	4b61      	ldr	r3, [pc, #388]	; (8007cac <tcp_process+0x5b8>)
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	4b5f      	ldr	r3, [pc, #380]	; (8007cac <tcp_process+0x5b8>)
 8007b2e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b34:	009a      	lsls	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007b40:	428b      	cmp	r3, r1
 8007b42:	bf38      	it	cc
 8007b44:	460b      	movcc	r3, r1
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d204      	bcs.n	8007b54 <tcp_process+0x460>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	e00d      	b.n	8007b70 <tcp_process+0x47c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	f241 121c 	movw	r2, #4380	; 0x111c
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d904      	bls.n	8007b6c <tcp_process+0x478>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	e001      	b.n	8007b70 <tcp_process+0x47c>
 8007b6c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007b76:	4b4e      	ldr	r3, [pc, #312]	; (8007cb0 <tcp_process+0x5bc>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d037      	beq.n	8007bf2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8b5b      	ldrh	r3, [r3, #26]
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2207      	movs	r2, #7
 8007b94:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007b96:	e02c      	b.n	8007bf2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b98:	4b3b      	ldr	r3, [pc, #236]	; (8007c88 <tcp_process+0x594>)
 8007b9a:	6819      	ldr	r1, [r3, #0]
 8007b9c:	4b3b      	ldr	r3, [pc, #236]	; (8007c8c <tcp_process+0x598>)
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <tcp_process+0x59c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ba8:	4b3a      	ldr	r3, [pc, #232]	; (8007c94 <tcp_process+0x5a0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bb0:	4a38      	ldr	r2, [pc, #224]	; (8007c94 <tcp_process+0x5a0>)
 8007bb2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bb4:	8812      	ldrh	r2, [r2, #0]
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	9202      	str	r2, [sp, #8]
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <tcp_process+0x5a4>)
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <tcp_process+0x5a8>)
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f003 f829 	bl	800ac1c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007bca:	e167      	b.n	8007e9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007bcc:	4b2d      	ldr	r3, [pc, #180]	; (8007c84 <tcp_process+0x590>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8161 	beq.w	8007e9c <tcp_process+0x7a8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	1e5a      	subs	r2, r3, #1
 8007be0:	4b2b      	ldr	r3, [pc, #172]	; (8007c90 <tcp_process+0x59c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	f040 8159 	bne.w	8007e9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 fe0e 	bl	800a80c <tcp_rexmit>
      break;
 8007bf0:	e154      	b.n	8007e9c <tcp_process+0x7a8>
 8007bf2:	e153      	b.n	8007e9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa71 	bl	80080dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007bfa:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <tcp_process+0x5bc>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 814c 	beq.w	8007ea0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8b5b      	ldrh	r3, [r3, #26]
 8007c0c:	f043 0302 	orr.w	r3, r3, #2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2207      	movs	r2, #7
 8007c1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007c1c:	e140      	b.n	8007ea0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa5c 	bl	80080dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007c24:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <tcp_process+0x5bc>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d071      	beq.n	8007d14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c30:	4b14      	ldr	r3, [pc, #80]	; (8007c84 <tcp_process+0x590>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d060      	beq.n	8007cfe <tcp_process+0x60a>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c40:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <tcp_process+0x594>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d15a      	bne.n	8007cfe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d156      	bne.n	8007cfe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	8b5b      	ldrh	r3, [r3, #26]
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7fe fdbc 	bl	80067dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007c64:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <tcp_process+0x5c0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d105      	bne.n	8007c7a <tcp_process+0x586>
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <tcp_process+0x5c0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	4a0f      	ldr	r2, [pc, #60]	; (8007cb4 <tcp_process+0x5c0>)
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	e02e      	b.n	8007cd8 <tcp_process+0x5e4>
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <tcp_process+0x5c0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	e027      	b.n	8007cd2 <tcp_process+0x5de>
 8007c82:	bf00      	nop
 8007c84:	20006784 	.word	0x20006784
 8007c88:	2000677c 	.word	0x2000677c
 8007c8c:	20006782 	.word	0x20006782
 8007c90:	20006778 	.word	0x20006778
 8007c94:	20006768 	.word	0x20006768
 8007c98:	200031e0 	.word	0x200031e0
 8007c9c:	200031e4 	.word	0x200031e4
 8007ca0:	08010688 	.word	0x08010688
 8007ca4:	08010928 	.word	0x08010928
 8007ca8:	080106d4 	.word	0x080106d4
 8007cac:	20006780 	.word	0x20006780
 8007cb0:	20006785 	.word	0x20006785
 8007cb4:	2000674c 	.word	0x2000674c
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d104      	bne.n	8007ccc <tcp_process+0x5d8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e005      	b.n	8007cd8 <tcp_process+0x5e4>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ef      	bne.n	8007cb8 <tcp_process+0x5c4>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	4b77      	ldr	r3, [pc, #476]	; (8007ebc <tcp_process+0x7c8>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007cea:	4b75      	ldr	r3, [pc, #468]	; (8007ec0 <tcp_process+0x7cc>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60da      	str	r2, [r3, #12]
 8007cf2:	4a73      	ldr	r2, [pc, #460]	; (8007ec0 <tcp_process+0x7cc>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	f003 f952 	bl	800afa0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007cfc:	e0d2      	b.n	8007ea4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8b5b      	ldrh	r3, [r3, #26]
 8007d02:	f043 0302 	orr.w	r3, r3, #2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2208      	movs	r2, #8
 8007d10:	751a      	strb	r2, [r3, #20]
      break;
 8007d12:	e0c7      	b.n	8007ea4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d14:	4b6b      	ldr	r3, [pc, #428]	; (8007ec4 <tcp_process+0x7d0>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80c1 	beq.w	8007ea4 <tcp_process+0x7b0>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d26:	4b68      	ldr	r3, [pc, #416]	; (8007ec8 <tcp_process+0x7d4>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	f040 80ba 	bne.w	8007ea4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f040 80b5 	bne.w	8007ea4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	751a      	strb	r2, [r3, #20]
      break;
 8007d40:	e0b0      	b.n	8007ea4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9ca 	bl	80080dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007d48:	4b60      	ldr	r3, [pc, #384]	; (8007ecc <tcp_process+0x7d8>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80a9 	beq.w	8007ea8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	8b5b      	ldrh	r3, [r3, #26]
 8007d5a:	f043 0302 	orr.w	r3, r3, #2
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fe fd39 	bl	80067dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d6a:	4b59      	ldr	r3, [pc, #356]	; (8007ed0 <tcp_process+0x7dc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d105      	bne.n	8007d80 <tcp_process+0x68c>
 8007d74:	4b56      	ldr	r3, [pc, #344]	; (8007ed0 <tcp_process+0x7dc>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	4a55      	ldr	r2, [pc, #340]	; (8007ed0 <tcp_process+0x7dc>)
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	e013      	b.n	8007da8 <tcp_process+0x6b4>
 8007d80:	4b53      	ldr	r3, [pc, #332]	; (8007ed0 <tcp_process+0x7dc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	e00c      	b.n	8007da2 <tcp_process+0x6ae>
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d104      	bne.n	8007d9c <tcp_process+0x6a8>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e005      	b.n	8007da8 <tcp_process+0x6b4>
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1ef      	bne.n	8007d88 <tcp_process+0x694>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	60da      	str	r2, [r3, #12]
 8007dae:	4b43      	ldr	r3, [pc, #268]	; (8007ebc <tcp_process+0x7c8>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	220a      	movs	r2, #10
 8007db8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007dba:	4b41      	ldr	r3, [pc, #260]	; (8007ec0 <tcp_process+0x7cc>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	4a3f      	ldr	r2, [pc, #252]	; (8007ec0 <tcp_process+0x7cc>)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	f003 f8ea 	bl	800afa0 <tcp_timer_needed>
      }
      break;
 8007dcc:	e06c      	b.n	8007ea8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f984 	bl	80080dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007dd4:	4b3b      	ldr	r3, [pc, #236]	; (8007ec4 <tcp_process+0x7d0>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d065      	beq.n	8007eac <tcp_process+0x7b8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007de4:	4b38      	ldr	r3, [pc, #224]	; (8007ec8 <tcp_process+0x7d4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d15f      	bne.n	8007eac <tcp_process+0x7b8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d15b      	bne.n	8007eac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fe fcf1 	bl	80067dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007dfa:	4b35      	ldr	r3, [pc, #212]	; (8007ed0 <tcp_process+0x7dc>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d105      	bne.n	8007e10 <tcp_process+0x71c>
 8007e04:	4b32      	ldr	r3, [pc, #200]	; (8007ed0 <tcp_process+0x7dc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	4a31      	ldr	r2, [pc, #196]	; (8007ed0 <tcp_process+0x7dc>)
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e013      	b.n	8007e38 <tcp_process+0x744>
 8007e10:	4b2f      	ldr	r3, [pc, #188]	; (8007ed0 <tcp_process+0x7dc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e00c      	b.n	8007e32 <tcp_process+0x73e>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d104      	bne.n	8007e2c <tcp_process+0x738>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	e005      	b.n	8007e38 <tcp_process+0x744>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1ef      	bne.n	8007e18 <tcp_process+0x724>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	60da      	str	r2, [r3, #12]
 8007e3e:	4b1f      	ldr	r3, [pc, #124]	; (8007ebc <tcp_process+0x7c8>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	220a      	movs	r2, #10
 8007e48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007e4a:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <tcp_process+0x7cc>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	4a1b      	ldr	r2, [pc, #108]	; (8007ec0 <tcp_process+0x7cc>)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	f003 f8a2 	bl	800afa0 <tcp_timer_needed>
      }
      break;
 8007e5c:	e026      	b.n	8007eac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f93c 	bl	80080dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e64:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <tcp_process+0x7d0>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01f      	beq.n	8007eb0 <tcp_process+0x7bc>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e74:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <tcp_process+0x7d4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d119      	bne.n	8007eb0 <tcp_process+0x7bc>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d115      	bne.n	8007eb0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007e84:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <tcp_process+0x7d8>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f043 0310 	orr.w	r3, r3, #16
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <tcp_process+0x7d8>)
 8007e90:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007e92:	e00d      	b.n	8007eb0 <tcp_process+0x7bc>
    default:
      break;
 8007e94:	bf00      	nop
 8007e96:	e00c      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e00a      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e008      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007ea0:	bf00      	nop
 8007ea2:	e006      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e004      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e002      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <tcp_process+0x7be>
      break;
 8007eb0:	bf00      	nop
  }
  return ERR_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3724      	adds	r7, #36	; 0x24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}
 8007ebc:	20006754 	.word	0x20006754
 8007ec0:	20006750 	.word	0x20006750
 8007ec4:	20006784 	.word	0x20006784
 8007ec8:	2000677c 	.word	0x2000677c
 8007ecc:	20006785 	.word	0x20006785
 8007ed0:	2000674c 	.word	0x2000674c

08007ed4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <tcp_oos_insert_segment+0x1e>
 8007ee4:	4b3b      	ldr	r3, [pc, #236]	; (8007fd4 <tcp_oos_insert_segment+0x100>)
 8007ee6:	f240 421f 	movw	r2, #1055	; 0x41f
 8007eea:	493b      	ldr	r1, [pc, #236]	; (8007fd8 <tcp_oos_insert_segment+0x104>)
 8007eec:	483b      	ldr	r0, [pc, #236]	; (8007fdc <tcp_oos_insert_segment+0x108>)
 8007eee:	f006 fa25 	bl	800e33c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	899b      	ldrh	r3, [r3, #12]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fb fabf 	bl	800347e <lwip_htons>
 8007f00:	4603      	mov	r3, r0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d028      	beq.n	8007f5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007f0c:	6838      	ldr	r0, [r7, #0]
 8007f0e:	f7fe f97d 	bl	800620c <tcp_segs_free>
    next = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	e056      	b.n	8007fc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	899b      	ldrh	r3, [r3, #12]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fb faac 	bl	800347e <lwip_htons>
 8007f26:	4603      	mov	r3, r0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00d      	beq.n	8007f4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	899b      	ldrh	r3, [r3, #12]
 8007f38:	b29c      	uxth	r4, r3
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	f7fb fa9f 	bl	800347e <lwip_htons>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4322      	orrs	r2, r4
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7fe f96c 	bl	8006236 <tcp_seg_free>
    while (next &&
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00e      	beq.n	8007f82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	891b      	ldrh	r3, [r3, #8]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <tcp_oos_insert_segment+0x10c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	441a      	add	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	8909      	ldrh	r1, [r1, #8]
 8007f7a:	440b      	add	r3, r1
 8007f7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	daca      	bge.n	8007f18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01e      	beq.n	8007fc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	891b      	ldrh	r3, [r3, #8]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <tcp_oos_insert_segment+0x10c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	441a      	add	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dd12      	ble.n	8007fc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <tcp_oos_insert_segment+0x10c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	891b      	ldrh	r3, [r3, #8]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7fc fb75 	bl	80046b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	601a      	str	r2, [r3, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd90      	pop	{r4, r7, pc}
 8007fd4:	08010688 	.word	0x08010688
 8007fd8:	08010948 	.word	0x08010948
 8007fdc:	080106d4 	.word	0x080106d4
 8007fe0:	20006778 	.word	0x20006778

08007fe4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007fe4:	b5b0      	push	{r4, r5, r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007ff2:	e03e      	b.n	8008072 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	f7fc fd62 	bl	8004acc <pbuf_clen>
 8008008:	4603      	mov	r3, r0
 800800a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008012:	8a7a      	ldrh	r2, [r7, #18]
 8008014:	429a      	cmp	r2, r3
 8008016:	d906      	bls.n	8008026 <tcp_free_acked_segments+0x42>
 8008018:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <tcp_free_acked_segments+0xe0>)
 800801a:	f240 4257 	movw	r2, #1111	; 0x457
 800801e:	492a      	ldr	r1, [pc, #168]	; (80080c8 <tcp_free_acked_segments+0xe4>)
 8008020:	482a      	ldr	r0, [pc, #168]	; (80080cc <tcp_free_acked_segments+0xe8>)
 8008022:	f006 f98b 	bl	800e33c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800802c:	8a7b      	ldrh	r3, [r7, #18]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	891a      	ldrh	r2, [r3, #8]
 800803c:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <tcp_free_acked_segments+0xec>)
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	4413      	add	r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <tcp_free_acked_segments+0xec>)
 8008046:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008048:	6978      	ldr	r0, [r7, #20]
 800804a:	f7fe f8f4 	bl	8006236 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <tcp_free_acked_segments+0x8e>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d106      	bne.n	8008072 <tcp_free_acked_segments+0x8e>
 8008064:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <tcp_free_acked_segments+0xe0>)
 8008066:	f240 4261 	movw	r2, #1121	; 0x461
 800806a:	491a      	ldr	r1, [pc, #104]	; (80080d4 <tcp_free_acked_segments+0xf0>)
 800806c:	4817      	ldr	r0, [pc, #92]	; (80080cc <tcp_free_acked_segments+0xe8>)
 800806e:	f006 f965 	bl	800e33c <iprintf>
  while (seg_list != NULL &&
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d020      	beq.n	80080ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4618      	mov	r0, r3
 8008080:	f7fb fa12 	bl	80034a8 <lwip_htonl>
 8008084:	4604      	mov	r4, r0
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	891b      	ldrh	r3, [r3, #8]
 800808a:	461d      	mov	r5, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	899b      	ldrh	r3, [r3, #12]
 8008092:	b29b      	uxth	r3, r3
 8008094:	4618      	mov	r0, r3
 8008096:	f7fb f9f2 	bl	800347e <lwip_htons>
 800809a:	4603      	mov	r3, r0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <tcp_free_acked_segments+0xc6>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <tcp_free_acked_segments+0xc8>
 80080aa:	2300      	movs	r3, #0
 80080ac:	442b      	add	r3, r5
 80080ae:	18e2      	adds	r2, r4, r3
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <tcp_free_acked_segments+0xf4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dd9c      	ble.n	8007ff4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80080ba:	68bb      	ldr	r3, [r7, #8]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bdb0      	pop	{r4, r5, r7, pc}
 80080c4:	08010688 	.word	0x08010688
 80080c8:	08010970 	.word	0x08010970
 80080cc:	080106d4 	.word	0x080106d4
 80080d0:	20006780 	.word	0x20006780
 80080d4:	08010998 	.word	0x08010998
 80080d8:	2000677c 	.word	0x2000677c

080080dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80080dc:	b5b0      	push	{r4, r5, r7, lr}
 80080de:	b094      	sub	sp, #80	; 0x50
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <tcp_receive+0x20>
 80080ee:	4b91      	ldr	r3, [pc, #580]	; (8008334 <tcp_receive+0x258>)
 80080f0:	f240 427b 	movw	r2, #1147	; 0x47b
 80080f4:	4990      	ldr	r1, [pc, #576]	; (8008338 <tcp_receive+0x25c>)
 80080f6:	4891      	ldr	r0, [pc, #580]	; (800833c <tcp_receive+0x260>)
 80080f8:	f006 f920 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7d1b      	ldrb	r3, [r3, #20]
 8008100:	2b03      	cmp	r3, #3
 8008102:	d806      	bhi.n	8008112 <tcp_receive+0x36>
 8008104:	4b8b      	ldr	r3, [pc, #556]	; (8008334 <tcp_receive+0x258>)
 8008106:	f240 427c 	movw	r2, #1148	; 0x47c
 800810a:	498d      	ldr	r1, [pc, #564]	; (8008340 <tcp_receive+0x264>)
 800810c:	488b      	ldr	r0, [pc, #556]	; (800833c <tcp_receive+0x260>)
 800810e:	f006 f915 	bl	800e33c <iprintf>

  if (flags & TCP_ACK) {
 8008112:	4b8c      	ldr	r3, [pc, #560]	; (8008344 <tcp_receive+0x268>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f003 0310 	and.w	r3, r3, #16
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8264 	beq.w	80085e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812c:	4413      	add	r3, r2
 800812e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008134:	4b84      	ldr	r3, [pc, #528]	; (8008348 <tcp_receive+0x26c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	db1b      	blt.n	8008176 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008142:	4b81      	ldr	r3, [pc, #516]	; (8008348 <tcp_receive+0x26c>)
 8008144:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008146:	429a      	cmp	r2, r3
 8008148:	d106      	bne.n	8008158 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800814e:	4b7f      	ldr	r3, [pc, #508]	; (800834c <tcp_receive+0x270>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	db0e      	blt.n	8008176 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800815c:	4b7b      	ldr	r3, [pc, #492]	; (800834c <tcp_receive+0x270>)
 800815e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008160:	429a      	cmp	r2, r3
 8008162:	d125      	bne.n	80081b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008164:	4b7a      	ldr	r3, [pc, #488]	; (8008350 <tcp_receive+0x274>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	89db      	ldrh	r3, [r3, #14]
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008172:	429a      	cmp	r2, r3
 8008174:	d91c      	bls.n	80081b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008176:	4b76      	ldr	r3, [pc, #472]	; (8008350 <tcp_receive+0x274>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	89db      	ldrh	r3, [r3, #14]
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008190:	429a      	cmp	r2, r3
 8008192:	d205      	bcs.n	80081a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80081a0:	4b69      	ldr	r3, [pc, #420]	; (8008348 <tcp_receive+0x26c>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80081a8:	4b68      	ldr	r3, [pc, #416]	; (800834c <tcp_receive+0x270>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80081b0:	4b66      	ldr	r3, [pc, #408]	; (800834c <tcp_receive+0x270>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dc58      	bgt.n	8008270 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80081be:	4b65      	ldr	r3, [pc, #404]	; (8008354 <tcp_receive+0x278>)
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d14b      	bne.n	800825e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80081d0:	4413      	add	r3, r2
 80081d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d142      	bne.n	800825e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db3d      	blt.n	800825e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e6:	4b59      	ldr	r3, [pc, #356]	; (800834c <tcp_receive+0x270>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d137      	bne.n	800825e <tcp_receive+0x182>
              found_dupack = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081f8:	2bff      	cmp	r3, #255	; 0xff
 80081fa:	d007      	beq.n	800820c <tcp_receive+0x130>
                ++pcb->dupacks;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008202:	3301      	adds	r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008212:	2b03      	cmp	r3, #3
 8008214:	d91b      	bls.n	800824e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008220:	4413      	add	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800822a:	429a      	cmp	r2, r3
 800822c:	d30a      	bcc.n	8008244 <tcp_receive+0x168>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008238:	4413      	add	r3, r2
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008242:	e004      	b.n	800824e <tcp_receive+0x172>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800824a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008254:	2b02      	cmp	r3, #2
 8008256:	d902      	bls.n	800825e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f002 fb43 	bl	800a8e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800825e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 8161 	bne.w	8008528 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800826e:	e15b      	b.n	8008528 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008270:	4b36      	ldr	r3, [pc, #216]	; (800834c <tcp_receive+0x270>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	f2c0 814e 	blt.w	800851e <tcp_receive+0x442>
 8008282:	4b32      	ldr	r3, [pc, #200]	; (800834c <tcp_receive+0x270>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	f300 8146 	bgt.w	800851e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8b5b      	ldrh	r3, [r3, #26]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d010      	beq.n	80082c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8b5b      	ldrh	r3, [r3, #26]
 80082a2:	f023 0304 	bic.w	r3, r3, #4
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80082ce:	10db      	asrs	r3, r3, #3
 80082d0:	b21b      	sxth	r3, r3
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80082da:	b29b      	uxth	r3, r3
 80082dc:	4413      	add	r3, r2
 80082de:	b29b      	uxth	r3, r3
 80082e0:	b21a      	sxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80082e8:	4b18      	ldr	r3, [pc, #96]	; (800834c <tcp_receive+0x270>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <tcp_receive+0x270>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7d1b      	ldrb	r3, [r3, #20]
 800830c:	2b03      	cmp	r3, #3
 800830e:	f240 8097 	bls.w	8008440 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800831e:	429a      	cmp	r2, r3
 8008320:	d245      	bcs.n	80083ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	8b5b      	ldrh	r3, [r3, #26]
 8008326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800832a:	2b00      	cmp	r3, #0
 800832c:	d014      	beq.n	8008358 <tcp_receive+0x27c>
 800832e:	2301      	movs	r3, #1
 8008330:	e013      	b.n	800835a <tcp_receive+0x27e>
 8008332:	bf00      	nop
 8008334:	08010688 	.word	0x08010688
 8008338:	080109b8 	.word	0x080109b8
 800833c:	080106d4 	.word	0x080106d4
 8008340:	080109d4 	.word	0x080109d4
 8008344:	20006784 	.word	0x20006784
 8008348:	20006778 	.word	0x20006778
 800834c:	2000677c 	.word	0x2000677c
 8008350:	20006768 	.word	0x20006768
 8008354:	20006782 	.word	0x20006782
 8008358:	2302      	movs	r3, #2
 800835a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800835e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008368:	fb12 f303 	smulbb	r3, r2, r3
 800836c:	b29b      	uxth	r3, r3
 800836e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008370:	4293      	cmp	r3, r2
 8008372:	bf28      	it	cs
 8008374:	4613      	movcs	r3, r2
 8008376:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800837e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008380:	4413      	add	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800838a:	429a      	cmp	r2, r3
 800838c:	d309      	bcc.n	80083a2 <tcp_receive+0x2c6>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008394:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008396:	4413      	add	r3, r2
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80083a0:	e04e      	b.n	8008440 <tcp_receive+0x364>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80083ac:	e048      	b.n	8008440 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80083b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083b6:	4413      	add	r3, r2
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d309      	bcc.n	80083d8 <tcp_receive+0x2fc>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80083ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083cc:	4413      	add	r3, r2
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80083d6:	e004      	b.n	80083e2 <tcp_receive+0x306>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d326      	bcc.n	8008440 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	b29a      	uxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008412:	4413      	add	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800841c:	429a      	cmp	r2, r3
 800841e:	d30a      	bcc.n	8008436 <tcp_receive+0x35a>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800842a:	4413      	add	r3, r2
 800842c:	b29a      	uxth	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008434:	e004      	b.n	8008440 <tcp_receive+0x364>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800843c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008448:	4a98      	ldr	r2, [pc, #608]	; (80086ac <tcp_receive+0x5d0>)
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fdca 	bl	8007fe4 <tcp_free_acked_segments>
 8008450:	4602      	mov	r2, r0
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845e:	4a94      	ldr	r2, [pc, #592]	; (80086b0 <tcp_receive+0x5d4>)
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fdbf 	bl	8007fe4 <tcp_free_acked_segments>
 8008466:	4602      	mov	r2, r0
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800847a:	861a      	strh	r2, [r3, #48]	; 0x30
 800847c:	e002      	b.n	8008484 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d103      	bne.n	800849a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80084a0:	4b84      	ldr	r3, [pc, #528]	; (80086b4 <tcp_receive+0x5d8>)
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8b5b      	ldrh	r3, [r3, #26]
 80084b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d035      	beq.n	8008526 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d118      	bne.n	80084f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa ffe6 	bl	80034a8 <lwip_htonl>
 80084dc:	4603      	mov	r3, r0
 80084de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dc20      	bgt.n	8008526 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8b5b      	ldrh	r3, [r3, #26]
 80084e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80084f2:	e018      	b.n	8008526 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4618      	mov	r0, r3
 8008502:	f7fa ffd1 	bl	80034a8 <lwip_htonl>
 8008506:	4603      	mov	r3, r0
 8008508:	1ae3      	subs	r3, r4, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	dc0b      	bgt.n	8008526 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	8b5b      	ldrh	r3, [r3, #26]
 8008512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800851c:	e003      	b.n	8008526 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f002 fbce 	bl	800acc0 <tcp_send_empty_ack>
 8008524:	e000      	b.n	8008528 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008526:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852c:	2b00      	cmp	r3, #0
 800852e:	d05b      	beq.n	80085e8 <tcp_receive+0x50c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008534:	4b60      	ldr	r3, [pc, #384]	; (80086b8 <tcp_receive+0x5dc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	da54      	bge.n	80085e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800853e:	4b5f      	ldr	r3, [pc, #380]	; (80086bc <tcp_receive+0x5e0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	b29b      	uxth	r3, r3
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	b29b      	uxth	r3, r3
 800854e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008552:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800855c:	10db      	asrs	r3, r3, #3
 800855e:	b21b      	sxth	r3, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008570:	b29a      	uxth	r2, r3
 8008572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008576:	4413      	add	r3, r2
 8008578:	b29b      	uxth	r3, r3
 800857a:	b21a      	sxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008580:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008584:	2b00      	cmp	r3, #0
 8008586:	da05      	bge.n	8008594 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008588:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800858c:	425b      	negs	r3, r3
 800858e:	b29b      	uxth	r3, r3
 8008590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008594:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800859e:	109b      	asrs	r3, r3, #2
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085b8:	4413      	add	r3, r2
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	b21a      	sxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80085c8:	10db      	asrs	r3, r3, #3
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	b29b      	uxth	r3, r3
 80085da:	b21a      	sxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80085e8:	4b35      	ldr	r3, [pc, #212]	; (80086c0 <tcp_receive+0x5e4>)
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 84e2 	beq.w	8008fb6 <tcp_receive+0xeda>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	7d1b      	ldrb	r3, [r3, #20]
 80085f6:	2b06      	cmp	r3, #6
 80085f8:	f200 84dd 	bhi.w	8008fb6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008600:	4b30      	ldr	r3, [pc, #192]	; (80086c4 <tcp_receive+0x5e8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	f2c0 808f 	blt.w	800872c <tcp_receive+0x650>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008612:	4b2b      	ldr	r3, [pc, #172]	; (80086c0 <tcp_receive+0x5e4>)
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	4619      	mov	r1, r3
 8008618:	4b2a      	ldr	r3, [pc, #168]	; (80086c4 <tcp_receive+0x5e8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	440b      	add	r3, r1
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	3301      	adds	r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	f300 8082 	bgt.w	800872c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008628:	4b27      	ldr	r3, [pc, #156]	; (80086c8 <tcp_receive+0x5ec>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008632:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <tcp_receive+0x5e8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800863a:	4b23      	ldr	r3, [pc, #140]	; (80086c8 <tcp_receive+0x5ec>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d106      	bne.n	8008650 <tcp_receive+0x574>
 8008642:	4b22      	ldr	r3, [pc, #136]	; (80086cc <tcp_receive+0x5f0>)
 8008644:	f240 5294 	movw	r2, #1428	; 0x594
 8008648:	4921      	ldr	r1, [pc, #132]	; (80086d0 <tcp_receive+0x5f4>)
 800864a:	4822      	ldr	r0, [pc, #136]	; (80086d4 <tcp_receive+0x5f8>)
 800864c:	f005 fe76 	bl	800e33c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008656:	4293      	cmp	r3, r2
 8008658:	d906      	bls.n	8008668 <tcp_receive+0x58c>
 800865a:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <tcp_receive+0x5f0>)
 800865c:	f240 5295 	movw	r2, #1429	; 0x595
 8008660:	491d      	ldr	r1, [pc, #116]	; (80086d8 <tcp_receive+0x5fc>)
 8008662:	481c      	ldr	r0, [pc, #112]	; (80086d4 <tcp_receive+0x5f8>)
 8008664:	f005 fe6a 	bl	800e33c <iprintf>
      off = (u16_t)off32;
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800866e:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <tcp_receive+0x5ec>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	891b      	ldrh	r3, [r3, #8]
 8008674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008678:	429a      	cmp	r2, r3
 800867a:	d906      	bls.n	800868a <tcp_receive+0x5ae>
 800867c:	4b13      	ldr	r3, [pc, #76]	; (80086cc <tcp_receive+0x5f0>)
 800867e:	f240 5297 	movw	r2, #1431	; 0x597
 8008682:	4916      	ldr	r1, [pc, #88]	; (80086dc <tcp_receive+0x600>)
 8008684:	4813      	ldr	r0, [pc, #76]	; (80086d4 <tcp_receive+0x5f8>)
 8008686:	f005 fe59 	bl	800e33c <iprintf>
      inseg.len -= off;
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <tcp_receive+0x5ec>)
 800868c:	891a      	ldrh	r2, [r3, #8]
 800868e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	b29a      	uxth	r2, r3
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <tcp_receive+0x5ec>)
 8008698:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800869a:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <tcp_receive+0x5ec>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	891a      	ldrh	r2, [r3, #8]
 80086a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80086a8:	e02a      	b.n	8008700 <tcp_receive+0x624>
 80086aa:	bf00      	nop
 80086ac:	080109f0 	.word	0x080109f0
 80086b0:	080109f8 	.word	0x080109f8
 80086b4:	20006780 	.word	0x20006780
 80086b8:	2000677c 	.word	0x2000677c
 80086bc:	20006740 	.word	0x20006740
 80086c0:	20006782 	.word	0x20006782
 80086c4:	20006778 	.word	0x20006778
 80086c8:	20006758 	.word	0x20006758
 80086cc:	08010688 	.word	0x08010688
 80086d0:	08010a00 	.word	0x08010a00
 80086d4:	080106d4 	.word	0x080106d4
 80086d8:	08010a10 	.word	0x08010a10
 80086dc:	08010a20 	.word	0x08010a20
        off -= p->len;
 80086e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e2:	895b      	ldrh	r3, [r3, #10]
 80086e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80086ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80086f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80086f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f6:	2200      	movs	r2, #0
 80086f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80086fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008702:	895b      	ldrh	r3, [r3, #10]
 8008704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008708:	429a      	cmp	r2, r3
 800870a:	d8e9      	bhi.n	80086e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800870c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008710:	4619      	mov	r1, r3
 8008712:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008714:	f7fc f8cc 	bl	80048b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	4a91      	ldr	r2, [pc, #580]	; (8008964 <tcp_receive+0x888>)
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	4b91      	ldr	r3, [pc, #580]	; (8008968 <tcp_receive+0x88c>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	4a8f      	ldr	r2, [pc, #572]	; (8008964 <tcp_receive+0x888>)
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800872a:	e00d      	b.n	8008748 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800872c:	4b8d      	ldr	r3, [pc, #564]	; (8008964 <tcp_receive+0x888>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	da06      	bge.n	8008748 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8b5b      	ldrh	r3, [r3, #26]
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008748:	4b86      	ldr	r3, [pc, #536]	; (8008964 <tcp_receive+0x888>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	f2c0 842a 	blt.w	8008fac <tcp_receive+0xed0>
 8008758:	4b82      	ldr	r3, [pc, #520]	; (8008964 <tcp_receive+0x888>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008764:	440b      	add	r3, r1
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	3301      	adds	r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	f300 841e 	bgt.w	8008fac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008774:	4b7b      	ldr	r3, [pc, #492]	; (8008964 <tcp_receive+0x888>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	f040 829a 	bne.w	8008cb2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800877e:	4b7a      	ldr	r3, [pc, #488]	; (8008968 <tcp_receive+0x88c>)
 8008780:	891c      	ldrh	r4, [r3, #8]
 8008782:	4b79      	ldr	r3, [pc, #484]	; (8008968 <tcp_receive+0x88c>)
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	899b      	ldrh	r3, [r3, #12]
 8008788:	b29b      	uxth	r3, r3
 800878a:	4618      	mov	r0, r3
 800878c:	f7fa fe77 	bl	800347e <lwip_htons>
 8008790:	4603      	mov	r3, r0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <tcp_receive+0x6c4>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <tcp_receive+0x6c6>
 80087a0:	2300      	movs	r3, #0
 80087a2:	4423      	add	r3, r4
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	4b71      	ldr	r3, [pc, #452]	; (800896c <tcp_receive+0x890>)
 80087a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087ae:	4b6f      	ldr	r3, [pc, #444]	; (800896c <tcp_receive+0x890>)
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d275      	bcs.n	80088a2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087b6:	4b6c      	ldr	r3, [pc, #432]	; (8008968 <tcp_receive+0x88c>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	899b      	ldrh	r3, [r3, #12]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fa fe5d 	bl	800347e <lwip_htons>
 80087c4:	4603      	mov	r3, r0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01f      	beq.n	8008810 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80087d0:	4b65      	ldr	r3, [pc, #404]	; (8008968 <tcp_receive+0x88c>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	899b      	ldrh	r3, [r3, #12]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	b21b      	sxth	r3, r3
 80087da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80087de:	b21c      	sxth	r4, r3
 80087e0:	4b61      	ldr	r3, [pc, #388]	; (8008968 <tcp_receive+0x88c>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	899b      	ldrh	r3, [r3, #12]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fa fe48 	bl	800347e <lwip_htons>
 80087ee:	4603      	mov	r3, r0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fa fe3f 	bl	800347e <lwip_htons>
 8008800:	4603      	mov	r3, r0
 8008802:	b21b      	sxth	r3, r3
 8008804:	4323      	orrs	r3, r4
 8008806:	b21a      	sxth	r2, r3
 8008808:	4b57      	ldr	r3, [pc, #348]	; (8008968 <tcp_receive+0x88c>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	b292      	uxth	r2, r2
 800880e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008814:	4b54      	ldr	r3, [pc, #336]	; (8008968 <tcp_receive+0x88c>)
 8008816:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008818:	4b53      	ldr	r3, [pc, #332]	; (8008968 <tcp_receive+0x88c>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	899b      	ldrh	r3, [r3, #12]
 800881e:	b29b      	uxth	r3, r3
 8008820:	4618      	mov	r0, r3
 8008822:	f7fa fe2c 	bl	800347e <lwip_htons>
 8008826:	4603      	mov	r3, r0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <tcp_receive+0x762>
            inseg.len -= 1;
 8008832:	4b4d      	ldr	r3, [pc, #308]	; (8008968 <tcp_receive+0x88c>)
 8008834:	891b      	ldrh	r3, [r3, #8]
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	4b4b      	ldr	r3, [pc, #300]	; (8008968 <tcp_receive+0x88c>)
 800883c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800883e:	4b4a      	ldr	r3, [pc, #296]	; (8008968 <tcp_receive+0x88c>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	4a49      	ldr	r2, [pc, #292]	; (8008968 <tcp_receive+0x88c>)
 8008844:	8912      	ldrh	r2, [r2, #8]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7fb ff31 	bl	80046b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800884e:	4b46      	ldr	r3, [pc, #280]	; (8008968 <tcp_receive+0x88c>)
 8008850:	891c      	ldrh	r4, [r3, #8]
 8008852:	4b45      	ldr	r3, [pc, #276]	; (8008968 <tcp_receive+0x88c>)
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	899b      	ldrh	r3, [r3, #12]
 8008858:	b29b      	uxth	r3, r3
 800885a:	4618      	mov	r0, r3
 800885c:	f7fa fe0f 	bl	800347e <lwip_htons>
 8008860:	4603      	mov	r3, r0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <tcp_receive+0x794>
 800886c:	2301      	movs	r3, #1
 800886e:	e000      	b.n	8008872 <tcp_receive+0x796>
 8008870:	2300      	movs	r3, #0
 8008872:	4423      	add	r3, r4
 8008874:	b29a      	uxth	r2, r3
 8008876:	4b3d      	ldr	r3, [pc, #244]	; (800896c <tcp_receive+0x890>)
 8008878:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800887a:	4b3c      	ldr	r3, [pc, #240]	; (800896c <tcp_receive+0x890>)
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	4b38      	ldr	r3, [pc, #224]	; (8008964 <tcp_receive+0x888>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800888e:	440b      	add	r3, r1
 8008890:	429a      	cmp	r2, r3
 8008892:	d006      	beq.n	80088a2 <tcp_receive+0x7c6>
 8008894:	4b36      	ldr	r3, [pc, #216]	; (8008970 <tcp_receive+0x894>)
 8008896:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800889a:	4936      	ldr	r1, [pc, #216]	; (8008974 <tcp_receive+0x898>)
 800889c:	4836      	ldr	r0, [pc, #216]	; (8008978 <tcp_receive+0x89c>)
 800889e:	f005 fd4d 	bl	800e33c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 80e7 	beq.w	8008a7a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088ac:	4b2e      	ldr	r3, [pc, #184]	; (8008968 <tcp_receive+0x88c>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	899b      	ldrh	r3, [r3, #12]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fa fde2 	bl	800347e <lwip_htons>
 80088ba:	4603      	mov	r3, r0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80088c6:	e00a      	b.n	80088de <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088cc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f7fd fcac 	bl	8006236 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f0      	bne.n	80088c8 <tcp_receive+0x7ec>
 80088e6:	e0c8      	b.n	8008a7a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80088ee:	e052      	b.n	8008996 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	899b      	ldrh	r3, [r3, #12]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fa fdc0 	bl	800347e <lwip_htons>
 80088fe:	4603      	mov	r3, r0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d03d      	beq.n	8008986 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800890a:	4b17      	ldr	r3, [pc, #92]	; (8008968 <tcp_receive+0x88c>)
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	899b      	ldrh	r3, [r3, #12]
 8008910:	b29b      	uxth	r3, r3
 8008912:	4618      	mov	r0, r3
 8008914:	f7fa fdb3 	bl	800347e <lwip_htons>
 8008918:	4603      	mov	r3, r0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008920:	2b00      	cmp	r3, #0
 8008922:	d130      	bne.n	8008986 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <tcp_receive+0x88c>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	899b      	ldrh	r3, [r3, #12]
 800892a:	b29c      	uxth	r4, r3
 800892c:	2001      	movs	r0, #1
 800892e:	f7fa fda6 	bl	800347e <lwip_htons>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <tcp_receive+0x88c>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	4322      	orrs	r2, r4
 800893c:	b292      	uxth	r2, r2
 800893e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008940:	4b09      	ldr	r3, [pc, #36]	; (8008968 <tcp_receive+0x88c>)
 8008942:	891c      	ldrh	r4, [r3, #8]
 8008944:	4b08      	ldr	r3, [pc, #32]	; (8008968 <tcp_receive+0x88c>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	899b      	ldrh	r3, [r3, #12]
 800894a:	b29b      	uxth	r3, r3
 800894c:	4618      	mov	r0, r3
 800894e:	f7fa fd96 	bl	800347e <lwip_htons>
 8008952:	4603      	mov	r3, r0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00e      	beq.n	800897c <tcp_receive+0x8a0>
 800895e:	2301      	movs	r3, #1
 8008960:	e00d      	b.n	800897e <tcp_receive+0x8a2>
 8008962:	bf00      	nop
 8008964:	20006778 	.word	0x20006778
 8008968:	20006758 	.word	0x20006758
 800896c:	20006782 	.word	0x20006782
 8008970:	08010688 	.word	0x08010688
 8008974:	08010a30 	.word	0x08010a30
 8008978:	080106d4 	.word	0x080106d4
 800897c:	2300      	movs	r3, #0
 800897e:	4423      	add	r3, r4
 8008980:	b29a      	uxth	r2, r3
 8008982:	4b98      	ldr	r3, [pc, #608]	; (8008be4 <tcp_receive+0xb08>)
 8008984:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008988:	613b      	str	r3, [r7, #16]
              next = next->next;
 800898a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008990:	6938      	ldr	r0, [r7, #16]
 8008992:	f7fd fc50 	bl	8006236 <tcp_seg_free>
            while (next &&
 8008996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00e      	beq.n	80089ba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800899c:	4b91      	ldr	r3, [pc, #580]	; (8008be4 <tcp_receive+0xb08>)
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b91      	ldr	r3, [pc, #580]	; (8008be8 <tcp_receive+0xb0c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	441a      	add	r2, r3
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089b0:	8909      	ldrh	r1, [r1, #8]
 80089b2:	440b      	add	r3, r1
 80089b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da9a      	bge.n	80088f0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80089ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d059      	beq.n	8008a74 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80089c0:	4b88      	ldr	r3, [pc, #544]	; (8008be4 <tcp_receive+0xb08>)
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	4b88      	ldr	r3, [pc, #544]	; (8008be8 <tcp_receive+0xb0c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	441a      	add	r2, r3
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd4d      	ble.n	8008a74 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80089d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	4b81      	ldr	r3, [pc, #516]	; (8008be8 <tcp_receive+0xb0c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	4b80      	ldr	r3, [pc, #512]	; (8008bec <tcp_receive+0xb10>)
 80089ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80089ee:	4b7f      	ldr	r3, [pc, #508]	; (8008bec <tcp_receive+0xb10>)
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	899b      	ldrh	r3, [r3, #12]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fa fd41 	bl	800347e <lwip_htons>
 80089fc:	4603      	mov	r3, r0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <tcp_receive+0x938>
                inseg.len -= 1;
 8008a08:	4b78      	ldr	r3, [pc, #480]	; (8008bec <tcp_receive+0xb10>)
 8008a0a:	891b      	ldrh	r3, [r3, #8]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	4b76      	ldr	r3, [pc, #472]	; (8008bec <tcp_receive+0xb10>)
 8008a12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008a14:	4b75      	ldr	r3, [pc, #468]	; (8008bec <tcp_receive+0xb10>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a74      	ldr	r2, [pc, #464]	; (8008bec <tcp_receive+0xb10>)
 8008a1a:	8912      	ldrh	r2, [r2, #8]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fb fe46 	bl	80046b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008a24:	4b71      	ldr	r3, [pc, #452]	; (8008bec <tcp_receive+0xb10>)
 8008a26:	891c      	ldrh	r4, [r3, #8]
 8008a28:	4b70      	ldr	r3, [pc, #448]	; (8008bec <tcp_receive+0xb10>)
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	899b      	ldrh	r3, [r3, #12]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fa fd24 	bl	800347e <lwip_htons>
 8008a36:	4603      	mov	r3, r0
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <tcp_receive+0x96a>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <tcp_receive+0x96c>
 8008a46:	2300      	movs	r3, #0
 8008a48:	4423      	add	r3, r4
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	4b65      	ldr	r3, [pc, #404]	; (8008be4 <tcp_receive+0xb08>)
 8008a4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008a50:	4b64      	ldr	r3, [pc, #400]	; (8008be4 <tcp_receive+0xb08>)
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	4b64      	ldr	r3, [pc, #400]	; (8008be8 <tcp_receive+0xb0c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	441a      	add	r2, r3
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d006      	beq.n	8008a74 <tcp_receive+0x998>
 8008a66:	4b62      	ldr	r3, [pc, #392]	; (8008bf0 <tcp_receive+0xb14>)
 8008a68:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008a6c:	4961      	ldr	r1, [pc, #388]	; (8008bf4 <tcp_receive+0xb18>)
 8008a6e:	4862      	ldr	r0, [pc, #392]	; (8008bf8 <tcp_receive+0xb1c>)
 8008a70:	f005 fc64 	bl	800e33c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008a7a:	4b5a      	ldr	r3, [pc, #360]	; (8008be4 <tcp_receive+0xb08>)
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4b59      	ldr	r3, [pc, #356]	; (8008be8 <tcp_receive+0xb0c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008a8e:	4b55      	ldr	r3, [pc, #340]	; (8008be4 <tcp_receive+0xb08>)
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d206      	bcs.n	8008aa4 <tcp_receive+0x9c8>
 8008a96:	4b56      	ldr	r3, [pc, #344]	; (8008bf0 <tcp_receive+0xb14>)
 8008a98:	f240 6207 	movw	r2, #1543	; 0x607
 8008a9c:	4957      	ldr	r1, [pc, #348]	; (8008bfc <tcp_receive+0xb20>)
 8008a9e:	4856      	ldr	r0, [pc, #344]	; (8008bf8 <tcp_receive+0xb1c>)
 8008aa0:	f005 fc4c 	bl	800e33c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008aa8:	4b4e      	ldr	r3, [pc, #312]	; (8008be4 <tcp_receive+0xb08>)
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fc fe99 	bl	80057ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008aba:	4b4c      	ldr	r3, [pc, #304]	; (8008bec <tcp_receive+0xb10>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008ac4:	4b49      	ldr	r3, [pc, #292]	; (8008bec <tcp_receive+0xb10>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	4a4d      	ldr	r2, [pc, #308]	; (8008c00 <tcp_receive+0xb24>)
 8008aca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008acc:	4b47      	ldr	r3, [pc, #284]	; (8008bec <tcp_receive+0xb10>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ad2:	4b46      	ldr	r3, [pc, #280]	; (8008bec <tcp_receive+0xb10>)
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	899b      	ldrh	r3, [r3, #12]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa fccf 	bl	800347e <lwip_htons>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 80b8 	beq.w	8008c5e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008aee:	4b45      	ldr	r3, [pc, #276]	; (8008c04 <tcp_receive+0xb28>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f043 0320 	orr.w	r3, r3, #32
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	4b42      	ldr	r3, [pc, #264]	; (8008c04 <tcp_receive+0xb28>)
 8008afa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008afc:	e0af      	b.n	8008c5e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a36      	ldr	r2, [pc, #216]	; (8008be8 <tcp_receive+0xb0c>)
 8008b0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	891b      	ldrh	r3, [r3, #8]
 8008b14:	461c      	mov	r4, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	899b      	ldrh	r3, [r3, #12]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fa fcad 	bl	800347e <lwip_htons>
 8008b24:	4603      	mov	r3, r0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <tcp_receive+0xa58>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <tcp_receive+0xa5a>
 8008b34:	2300      	movs	r3, #0
 8008b36:	191a      	adds	r2, r3, r4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	441a      	add	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b46:	461c      	mov	r4, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	891b      	ldrh	r3, [r3, #8]
 8008b4c:	461d      	mov	r5, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	899b      	ldrh	r3, [r3, #12]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fa fc91 	bl	800347e <lwip_htons>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <tcp_receive+0xa90>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e000      	b.n	8008b6e <tcp_receive+0xa92>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	442b      	add	r3, r5
 8008b70:	429c      	cmp	r4, r3
 8008b72:	d206      	bcs.n	8008b82 <tcp_receive+0xaa6>
 8008b74:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <tcp_receive+0xb14>)
 8008b76:	f240 622b 	movw	r2, #1579	; 0x62b
 8008b7a:	4923      	ldr	r1, [pc, #140]	; (8008c08 <tcp_receive+0xb2c>)
 8008b7c:	481e      	ldr	r0, [pc, #120]	; (8008bf8 <tcp_receive+0xb1c>)
 8008b7e:	f005 fbdd 	bl	800e33c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	891b      	ldrh	r3, [r3, #8]
 8008b86:	461c      	mov	r4, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	899b      	ldrh	r3, [r3, #12]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fa fc74 	bl	800347e <lwip_htons>
 8008b96:	4603      	mov	r3, r0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <tcp_receive+0xaca>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e000      	b.n	8008ba8 <tcp_receive+0xacc>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	1919      	adds	r1, r3, r4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bae:	b28b      	uxth	r3, r1
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7fc fe17 	bl	80057ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	891b      	ldrh	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d028      	beq.n	8008c1a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <tcp_receive+0xb24>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01d      	beq.n	8008c0c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <tcp_receive+0xb24>)
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fb ffb0 	bl	8004b40 <pbuf_cat>
 8008be0:	e018      	b.n	8008c14 <tcp_receive+0xb38>
 8008be2:	bf00      	nop
 8008be4:	20006782 	.word	0x20006782
 8008be8:	20006778 	.word	0x20006778
 8008bec:	20006758 	.word	0x20006758
 8008bf0:	08010688 	.word	0x08010688
 8008bf4:	08010a68 	.word	0x08010a68
 8008bf8:	080106d4 	.word	0x080106d4
 8008bfc:	08010aa4 	.word	0x08010aa4
 8008c00:	20006788 	.word	0x20006788
 8008c04:	20006785 	.word	0x20006785
 8008c08:	08010ac4 	.word	0x08010ac4
            } else {
              recv_data = cseg->p;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	4a70      	ldr	r2, [pc, #448]	; (8008dd4 <tcp_receive+0xcf8>)
 8008c12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	899b      	ldrh	r3, [r3, #12]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fa fc2b 	bl	800347e <lwip_htons>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00d      	beq.n	8008c50 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008c34:	4b68      	ldr	r3, [pc, #416]	; (8008dd8 <tcp_receive+0xcfc>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	f043 0320 	orr.w	r3, r3, #32
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	4b66      	ldr	r3, [pc, #408]	; (8008dd8 <tcp_receive+0xcfc>)
 8008c40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7d1b      	ldrb	r3, [r3, #20]
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d102      	bne.n	8008c50 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2207      	movs	r2, #7
 8008c4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008c58:	68b8      	ldr	r0, [r7, #8]
 8008c5a:	f7fd faec 	bl	8006236 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d008      	beq.n	8008c78 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008c72:	429a      	cmp	r2, r3
 8008c74:	f43f af43 	beq.w	8008afe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	8b5b      	ldrh	r3, [r3, #26]
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00e      	beq.n	8008ca2 <tcp_receive+0xbc6>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	8b5b      	ldrh	r3, [r3, #26]
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	835a      	strh	r2, [r3, #26]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8b5b      	ldrh	r3, [r3, #26]
 8008c96:	f043 0302 	orr.w	r3, r3, #2
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008ca0:	e188      	b.n	8008fb4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	8b5b      	ldrh	r3, [r3, #26]
 8008ca6:	f043 0301 	orr.w	r3, r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008cb0:	e180      	b.n	8008fb4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008cba:	4848      	ldr	r0, [pc, #288]	; (8008ddc <tcp_receive+0xd00>)
 8008cbc:	f7fd faf2 	bl	80062a4 <tcp_seg_copy>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	675a      	str	r2, [r3, #116]	; 0x74
 8008cc6:	e16d      	b.n	8008fa4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cd2:	e157      	b.n	8008f84 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	4b41      	ldr	r3, [pc, #260]	; (8008de0 <tcp_receive+0xd04>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d11d      	bne.n	8008d1e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008ce2:	4b3e      	ldr	r3, [pc, #248]	; (8008ddc <tcp_receive+0xd00>)
 8008ce4:	891a      	ldrh	r2, [r3, #8]
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	891b      	ldrh	r3, [r3, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	f240 814f 	bls.w	8008f8e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008cf0:	483a      	ldr	r0, [pc, #232]	; (8008ddc <tcp_receive+0xd00>)
 8008cf2:	f7fd fad7 	bl	80062a4 <tcp_seg_copy>
 8008cf6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8149 	beq.w	8008f92 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <tcp_receive+0xc32>
                    prev->next = cseg;
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	e002      	b.n	8008d14 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008d14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d16:	6978      	ldr	r0, [r7, #20]
 8008d18:	f7ff f8dc 	bl	8007ed4 <tcp_oos_insert_segment>
                }
                break;
 8008d1c:	e139      	b.n	8008f92 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d117      	bne.n	8008d54 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008d24:	4b2e      	ldr	r3, [pc, #184]	; (8008de0 <tcp_receive+0xd04>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	da57      	bge.n	8008de4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d34:	4829      	ldr	r0, [pc, #164]	; (8008ddc <tcp_receive+0xd00>)
 8008d36:	f7fd fab5 	bl	80062a4 <tcp_seg_copy>
 8008d3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 8129 	beq.w	8008f96 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d4c:	69b8      	ldr	r0, [r7, #24]
 8008d4e:	f7ff f8c1 	bl	8007ed4 <tcp_oos_insert_segment>
                  }
                  break;
 8008d52:	e120      	b.n	8008f96 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008d54:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <tcp_receive+0xd04>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	db3e      	blt.n	8008de4 <tcp_receive+0xd08>
 8008d66:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <tcp_receive+0xd04>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	3301      	adds	r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dc35      	bgt.n	8008de4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d78:	4818      	ldr	r0, [pc, #96]	; (8008ddc <tcp_receive+0xd00>)
 8008d7a:	f7fd fa93 	bl	80062a4 <tcp_seg_copy>
 8008d7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 8109 	beq.w	8008f9a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d90:	8912      	ldrh	r2, [r2, #8]
 8008d92:	441a      	add	r2, r3
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <tcp_receive+0xd04>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dd12      	ble.n	8008dc4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <tcp_receive+0xd04>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dba:	891b      	ldrh	r3, [r3, #8]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fb fc76 	bl	80046b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dcc:	69f8      	ldr	r0, [r7, #28]
 8008dce:	f7ff f881 	bl	8007ed4 <tcp_oos_insert_segment>
                  }
                  break;
 8008dd2:	e0e2      	b.n	8008f9a <tcp_receive+0xebe>
 8008dd4:	20006788 	.word	0x20006788
 8008dd8:	20006785 	.word	0x20006785
 8008ddc:	20006758 	.word	0x20006758
 8008de0:	20006778 	.word	0x20006778
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 80c6 	bne.w	8008f7e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008df2:	4b80      	ldr	r3, [pc, #512]	; (8008ff4 <tcp_receive+0xf18>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f340 80bd 	ble.w	8008f7e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	899b      	ldrh	r3, [r3, #12]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fa fb36 	bl	800347e <lwip_htons>
 8008e12:	4603      	mov	r3, r0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 80bf 	bne.w	8008f9e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008e20:	4875      	ldr	r0, [pc, #468]	; (8008ff8 <tcp_receive+0xf1c>)
 8008e22:	f7fd fa3f 	bl	80062a4 <tcp_seg_copy>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80b6 	beq.w	8008fa2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e3e:	8912      	ldrh	r2, [r2, #8]
 8008e40:	441a      	add	r2, r3
 8008e42:	4b6c      	ldr	r3, [pc, #432]	; (8008ff4 <tcp_receive+0xf18>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dd12      	ble.n	8008e72 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008e4c:	4b69      	ldr	r3, [pc, #420]	; (8008ff4 <tcp_receive+0xf18>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	891b      	ldrh	r3, [r3, #8]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f7fb fc1f 	bl	80046b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008e72:	4b62      	ldr	r3, [pc, #392]	; (8008ffc <tcp_receive+0xf20>)
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	4b5e      	ldr	r3, [pc, #376]	; (8008ff4 <tcp_receive+0xf18>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	441a      	add	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e86:	440b      	add	r3, r1
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f340 8089 	ble.w	8008fa2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	899b      	ldrh	r3, [r3, #12]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fa faef 	bl	800347e <lwip_htons>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d022      	beq.n	8008ef2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	899b      	ldrh	r3, [r3, #12]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	b21b      	sxth	r3, r3
 8008eb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ebc:	b21c      	sxth	r4, r3
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	899b      	ldrh	r3, [r3, #12]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fa fad8 	bl	800347e <lwip_htons>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fa facf 	bl	800347e <lwip_htons>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	b21b      	sxth	r3, r3
 8008ee4:	4323      	orrs	r3, r4
 8008ee6:	b21a      	sxth	r2, r3
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	b292      	uxth	r2, r2
 8008ef0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efc:	4413      	add	r3, r2
 8008efe:	b299      	uxth	r1, r3
 8008f00:	4b3c      	ldr	r3, [pc, #240]	; (8008ff4 <tcp_receive+0xf18>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	1a8a      	subs	r2, r1, r2
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	891b      	ldrh	r3, [r3, #8]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fb fbc6 	bl	80046b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	891c      	ldrh	r4, [r3, #8]
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	899b      	ldrh	r3, [r3, #12]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fa faa2 	bl	800347e <lwip_htons>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <tcp_receive+0xe6e>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <tcp_receive+0xe70>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4423      	add	r3, r4
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	4b2a      	ldr	r3, [pc, #168]	; (8008ffc <tcp_receive+0xf20>)
 8008f52:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008f54:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <tcp_receive+0xf20>)
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b26      	ldr	r3, [pc, #152]	; (8008ff4 <tcp_receive+0xf18>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	441a      	add	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f68:	440b      	add	r3, r1
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d019      	beq.n	8008fa2 <tcp_receive+0xec6>
 8008f6e:	4b24      	ldr	r3, [pc, #144]	; (8009000 <tcp_receive+0xf24>)
 8008f70:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008f74:	4923      	ldr	r1, [pc, #140]	; (8009004 <tcp_receive+0xf28>)
 8008f76:	4824      	ldr	r0, [pc, #144]	; (8009008 <tcp_receive+0xf2c>)
 8008f78:	f005 f9e0 	bl	800e33c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008f7c:	e011      	b.n	8008fa2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f47f aea4 	bne.w	8008cd4 <tcp_receive+0xbf8>
 8008f8c:	e00a      	b.n	8008fa4 <tcp_receive+0xec8>
                break;
 8008f8e:	bf00      	nop
 8008f90:	e008      	b.n	8008fa4 <tcp_receive+0xec8>
                break;
 8008f92:	bf00      	nop
 8008f94:	e006      	b.n	8008fa4 <tcp_receive+0xec8>
                  break;
 8008f96:	bf00      	nop
 8008f98:	e004      	b.n	8008fa4 <tcp_receive+0xec8>
                  break;
 8008f9a:	bf00      	nop
 8008f9c:	e002      	b.n	8008fa4 <tcp_receive+0xec8>
                  break;
 8008f9e:	bf00      	nop
 8008fa0:	e000      	b.n	8008fa4 <tcp_receive+0xec8>
                break;
 8008fa2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fe8b 	bl	800acc0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008faa:	e003      	b.n	8008fb4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 fe87 	bl	800acc0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fb2:	e01a      	b.n	8008fea <tcp_receive+0xf0e>
 8008fb4:	e019      	b.n	8008fea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <tcp_receive+0xf18>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db0a      	blt.n	8008fda <tcp_receive+0xefe>
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <tcp_receive+0xf18>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fd0:	440b      	add	r3, r1
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dd07      	ble.n	8008fea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8b5b      	ldrh	r3, [r3, #26]
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008fe8:	e7ff      	b.n	8008fea <tcp_receive+0xf0e>
 8008fea:	bf00      	nop
 8008fec:	3750      	adds	r7, #80	; 0x50
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20006778 	.word	0x20006778
 8008ff8:	20006758 	.word	0x20006758
 8008ffc:	20006782 	.word	0x20006782
 8009000:	08010688 	.word	0x08010688
 8009004:	08010a30 	.word	0x08010a30
 8009008:	080106d4 	.word	0x080106d4

0800900c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <tcp_get_next_optbyte+0x5c>)
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	b291      	uxth	r1, r2
 800901a:	4a13      	ldr	r2, [pc, #76]	; (8009068 <tcp_get_next_optbyte+0x5c>)
 800901c:	8011      	strh	r1, [r2, #0]
 800901e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009020:	4b12      	ldr	r3, [pc, #72]	; (800906c <tcp_get_next_optbyte+0x60>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <tcp_get_next_optbyte+0x26>
 8009028:	4b11      	ldr	r3, [pc, #68]	; (8009070 <tcp_get_next_optbyte+0x64>)
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	429a      	cmp	r2, r3
 8009030:	d208      	bcs.n	8009044 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009032:	4b10      	ldr	r3, [pc, #64]	; (8009074 <tcp_get_next_optbyte+0x68>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3314      	adds	r3, #20
 8009038:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	4413      	add	r3, r2
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	e00b      	b.n	800905c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	b2da      	uxtb	r2, r3
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <tcp_get_next_optbyte+0x64>)
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009052:	4b06      	ldr	r3, [pc, #24]	; (800906c <tcp_get_next_optbyte+0x60>)
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	797b      	ldrb	r3, [r7, #5]
 8009058:	4413      	add	r3, r2
 800905a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20006774 	.word	0x20006774
 800906c:	20006770 	.word	0x20006770
 8009070:	2000676e 	.word	0x2000676e
 8009074:	20006768 	.word	0x20006768

08009078 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <tcp_parseopt+0x1c>
 8009086:	4b32      	ldr	r3, [pc, #200]	; (8009150 <tcp_parseopt+0xd8>)
 8009088:	f240 727d 	movw	r2, #1917	; 0x77d
 800908c:	4931      	ldr	r1, [pc, #196]	; (8009154 <tcp_parseopt+0xdc>)
 800908e:	4832      	ldr	r0, [pc, #200]	; (8009158 <tcp_parseopt+0xe0>)
 8009090:	f005 f954 	bl	800e33c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009094:	4b31      	ldr	r3, [pc, #196]	; (800915c <tcp_parseopt+0xe4>)
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d055      	beq.n	8009148 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800909c:	4b30      	ldr	r3, [pc, #192]	; (8009160 <tcp_parseopt+0xe8>)
 800909e:	2200      	movs	r2, #0
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	e045      	b.n	8009130 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80090a4:	f7ff ffb2 	bl	800900c <tcp_get_next_optbyte>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d006      	beq.n	80090c0 <tcp_parseopt+0x48>
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	dc2b      	bgt.n	800910e <tcp_parseopt+0x96>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d041      	beq.n	800913e <tcp_parseopt+0xc6>
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d127      	bne.n	800910e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80090be:	e037      	b.n	8009130 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80090c0:	f7ff ffa4 	bl	800900c <tcp_get_next_optbyte>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d13b      	bne.n	8009142 <tcp_parseopt+0xca>
 80090ca:	4b25      	ldr	r3, [pc, #148]	; (8009160 <tcp_parseopt+0xe8>)
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	4a22      	ldr	r2, [pc, #136]	; (800915c <tcp_parseopt+0xe4>)
 80090d2:	8812      	ldrh	r2, [r2, #0]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	da34      	bge.n	8009142 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80090d8:	f7ff ff98 	bl	800900c <tcp_get_next_optbyte>
 80090dc:	4603      	mov	r3, r0
 80090de:	b29b      	uxth	r3, r3
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80090e4:	f7ff ff92 	bl	800900c <tcp_get_next_optbyte>
 80090e8:	4603      	mov	r3, r0
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	89bb      	ldrh	r3, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80090f2:	89bb      	ldrh	r3, [r7, #12]
 80090f4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80090f8:	d804      	bhi.n	8009104 <tcp_parseopt+0x8c>
 80090fa:	89bb      	ldrh	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <tcp_parseopt+0x8c>
 8009100:	89ba      	ldrh	r2, [r7, #12]
 8009102:	e001      	b.n	8009108 <tcp_parseopt+0x90>
 8009104:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800910c:	e010      	b.n	8009130 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800910e:	f7ff ff7d 	bl	800900c <tcp_get_next_optbyte>
 8009112:	4603      	mov	r3, r0
 8009114:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d914      	bls.n	8009146 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	b29a      	uxth	r2, r3
 8009120:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <tcp_parseopt+0xe8>)
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	4413      	add	r3, r2
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b02      	subs	r3, #2
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <tcp_parseopt+0xe8>)
 800912e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <tcp_parseopt+0xe8>)
 8009132:	881a      	ldrh	r2, [r3, #0]
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <tcp_parseopt+0xe4>)
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d3b3      	bcc.n	80090a4 <tcp_parseopt+0x2c>
 800913c:	e004      	b.n	8009148 <tcp_parseopt+0xd0>
          return;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <tcp_parseopt+0xd0>
            return;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <tcp_parseopt+0xd0>
            return;
 8009146:	bf00      	nop
      }
    }
  }
}
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	08010688 	.word	0x08010688
 8009154:	08010aec 	.word	0x08010aec
 8009158:	080106d4 	.word	0x080106d4
 800915c:	2000676c 	.word	0x2000676c
 8009160:	20006774 	.word	0x20006774

08009164 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <tcp_trigger_input_pcb_close+0x1c>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	f043 0310 	orr.w	r3, r3, #16
 8009170:	b2da      	uxtb	r2, r3
 8009172:	4b03      	ldr	r3, [pc, #12]	; (8009180 <tcp_trigger_input_pcb_close+0x1c>)
 8009174:	701a      	strb	r2, [r3, #0]
}
 8009176:	bf00      	nop
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20006785 	.word	0x20006785

08009184 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <tcp_route+0x28>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	7a1b      	ldrb	r3, [r3, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d006      	beq.n	80091ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	7a1b      	ldrb	r3, [r3, #8]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fb f8aa 	bl	80042fc <netif_get_by_index>
 80091a8:	4603      	mov	r3, r0
 80091aa:	e003      	b.n	80091b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f003 fe8f 	bl	800ced0 <ip4_route>
 80091b2:	4603      	mov	r3, r0
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d105      	bne.n	80091de <tcp_create_segment+0x22>
 80091d2:	4b44      	ldr	r3, [pc, #272]	; (80092e4 <tcp_create_segment+0x128>)
 80091d4:	22a3      	movs	r2, #163	; 0xa3
 80091d6:	4944      	ldr	r1, [pc, #272]	; (80092e8 <tcp_create_segment+0x12c>)
 80091d8:	4844      	ldr	r0, [pc, #272]	; (80092ec <tcp_create_segment+0x130>)
 80091da:	f005 f8af 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d105      	bne.n	80091f0 <tcp_create_segment+0x34>
 80091e4:	4b3f      	ldr	r3, [pc, #252]	; (80092e4 <tcp_create_segment+0x128>)
 80091e6:	22a4      	movs	r2, #164	; 0xa4
 80091e8:	4941      	ldr	r1, [pc, #260]	; (80092f0 <tcp_create_segment+0x134>)
 80091ea:	4840      	ldr	r0, [pc, #256]	; (80092ec <tcp_create_segment+0x130>)
 80091ec:	f005 f8a6 	bl	800e33c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80091f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80091fe:	2003      	movs	r0, #3
 8009200:	f7fa fd92 	bl	8003d28 <memp_malloc>
 8009204:	6138      	str	r0, [r7, #16]
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800920c:	68b8      	ldr	r0, [r7, #8]
 800920e:	f7fb fbd5 	bl	80049bc <pbuf_free>
    return NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	e061      	b.n	80092da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800921c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	891a      	ldrh	r2, [r3, #8]
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	b29b      	uxth	r3, r3
 8009232:	429a      	cmp	r2, r3
 8009234:	d205      	bcs.n	8009242 <tcp_create_segment+0x86>
 8009236:	4b2b      	ldr	r3, [pc, #172]	; (80092e4 <tcp_create_segment+0x128>)
 8009238:	22b0      	movs	r2, #176	; 0xb0
 800923a:	492e      	ldr	r1, [pc, #184]	; (80092f4 <tcp_create_segment+0x138>)
 800923c:	482b      	ldr	r0, [pc, #172]	; (80092ec <tcp_create_segment+0x130>)
 800923e:	f005 f87d 	bl	800e33c <iprintf>
  seg->len = p->tot_len - optlen;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	891a      	ldrh	r2, [r3, #8]
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	b29b      	uxth	r3, r3
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	b29a      	uxth	r2, r3
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009252:	2114      	movs	r1, #20
 8009254:	68b8      	ldr	r0, [r7, #8]
 8009256:	f7fb fb1b 	bl	8004890 <pbuf_add_header>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009260:	6938      	ldr	r0, [r7, #16]
 8009262:	f7fc ffe8 	bl	8006236 <tcp_seg_free>
    return NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	e037      	b.n	80092da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8ada      	ldrh	r2, [r3, #22]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	68dc      	ldr	r4, [r3, #12]
 800927c:	4610      	mov	r0, r2
 800927e:	f7fa f8fe 	bl	800347e <lwip_htons>
 8009282:	4603      	mov	r3, r0
 8009284:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8b1a      	ldrh	r2, [r3, #24]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	68dc      	ldr	r4, [r3, #12]
 800928e:	4610      	mov	r0, r2
 8009290:	f7fa f8f5 	bl	800347e <lwip_htons>
 8009294:	4603      	mov	r3, r0
 8009296:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	68dc      	ldr	r4, [r3, #12]
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	f7fa f903 	bl	80034a8 <lwip_htonl>
 80092a2:	4603      	mov	r3, r0
 80092a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	089b      	lsrs	r3, r3, #2
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3305      	adds	r3, #5
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	031b      	lsls	r3, r3, #12
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	68dc      	ldr	r4, [r3, #12]
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7fa f8db 	bl	800347e <lwip_htons>
 80092c8:	4603      	mov	r3, r0
 80092ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	749a      	strb	r2, [r3, #18]
 80092d4:	2200      	movs	r2, #0
 80092d6:	74da      	strb	r2, [r3, #19]
  return seg;
 80092d8:	693b      	ldr	r3, [r7, #16]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08010b08 	.word	0x08010b08
 80092e8:	08010b3c 	.word	0x08010b3c
 80092ec:	08010b5c 	.word	0x08010b5c
 80092f0:	08010b84 	.word	0x08010b84
 80092f4:	08010ba8 	.word	0x08010ba8

080092f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	460b      	mov	r3, r1
 8009306:	81bb      	strh	r3, [r7, #12]
 8009308:	4613      	mov	r3, r2
 800930a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800930c:	89bb      	ldrh	r3, [r7, #12]
 800930e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <tcp_pbuf_prealloc+0x2a>
 8009316:	4b30      	ldr	r3, [pc, #192]	; (80093d8 <tcp_pbuf_prealloc+0xe0>)
 8009318:	22e8      	movs	r2, #232	; 0xe8
 800931a:	4930      	ldr	r1, [pc, #192]	; (80093dc <tcp_pbuf_prealloc+0xe4>)
 800931c:	4830      	ldr	r0, [pc, #192]	; (80093e0 <tcp_pbuf_prealloc+0xe8>)
 800931e:	f005 f80d 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d105      	bne.n	8009334 <tcp_pbuf_prealloc+0x3c>
 8009328:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <tcp_pbuf_prealloc+0xe0>)
 800932a:	22e9      	movs	r2, #233	; 0xe9
 800932c:	492d      	ldr	r1, [pc, #180]	; (80093e4 <tcp_pbuf_prealloc+0xec>)
 800932e:	482c      	ldr	r0, [pc, #176]	; (80093e0 <tcp_pbuf_prealloc+0xe8>)
 8009330:	f005 f804 	bl	800e33c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009334:	89ba      	ldrh	r2, [r7, #12]
 8009336:	897b      	ldrh	r3, [r7, #10]
 8009338:	429a      	cmp	r2, r3
 800933a:	d221      	bcs.n	8009380 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800933c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d111      	bne.n	800936c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	8b5b      	ldrh	r3, [r3, #26]
 800934c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009350:	2b00      	cmp	r3, #0
 8009352:	d115      	bne.n	8009380 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009354:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d007      	beq.n	800936c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009368:	2b00      	cmp	r3, #0
 800936a:	d009      	beq.n	8009380 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800936c:	89bb      	ldrh	r3, [r7, #12]
 800936e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009372:	f023 0203 	bic.w	r2, r3, #3
 8009376:	897b      	ldrh	r3, [r7, #10]
 8009378:	4293      	cmp	r3, r2
 800937a:	bf28      	it	cs
 800937c:	4613      	movcs	r3, r2
 800937e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009380:	8af9      	ldrh	r1, [r7, #22]
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009388:	4618      	mov	r0, r3
 800938a:	f7fb f833 	bl	80043f4 <pbuf_alloc>
 800938e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009396:	2300      	movs	r3, #0
 8009398:	e019      	b.n	80093ce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d006      	beq.n	80093b0 <tcp_pbuf_prealloc+0xb8>
 80093a2:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <tcp_pbuf_prealloc+0xe0>)
 80093a4:	f240 120b 	movw	r2, #267	; 0x10b
 80093a8:	490f      	ldr	r1, [pc, #60]	; (80093e8 <tcp_pbuf_prealloc+0xf0>)
 80093aa:	480d      	ldr	r0, [pc, #52]	; (80093e0 <tcp_pbuf_prealloc+0xe8>)
 80093ac:	f004 ffc6 	bl	800e33c <iprintf>
  *oversize = p->len - length;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	895a      	ldrh	r2, [r3, #10]
 80093b4:	89bb      	ldrh	r3, [r7, #12]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	89ba      	ldrh	r2, [r7, #12]
 80093c2:	811a      	strh	r2, [r3, #8]
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	891a      	ldrh	r2, [r3, #8]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	815a      	strh	r2, [r3, #10]
  return p;
 80093cc:	693b      	ldr	r3, [r7, #16]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08010b08 	.word	0x08010b08
 80093dc:	08010bc0 	.word	0x08010bc0
 80093e0:	08010b5c 	.word	0x08010b5c
 80093e4:	08010be4 	.word	0x08010be4
 80093e8:	08010c04 	.word	0x08010c04

080093ec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <tcp_write_checks+0x20>
 80093fe:	4b33      	ldr	r3, [pc, #204]	; (80094cc <tcp_write_checks+0xe0>)
 8009400:	f240 1233 	movw	r2, #307	; 0x133
 8009404:	4932      	ldr	r1, [pc, #200]	; (80094d0 <tcp_write_checks+0xe4>)
 8009406:	4833      	ldr	r0, [pc, #204]	; (80094d4 <tcp_write_checks+0xe8>)
 8009408:	f004 ff98 	bl	800e33c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	7d1b      	ldrb	r3, [r3, #20]
 8009410:	2b04      	cmp	r3, #4
 8009412:	d00e      	beq.n	8009432 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009418:	2b07      	cmp	r3, #7
 800941a:	d00a      	beq.n	8009432 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009420:	2b02      	cmp	r3, #2
 8009422:	d006      	beq.n	8009432 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009428:	2b03      	cmp	r3, #3
 800942a:	d002      	beq.n	8009432 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800942c:	f06f 030a 	mvn.w	r3, #10
 8009430:	e048      	b.n	80094c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8009432:	887b      	ldrh	r3, [r7, #2]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <tcp_write_checks+0x50>
    return ERR_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	e043      	b.n	80094c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009442:	887a      	ldrh	r2, [r7, #2]
 8009444:	429a      	cmp	r2, r3
 8009446:	d909      	bls.n	800945c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	8b5b      	ldrh	r3, [r3, #26]
 800944c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009450:	b29a      	uxth	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009456:	f04f 33ff 	mov.w	r3, #4294967295
 800945a:	e033      	b.n	80094c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009462:	2b08      	cmp	r3, #8
 8009464:	d909      	bls.n	800947a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	8b5b      	ldrh	r3, [r3, #26]
 800946a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009474:	f04f 33ff 	mov.w	r3, #4294967295
 8009478:	e024      	b.n	80094c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00f      	beq.n	80094a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009488:	2b00      	cmp	r3, #0
 800948a:	d11a      	bne.n	80094c2 <tcp_write_checks+0xd6>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d116      	bne.n	80094c2 <tcp_write_checks+0xd6>
 8009494:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <tcp_write_checks+0xe0>)
 8009496:	f240 1255 	movw	r2, #341	; 0x155
 800949a:	490f      	ldr	r1, [pc, #60]	; (80094d8 <tcp_write_checks+0xec>)
 800949c:	480d      	ldr	r0, [pc, #52]	; (80094d4 <tcp_write_checks+0xe8>)
 800949e:	f004 ff4d 	bl	800e33c <iprintf>
 80094a2:	e00e      	b.n	80094c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d103      	bne.n	80094b4 <tcp_write_checks+0xc8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d006      	beq.n	80094c2 <tcp_write_checks+0xd6>
 80094b4:	4b05      	ldr	r3, [pc, #20]	; (80094cc <tcp_write_checks+0xe0>)
 80094b6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80094ba:	4908      	ldr	r1, [pc, #32]	; (80094dc <tcp_write_checks+0xf0>)
 80094bc:	4805      	ldr	r0, [pc, #20]	; (80094d4 <tcp_write_checks+0xe8>)
 80094be:	f004 ff3d 	bl	800e33c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	08010b08 	.word	0x08010b08
 80094d0:	08010c18 	.word	0x08010c18
 80094d4:	08010b5c 	.word	0x08010b5c
 80094d8:	08010c38 	.word	0x08010c38
 80094dc:	08010c74 	.word	0x08010c74

080094e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b09b      	sub	sp, #108	; 0x6c
 80094e4:	af04      	add	r7, sp, #16
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4611      	mov	r1, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	460b      	mov	r3, r1
 80094f0:	80fb      	strh	r3, [r7, #6]
 80094f2:	4613      	mov	r3, r2
 80094f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	653b      	str	r3, [r7, #80]	; 0x50
 80094fe:	2300      	movs	r3, #0
 8009500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009502:	2300      	movs	r3, #0
 8009504:	64bb      	str	r3, [r7, #72]	; 0x48
 8009506:	2300      	movs	r3, #0
 8009508:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800950a:	2300      	movs	r3, #0
 800950c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <tcp_write+0x5c>
 8009528:	4ba4      	ldr	r3, [pc, #656]	; (80097bc <tcp_write+0x2dc>)
 800952a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800952e:	49a4      	ldr	r1, [pc, #656]	; (80097c0 <tcp_write+0x2e0>)
 8009530:	48a4      	ldr	r0, [pc, #656]	; (80097c4 <tcp_write+0x2e4>)
 8009532:	f004 ff03 	bl	800e33c <iprintf>
 8009536:	f06f 030f 	mvn.w	r3, #15
 800953a:	e32a      	b.n	8009b92 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009542:	085b      	lsrs	r3, r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800954a:	4293      	cmp	r3, r2
 800954c:	bf28      	it	cs
 800954e:	4613      	movcs	r3, r2
 8009550:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <tcp_write+0x7e>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800955c:	e000      	b.n	8009560 <tcp_write+0x80>
 800955e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009560:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d109      	bne.n	800957c <tcp_write+0x9c>
 8009568:	4b94      	ldr	r3, [pc, #592]	; (80097bc <tcp_write+0x2dc>)
 800956a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800956e:	4996      	ldr	r1, [pc, #600]	; (80097c8 <tcp_write+0x2e8>)
 8009570:	4894      	ldr	r0, [pc, #592]	; (80097c4 <tcp_write+0x2e4>)
 8009572:	f004 fee3 	bl	800e33c <iprintf>
 8009576:	f06f 030f 	mvn.w	r3, #15
 800957a:	e30a      	b.n	8009b92 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800957c:	88fb      	ldrh	r3, [r7, #6]
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff ff33 	bl	80093ec <tcp_write_checks>
 8009586:	4603      	mov	r3, r0
 8009588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800958c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <tcp_write+0xba>
    return err;
 8009594:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009598:	e2fb      	b.n	8009b92 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80f6 	beq.w	80097a0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b8:	653b      	str	r3, [r7, #80]	; 0x50
 80095ba:	e002      	b.n	80095c2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80095bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80095c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1f8      	bne.n	80095bc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80095ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095cc:	7a9b      	ldrb	r3, [r3, #10]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	f003 0304 	and.w	r3, r3, #4
 80095d6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80095d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095dc:	891b      	ldrh	r3, [r3, #8]
 80095de:	4619      	mov	r1, r3
 80095e0:	8c3b      	ldrh	r3, [r7, #32]
 80095e2:	440b      	add	r3, r1
 80095e4:	429a      	cmp	r2, r3
 80095e6:	da06      	bge.n	80095f6 <tcp_write+0x116>
 80095e8:	4b74      	ldr	r3, [pc, #464]	; (80097bc <tcp_write+0x2dc>)
 80095ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80095ee:	4977      	ldr	r1, [pc, #476]	; (80097cc <tcp_write+0x2ec>)
 80095f0:	4874      	ldr	r0, [pc, #464]	; (80097c4 <tcp_write+0x2e4>)
 80095f2:	f004 fea3 	bl	800e33c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80095f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f8:	891a      	ldrh	r2, [r3, #8]
 80095fa:	8c3b      	ldrh	r3, [r7, #32]
 80095fc:	4413      	add	r3, r2
 80095fe:	b29b      	uxth	r3, r3
 8009600:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800960c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800960e:	8a7b      	ldrh	r3, [r7, #18]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d026      	beq.n	8009662 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009614:	8a7b      	ldrh	r3, [r7, #18]
 8009616:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009618:	429a      	cmp	r2, r3
 800961a:	d206      	bcs.n	800962a <tcp_write+0x14a>
 800961c:	4b67      	ldr	r3, [pc, #412]	; (80097bc <tcp_write+0x2dc>)
 800961e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009622:	496b      	ldr	r1, [pc, #428]	; (80097d0 <tcp_write+0x2f0>)
 8009624:	4867      	ldr	r0, [pc, #412]	; (80097c4 <tcp_write+0x2e4>)
 8009626:	f004 fe89 	bl	800e33c <iprintf>
      seg = last_unsent;
 800962a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800962c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800962e:	8a7b      	ldrh	r3, [r7, #18]
 8009630:	88fa      	ldrh	r2, [r7, #6]
 8009632:	4293      	cmp	r3, r2
 8009634:	bf28      	it	cs
 8009636:	4613      	movcs	r3, r2
 8009638:	b29b      	uxth	r3, r3
 800963a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800963c:	4293      	cmp	r3, r2
 800963e:	bf28      	it	cs
 8009640:	4613      	movcs	r3, r2
 8009642:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009648:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800964a:	4413      	add	r3, r2
 800964c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8009650:	8a7a      	ldrh	r2, [r7, #18]
 8009652:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800965a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800965c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009662:	8a7b      	ldrh	r3, [r7, #18]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <tcp_write+0x1a0>
 8009668:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	429a      	cmp	r2, r3
 8009670:	d006      	beq.n	8009680 <tcp_write+0x1a0>
 8009672:	4b52      	ldr	r3, [pc, #328]	; (80097bc <tcp_write+0x2dc>)
 8009674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009678:	4956      	ldr	r1, [pc, #344]	; (80097d4 <tcp_write+0x2f4>)
 800967a:	4852      	ldr	r0, [pc, #328]	; (80097c4 <tcp_write+0x2e4>)
 800967c:	f004 fe5e 	bl	800e33c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009680:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	429a      	cmp	r2, r3
 8009688:	f080 8167 	bcs.w	800995a <tcp_write+0x47a>
 800968c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 8163 	beq.w	800995a <tcp_write+0x47a>
 8009694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009696:	891b      	ldrh	r3, [r3, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 815e 	beq.w	800995a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800969e:	88fa      	ldrh	r2, [r7, #6]
 80096a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096a4:	1ad2      	subs	r2, r2, r3
 80096a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80096a8:	4293      	cmp	r3, r2
 80096aa:	bfa8      	it	ge
 80096ac:	4613      	movge	r3, r2
 80096ae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80096b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80096b4:	797b      	ldrb	r3, [r7, #5]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d027      	beq.n	800970e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80096be:	f107 0012 	add.w	r0, r7, #18
 80096c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80096c4:	8bf9      	ldrh	r1, [r7, #30]
 80096c6:	2301      	movs	r3, #1
 80096c8:	9302      	str	r3, [sp, #8]
 80096ca:	797b      	ldrb	r3, [r7, #5]
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	4603      	mov	r3, r0
 80096d4:	2000      	movs	r0, #0
 80096d6:	f7ff fe0f 	bl	80092f8 <tcp_pbuf_prealloc>
 80096da:	6578      	str	r0, [r7, #84]	; 0x54
 80096dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 8225 	beq.w	8009b2e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80096e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e6:	6858      	ldr	r0, [r3, #4]
 80096e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	4413      	add	r3, r2
 80096f0:	8bfa      	ldrh	r2, [r7, #30]
 80096f2:	4619      	mov	r1, r3
 80096f4:	f004 fe0c 	bl	800e310 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80096f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80096fa:	f7fb f9e7 	bl	8004acc <pbuf_clen>
 80096fe:	4603      	mov	r3, r0
 8009700:	461a      	mov	r2, r3
 8009702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009706:	4413      	add	r3, r2
 8009708:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800970c:	e041      	b.n	8009792 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800970e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	637b      	str	r3, [r7, #52]	; 0x34
 8009714:	e002      	b.n	800971c <tcp_write+0x23c>
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f8      	bne.n	8009716 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009726:	7b1b      	ldrb	r3, [r3, #12]
 8009728:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d115      	bne.n	800975c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009736:	8952      	ldrh	r2, [r2, #10]
 8009738:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	429a      	cmp	r2, r3
 800973e:	d10d      	bne.n	800975c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009744:	2b00      	cmp	r3, #0
 8009746:	d006      	beq.n	8009756 <tcp_write+0x276>
 8009748:	4b1c      	ldr	r3, [pc, #112]	; (80097bc <tcp_write+0x2dc>)
 800974a:	f240 2231 	movw	r2, #561	; 0x231
 800974e:	4922      	ldr	r1, [pc, #136]	; (80097d8 <tcp_write+0x2f8>)
 8009750:	481c      	ldr	r0, [pc, #112]	; (80097c4 <tcp_write+0x2e4>)
 8009752:	f004 fdf3 	bl	800e33c <iprintf>
          extendlen = seglen;
 8009756:	8bfb      	ldrh	r3, [r7, #30]
 8009758:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800975a:	e01a      	b.n	8009792 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800975c:	8bfb      	ldrh	r3, [r7, #30]
 800975e:	2201      	movs	r2, #1
 8009760:	4619      	mov	r1, r3
 8009762:	2000      	movs	r0, #0
 8009764:	f7fa fe46 	bl	80043f4 <pbuf_alloc>
 8009768:	6578      	str	r0, [r7, #84]	; 0x54
 800976a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 81e0 	beq.w	8009b32 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8009772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	441a      	add	r2, r3
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800977e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009780:	f7fb f9a4 	bl	8004acc <pbuf_clen>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800978c:	4413      	add	r3, r2
 800978e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009792:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009796:	8bfb      	ldrh	r3, [r7, #30]
 8009798:	4413      	add	r3, r2
 800979a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800979e:	e0dc      	b.n	800995a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 80d7 	beq.w	800995a <tcp_write+0x47a>
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <tcp_write+0x2dc>)
 80097ae:	f240 224a 	movw	r2, #586	; 0x24a
 80097b2:	490a      	ldr	r1, [pc, #40]	; (80097dc <tcp_write+0x2fc>)
 80097b4:	4803      	ldr	r0, [pc, #12]	; (80097c4 <tcp_write+0x2e4>)
 80097b6:	f004 fdc1 	bl	800e33c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80097ba:	e0ce      	b.n	800995a <tcp_write+0x47a>
 80097bc:	08010b08 	.word	0x08010b08
 80097c0:	08010ca8 	.word	0x08010ca8
 80097c4:	08010b5c 	.word	0x08010b5c
 80097c8:	08010cc0 	.word	0x08010cc0
 80097cc:	08010cf4 	.word	0x08010cf4
 80097d0:	08010d0c 	.word	0x08010d0c
 80097d4:	08010d2c 	.word	0x08010d2c
 80097d8:	08010d4c 	.word	0x08010d4c
 80097dc:	08010d78 	.word	0x08010d78
    struct pbuf *p;
    u16_t left = len - pos;
 80097e0:	88fa      	ldrh	r2, [r7, #6]
 80097e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80097ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80097f6:	8b7a      	ldrh	r2, [r7, #26]
 80097f8:	8bbb      	ldrh	r3, [r7, #28]
 80097fa:	4293      	cmp	r3, r2
 80097fc:	bf28      	it	cs
 80097fe:	4613      	movcs	r3, r2
 8009800:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009802:	797b      	ldrb	r3, [r7, #5]
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d036      	beq.n	800987a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800980c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009810:	b29a      	uxth	r2, r3
 8009812:	8b3b      	ldrh	r3, [r7, #24]
 8009814:	4413      	add	r3, r2
 8009816:	b299      	uxth	r1, r3
 8009818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981a:	2b00      	cmp	r3, #0
 800981c:	bf0c      	ite	eq
 800981e:	2301      	moveq	r3, #1
 8009820:	2300      	movne	r3, #0
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f107 0012 	add.w	r0, r7, #18
 8009828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800982a:	9302      	str	r3, [sp, #8]
 800982c:	797b      	ldrb	r3, [r7, #5]
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	4603      	mov	r3, r0
 8009836:	2036      	movs	r0, #54	; 0x36
 8009838:	f7ff fd5e 	bl	80092f8 <tcp_pbuf_prealloc>
 800983c:	6338      	str	r0, [r7, #48]	; 0x30
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 8178 	beq.w	8009b36 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	895b      	ldrh	r3, [r3, #10]
 800984a:	8b3a      	ldrh	r2, [r7, #24]
 800984c:	429a      	cmp	r2, r3
 800984e:	d906      	bls.n	800985e <tcp_write+0x37e>
 8009850:	4b8c      	ldr	r3, [pc, #560]	; (8009a84 <tcp_write+0x5a4>)
 8009852:	f240 2266 	movw	r2, #614	; 0x266
 8009856:	498c      	ldr	r1, [pc, #560]	; (8009a88 <tcp_write+0x5a8>)
 8009858:	488c      	ldr	r0, [pc, #560]	; (8009a8c <tcp_write+0x5ac>)
 800985a:	f004 fd6f 	bl	800e33c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009866:	18d0      	adds	r0, r2, r3
 8009868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	4413      	add	r3, r2
 8009870:	8b3a      	ldrh	r2, [r7, #24]
 8009872:	4619      	mov	r1, r3
 8009874:	f004 fd4c 	bl	800e310 <memcpy>
 8009878:	e02f      	b.n	80098da <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800987a:	8a7b      	ldrh	r3, [r7, #18]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d006      	beq.n	800988e <tcp_write+0x3ae>
 8009880:	4b80      	ldr	r3, [pc, #512]	; (8009a84 <tcp_write+0x5a4>)
 8009882:	f240 2271 	movw	r2, #625	; 0x271
 8009886:	4982      	ldr	r1, [pc, #520]	; (8009a90 <tcp_write+0x5b0>)
 8009888:	4880      	ldr	r0, [pc, #512]	; (8009a8c <tcp_write+0x5ac>)
 800988a:	f004 fd57 	bl	800e33c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800988e:	8b3b      	ldrh	r3, [r7, #24]
 8009890:	2201      	movs	r2, #1
 8009892:	4619      	mov	r1, r3
 8009894:	2036      	movs	r0, #54	; 0x36
 8009896:	f7fa fdad 	bl	80043f4 <pbuf_alloc>
 800989a:	6178      	str	r0, [r7, #20]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 814b 	beq.w	8009b3a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80098a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	441a      	add	r2, r3
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80098b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80098ba:	4619      	mov	r1, r3
 80098bc:	2036      	movs	r0, #54	; 0x36
 80098be:	f7fa fd99 	bl	80043f4 <pbuf_alloc>
 80098c2:	6338      	str	r0, [r7, #48]	; 0x30
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80098ca:	6978      	ldr	r0, [r7, #20]
 80098cc:	f7fb f876 	bl	80049bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80098d0:	e136      	b.n	8009b40 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80098d2:	6979      	ldr	r1, [r7, #20]
 80098d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d6:	f7fb f933 	bl	8004b40 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80098da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098dc:	f7fb f8f6 	bl	8004acc <pbuf_clen>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098e8:	4413      	add	r3, r2
 80098ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80098ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098f2:	2b09      	cmp	r3, #9
 80098f4:	d903      	bls.n	80098fe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80098f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f8:	f7fb f860 	bl	80049bc <pbuf_free>
      goto memerr;
 80098fc:	e120      	b.n	8009b40 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009906:	441a      	add	r2, r3
 8009908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	4613      	mov	r3, r2
 8009910:	2200      	movs	r2, #0
 8009912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff fc51 	bl	80091bc <tcp_create_segment>
 800991a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 810d 	beq.w	8009b3e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <tcp_write+0x450>
      queue = seg;
 800992a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800992c:	647b      	str	r3, [r7, #68]	; 0x44
 800992e:	e00c      	b.n	800994a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009932:	2b00      	cmp	r3, #0
 8009934:	d106      	bne.n	8009944 <tcp_write+0x464>
 8009936:	4b53      	ldr	r3, [pc, #332]	; (8009a84 <tcp_write+0x5a4>)
 8009938:	f240 22ab 	movw	r2, #683	; 0x2ab
 800993c:	4955      	ldr	r1, [pc, #340]	; (8009a94 <tcp_write+0x5b4>)
 800993e:	4853      	ldr	r0, [pc, #332]	; (8009a8c <tcp_write+0x5ac>)
 8009940:	f004 fcfc 	bl	800e33c <iprintf>
      prev_seg->next = seg;
 8009944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009948:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800994a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800994c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800994e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009952:	8b3b      	ldrh	r3, [r7, #24]
 8009954:	4413      	add	r3, r2
 8009956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800995a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800995e:	88fb      	ldrh	r3, [r7, #6]
 8009960:	429a      	cmp	r2, r3
 8009962:	f4ff af3d 	bcc.w	80097e0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009966:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02c      	beq.n	80099c6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800996c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009972:	e01e      	b.n	80099b2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	891a      	ldrh	r2, [r3, #8]
 8009978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800997a:	4413      	add	r3, r2
 800997c:	b29a      	uxth	r2, r3
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d110      	bne.n	80099ac <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009990:	8952      	ldrh	r2, [r2, #10]
 8009992:	4413      	add	r3, r2
 8009994:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	4618      	mov	r0, r3
 800999a:	f004 fcb9 	bl	800e310 <memcpy>
        p->len += oversize_used;
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	895a      	ldrh	r2, [r3, #10]
 80099a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80099a4:	4413      	add	r3, r2
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1dd      	bne.n	8009974 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80099b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ba:	891a      	ldrh	r2, [r3, #8]
 80099bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80099be:	4413      	add	r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80099c6:	8a7a      	ldrh	r2, [r7, #18]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80099ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d018      	beq.n	8009a06 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80099d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <tcp_write+0x508>
 80099da:	4b2a      	ldr	r3, [pc, #168]	; (8009a84 <tcp_write+0x5a4>)
 80099dc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80099e0:	492d      	ldr	r1, [pc, #180]	; (8009a98 <tcp_write+0x5b8>)
 80099e2:	482a      	ldr	r0, [pc, #168]	; (8009a8c <tcp_write+0x5ac>)
 80099e4:	f004 fcaa 	bl	800e33c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80099e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fb f8a6 	bl	8004b40 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80099f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f6:	891a      	ldrh	r2, [r3, #8]
 80099f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fa:	891b      	ldrh	r3, [r3, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a02:	811a      	strh	r2, [r3, #8]
 8009a04:	e037      	b.n	8009a76 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8009a06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d034      	beq.n	8009a76 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <tcp_write+0x53a>
 8009a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <tcp_write+0x548>
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <tcp_write+0x5a4>)
 8009a1c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8009a20:	491e      	ldr	r1, [pc, #120]	; (8009a9c <tcp_write+0x5bc>)
 8009a22:	481a      	ldr	r0, [pc, #104]	; (8009a8c <tcp_write+0x5ac>)
 8009a24:	f004 fc8a 	bl	800e33c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a2e:	e009      	b.n	8009a44 <tcp_write+0x564>
      p->tot_len += extendlen;
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	891a      	ldrh	r2, [r3, #8]
 8009a34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a36:	4413      	add	r3, r2
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f1      	bne.n	8009a30 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	891a      	ldrh	r2, [r3, #8]
 8009a50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a52:	4413      	add	r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	895a      	ldrh	r2, [r3, #10]
 8009a5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a60:	4413      	add	r3, r2
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a6a:	891a      	ldrh	r2, [r3, #8]
 8009a6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a6e:	4413      	add	r3, r2
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a74:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8009a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d111      	bne.n	8009aa0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a80:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a82:	e010      	b.n	8009aa6 <tcp_write+0x5c6>
 8009a84:	08010b08 	.word	0x08010b08
 8009a88:	08010da8 	.word	0x08010da8
 8009a8c:	08010b5c 	.word	0x08010b5c
 8009a90:	08010de8 	.word	0x08010de8
 8009a94:	08010df8 	.word	0x08010df8
 8009a98:	08010e0c 	.word	0x08010e0c
 8009a9c:	08010e44 	.word	0x08010e44
  } else {
    last_unsent->next = queue;
 8009aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aa4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	441a      	add	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009aca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <tcp_write+0x616>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d106      	bne.n	8009af6 <tcp_write+0x616>
 8009ae8:	4b2c      	ldr	r3, [pc, #176]	; (8009b9c <tcp_write+0x6bc>)
 8009aea:	f240 3212 	movw	r2, #786	; 0x312
 8009aee:	492c      	ldr	r1, [pc, #176]	; (8009ba0 <tcp_write+0x6c0>)
 8009af0:	482c      	ldr	r0, [pc, #176]	; (8009ba4 <tcp_write+0x6c4>)
 8009af2:	f004 fc23 	bl	800e33c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8009af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d016      	beq.n	8009b2a <tcp_write+0x64a>
 8009afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d012      	beq.n	8009b2a <tcp_write+0x64a>
 8009b04:	797b      	ldrb	r3, [r7, #5]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10d      	bne.n	8009b2a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	899b      	ldrh	r3, [r3, #12]
 8009b14:	b29c      	uxth	r4, r3
 8009b16:	2008      	movs	r0, #8
 8009b18:	f7f9 fcb1 	bl	800347e <lwip_htons>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	4322      	orrs	r2, r4
 8009b26:	b292      	uxth	r2, r2
 8009b28:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e031      	b.n	8009b92 <tcp_write+0x6b2>
          goto memerr;
 8009b2e:	bf00      	nop
 8009b30:	e006      	b.n	8009b40 <tcp_write+0x660>
            goto memerr;
 8009b32:	bf00      	nop
 8009b34:	e004      	b.n	8009b40 <tcp_write+0x660>
        goto memerr;
 8009b36:	bf00      	nop
 8009b38:	e002      	b.n	8009b40 <tcp_write+0x660>
        goto memerr;
 8009b3a:	bf00      	nop
 8009b3c:	e000      	b.n	8009b40 <tcp_write+0x660>
      goto memerr;
 8009b3e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8b5b      	ldrh	r3, [r3, #26]
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8009b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8009b54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b56:	f7fa ff31 	bl	80049bc <pbuf_free>
  }
  if (queue != NULL) {
 8009b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <tcp_write+0x686>
    tcp_segs_free(queue);
 8009b60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b62:	f7fc fb53 	bl	800620c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00e      	beq.n	8009b8e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <tcp_write+0x6ae>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <tcp_write+0x6ae>
 8009b80:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <tcp_write+0x6bc>)
 8009b82:	f240 3227 	movw	r2, #807	; 0x327
 8009b86:	4906      	ldr	r1, [pc, #24]	; (8009ba0 <tcp_write+0x6c0>)
 8009b88:	4806      	ldr	r0, [pc, #24]	; (8009ba4 <tcp_write+0x6c4>)
 8009b8a:	f004 fbd7 	bl	800e33c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	375c      	adds	r7, #92	; 0x5c
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd90      	pop	{r4, r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	08010b08 	.word	0x08010b08
 8009ba0:	08010e7c 	.word	0x08010e7c
 8009ba4:	08010b5c 	.word	0x08010b5c

08009ba8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b08b      	sub	sp, #44	; 0x2c
 8009bac:	af02      	add	r7, sp, #8
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <tcp_split_unsent_seg+0x2c>
 8009bc6:	4b95      	ldr	r3, [pc, #596]	; (8009e1c <tcp_split_unsent_seg+0x274>)
 8009bc8:	f240 324b 	movw	r2, #843	; 0x34b
 8009bcc:	4994      	ldr	r1, [pc, #592]	; (8009e20 <tcp_split_unsent_seg+0x278>)
 8009bce:	4895      	ldr	r0, [pc, #596]	; (8009e24 <tcp_split_unsent_seg+0x27c>)
 8009bd0:	f004 fbb4 	bl	800e33c <iprintf>

  useg = pcb->unsent;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	e116      	b.n	8009e14 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009be6:	887b      	ldrh	r3, [r7, #2]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d109      	bne.n	8009c00 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009bec:	4b8b      	ldr	r3, [pc, #556]	; (8009e1c <tcp_split_unsent_seg+0x274>)
 8009bee:	f240 3253 	movw	r2, #851	; 0x353
 8009bf2:	498d      	ldr	r1, [pc, #564]	; (8009e28 <tcp_split_unsent_seg+0x280>)
 8009bf4:	488b      	ldr	r0, [pc, #556]	; (8009e24 <tcp_split_unsent_seg+0x27c>)
 8009bf6:	f004 fba1 	bl	800e33c <iprintf>
    return ERR_VAL;
 8009bfa:	f06f 0305 	mvn.w	r3, #5
 8009bfe:	e109      	b.n	8009e14 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	891b      	ldrh	r3, [r3, #8]
 8009c04:	887a      	ldrh	r2, [r7, #2]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d301      	bcc.n	8009c0e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e102      	b.n	8009e14 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c12:	887a      	ldrh	r2, [r7, #2]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d906      	bls.n	8009c26 <tcp_split_unsent_seg+0x7e>
 8009c18:	4b80      	ldr	r3, [pc, #512]	; (8009e1c <tcp_split_unsent_seg+0x274>)
 8009c1a:	f240 325b 	movw	r2, #859	; 0x35b
 8009c1e:	4983      	ldr	r1, [pc, #524]	; (8009e2c <tcp_split_unsent_seg+0x284>)
 8009c20:	4880      	ldr	r0, [pc, #512]	; (8009e24 <tcp_split_unsent_seg+0x27c>)
 8009c22:	f004 fb8b 	bl	800e33c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	891b      	ldrh	r3, [r3, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <tcp_split_unsent_seg+0x94>
 8009c2e:	4b7b      	ldr	r3, [pc, #492]	; (8009e1c <tcp_split_unsent_seg+0x274>)
 8009c30:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009c34:	497e      	ldr	r1, [pc, #504]	; (8009e30 <tcp_split_unsent_seg+0x288>)
 8009c36:	487b      	ldr	r0, [pc, #492]	; (8009e24 <tcp_split_unsent_seg+0x27c>)
 8009c38:	f004 fb80 	bl	800e33c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	7a9b      	ldrb	r3, [r3, #10]
 8009c40:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	891a      	ldrh	r2, [r3, #8]
 8009c52:	887b      	ldrh	r3, [r7, #2]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	89bb      	ldrh	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c66:	4619      	mov	r1, r3
 8009c68:	2036      	movs	r0, #54	; 0x36
 8009c6a:	f7fa fbc3 	bl	80043f4 <pbuf_alloc>
 8009c6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80b7 	beq.w	8009de6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	891a      	ldrh	r2, [r3, #8]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	891b      	ldrh	r3, [r3, #8]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	887b      	ldrh	r3, [r7, #2]
 8009c88:	4413      	add	r3, r2
 8009c8a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	6858      	ldr	r0, [r3, #4]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	18d1      	adds	r1, r2, r3
 8009c98:	897b      	ldrh	r3, [r7, #10]
 8009c9a:	89ba      	ldrh	r2, [r7, #12]
 8009c9c:	f7fb f888 	bl	8004db0 <pbuf_copy_partial>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	89bb      	ldrh	r3, [r7, #12]
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	f040 809f 	bne.w	8009dea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	899b      	ldrh	r3, [r3, #12]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7f9 fbe2 	bl	800347e <lwip_htons>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cc2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009cc8:	7efb      	ldrb	r3, [r7, #27]
 8009cca:	f003 0308 	and.w	r3, r3, #8
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009cd2:	7efb      	ldrb	r3, [r7, #27]
 8009cd4:	f023 0308 	bic.w	r3, r3, #8
 8009cd8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009cda:	7ebb      	ldrb	r3, [r7, #26]
 8009cdc:	f043 0308 	orr.w	r3, r3, #8
 8009ce0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009ce2:	7efb      	ldrb	r3, [r7, #27]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009cec:	7efb      	ldrb	r3, [r7, #27]
 8009cee:	f023 0301 	bic.w	r3, r3, #1
 8009cf2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009cf4:	7ebb      	ldrb	r3, [r7, #26]
 8009cf6:	f043 0301 	orr.w	r3, r3, #1
 8009cfa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f9 fbd0 	bl	80034a8 <lwip_htonl>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	887b      	ldrh	r3, [r7, #2]
 8009d0c:	18d1      	adds	r1, r2, r3
 8009d0e:	7eba      	ldrb	r2, [r7, #26]
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	460b      	mov	r3, r1
 8009d16:	6939      	ldr	r1, [r7, #16]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff fa4f 	bl	80091bc <tcp_create_segment>
 8009d1e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d063      	beq.n	8009dee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fa fece 	bl	8004acc <pbuf_clen>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	6858      	ldr	r0, [r3, #4]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	891a      	ldrh	r2, [r3, #8]
 8009d4e:	89bb      	ldrh	r3, [r7, #12]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	4619      	mov	r1, r3
 8009d56:	f7fa fcab 	bl	80046b0 <pbuf_realloc>
  useg->len -= remainder;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	891a      	ldrh	r2, [r3, #8]
 8009d5e:	89bb      	ldrh	r3, [r7, #12]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	899b      	ldrh	r3, [r3, #12]
 8009d6e:	b29c      	uxth	r4, r3
 8009d70:	7efb      	ldrb	r3, [r7, #27]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7f9 fb82 	bl	800347e <lwip_htons>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	4322      	orrs	r2, r4
 8009d84:	b292      	uxth	r2, r2
 8009d86:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fa fe9d 	bl	8004acc <pbuf_clen>
 8009d92:	4603      	mov	r3, r0
 8009d94:	461a      	mov	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d9c:	4413      	add	r3, r2
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fa fe8e 	bl	8004acc <pbuf_clen>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dba:	4413      	add	r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d103      	bne.n	8009de2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e016      	b.n	8009e14 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009de6:	bf00      	nop
 8009de8:	e002      	b.n	8009df0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009dea:	bf00      	nop
 8009dec:	e000      	b.n	8009df0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009dee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d006      	beq.n	8009e04 <tcp_split_unsent_seg+0x25c>
 8009df6:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <tcp_split_unsent_seg+0x274>)
 8009df8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009dfc:	490d      	ldr	r1, [pc, #52]	; (8009e34 <tcp_split_unsent_seg+0x28c>)
 8009dfe:	4809      	ldr	r0, [pc, #36]	; (8009e24 <tcp_split_unsent_seg+0x27c>)
 8009e00:	f004 fa9c 	bl	800e33c <iprintf>
  if (p != NULL) {
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009e0a:	6938      	ldr	r0, [r7, #16]
 8009e0c:	f7fa fdd6 	bl	80049bc <pbuf_free>
  }

  return ERR_MEM;
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3724      	adds	r7, #36	; 0x24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd90      	pop	{r4, r7, pc}
 8009e1c:	08010b08 	.word	0x08010b08
 8009e20:	08010e9c 	.word	0x08010e9c
 8009e24:	08010b5c 	.word	0x08010b5c
 8009e28:	08010ec0 	.word	0x08010ec0
 8009e2c:	08010ee4 	.word	0x08010ee4
 8009e30:	08010ef4 	.word	0x08010ef4
 8009e34:	08010f04 	.word	0x08010f04

08009e38 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009e38:	b590      	push	{r4, r7, lr}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <tcp_send_fin+0x1c>
 8009e46:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <tcp_send_fin+0x94>)
 8009e48:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009e4c:	4920      	ldr	r1, [pc, #128]	; (8009ed0 <tcp_send_fin+0x98>)
 8009e4e:	4821      	ldr	r0, [pc, #132]	; (8009ed4 <tcp_send_fin+0x9c>)
 8009e50:	f004 fa74 	bl	800e33c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d02e      	beq.n	8009eba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	e002      	b.n	8009e6a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f8      	bne.n	8009e64 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	899b      	ldrh	r3, [r3, #12]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f9 faff 	bl	800347e <lwip_htons>
 8009e80:	4603      	mov	r3, r0
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d116      	bne.n	8009eba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	899b      	ldrh	r3, [r3, #12]
 8009e92:	b29c      	uxth	r4, r3
 8009e94:	2001      	movs	r0, #1
 8009e96:	f7f9 faf2 	bl	800347e <lwip_htons>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	4322      	orrs	r2, r4
 8009ea4:	b292      	uxth	r2, r2
 8009ea6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	8b5b      	ldrh	r3, [r3, #26]
 8009eac:	f043 0320 	orr.w	r3, r3, #32
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e004      	b.n	8009ec4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009eba:	2101      	movs	r1, #1
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f80b 	bl	8009ed8 <tcp_enqueue_flags>
 8009ec2:	4603      	mov	r3, r0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd90      	pop	{r4, r7, pc}
 8009ecc:	08010b08 	.word	0x08010b08
 8009ed0:	08010f10 	.word	0x08010f10
 8009ed4:	08010b5c 	.word	0x08010b5c

08009ed8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	; 0x28
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <tcp_enqueue_flags+0x2c>
 8009ef6:	4b67      	ldr	r3, [pc, #412]	; (800a094 <tcp_enqueue_flags+0x1bc>)
 8009ef8:	f240 4211 	movw	r2, #1041	; 0x411
 8009efc:	4966      	ldr	r1, [pc, #408]	; (800a098 <tcp_enqueue_flags+0x1c0>)
 8009efe:	4867      	ldr	r0, [pc, #412]	; (800a09c <tcp_enqueue_flags+0x1c4>)
 8009f00:	f004 fa1c 	bl	800e33c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <tcp_enqueue_flags+0x40>
 8009f0a:	4b62      	ldr	r3, [pc, #392]	; (800a094 <tcp_enqueue_flags+0x1bc>)
 8009f0c:	f240 4213 	movw	r2, #1043	; 0x413
 8009f10:	4963      	ldr	r1, [pc, #396]	; (800a0a0 <tcp_enqueue_flags+0x1c8>)
 8009f12:	4862      	ldr	r0, [pc, #392]	; (800a09c <tcp_enqueue_flags+0x1c4>)
 8009f14:	f004 fa12 	bl	800e33c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009f22:	2301      	movs	r3, #1
 8009f24:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009f26:	7ffb      	ldrb	r3, [r7, #31]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	2036      	movs	r0, #54	; 0x36
 8009f3e:	f7fa fa59 	bl	80043f4 <pbuf_alloc>
 8009f42:	6138      	str	r0, [r7, #16]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	8b5b      	ldrh	r3, [r3, #26]
 8009f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009f58:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5c:	e095      	b.n	800a08a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	895a      	ldrh	r2, [r3, #10]
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d206      	bcs.n	8009f78 <tcp_enqueue_flags+0xa0>
 8009f6a:	4b4a      	ldr	r3, [pc, #296]	; (800a094 <tcp_enqueue_flags+0x1bc>)
 8009f6c:	f240 4239 	movw	r2, #1081	; 0x439
 8009f70:	494c      	ldr	r1, [pc, #304]	; (800a0a4 <tcp_enqueue_flags+0x1cc>)
 8009f72:	484a      	ldr	r0, [pc, #296]	; (800a09c <tcp_enqueue_flags+0x1c4>)
 8009f74:	f004 f9e2 	bl	800e33c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	7ffb      	ldrb	r3, [r7, #31]
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	460b      	mov	r3, r1
 8009f84:	6939      	ldr	r1, [r7, #16]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff f918 	bl	80091bc <tcp_create_segment>
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	8b5b      	ldrh	r3, [r3, #26]
 8009f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa6:	e070      	b.n	800a08a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d006      	beq.n	8009fc2 <tcp_enqueue_flags+0xea>
 8009fb4:	4b37      	ldr	r3, [pc, #220]	; (800a094 <tcp_enqueue_flags+0x1bc>)
 8009fb6:	f240 4242 	movw	r2, #1090	; 0x442
 8009fba:	493b      	ldr	r1, [pc, #236]	; (800a0a8 <tcp_enqueue_flags+0x1d0>)
 8009fbc:	4837      	ldr	r0, [pc, #220]	; (800a09c <tcp_enqueue_flags+0x1c4>)
 8009fbe:	f004 f9bd 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d006      	beq.n	8009fd8 <tcp_enqueue_flags+0x100>
 8009fca:	4b32      	ldr	r3, [pc, #200]	; (800a094 <tcp_enqueue_flags+0x1bc>)
 8009fcc:	f240 4243 	movw	r2, #1091	; 0x443
 8009fd0:	4936      	ldr	r1, [pc, #216]	; (800a0ac <tcp_enqueue_flags+0x1d4>)
 8009fd2:	4832      	ldr	r0, [pc, #200]	; (800a09c <tcp_enqueue_flags+0x1c4>)
 8009fd4:	f004 f9b2 	bl	800e33c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d103      	bne.n	8009fe8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009fe6:	e00d      	b.n	800a004 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	e002      	b.n	8009ff6 <tcp_enqueue_flags+0x11e>
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f8      	bne.n	8009ff0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d104      	bne.n	800a020 <tcp_enqueue_flags+0x148>
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d006      	beq.n	800a042 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8b5b      	ldrh	r3, [r3, #26]
 800a038:	f043 0320 	orr.w	r3, r3, #32
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	4618      	mov	r0, r3
 800a048:	f7fa fd40 	bl	8004acc <pbuf_clen>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a056:	4413      	add	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00e      	beq.n	800a088 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <tcp_enqueue_flags+0x1b0>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <tcp_enqueue_flags+0x1b0>
 800a07a:	4b06      	ldr	r3, [pc, #24]	; (800a094 <tcp_enqueue_flags+0x1bc>)
 800a07c:	f240 4265 	movw	r2, #1125	; 0x465
 800a080:	490b      	ldr	r1, [pc, #44]	; (800a0b0 <tcp_enqueue_flags+0x1d8>)
 800a082:	4806      	ldr	r0, [pc, #24]	; (800a09c <tcp_enqueue_flags+0x1c4>)
 800a084:	f004 f95a 	bl	800e33c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	08010b08 	.word	0x08010b08
 800a098:	08010f2c 	.word	0x08010f2c
 800a09c:	08010b5c 	.word	0x08010b5c
 800a0a0:	08010f84 	.word	0x08010f84
 800a0a4:	08010fa4 	.word	0x08010fa4
 800a0a8:	08010fe0 	.word	0x08010fe0
 800a0ac:	08010ff8 	.word	0x08010ff8
 800a0b0:	08011024 	.word	0x08011024

0800a0b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a0b4:	b5b0      	push	{r4, r5, r7, lr}
 800a0b6:	b08a      	sub	sp, #40	; 0x28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d106      	bne.n	800a0d0 <tcp_output+0x1c>
 800a0c2:	4b8a      	ldr	r3, [pc, #552]	; (800a2ec <tcp_output+0x238>)
 800a0c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a0c8:	4989      	ldr	r1, [pc, #548]	; (800a2f0 <tcp_output+0x23c>)
 800a0ca:	488a      	ldr	r0, [pc, #552]	; (800a2f4 <tcp_output+0x240>)
 800a0cc:	f004 f936 	bl	800e33c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7d1b      	ldrb	r3, [r3, #20]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d106      	bne.n	800a0e6 <tcp_output+0x32>
 800a0d8:	4b84      	ldr	r3, [pc, #528]	; (800a2ec <tcp_output+0x238>)
 800a0da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a0de:	4986      	ldr	r1, [pc, #536]	; (800a2f8 <tcp_output+0x244>)
 800a0e0:	4884      	ldr	r0, [pc, #528]	; (800a2f4 <tcp_output+0x240>)
 800a0e2:	f004 f92b 	bl	800e33c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a0e6:	4b85      	ldr	r3, [pc, #532]	; (800a2fc <tcp_output+0x248>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d101      	bne.n	800a0f4 <tcp_output+0x40>
    return ERR_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e1ce      	b.n	800a492 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a100:	4293      	cmp	r3, r2
 800a102:	bf28      	it	cs
 800a104:	4613      	movcs	r3, r2
 800a106:	b29b      	uxth	r3, r3
 800a108:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10b      	bne.n	800a12e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8b5b      	ldrh	r3, [r3, #26]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 81aa 	beq.w	800a478 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fdcb 	bl	800acc0 <tcp_send_empty_ack>
 800a12a:	4603      	mov	r3, r0
 800a12c:	e1b1      	b.n	800a492 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	461a      	mov	r2, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff f824 	bl	8009184 <tcp_route>
 800a13c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <tcp_output+0x96>
    return ERR_RTE;
 800a144:	f06f 0303 	mvn.w	r3, #3
 800a148:	e1a3      	b.n	800a492 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d003      	beq.n	800a158 <tcp_output+0xa4>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d111      	bne.n	800a17c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <tcp_output+0xb0>
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	3304      	adds	r3, #4
 800a162:	e000      	b.n	800a166 <tcp_output+0xb2>
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <tcp_output+0xc0>
      return ERR_RTE;
 800a16e:	f06f 0303 	mvn.w	r3, #3
 800a172:	e18e      	b.n	800a492 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	4618      	mov	r0, r3
 800a184:	f7f9 f990 	bl	80034a8 <lwip_htonl>
 800a188:	4602      	mov	r2, r0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a192:	8912      	ldrh	r2, [r2, #8]
 800a194:	4413      	add	r3, r2
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d227      	bcs.n	800a1ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d114      	bne.n	800a1d4 <tcp_output+0x120>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d110      	bne.n	800a1d4 <tcp_output+0x120>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8b5b      	ldrh	r3, [r3, #26]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 814d 	beq.w	800a47c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fd6c 	bl	800acc0 <tcp_send_empty_ack>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	e152      	b.n	800a492 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 811c 	beq.w	800a43a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a202:	e002      	b.n	800a20a <tcp_output+0x156>
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	623b      	str	r3, [r7, #32]
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f8      	bne.n	800a204 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a212:	e112      	b.n	800a43a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	899b      	ldrh	r3, [r3, #12]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f9 f92e 	bl	800347e <lwip_htons>
 800a222:	4603      	mov	r3, r0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d006      	beq.n	800a23c <tcp_output+0x188>
 800a22e:	4b2f      	ldr	r3, [pc, #188]	; (800a2ec <tcp_output+0x238>)
 800a230:	f240 5236 	movw	r2, #1334	; 0x536
 800a234:	4932      	ldr	r1, [pc, #200]	; (800a300 <tcp_output+0x24c>)
 800a236:	482f      	ldr	r0, [pc, #188]	; (800a2f4 <tcp_output+0x240>)
 800a238:	f004 f880 	bl	800e33c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01f      	beq.n	800a284 <tcp_output+0x1d0>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	8b5b      	ldrh	r3, [r3, #26]
 800a248:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d119      	bne.n	800a284 <tcp_output+0x1d0>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00b      	beq.n	800a270 <tcp_output+0x1bc>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d110      	bne.n	800a284 <tcp_output+0x1d0>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a266:	891a      	ldrh	r2, [r3, #8]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d209      	bcs.n	800a284 <tcp_output+0x1d0>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a276:	2b00      	cmp	r3, #0
 800a278:	d004      	beq.n	800a284 <tcp_output+0x1d0>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a280:	2b08      	cmp	r3, #8
 800a282:	d901      	bls.n	800a288 <tcp_output+0x1d4>
 800a284:	2301      	movs	r3, #1
 800a286:	e000      	b.n	800a28a <tcp_output+0x1d6>
 800a288:	2300      	movs	r3, #0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8b5b      	ldrh	r3, [r3, #26]
 800a292:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 80e4 	beq.w	800a464 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	7d1b      	ldrb	r3, [r3, #20]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d00d      	beq.n	800a2c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	899b      	ldrh	r3, [r3, #12]
 800a2aa:	b29c      	uxth	r4, r3
 800a2ac:	2010      	movs	r0, #16
 800a2ae:	f7f9 f8e6 	bl	800347e <lwip_htons>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	4322      	orrs	r2, r4
 800a2bc:	b292      	uxth	r2, r2
 800a2be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2c6:	f000 f909 	bl	800a4dc <tcp_output_segment>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d016      	beq.n	800a304 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	8b5b      	ldrh	r3, [r3, #26]
 800a2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	835a      	strh	r2, [r3, #26]
      return err;
 800a2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e8:	e0d3      	b.n	800a492 <tcp_output+0x3de>
 800a2ea:	bf00      	nop
 800a2ec:	08010b08 	.word	0x08010b08
 800a2f0:	0801104c 	.word	0x0801104c
 800a2f4:	08010b5c 	.word	0x08010b5c
 800a2f8:	08011064 	.word	0x08011064
 800a2fc:	2000678c 	.word	0x2000678c
 800a300:	0801108c 	.word	0x0801108c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7d1b      	ldrb	r3, [r3, #20]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d006      	beq.n	800a322 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8b5b      	ldrh	r3, [r3, #26]
 800a318:	f023 0303 	bic.w	r3, r3, #3
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7f9 f8bd 	bl	80034a8 <lwip_htonl>
 800a32e:	4604      	mov	r4, r0
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	891b      	ldrh	r3, [r3, #8]
 800a334:	461d      	mov	r5, r3
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	899b      	ldrh	r3, [r3, #12]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f9 f89d 	bl	800347e <lwip_htons>
 800a344:	4603      	mov	r3, r0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0303 	and.w	r3, r3, #3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <tcp_output+0x2a0>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <tcp_output+0x2a2>
 800a354:	2300      	movs	r3, #0
 800a356:	442b      	add	r3, r5
 800a358:	4423      	add	r3, r4
 800a35a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	da02      	bge.n	800a36e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	891b      	ldrh	r3, [r3, #8]
 800a372:	461c      	mov	r4, r3
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	899b      	ldrh	r3, [r3, #12]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f9 f87e 	bl	800347e <lwip_htons>
 800a382:	4603      	mov	r3, r0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <tcp_output+0x2de>
 800a38e:	2301      	movs	r3, #1
 800a390:	e000      	b.n	800a394 <tcp_output+0x2e0>
 800a392:	2300      	movs	r3, #0
 800a394:	4423      	add	r3, r4
 800a396:	2b00      	cmp	r3, #0
 800a398:	d049      	beq.n	800a42e <tcp_output+0x37a>
      seg->next = NULL;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d105      	bne.n	800a3b4 <tcp_output+0x300>
        pcb->unacked = seg;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	623b      	str	r3, [r7, #32]
 800a3b2:	e03f      	b.n	800a434 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f9 f874 	bl	80034a8 <lwip_htonl>
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7f9 f86d 	bl	80034a8 <lwip_htonl>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	1ae3      	subs	r3, r4, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da24      	bge.n	800a420 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3370      	adds	r3, #112	; 0x70
 800a3da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a3dc:	e002      	b.n	800a3e4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d011      	beq.n	800a410 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7f9 f857 	bl	80034a8 <lwip_htonl>
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	f7f9 f850 	bl	80034a8 <lwip_htonl>
 800a408:	4603      	mov	r3, r0
 800a40a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dbe6      	blt.n	800a3de <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	e009      	b.n	800a434 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a424:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	623b      	str	r3, [r7, #32]
 800a42c:	e002      	b.n	800a434 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a42e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a430:	f7fb ff01 	bl	8006236 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d012      	beq.n	800a466 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	4618      	mov	r0, r3
 800a448:	f7f9 f82e 	bl	80034a8 <lwip_htonl>
 800a44c:	4602      	mov	r2, r0
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a456:	8912      	ldrh	r2, [r2, #8]
 800a458:	4413      	add	r3, r2
  while (seg != NULL &&
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	f4bf aed9 	bcs.w	800a214 <tcp_output+0x160>
 800a462:	e000      	b.n	800a466 <tcp_output+0x3b2>
      break;
 800a464:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d108      	bne.n	800a480 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a476:	e004      	b.n	800a482 <tcp_output+0x3ce>
    goto output_done;
 800a478:	bf00      	nop
 800a47a:	e002      	b.n	800a482 <tcp_output+0x3ce>
    goto output_done;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a480:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	8b5b      	ldrh	r3, [r3, #26]
 800a486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3728      	adds	r7, #40	; 0x28
 800a496:	46bd      	mov	sp, r7
 800a498:	bdb0      	pop	{r4, r5, r7, pc}
 800a49a:	bf00      	nop

0800a49c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <tcp_output_segment_busy+0x1c>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <tcp_output_segment_busy+0x34>)
 800a4ac:	f240 529a 	movw	r2, #1434	; 0x59a
 800a4b0:	4908      	ldr	r1, [pc, #32]	; (800a4d4 <tcp_output_segment_busy+0x38>)
 800a4b2:	4809      	ldr	r0, [pc, #36]	; (800a4d8 <tcp_output_segment_busy+0x3c>)
 800a4b4:	f003 ff42 	bl	800e33c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	7b9b      	ldrb	r3, [r3, #14]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d001      	beq.n	800a4c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	08010b08 	.word	0x08010b08
 800a4d4:	080110a4 	.word	0x080110a4
 800a4d8:	08010b5c 	.word	0x08010b5c

0800a4dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a4dc:	b5b0      	push	{r4, r5, r7, lr}
 800a4de:	b08c      	sub	sp, #48	; 0x30
 800a4e0:	af04      	add	r7, sp, #16
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <tcp_output_segment+0x20>
 800a4ee:	4b63      	ldr	r3, [pc, #396]	; (800a67c <tcp_output_segment+0x1a0>)
 800a4f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a4f4:	4962      	ldr	r1, [pc, #392]	; (800a680 <tcp_output_segment+0x1a4>)
 800a4f6:	4863      	ldr	r0, [pc, #396]	; (800a684 <tcp_output_segment+0x1a8>)
 800a4f8:	f003 ff20 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <tcp_output_segment+0x34>
 800a502:	4b5e      	ldr	r3, [pc, #376]	; (800a67c <tcp_output_segment+0x1a0>)
 800a504:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a508:	495f      	ldr	r1, [pc, #380]	; (800a688 <tcp_output_segment+0x1ac>)
 800a50a:	485e      	ldr	r0, [pc, #376]	; (800a684 <tcp_output_segment+0x1a8>)
 800a50c:	f003 ff16 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d106      	bne.n	800a524 <tcp_output_segment+0x48>
 800a516:	4b59      	ldr	r3, [pc, #356]	; (800a67c <tcp_output_segment+0x1a0>)
 800a518:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a51c:	495b      	ldr	r1, [pc, #364]	; (800a68c <tcp_output_segment+0x1b0>)
 800a51e:	4859      	ldr	r0, [pc, #356]	; (800a684 <tcp_output_segment+0x1a8>)
 800a520:	f003 ff0c 	bl	800e33c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff ffb9 	bl	800a49c <tcp_output_segment_busy>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	e09f      	b.n	800a674 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	68dc      	ldr	r4, [r3, #12]
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7f8 ffb3 	bl	80034a8 <lwip_htonl>
 800a542:	4603      	mov	r3, r0
 800a544:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68dc      	ldr	r4, [r3, #12]
 800a54e:	4610      	mov	r0, r2
 800a550:	f7f8 ff95 	bl	800347e <lwip_htons>
 800a554:	4603      	mov	r3, r0
 800a556:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a560:	441a      	add	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	3314      	adds	r3, #20
 800a56c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	7a9b      	ldrb	r3, [r3, #10]
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d015      	beq.n	800a5a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	3304      	adds	r3, #4
 800a57e:	461a      	mov	r2, r3
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a586:	f7fc fa33 	bl	80069f0 <tcp_eff_send_mss_netif>
 800a58a:	4603      	mov	r3, r0
 800a58c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a58e:	8b7b      	ldrh	r3, [r7, #26]
 800a590:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a594:	4618      	mov	r0, r3
 800a596:	f7f8 ff87 	bl	80034a8 <lwip_htonl>
 800a59a:	4602      	mov	r2, r0
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da02      	bge.n	800a5b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10c      	bne.n	800a5d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a5be:	4b34      	ldr	r3, [pc, #208]	; (800a690 <tcp_output_segment+0x1b4>)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f8 ff6b 	bl	80034a8 <lwip_htonl>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	8959      	ldrh	r1, [r3, #10]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	8b3a      	ldrh	r2, [r7, #24]
 800a5f2:	1a8a      	subs	r2, r1, r2
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	8919      	ldrh	r1, [r3, #8]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	8b3a      	ldrh	r2, [r7, #24]
 800a604:	1a8a      	subs	r2, r1, r2
 800a606:	b292      	uxth	r2, r2
 800a608:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	68d2      	ldr	r2, [r2, #12]
 800a612:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	741a      	strb	r2, [r3, #16]
 800a61c:	2200      	movs	r2, #0
 800a61e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	f103 0214 	add.w	r2, r3, #20
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	7a9b      	ldrb	r3, [r3, #10]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	f003 0304 	and.w	r3, r3, #4
 800a632:	4413      	add	r3, r2
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	429a      	cmp	r2, r3
 800a638:	d006      	beq.n	800a648 <tcp_output_segment+0x16c>
 800a63a:	4b10      	ldr	r3, [pc, #64]	; (800a67c <tcp_output_segment+0x1a0>)
 800a63c:	f240 621c 	movw	r2, #1564	; 0x61c
 800a640:	4914      	ldr	r1, [pc, #80]	; (800a694 <tcp_output_segment+0x1b8>)
 800a642:	4810      	ldr	r0, [pc, #64]	; (800a684 <tcp_output_segment+0x1a8>)
 800a644:	f003 fe7a 	bl	800e33c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6858      	ldr	r0, [r3, #4]
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	1d1c      	adds	r4, r3, #4
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	7add      	ldrb	r5, [r3, #11]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	7a9b      	ldrb	r3, [r3, #10]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	9202      	str	r2, [sp, #8]
 800a65e:	2206      	movs	r2, #6
 800a660:	9201      	str	r2, [sp, #4]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	462b      	mov	r3, r5
 800a666:	4622      	mov	r2, r4
 800a668:	f002 fdf0 	bl	800d24c <ip4_output_if>
 800a66c:	4603      	mov	r3, r0
 800a66e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a670:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3720      	adds	r7, #32
 800a678:	46bd      	mov	sp, r7
 800a67a:	bdb0      	pop	{r4, r5, r7, pc}
 800a67c:	08010b08 	.word	0x08010b08
 800a680:	080110cc 	.word	0x080110cc
 800a684:	08010b5c 	.word	0x08010b5c
 800a688:	080110ec 	.word	0x080110ec
 800a68c:	0801110c 	.word	0x0801110c
 800a690:	20006740 	.word	0x20006740
 800a694:	08011130 	.word	0x08011130

0800a698 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a698:	b5b0      	push	{r4, r5, r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <tcp_rexmit_rto_prepare+0x1c>
 800a6a6:	4b31      	ldr	r3, [pc, #196]	; (800a76c <tcp_rexmit_rto_prepare+0xd4>)
 800a6a8:	f240 6263 	movw	r2, #1635	; 0x663
 800a6ac:	4930      	ldr	r1, [pc, #192]	; (800a770 <tcp_rexmit_rto_prepare+0xd8>)
 800a6ae:	4831      	ldr	r0, [pc, #196]	; (800a774 <tcp_rexmit_rto_prepare+0xdc>)
 800a6b0:	f003 fe44 	bl	800e33c <iprintf>

  if (pcb->unacked == NULL) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a6bc:	f06f 0305 	mvn.w	r3, #5
 800a6c0:	e050      	b.n	800a764 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	e00b      	b.n	800a6e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff fee6 	bl	800a49c <tcp_output_segment_busy>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a6d6:	f06f 0305 	mvn.w	r3, #5
 800a6da:	e043      	b.n	800a764 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1ef      	bne.n	800a6ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f7ff fed6 	bl	800a49c <tcp_output_segment_busy>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a6f6:	f06f 0305 	mvn.w	r3, #5
 800a6fa:	e033      	b.n	800a764 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	8b5b      	ldrh	r3, [r3, #26]
 800a716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	4618      	mov	r0, r3
 800a728:	f7f8 febe 	bl	80034a8 <lwip_htonl>
 800a72c:	4604      	mov	r4, r0
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	891b      	ldrh	r3, [r3, #8]
 800a732:	461d      	mov	r5, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	899b      	ldrh	r3, [r3, #12]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7f8 fe9e 	bl	800347e <lwip_htons>
 800a742:	4603      	mov	r3, r0
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <tcp_rexmit_rto_prepare+0xba>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <tcp_rexmit_rto_prepare+0xbc>
 800a752:	2300      	movs	r3, #0
 800a754:	442b      	add	r3, r5
 800a756:	18e2      	adds	r2, r4, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bdb0      	pop	{r4, r5, r7, pc}
 800a76c:	08010b08 	.word	0x08010b08
 800a770:	08011144 	.word	0x08011144
 800a774:	08010b5c 	.word	0x08010b5c

0800a778 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <tcp_rexmit_rto_commit+0x1c>
 800a786:	4b0d      	ldr	r3, [pc, #52]	; (800a7bc <tcp_rexmit_rto_commit+0x44>)
 800a788:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a78c:	490c      	ldr	r1, [pc, #48]	; (800a7c0 <tcp_rexmit_rto_commit+0x48>)
 800a78e:	480d      	ldr	r0, [pc, #52]	; (800a7c4 <tcp_rexmit_rto_commit+0x4c>)
 800a790:	f003 fdd4 	bl	800e33c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a79a:	2bff      	cmp	r3, #255	; 0xff
 800a79c:	d007      	beq.n	800a7ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fc80 	bl	800a0b4 <tcp_output>
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	08010b08 	.word	0x08010b08
 800a7c0:	08011168 	.word	0x08011168
 800a7c4:	08010b5c 	.word	0x08010b5c

0800a7c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <tcp_rexmit_rto+0x1c>
 800a7d6:	4b0a      	ldr	r3, [pc, #40]	; (800a800 <tcp_rexmit_rto+0x38>)
 800a7d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a7dc:	4909      	ldr	r1, [pc, #36]	; (800a804 <tcp_rexmit_rto+0x3c>)
 800a7de:	480a      	ldr	r0, [pc, #40]	; (800a808 <tcp_rexmit_rto+0x40>)
 800a7e0:	f003 fdac 	bl	800e33c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff ff57 	bl	800a698 <tcp_rexmit_rto_prepare>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ffc1 	bl	800a778 <tcp_rexmit_rto_commit>
  }
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	08010b08 	.word	0x08010b08
 800a804:	0801118c 	.word	0x0801118c
 800a808:	08010b5c 	.word	0x08010b5c

0800a80c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a80c:	b590      	push	{r4, r7, lr}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <tcp_rexmit+0x1c>
 800a81a:	4b2f      	ldr	r3, [pc, #188]	; (800a8d8 <tcp_rexmit+0xcc>)
 800a81c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a820:	492e      	ldr	r1, [pc, #184]	; (800a8dc <tcp_rexmit+0xd0>)
 800a822:	482f      	ldr	r0, [pc, #188]	; (800a8e0 <tcp_rexmit+0xd4>)
 800a824:	f003 fd8a 	bl	800e33c <iprintf>

  if (pcb->unacked == NULL) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a830:	f06f 0305 	mvn.w	r3, #5
 800a834:	e04c      	b.n	800a8d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a83c:	68b8      	ldr	r0, [r7, #8]
 800a83e:	f7ff fe2d 	bl	800a49c <tcp_output_segment_busy>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a848:	f06f 0305 	mvn.w	r3, #5
 800a84c:	e040      	b.n	800a8d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	336c      	adds	r3, #108	; 0x6c
 800a85a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a85c:	e002      	b.n	800a864 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d011      	beq.n	800a890 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	f7f8 fe17 	bl	80034a8 <lwip_htonl>
 800a87a:	4604      	mov	r4, r0
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	4618      	mov	r0, r3
 800a884:	f7f8 fe10 	bl	80034a8 <lwip_htonl>
 800a888:	4603      	mov	r3, r0
 800a88a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dbe6      	blt.n	800a85e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d103      	bne.n	800a8ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8b4:	2bff      	cmp	r3, #255	; 0xff
 800a8b6:	d007      	beq.n	800a8c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8be:	3301      	adds	r3, #1
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd90      	pop	{r4, r7, pc}
 800a8d8:	08010b08 	.word	0x08010b08
 800a8dc:	080111a8 	.word	0x080111a8
 800a8e0:	08010b5c 	.word	0x08010b5c

0800a8e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d106      	bne.n	800a900 <tcp_rexmit_fast+0x1c>
 800a8f2:	4b2a      	ldr	r3, [pc, #168]	; (800a99c <tcp_rexmit_fast+0xb8>)
 800a8f4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a8f8:	4929      	ldr	r1, [pc, #164]	; (800a9a0 <tcp_rexmit_fast+0xbc>)
 800a8fa:	482a      	ldr	r0, [pc, #168]	; (800a9a4 <tcp_rexmit_fast+0xc0>)
 800a8fc:	f003 fd1e 	bl	800e33c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a904:	2b00      	cmp	r3, #0
 800a906:	d044      	beq.n	800a992 <tcp_rexmit_fast+0xae>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	8b5b      	ldrh	r3, [r3, #26]
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d13e      	bne.n	800a992 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff ff79 	bl	800a80c <tcp_rexmit>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d138      	bne.n	800a992 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a92c:	4293      	cmp	r3, r2
 800a92e:	bf28      	it	cs
 800a930:	4613      	movcs	r3, r2
 800a932:	b29b      	uxth	r3, r3
 800a934:	0fda      	lsrs	r2, r3, #31
 800a936:	4413      	add	r3, r2
 800a938:	105b      	asrs	r3, r3, #1
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a948:	461a      	mov	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	429a      	cmp	r2, r3
 800a952:	d206      	bcs.n	800a962 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a96c:	4619      	mov	r1, r3
 800a96e:	0049      	lsls	r1, r1, #1
 800a970:	440b      	add	r3, r1
 800a972:	b29b      	uxth	r3, r3
 800a974:	4413      	add	r3, r2
 800a976:	b29a      	uxth	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8b5b      	ldrh	r3, [r3, #26]
 800a982:	f043 0304 	orr.w	r3, r3, #4
 800a986:	b29a      	uxth	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	08010b08 	.word	0x08010b08
 800a9a0:	080111c0 	.word	0x080111c0
 800a9a4:	08010b5c 	.word	0x08010b5c

0800a9a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	607b      	str	r3, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	817b      	strh	r3, [r7, #10]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a9ba:	897a      	ldrh	r2, [r7, #10]
 800a9bc:	893b      	ldrh	r3, [r7, #8]
 800a9be:	4413      	add	r3, r2
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3314      	adds	r3, #20
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	2022      	movs	r0, #34	; 0x22
 800a9ce:	f7f9 fd11 	bl	80043f4 <pbuf_alloc>
 800a9d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d04d      	beq.n	800aa76 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a9da:	897b      	ldrh	r3, [r7, #10]
 800a9dc:	3313      	adds	r3, #19
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	8952      	ldrh	r2, [r2, #10]
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	db06      	blt.n	800a9f4 <tcp_output_alloc_header_common+0x4c>
 800a9e6:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <tcp_output_alloc_header_common+0xd8>)
 800a9e8:	f240 7223 	movw	r2, #1827	; 0x723
 800a9ec:	4925      	ldr	r1, [pc, #148]	; (800aa84 <tcp_output_alloc_header_common+0xdc>)
 800a9ee:	4826      	ldr	r0, [pc, #152]	; (800aa88 <tcp_output_alloc_header_common+0xe0>)
 800a9f0:	f003 fca4 	bl	800e33c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a9fa:	8c3b      	ldrh	r3, [r7, #32]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f8 fd3e 	bl	800347e <lwip_htons>
 800aa02:	4603      	mov	r3, r0
 800aa04:	461a      	mov	r2, r3
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800aa0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f8 fd36 	bl	800347e <lwip_htons>
 800aa12:	4603      	mov	r3, r0
 800aa14:	461a      	mov	r2, r3
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7f8 fd41 	bl	80034a8 <lwip_htonl>
 800aa26:	4602      	mov	r2, r0
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800aa2c:	897b      	ldrh	r3, [r7, #10]
 800aa2e:	089b      	lsrs	r3, r3, #2
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3305      	adds	r3, #5
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	031b      	lsls	r3, r3, #12
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	4313      	orrs	r3, r2
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7f8 fd1a 	bl	800347e <lwip_htons>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800aa52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f8 fd12 	bl	800347e <lwip_htons>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2200      	movs	r2, #0
 800aa66:	741a      	strb	r2, [r3, #16]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	749a      	strb	r2, [r3, #18]
 800aa72:	2200      	movs	r2, #0
 800aa74:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800aa76:	697b      	ldr	r3, [r7, #20]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	08010b08 	.word	0x08010b08
 800aa84:	080111e0 	.word	0x080111e0
 800aa88:	08010b5c 	.word	0x08010b5c

0800aa8c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800aa8c:	b5b0      	push	{r4, r5, r7, lr}
 800aa8e:	b08a      	sub	sp, #40	; 0x28
 800aa90:	af04      	add	r7, sp, #16
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	607b      	str	r3, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	817b      	strh	r3, [r7, #10]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <tcp_output_alloc_header+0x26>
 800aaa4:	4b15      	ldr	r3, [pc, #84]	; (800aafc <tcp_output_alloc_header+0x70>)
 800aaa6:	f240 7242 	movw	r2, #1858	; 0x742
 800aaaa:	4915      	ldr	r1, [pc, #84]	; (800ab00 <tcp_output_alloc_header+0x74>)
 800aaac:	4815      	ldr	r0, [pc, #84]	; (800ab04 <tcp_output_alloc_header+0x78>)
 800aaae:	f003 fc45 	bl	800e33c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	8adb      	ldrh	r3, [r3, #22]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	8b12      	ldrh	r2, [r2, #24]
 800aabe:	68f9      	ldr	r1, [r7, #12]
 800aac0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800aac2:	893d      	ldrh	r5, [r7, #8]
 800aac4:	897c      	ldrh	r4, [r7, #10]
 800aac6:	9103      	str	r1, [sp, #12]
 800aac8:	2110      	movs	r1, #16
 800aaca:	9102      	str	r1, [sp, #8]
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	462a      	mov	r2, r5
 800aad4:	4621      	mov	r1, r4
 800aad6:	f7ff ff67 	bl	800a9a8 <tcp_output_alloc_header_common>
 800aada:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d006      	beq.n	800aaf0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aaea:	441a      	add	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800aaf0:	697b      	ldr	r3, [r7, #20]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bdb0      	pop	{r4, r5, r7, pc}
 800aafa:	bf00      	nop
 800aafc:	08010b08 	.word	0x08010b08
 800ab00:	08011210 	.word	0x08011210
 800ab04:	08010b5c 	.word	0x08010b5c

0800ab08 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4611      	mov	r1, r2
 800ab14:	461a      	mov	r2, r3
 800ab16:	460b      	mov	r3, r1
 800ab18:	71fb      	strb	r3, [r7, #7]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d106      	bne.n	800ab36 <tcp_output_fill_options+0x2e>
 800ab28:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <tcp_output_fill_options+0x70>)
 800ab2a:	f240 7256 	movw	r2, #1878	; 0x756
 800ab2e:	4913      	ldr	r1, [pc, #76]	; (800ab7c <tcp_output_fill_options+0x74>)
 800ab30:	4813      	ldr	r0, [pc, #76]	; (800ab80 <tcp_output_fill_options+0x78>)
 800ab32:	f003 fc03 	bl	800e33c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	3314      	adds	r3, #20
 800ab40:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	f103 0214 	add.w	r2, r3, #20
 800ab48:	8bfb      	ldrh	r3, [r7, #30]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	440b      	add	r3, r1
 800ab58:	4413      	add	r3, r2
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d006      	beq.n	800ab6e <tcp_output_fill_options+0x66>
 800ab60:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <tcp_output_fill_options+0x70>)
 800ab62:	f240 7275 	movw	r2, #1909	; 0x775
 800ab66:	4907      	ldr	r1, [pc, #28]	; (800ab84 <tcp_output_fill_options+0x7c>)
 800ab68:	4805      	ldr	r0, [pc, #20]	; (800ab80 <tcp_output_fill_options+0x78>)
 800ab6a:	f003 fbe7 	bl	800e33c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ab6e:	bf00      	nop
 800ab70:	3720      	adds	r7, #32
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	08010b08 	.word	0x08010b08
 800ab7c:	08011238 	.word	0x08011238
 800ab80:	08010b5c 	.word	0x08010b5c
 800ab84:	08011130 	.word	0x08011130

0800ab88 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08a      	sub	sp, #40	; 0x28
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d106      	bne.n	800abaa <tcp_output_control_segment+0x22>
 800ab9c:	4b1c      	ldr	r3, [pc, #112]	; (800ac10 <tcp_output_control_segment+0x88>)
 800ab9e:	f240 7287 	movw	r2, #1927	; 0x787
 800aba2:	491c      	ldr	r1, [pc, #112]	; (800ac14 <tcp_output_control_segment+0x8c>)
 800aba4:	481c      	ldr	r0, [pc, #112]	; (800ac18 <tcp_output_control_segment+0x90>)
 800aba6:	f003 fbc9 	bl	800e33c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7fe fae8 	bl	8009184 <tcp_route>
 800abb4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800abbc:	23fc      	movs	r3, #252	; 0xfc
 800abbe:	75fb      	strb	r3, [r7, #23]
 800abc0:	e01c      	b.n	800abfc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	7adb      	ldrb	r3, [r3, #11]
 800abcc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	7a9b      	ldrb	r3, [r3, #10]
 800abd2:	757b      	strb	r3, [r7, #21]
 800abd4:	e003      	b.n	800abde <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800abd6:	23ff      	movs	r3, #255	; 0xff
 800abd8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800abde:	7dba      	ldrb	r2, [r7, #22]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	9302      	str	r3, [sp, #8]
 800abe4:	2306      	movs	r3, #6
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	7d7b      	ldrb	r3, [r7, #21]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4613      	mov	r3, r2
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	68b8      	ldr	r0, [r7, #8]
 800abf4:	f002 fb2a 	bl	800d24c <ip4_output_if>
 800abf8:	4603      	mov	r3, r0
 800abfa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f7f9 fedd 	bl	80049bc <pbuf_free>
  return err;
 800ac02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	08010b08 	.word	0x08010b08
 800ac14:	08011260 	.word	0x08011260
 800ac18:	08010b5c 	.word	0x08010b5c

0800ac1c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ac1c:	b590      	push	{r4, r7, lr}
 800ac1e:	b08b      	sub	sp, #44	; 0x2c
 800ac20:	af04      	add	r7, sp, #16
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d106      	bne.n	800ac3e <tcp_rst+0x22>
 800ac30:	4b1f      	ldr	r3, [pc, #124]	; (800acb0 <tcp_rst+0x94>)
 800ac32:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ac36:	491f      	ldr	r1, [pc, #124]	; (800acb4 <tcp_rst+0x98>)
 800ac38:	481f      	ldr	r0, [pc, #124]	; (800acb8 <tcp_rst+0x9c>)
 800ac3a:	f003 fb7f 	bl	800e33c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d106      	bne.n	800ac52 <tcp_rst+0x36>
 800ac44:	4b1a      	ldr	r3, [pc, #104]	; (800acb0 <tcp_rst+0x94>)
 800ac46:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ac4a:	491c      	ldr	r1, [pc, #112]	; (800acbc <tcp_rst+0xa0>)
 800ac4c:	481a      	ldr	r0, [pc, #104]	; (800acb8 <tcp_rst+0x9c>)
 800ac4e:	f003 fb75 	bl	800e33c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ac56:	f246 0308 	movw	r3, #24584	; 0x6008
 800ac5a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
 800ac5e:	b29c      	uxth	r4, r3
 800ac60:	68b8      	ldr	r0, [r7, #8]
 800ac62:	f7f8 fc21 	bl	80034a8 <lwip_htonl>
 800ac66:	4602      	mov	r2, r0
 800ac68:	8abb      	ldrh	r3, [r7, #20]
 800ac6a:	9303      	str	r3, [sp, #12]
 800ac6c:	2314      	movs	r3, #20
 800ac6e:	9302      	str	r3, [sp, #8]
 800ac70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fe92 	bl	800a9a8 <tcp_output_alloc_header_common>
 800ac84:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00c      	beq.n	800aca6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	6939      	ldr	r1, [r7, #16]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f7ff ff38 	bl	800ab08 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	6939      	ldr	r1, [r7, #16]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7ff ff72 	bl	800ab88 <tcp_output_control_segment>
 800aca4:	e000      	b.n	800aca8 <tcp_rst+0x8c>
    return;
 800aca6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd90      	pop	{r4, r7, pc}
 800acae:	bf00      	nop
 800acb0:	08010b08 	.word	0x08010b08
 800acb4:	0801128c 	.word	0x0801128c
 800acb8:	08010b5c 	.word	0x08010b5c
 800acbc:	080112a8 	.word	0x080112a8

0800acc0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800acc0:	b590      	push	{r4, r7, lr}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <tcp_send_empty_ack+0x24>
 800acd6:	4b28      	ldr	r3, [pc, #160]	; (800ad78 <tcp_send_empty_ack+0xb8>)
 800acd8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800acdc:	4927      	ldr	r1, [pc, #156]	; (800ad7c <tcp_send_empty_ack+0xbc>)
 800acde:	4828      	ldr	r0, [pc, #160]	; (800ad80 <tcp_send_empty_ack+0xc0>)
 800ace0:	f003 fb2c 	bl	800e33c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800acf0:	7d7b      	ldrb	r3, [r7, #21]
 800acf2:	b29c      	uxth	r4, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f8 fbd5 	bl	80034a8 <lwip_htonl>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2200      	movs	r2, #0
 800ad02:	4621      	mov	r1, r4
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fec1 	bl	800aa8c <tcp_output_alloc_header>
 800ad0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	8b5b      	ldrh	r3, [r3, #26]
 800ad16:	f043 0303 	orr.w	r3, r3, #3
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ad20:	f06f 0301 	mvn.w	r3, #1
 800ad24:	e023      	b.n	800ad6e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ad26:	7dbb      	ldrb	r3, [r7, #22]
 800ad28:	7dfa      	ldrb	r2, [r7, #23]
 800ad2a:	6939      	ldr	r1, [r7, #16]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff feeb 	bl	800ab08 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3304      	adds	r3, #4
 800ad38:	6939      	ldr	r1, [r7, #16]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ff24 	bl	800ab88 <tcp_output_control_segment>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ad44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d007      	beq.n	800ad5c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	8b5b      	ldrh	r3, [r3, #26]
 800ad50:	f043 0303 	orr.w	r3, r3, #3
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	835a      	strh	r2, [r3, #26]
 800ad5a:	e006      	b.n	800ad6a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8b5b      	ldrh	r3, [r3, #26]
 800ad60:	f023 0303 	bic.w	r3, r3, #3
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ad6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd90      	pop	{r4, r7, pc}
 800ad76:	bf00      	nop
 800ad78:	08010b08 	.word	0x08010b08
 800ad7c:	080112c4 	.word	0x080112c4
 800ad80:	08010b5c 	.word	0x08010b5c

0800ad84 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ad84:	b590      	push	{r4, r7, lr}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <tcp_keepalive+0x20>
 800ad96:	4b18      	ldr	r3, [pc, #96]	; (800adf8 <tcp_keepalive+0x74>)
 800ad98:	f640 0224 	movw	r2, #2084	; 0x824
 800ad9c:	4917      	ldr	r1, [pc, #92]	; (800adfc <tcp_keepalive+0x78>)
 800ad9e:	4818      	ldr	r0, [pc, #96]	; (800ae00 <tcp_keepalive+0x7c>)
 800ada0:	f003 facc 	bl	800e33c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	b29c      	uxth	r4, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adac:	3b01      	subs	r3, #1
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f8 fb7a 	bl	80034a8 <lwip_htonl>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2200      	movs	r2, #0
 800adb8:	4621      	mov	r1, r4
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff fe66 	bl	800aa8c <tcp_output_alloc_header>
 800adc0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	e010      	b.n	800adf0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2200      	movs	r2, #0
 800add2:	6939      	ldr	r1, [r7, #16]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff fe97 	bl	800ab08 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
 800ade0:	6939      	ldr	r1, [r7, #16]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff fed0 	bl	800ab88 <tcp_output_control_segment>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800adec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	371c      	adds	r7, #28
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd90      	pop	{r4, r7, pc}
 800adf8:	08010b08 	.word	0x08010b08
 800adfc:	080112e4 	.word	0x080112e4
 800ae00:	08010b5c 	.word	0x08010b5c

0800ae04 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b08b      	sub	sp, #44	; 0x2c
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d106      	bne.n	800ae26 <tcp_zero_window_probe+0x22>
 800ae18:	4b4c      	ldr	r3, [pc, #304]	; (800af4c <tcp_zero_window_probe+0x148>)
 800ae1a:	f640 024f 	movw	r2, #2127	; 0x84f
 800ae1e:	494c      	ldr	r1, [pc, #304]	; (800af50 <tcp_zero_window_probe+0x14c>)
 800ae20:	484c      	ldr	r0, [pc, #304]	; (800af54 <tcp_zero_window_probe+0x150>)
 800ae22:	f003 fa8b 	bl	800e33c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae2a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	e086      	b.n	800af44 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ae3c:	2bff      	cmp	r3, #255	; 0xff
 800ae3e:	d007      	beq.n	800ae50 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ae46:	3301      	adds	r3, #1
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	899b      	ldrh	r3, [r3, #12]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7f8 fb10 	bl	800347e <lwip_htons>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d005      	beq.n	800ae76 <tcp_zero_window_probe+0x72>
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	891b      	ldrh	r3, [r3, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <tcp_zero_window_probe+0x72>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <tcp_zero_window_probe+0x74>
 800ae76:	2300      	movs	r3, #0
 800ae78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ae7a:	7ffb      	ldrb	r3, [r7, #31]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bf0c      	ite	eq
 800ae80:	2301      	moveq	r3, #1
 800ae82:	2300      	movne	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ae88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae8c:	b299      	uxth	r1, r3
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	8bba      	ldrh	r2, [r7, #28]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fdf8 	bl	800aa8c <tcp_output_alloc_header>
 800ae9c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d102      	bne.n	800aeaa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800aea4:	f04f 33ff 	mov.w	r3, #4294967295
 800aea8:	e04c      	b.n	800af44 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800aeb0:	7ffb      	ldrb	r3, [r7, #31]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d011      	beq.n	800aeda <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	899b      	ldrh	r3, [r3, #12]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	b21b      	sxth	r3, r3
 800aebe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aec2:	b21c      	sxth	r4, r3
 800aec4:	2011      	movs	r0, #17
 800aec6:	f7f8 fada 	bl	800347e <lwip_htons>
 800aeca:	4603      	mov	r3, r0
 800aecc:	b21b      	sxth	r3, r3
 800aece:	4323      	orrs	r3, r4
 800aed0:	b21b      	sxth	r3, r3
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	819a      	strh	r2, [r3, #12]
 800aed8:	e010      	b.n	800aefc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	3314      	adds	r3, #20
 800aee0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	6858      	ldr	r0, [r3, #4]
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	891a      	ldrh	r2, [r3, #8]
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	891b      	ldrh	r3, [r3, #8]
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2201      	movs	r2, #1
 800aef6:	6939      	ldr	r1, [r7, #16]
 800aef8:	f7f9 ff5a 	bl	8004db0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	4618      	mov	r0, r3
 800af04:	f7f8 fad0 	bl	80034a8 <lwip_htonl>
 800af08:	4603      	mov	r3, r0
 800af0a:	3301      	adds	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	da02      	bge.n	800af20 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800af20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af24:	2200      	movs	r2, #0
 800af26:	69b9      	ldr	r1, [r7, #24]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff fded 	bl	800ab08 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	69b9      	ldr	r1, [r7, #24]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff fe26 	bl	800ab88 <tcp_output_control_segment>
 800af3c:	4603      	mov	r3, r0
 800af3e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800af40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800af44:	4618      	mov	r0, r3
 800af46:	372c      	adds	r7, #44	; 0x2c
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd90      	pop	{r4, r7, pc}
 800af4c:	08010b08 	.word	0x08010b08
 800af50:	08011300 	.word	0x08011300
 800af54:	08010b5c 	.word	0x08010b5c

0800af58 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800af60:	f7fa f814 	bl	8004f8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800af64:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <tcpip_tcp_timer+0x38>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d103      	bne.n	800af74 <tcpip_tcp_timer+0x1c>
 800af6c:	4b09      	ldr	r3, [pc, #36]	; (800af94 <tcpip_tcp_timer+0x3c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af74:	2200      	movs	r2, #0
 800af76:	4908      	ldr	r1, [pc, #32]	; (800af98 <tcpip_tcp_timer+0x40>)
 800af78:	20fa      	movs	r0, #250	; 0xfa
 800af7a:	f000 f8f3 	bl	800b164 <sys_timeout>
 800af7e:	e003      	b.n	800af88 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800af80:	4b06      	ldr	r3, [pc, #24]	; (800af9c <tcpip_tcp_timer+0x44>)
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
  }
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	2000674c 	.word	0x2000674c
 800af94:	20006750 	.word	0x20006750
 800af98:	0800af59 	.word	0x0800af59
 800af9c:	20006798 	.word	0x20006798

0800afa0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <tcp_timer_needed+0x30>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10f      	bne.n	800afcc <tcp_timer_needed+0x2c>
 800afac:	4b09      	ldr	r3, [pc, #36]	; (800afd4 <tcp_timer_needed+0x34>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d103      	bne.n	800afbc <tcp_timer_needed+0x1c>
 800afb4:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <tcp_timer_needed+0x38>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800afbc:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <tcp_timer_needed+0x30>)
 800afbe:	2201      	movs	r2, #1
 800afc0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800afc2:	2200      	movs	r2, #0
 800afc4:	4905      	ldr	r1, [pc, #20]	; (800afdc <tcp_timer_needed+0x3c>)
 800afc6:	20fa      	movs	r0, #250	; 0xfa
 800afc8:	f000 f8cc 	bl	800b164 <sys_timeout>
  }
}
 800afcc:	bf00      	nop
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20006798 	.word	0x20006798
 800afd4:	2000674c 	.word	0x2000674c
 800afd8:	20006750 	.word	0x20006750
 800afdc:	0800af59 	.word	0x0800af59

0800afe0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800afec:	2006      	movs	r0, #6
 800afee:	f7f8 fe9b 	bl	8003d28 <memp_malloc>
 800aff2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d109      	bne.n	800b00e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d151      	bne.n	800b0a4 <sys_timeout_abs+0xc4>
 800b000:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <sys_timeout_abs+0xcc>)
 800b002:	22be      	movs	r2, #190	; 0xbe
 800b004:	492a      	ldr	r1, [pc, #168]	; (800b0b0 <sys_timeout_abs+0xd0>)
 800b006:	482b      	ldr	r0, [pc, #172]	; (800b0b4 <sys_timeout_abs+0xd4>)
 800b008:	f003 f998 	bl	800e33c <iprintf>
    return;
 800b00c:	e04a      	b.n	800b0a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b026:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <sys_timeout_abs+0xd8>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b02e:	4a22      	ldr	r2, [pc, #136]	; (800b0b8 <sys_timeout_abs+0xd8>)
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	6013      	str	r3, [r2, #0]
    return;
 800b034:	e037      	b.n	800b0a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	4b1f      	ldr	r3, [pc, #124]	; (800b0b8 <sys_timeout_abs+0xd8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	0fdb      	lsrs	r3, r3, #31
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d007      	beq.n	800b05e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b04e:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <sys_timeout_abs+0xd8>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <sys_timeout_abs+0xd8>)
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	e023      	b.n	800b0a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b05e:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <sys_timeout_abs+0xd8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	e01a      	b.n	800b09c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <sys_timeout_abs+0xa6>
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	0fdb      	lsrs	r3, r3, #31
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d007      	beq.n	800b096 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	601a      	str	r2, [r3, #0]
        break;
 800b094:	e007      	b.n	800b0a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e1      	bne.n	800b066 <sys_timeout_abs+0x86>
 800b0a2:	e000      	b.n	800b0a6 <sys_timeout_abs+0xc6>
    return;
 800b0a4:	bf00      	nop
      }
    }
  }
}
 800b0a6:	3718      	adds	r7, #24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	08011324 	.word	0x08011324
 800b0b0:	08011358 	.word	0x08011358
 800b0b4:	08011398 	.word	0x08011398
 800b0b8:	20006790 	.word	0x20006790

0800b0bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	4798      	blx	r3

  now = sys_now();
 800b0ce:	f7f8 f9cf 	bl	8003470 <sys_now>
 800b0d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <lwip_cyclic_timer+0x5c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4413      	add	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	0fdb      	lsrs	r3, r3, #31
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d009      	beq.n	800b106 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	4907      	ldr	r1, [pc, #28]	; (800b11c <lwip_cyclic_timer+0x60>)
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ff6e 	bl	800afe0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b104:	e004      	b.n	800b110 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4904      	ldr	r1, [pc, #16]	; (800b11c <lwip_cyclic_timer+0x60>)
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff ff68 	bl	800afe0 <sys_timeout_abs>
}
 800b110:	bf00      	nop
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20006794 	.word	0x20006794
 800b11c:	0800b0bd 	.word	0x0800b0bd

0800b120 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b126:	2301      	movs	r3, #1
 800b128:	607b      	str	r3, [r7, #4]
 800b12a:	e00e      	b.n	800b14a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b12c:	4a0b      	ldr	r2, [pc, #44]	; (800b15c <sys_timeouts_init+0x3c>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	4a08      	ldr	r2, [pc, #32]	; (800b15c <sys_timeouts_init+0x3c>)
 800b13a:	4413      	add	r3, r2
 800b13c:	461a      	mov	r2, r3
 800b13e:	4908      	ldr	r1, [pc, #32]	; (800b160 <sys_timeouts_init+0x40>)
 800b140:	f000 f810 	bl	800b164 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d9ed      	bls.n	800b12c <sys_timeouts_init+0xc>
  }
}
 800b150:	bf00      	nop
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08011efc 	.word	0x08011efc
 800b160:	0800b0bd 	.word	0x0800b0bd

0800b164 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b176:	d306      	bcc.n	800b186 <sys_timeout+0x22>
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <sys_timeout+0x40>)
 800b17a:	f240 1229 	movw	r2, #297	; 0x129
 800b17e:	490a      	ldr	r1, [pc, #40]	; (800b1a8 <sys_timeout+0x44>)
 800b180:	480a      	ldr	r0, [pc, #40]	; (800b1ac <sys_timeout+0x48>)
 800b182:	f003 f8db 	bl	800e33c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b186:	f7f8 f973 	bl	8003470 <sys_now>
 800b18a:	4602      	mov	r2, r0
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	6978      	ldr	r0, [r7, #20]
 800b198:	f7ff ff22 	bl	800afe0 <sys_timeout_abs>
#endif
}
 800b19c:	bf00      	nop
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	08011324 	.word	0x08011324
 800b1a8:	080113c0 	.word	0x080113c0
 800b1ac:	08011398 	.word	0x08011398

0800b1b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b1b6:	f7f8 f95b 	bl	8003470 <sys_now>
 800b1ba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <sys_check_timeouts+0x78>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <sys_check_timeouts+0x1a>
 800b1c6:	f7f9 f8bf 	bl	8004348 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b1ca:	4b18      	ldr	r3, [pc, #96]	; (800b22c <sys_check_timeouts+0x7c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d022      	beq.n	800b21c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	0fdb      	lsrs	r3, r3, #31
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d11a      	bne.n	800b220 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a0f      	ldr	r2, [pc, #60]	; (800b22c <sys_check_timeouts+0x7c>)
 800b1f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	4a0b      	ldr	r2, [pc, #44]	; (800b230 <sys_check_timeouts+0x80>)
 800b204:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b206:	68b9      	ldr	r1, [r7, #8]
 800b208:	2006      	movs	r0, #6
 800b20a:	f7f8 fdd9 	bl	8003dc0 <memp_free>
    if (handler != NULL) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0d3      	beq.n	800b1bc <sys_check_timeouts+0xc>
      handler(arg);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6838      	ldr	r0, [r7, #0]
 800b218:	4798      	blx	r3
  do {
 800b21a:	e7cf      	b.n	800b1bc <sys_check_timeouts+0xc>
      return;
 800b21c:	bf00      	nop
 800b21e:	e000      	b.n	800b222 <sys_check_timeouts+0x72>
      return;
 800b220:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	2000673d 	.word	0x2000673d
 800b22c:	20006790 	.word	0x20006790
 800b230:	20006794 	.word	0x20006794

0800b234 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b238:	f003 f898 	bl	800e36c <rand>
 800b23c:	4603      	mov	r3, r0
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b244:	b29b      	uxth	r3, r3
 800b246:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	4b01      	ldr	r3, [pc, #4]	; (800b254 <udp_init+0x20>)
 800b24e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b250:	bf00      	nop
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20000010 	.word	0x20000010

0800b258 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b262:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <udp_new_port+0x68>)
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	b291      	uxth	r1, r2
 800b26a:	4a15      	ldr	r2, [pc, #84]	; (800b2c0 <udp_new_port+0x68>)
 800b26c:	8011      	strh	r1, [r2, #0]
 800b26e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b272:	4293      	cmp	r3, r2
 800b274:	d103      	bne.n	800b27e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b276:	4b12      	ldr	r3, [pc, #72]	; (800b2c0 <udp_new_port+0x68>)
 800b278:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b27c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b27e:	4b11      	ldr	r3, [pc, #68]	; (800b2c4 <udp_new_port+0x6c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	e011      	b.n	800b2aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	8a5a      	ldrh	r2, [r3, #18]
 800b28a:	4b0d      	ldr	r3, [pc, #52]	; (800b2c0 <udp_new_port+0x68>)
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d108      	bne.n	800b2a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	3301      	adds	r3, #1
 800b296:	80fb      	strh	r3, [r7, #6]
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b29e:	d3e0      	bcc.n	800b262 <udp_new_port+0xa>
        return 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	e007      	b.n	800b2b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	603b      	str	r3, [r7, #0]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1ea      	bne.n	800b286 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b2b0:	4b03      	ldr	r3, [pc, #12]	; (800b2c0 <udp_new_port+0x68>)
 800b2b2:	881b      	ldrh	r3, [r3, #0]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20000010 	.word	0x20000010
 800b2c4:	2000679c 	.word	0x2000679c

0800b2c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d105      	bne.n	800b2e8 <udp_input_local_match+0x20>
 800b2dc:	4b27      	ldr	r3, [pc, #156]	; (800b37c <udp_input_local_match+0xb4>)
 800b2de:	2287      	movs	r2, #135	; 0x87
 800b2e0:	4927      	ldr	r1, [pc, #156]	; (800b380 <udp_input_local_match+0xb8>)
 800b2e2:	4828      	ldr	r0, [pc, #160]	; (800b384 <udp_input_local_match+0xbc>)
 800b2e4:	f003 f82a 	bl	800e33c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d105      	bne.n	800b2fa <udp_input_local_match+0x32>
 800b2ee:	4b23      	ldr	r3, [pc, #140]	; (800b37c <udp_input_local_match+0xb4>)
 800b2f0:	2288      	movs	r2, #136	; 0x88
 800b2f2:	4925      	ldr	r1, [pc, #148]	; (800b388 <udp_input_local_match+0xc0>)
 800b2f4:	4823      	ldr	r0, [pc, #140]	; (800b384 <udp_input_local_match+0xbc>)
 800b2f6:	f003 f821 	bl	800e33c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	7a1b      	ldrb	r3, [r3, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00b      	beq.n	800b31a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	7a1a      	ldrb	r2, [r3, #8]
 800b306:	4b21      	ldr	r3, [pc, #132]	; (800b38c <udp_input_local_match+0xc4>)
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b30e:	3301      	adds	r3, #1
 800b310:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b312:	429a      	cmp	r2, r3
 800b314:	d001      	beq.n	800b31a <udp_input_local_match+0x52>
    return 0;
 800b316:	2300      	movs	r3, #0
 800b318:	e02b      	b.n	800b372 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d018      	beq.n	800b352 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d013      	beq.n	800b34e <udp_input_local_match+0x86>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00f      	beq.n	800b34e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b32e:	4b17      	ldr	r3, [pc, #92]	; (800b38c <udp_input_local_match+0xc4>)
 800b330:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d00a      	beq.n	800b34e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	4b13      	ldr	r3, [pc, #76]	; (800b38c <udp_input_local_match+0xc4>)
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	405a      	eors	r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	3308      	adds	r3, #8
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d110      	bne.n	800b370 <udp_input_local_match+0xa8>
          return 1;
 800b34e:	2301      	movs	r3, #1
 800b350:	e00f      	b.n	800b372 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d009      	beq.n	800b36c <udp_input_local_match+0xa4>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <udp_input_local_match+0xa4>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	4b09      	ldr	r3, [pc, #36]	; (800b38c <udp_input_local_match+0xc4>)
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d101      	bne.n	800b370 <udp_input_local_match+0xa8>
        return 1;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	0801140c 	.word	0x0801140c
 800b380:	0801143c 	.word	0x0801143c
 800b384:	08011460 	.word	0x08011460
 800b388:	08011488 	.word	0x08011488
 800b38c:	200031d0 	.word	0x200031d0

0800b390 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b390:	b590      	push	{r4, r7, lr}
 800b392:	b08d      	sub	sp, #52	; 0x34
 800b394:	af02      	add	r7, sp, #8
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d105      	bne.n	800b3b0 <udp_input+0x20>
 800b3a4:	4b7c      	ldr	r3, [pc, #496]	; (800b598 <udp_input+0x208>)
 800b3a6:	22cf      	movs	r2, #207	; 0xcf
 800b3a8:	497c      	ldr	r1, [pc, #496]	; (800b59c <udp_input+0x20c>)
 800b3aa:	487d      	ldr	r0, [pc, #500]	; (800b5a0 <udp_input+0x210>)
 800b3ac:	f002 ffc6 	bl	800e33c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d105      	bne.n	800b3c2 <udp_input+0x32>
 800b3b6:	4b78      	ldr	r3, [pc, #480]	; (800b598 <udp_input+0x208>)
 800b3b8:	22d0      	movs	r2, #208	; 0xd0
 800b3ba:	497a      	ldr	r1, [pc, #488]	; (800b5a4 <udp_input+0x214>)
 800b3bc:	4878      	ldr	r0, [pc, #480]	; (800b5a0 <udp_input+0x210>)
 800b3be:	f002 ffbd 	bl	800e33c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	895b      	ldrh	r3, [r3, #10]
 800b3c6:	2b07      	cmp	r3, #7
 800b3c8:	d803      	bhi.n	800b3d2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7f9 faf6 	bl	80049bc <pbuf_free>
    goto end;
 800b3d0:	e0de      	b.n	800b590 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b3d8:	4b73      	ldr	r3, [pc, #460]	; (800b5a8 <udp_input+0x218>)
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	4a72      	ldr	r2, [pc, #456]	; (800b5a8 <udp_input+0x218>)
 800b3de:	6812      	ldr	r2, [r2, #0]
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f002 f80a 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7f8 f843 	bl	800347e <lwip_htons>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	885b      	ldrh	r3, [r3, #2]
 800b400:	b29b      	uxth	r3, r3
 800b402:	4618      	mov	r0, r3
 800b404:	f7f8 f83b 	bl	800347e <lwip_htons>
 800b408:	4603      	mov	r3, r0
 800b40a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b410:	2300      	movs	r3, #0
 800b412:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b414:	2300      	movs	r3, #0
 800b416:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b418:	4b64      	ldr	r3, [pc, #400]	; (800b5ac <udp_input+0x21c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
 800b41e:	e054      	b.n	800b4ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	8a5b      	ldrh	r3, [r3, #18]
 800b424:	89fa      	ldrh	r2, [r7, #14]
 800b426:	429a      	cmp	r2, r3
 800b428:	d14a      	bne.n	800b4c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b42a:	7cfb      	ldrb	r3, [r7, #19]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b432:	f7ff ff49 	bl	800b2c8 <udp_input_local_match>
 800b436:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d041      	beq.n	800b4c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	7c1b      	ldrb	r3, [r3, #16]
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	d11d      	bne.n	800b484 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	61fb      	str	r3, [r7, #28]
 800b452:	e017      	b.n	800b484 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b454:	7cfb      	ldrb	r3, [r7, #19]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d014      	beq.n	800b484 <udp_input+0xf4>
 800b45a:	4b53      	ldr	r3, [pc, #332]	; (800b5a8 <udp_input+0x218>)
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b462:	d10f      	bne.n	800b484 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	3304      	adds	r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d008      	beq.n	800b484 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	3304      	adds	r3, #4
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d101      	bne.n	800b484 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	8a9b      	ldrh	r3, [r3, #20]
 800b488:	8a3a      	ldrh	r2, [r7, #16]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d118      	bne.n	800b4c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b492:	2b00      	cmp	r3, #0
 800b494:	d005      	beq.n	800b4a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	4b43      	ldr	r3, [pc, #268]	; (800b5a8 <udp_input+0x218>)
 800b49c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d10e      	bne.n	800b4c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d014      	beq.n	800b4d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b4b0:	4b3e      	ldr	r3, [pc, #248]	; (800b5ac <udp_input+0x21c>)
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b4b8:	4a3c      	ldr	r2, [pc, #240]	; (800b5ac <udp_input+0x21c>)
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b4be:	e008      	b.n	800b4d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1a7      	bne.n	800b420 <udp_input+0x90>
 800b4d0:	e000      	b.n	800b4d4 <udp_input+0x144>
        break;
 800b4d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <udp_input+0x14e>
    pcb = uncon_pcb;
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <udp_input+0x15a>
    for_us = 1;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	76fb      	strb	r3, [r7, #27]
 800b4e8:	e00a      	b.n	800b500 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	4b2d      	ldr	r3, [pc, #180]	; (800b5a8 <udp_input+0x218>)
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	bf0c      	ite	eq
 800b4f8:	2301      	moveq	r3, #1
 800b4fa:	2300      	movne	r3, #0
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b500:	7efb      	ldrb	r3, [r7, #27]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d041      	beq.n	800b58a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b506:	2108      	movs	r1, #8
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7f9 f9d1 	bl	80048b0 <pbuf_remove_header>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b514:	4b20      	ldr	r3, [pc, #128]	; (800b598 <udp_input+0x208>)
 800b516:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b51a:	4925      	ldr	r1, [pc, #148]	; (800b5b0 <udp_input+0x220>)
 800b51c:	4820      	ldr	r0, [pc, #128]	; (800b5a0 <udp_input+0x210>)
 800b51e:	f002 ff0d 	bl	800e33c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f9 fa4a 	bl	80049bc <pbuf_free>
      goto end;
 800b528:	e032      	b.n	800b590 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d012      	beq.n	800b556 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	699c      	ldr	r4, [r3, #24]
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	69d8      	ldr	r0, [r3, #28]
 800b540:	8a3b      	ldrh	r3, [r7, #16]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	4b1b      	ldr	r3, [pc, #108]	; (800b5b4 <udp_input+0x224>)
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b54a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b54c:	e021      	b.n	800b592 <udp_input+0x202>
        pbuf_free(p);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7f9 fa34 	bl	80049bc <pbuf_free>
        goto end;
 800b554:	e01c      	b.n	800b590 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b556:	7cfb      	ldrb	r3, [r7, #19]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d112      	bne.n	800b582 <udp_input+0x1f2>
 800b55c:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <udp_input+0x218>)
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b564:	2be0      	cmp	r3, #224	; 0xe0
 800b566:	d00c      	beq.n	800b582 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b568:	4b0f      	ldr	r3, [pc, #60]	; (800b5a8 <udp_input+0x218>)
 800b56a:	899b      	ldrh	r3, [r3, #12]
 800b56c:	3308      	adds	r3, #8
 800b56e:	b29b      	uxth	r3, r3
 800b570:	b21b      	sxth	r3, r3
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7f9 fa0e 	bl	8004996 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b57a:	2103      	movs	r1, #3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 fc1d 	bl	800cdbc <icmp_dest_unreach>
      pbuf_free(p);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7f9 fa1a 	bl	80049bc <pbuf_free>
  return;
 800b588:	e003      	b.n	800b592 <udp_input+0x202>
    pbuf_free(p);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7f9 fa16 	bl	80049bc <pbuf_free>
  return;
 800b590:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b592:	372c      	adds	r7, #44	; 0x2c
 800b594:	46bd      	mov	sp, r7
 800b596:	bd90      	pop	{r4, r7, pc}
 800b598:	0801140c 	.word	0x0801140c
 800b59c:	080114b0 	.word	0x080114b0
 800b5a0:	08011460 	.word	0x08011460
 800b5a4:	080114c8 	.word	0x080114c8
 800b5a8:	200031d0 	.word	0x200031d0
 800b5ac:	2000679c 	.word	0x2000679c
 800b5b0:	080114e4 	.word	0x080114e4
 800b5b4:	200031e0 	.word	0x200031e0

0800b5b8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d109      	bne.n	800b5dc <udp_send+0x24>
 800b5c8:	4b11      	ldr	r3, [pc, #68]	; (800b610 <udp_send+0x58>)
 800b5ca:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b5ce:	4911      	ldr	r1, [pc, #68]	; (800b614 <udp_send+0x5c>)
 800b5d0:	4811      	ldr	r0, [pc, #68]	; (800b618 <udp_send+0x60>)
 800b5d2:	f002 feb3 	bl	800e33c <iprintf>
 800b5d6:	f06f 030f 	mvn.w	r3, #15
 800b5da:	e015      	b.n	800b608 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d109      	bne.n	800b5f6 <udp_send+0x3e>
 800b5e2:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <udp_send+0x58>)
 800b5e4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b5e8:	490c      	ldr	r1, [pc, #48]	; (800b61c <udp_send+0x64>)
 800b5ea:	480b      	ldr	r0, [pc, #44]	; (800b618 <udp_send+0x60>)
 800b5ec:	f002 fea6 	bl	800e33c <iprintf>
 800b5f0:	f06f 030f 	mvn.w	r3, #15
 800b5f4:	e008      	b.n	800b608 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	1d1a      	adds	r2, r3, #4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8a9b      	ldrh	r3, [r3, #20]
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f80d 	bl	800b620 <udp_sendto>
 800b606:	4603      	mov	r3, r0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	0801140c 	.word	0x0801140c
 800b614:	08011500 	.word	0x08011500
 800b618:	08011460 	.word	0x08011460
 800b61c:	08011518 	.word	0x08011518

0800b620 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af02      	add	r7, sp, #8
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d109      	bne.n	800b648 <udp_sendto+0x28>
 800b634:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <udp_sendto+0xa4>)
 800b636:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b63a:	4923      	ldr	r1, [pc, #140]	; (800b6c8 <udp_sendto+0xa8>)
 800b63c:	4823      	ldr	r0, [pc, #140]	; (800b6cc <udp_sendto+0xac>)
 800b63e:	f002 fe7d 	bl	800e33c <iprintf>
 800b642:	f06f 030f 	mvn.w	r3, #15
 800b646:	e038      	b.n	800b6ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d109      	bne.n	800b662 <udp_sendto+0x42>
 800b64e:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <udp_sendto+0xa4>)
 800b650:	f240 2219 	movw	r2, #537	; 0x219
 800b654:	491e      	ldr	r1, [pc, #120]	; (800b6d0 <udp_sendto+0xb0>)
 800b656:	481d      	ldr	r0, [pc, #116]	; (800b6cc <udp_sendto+0xac>)
 800b658:	f002 fe70 	bl	800e33c <iprintf>
 800b65c:	f06f 030f 	mvn.w	r3, #15
 800b660:	e02b      	b.n	800b6ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d109      	bne.n	800b67c <udp_sendto+0x5c>
 800b668:	4b16      	ldr	r3, [pc, #88]	; (800b6c4 <udp_sendto+0xa4>)
 800b66a:	f240 221a 	movw	r2, #538	; 0x21a
 800b66e:	4919      	ldr	r1, [pc, #100]	; (800b6d4 <udp_sendto+0xb4>)
 800b670:	4816      	ldr	r0, [pc, #88]	; (800b6cc <udp_sendto+0xac>)
 800b672:	f002 fe63 	bl	800e33c <iprintf>
 800b676:	f06f 030f 	mvn.w	r3, #15
 800b67a:	e01e      	b.n	800b6ba <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	7a1b      	ldrb	r3, [r3, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d006      	beq.n	800b692 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	7a1b      	ldrb	r3, [r3, #8]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f8 fe37 	bl	80042fc <netif_get_by_index>
 800b68e:	6178      	str	r0, [r7, #20]
 800b690:	e003      	b.n	800b69a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 fc1c 	bl	800ced0 <ip4_route>
 800b698:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d102      	bne.n	800b6a6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b6a0:	f06f 0303 	mvn.w	r3, #3
 800b6a4:	e009      	b.n	800b6ba <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b6a6:	887a      	ldrh	r2, [r7, #2]
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	68b9      	ldr	r1, [r7, #8]
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 f810 	bl	800b6d8 <udp_sendto_if>
 800b6b8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0801140c 	.word	0x0801140c
 800b6c8:	08011530 	.word	0x08011530
 800b6cc:	08011460 	.word	0x08011460
 800b6d0:	08011548 	.word	0x08011548
 800b6d4:	08011564 	.word	0x08011564

0800b6d8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d109      	bne.n	800b700 <udp_sendto_if+0x28>
 800b6ec:	4b2e      	ldr	r3, [pc, #184]	; (800b7a8 <udp_sendto_if+0xd0>)
 800b6ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6f2:	492e      	ldr	r1, [pc, #184]	; (800b7ac <udp_sendto_if+0xd4>)
 800b6f4:	482e      	ldr	r0, [pc, #184]	; (800b7b0 <udp_sendto_if+0xd8>)
 800b6f6:	f002 fe21 	bl	800e33c <iprintf>
 800b6fa:	f06f 030f 	mvn.w	r3, #15
 800b6fe:	e04f      	b.n	800b7a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d109      	bne.n	800b71a <udp_sendto_if+0x42>
 800b706:	4b28      	ldr	r3, [pc, #160]	; (800b7a8 <udp_sendto_if+0xd0>)
 800b708:	f240 2281 	movw	r2, #641	; 0x281
 800b70c:	4929      	ldr	r1, [pc, #164]	; (800b7b4 <udp_sendto_if+0xdc>)
 800b70e:	4828      	ldr	r0, [pc, #160]	; (800b7b0 <udp_sendto_if+0xd8>)
 800b710:	f002 fe14 	bl	800e33c <iprintf>
 800b714:	f06f 030f 	mvn.w	r3, #15
 800b718:	e042      	b.n	800b7a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <udp_sendto_if+0x5c>
 800b720:	4b21      	ldr	r3, [pc, #132]	; (800b7a8 <udp_sendto_if+0xd0>)
 800b722:	f240 2282 	movw	r2, #642	; 0x282
 800b726:	4924      	ldr	r1, [pc, #144]	; (800b7b8 <udp_sendto_if+0xe0>)
 800b728:	4821      	ldr	r0, [pc, #132]	; (800b7b0 <udp_sendto_if+0xd8>)
 800b72a:	f002 fe07 	bl	800e33c <iprintf>
 800b72e:	f06f 030f 	mvn.w	r3, #15
 800b732:	e035      	b.n	800b7a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <udp_sendto_if+0x76>
 800b73a:	4b1b      	ldr	r3, [pc, #108]	; (800b7a8 <udp_sendto_if+0xd0>)
 800b73c:	f240 2283 	movw	r2, #643	; 0x283
 800b740:	491e      	ldr	r1, [pc, #120]	; (800b7bc <udp_sendto_if+0xe4>)
 800b742:	481b      	ldr	r0, [pc, #108]	; (800b7b0 <udp_sendto_if+0xd8>)
 800b744:	f002 fdfa 	bl	800e33c <iprintf>
 800b748:	f06f 030f 	mvn.w	r3, #15
 800b74c:	e028      	b.n	800b7a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d009      	beq.n	800b768 <udp_sendto_if+0x90>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b764:	2be0      	cmp	r3, #224	; 0xe0
 800b766:	d103      	bne.n	800b770 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	3304      	adds	r3, #4
 800b76c:	617b      	str	r3, [r7, #20]
 800b76e:	e00b      	b.n	800b788 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	3304      	adds	r3, #4
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d002      	beq.n	800b784 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b77e:	f06f 0303 	mvn.w	r3, #3
 800b782:	e00d      	b.n	800b7a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b788:	887a      	ldrh	r2, [r7, #2]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	4613      	mov	r3, r2
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f811 	bl	800b7c0 <udp_sendto_if_src>
 800b79e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	0801140c 	.word	0x0801140c
 800b7ac:	08011580 	.word	0x08011580
 800b7b0:	08011460 	.word	0x08011460
 800b7b4:	0801159c 	.word	0x0801159c
 800b7b8:	080115b8 	.word	0x080115b8
 800b7bc:	080115d8 	.word	0x080115d8

0800b7c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08c      	sub	sp, #48	; 0x30
 800b7c4:	af04      	add	r7, sp, #16
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <udp_sendto_if_src+0x28>
 800b7d4:	4b65      	ldr	r3, [pc, #404]	; (800b96c <udp_sendto_if_src+0x1ac>)
 800b7d6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b7da:	4965      	ldr	r1, [pc, #404]	; (800b970 <udp_sendto_if_src+0x1b0>)
 800b7dc:	4865      	ldr	r0, [pc, #404]	; (800b974 <udp_sendto_if_src+0x1b4>)
 800b7de:	f002 fdad 	bl	800e33c <iprintf>
 800b7e2:	f06f 030f 	mvn.w	r3, #15
 800b7e6:	e0bc      	b.n	800b962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <udp_sendto_if_src+0x42>
 800b7ee:	4b5f      	ldr	r3, [pc, #380]	; (800b96c <udp_sendto_if_src+0x1ac>)
 800b7f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b7f4:	4960      	ldr	r1, [pc, #384]	; (800b978 <udp_sendto_if_src+0x1b8>)
 800b7f6:	485f      	ldr	r0, [pc, #380]	; (800b974 <udp_sendto_if_src+0x1b4>)
 800b7f8:	f002 fda0 	bl	800e33c <iprintf>
 800b7fc:	f06f 030f 	mvn.w	r3, #15
 800b800:	e0af      	b.n	800b962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <udp_sendto_if_src+0x5c>
 800b808:	4b58      	ldr	r3, [pc, #352]	; (800b96c <udp_sendto_if_src+0x1ac>)
 800b80a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b80e:	495b      	ldr	r1, [pc, #364]	; (800b97c <udp_sendto_if_src+0x1bc>)
 800b810:	4858      	ldr	r0, [pc, #352]	; (800b974 <udp_sendto_if_src+0x1b4>)
 800b812:	f002 fd93 	bl	800e33c <iprintf>
 800b816:	f06f 030f 	mvn.w	r3, #15
 800b81a:	e0a2      	b.n	800b962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d109      	bne.n	800b836 <udp_sendto_if_src+0x76>
 800b822:	4b52      	ldr	r3, [pc, #328]	; (800b96c <udp_sendto_if_src+0x1ac>)
 800b824:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b828:	4955      	ldr	r1, [pc, #340]	; (800b980 <udp_sendto_if_src+0x1c0>)
 800b82a:	4852      	ldr	r0, [pc, #328]	; (800b974 <udp_sendto_if_src+0x1b4>)
 800b82c:	f002 fd86 	bl	800e33c <iprintf>
 800b830:	f06f 030f 	mvn.w	r3, #15
 800b834:	e095      	b.n	800b962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d109      	bne.n	800b850 <udp_sendto_if_src+0x90>
 800b83c:	4b4b      	ldr	r3, [pc, #300]	; (800b96c <udp_sendto_if_src+0x1ac>)
 800b83e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b842:	4950      	ldr	r1, [pc, #320]	; (800b984 <udp_sendto_if_src+0x1c4>)
 800b844:	484b      	ldr	r0, [pc, #300]	; (800b974 <udp_sendto_if_src+0x1b4>)
 800b846:	f002 fd79 	bl	800e33c <iprintf>
 800b84a:	f06f 030f 	mvn.w	r3, #15
 800b84e:	e088      	b.n	800b962 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8a5b      	ldrh	r3, [r3, #18]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10f      	bne.n	800b878 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b858:	68f9      	ldr	r1, [r7, #12]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	8a5b      	ldrh	r3, [r3, #18]
 800b85e:	461a      	mov	r2, r3
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f893 	bl	800b98c <udp_bind>
 800b866:	4603      	mov	r3, r0
 800b868:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b86a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b872:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b876:	e074      	b.n	800b962 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	891b      	ldrh	r3, [r3, #8]
 800b87c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b880:	4293      	cmp	r3, r2
 800b882:	d902      	bls.n	800b88a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	e06b      	b.n	800b962 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b88a:	2108      	movs	r1, #8
 800b88c:	68b8      	ldr	r0, [r7, #8]
 800b88e:	f7f8 ffff 	bl	8004890 <pbuf_add_header>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d015      	beq.n	800b8c4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b898:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b89c:	2108      	movs	r1, #8
 800b89e:	2022      	movs	r0, #34	; 0x22
 800b8a0:	f7f8 fda8 	bl	80043f4 <pbuf_alloc>
 800b8a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b0:	e057      	b.n	800b962 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	891b      	ldrh	r3, [r3, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d006      	beq.n	800b8c8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	69f8      	ldr	r0, [r7, #28]
 800b8be:	f7f9 f995 	bl	8004bec <pbuf_chain>
 800b8c2:	e001      	b.n	800b8c8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	895b      	ldrh	r3, [r3, #10]
 800b8cc:	2b07      	cmp	r3, #7
 800b8ce:	d806      	bhi.n	800b8de <udp_sendto_if_src+0x11e>
 800b8d0:	4b26      	ldr	r3, [pc, #152]	; (800b96c <udp_sendto_if_src+0x1ac>)
 800b8d2:	f240 320d 	movw	r2, #781	; 0x30d
 800b8d6:	492c      	ldr	r1, [pc, #176]	; (800b988 <udp_sendto_if_src+0x1c8>)
 800b8d8:	4826      	ldr	r0, [pc, #152]	; (800b974 <udp_sendto_if_src+0x1b4>)
 800b8da:	f002 fd2f 	bl	800e33c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8a5b      	ldrh	r3, [r3, #18]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f7 fdc8 	bl	800347e <lwip_htons>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b8f6:	887b      	ldrh	r3, [r7, #2]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f7 fdc0 	bl	800347e <lwip_htons>
 800b8fe:	4603      	mov	r3, r0
 800b900:	461a      	mov	r2, r3
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2200      	movs	r2, #0
 800b90a:	719a      	strb	r2, [r3, #6]
 800b90c:	2200      	movs	r2, #0
 800b90e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	891b      	ldrh	r3, [r3, #8]
 800b914:	4618      	mov	r0, r3
 800b916:	f7f7 fdb2 	bl	800347e <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	461a      	mov	r2, r3
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b922:	2311      	movs	r3, #17
 800b924:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	7adb      	ldrb	r3, [r3, #11]
 800b92a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	7a9b      	ldrb	r3, [r3, #10]
 800b930:	7cb9      	ldrb	r1, [r7, #18]
 800b932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b934:	9202      	str	r2, [sp, #8]
 800b936:	7cfa      	ldrb	r2, [r7, #19]
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	460b      	mov	r3, r1
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b942:	69f8      	ldr	r0, [r7, #28]
 800b944:	f001 fcac 	bl	800d2a0 <ip4_output_if_src>
 800b948:	4603      	mov	r3, r0
 800b94a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b94c:	69fa      	ldr	r2, [r7, #28]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	429a      	cmp	r2, r3
 800b952:	d004      	beq.n	800b95e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b954:	69f8      	ldr	r0, [r7, #28]
 800b956:	f7f9 f831 	bl	80049bc <pbuf_free>
    q = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b95e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3720      	adds	r7, #32
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	0801140c 	.word	0x0801140c
 800b970:	080115f8 	.word	0x080115f8
 800b974:	08011460 	.word	0x08011460
 800b978:	08011618 	.word	0x08011618
 800b97c:	08011638 	.word	0x08011638
 800b980:	0801165c 	.word	0x0801165c
 800b984:	08011680 	.word	0x08011680
 800b988:	080116a4 	.word	0x080116a4

0800b98c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	4613      	mov	r3, r2
 800b998:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b9a0:	4b39      	ldr	r3, [pc, #228]	; (800ba88 <udp_bind+0xfc>)
 800b9a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d109      	bne.n	800b9be <udp_bind+0x32>
 800b9aa:	4b38      	ldr	r3, [pc, #224]	; (800ba8c <udp_bind+0x100>)
 800b9ac:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b9b0:	4937      	ldr	r1, [pc, #220]	; (800ba90 <udp_bind+0x104>)
 800b9b2:	4838      	ldr	r0, [pc, #224]	; (800ba94 <udp_bind+0x108>)
 800b9b4:	f002 fcc2 	bl	800e33c <iprintf>
 800b9b8:	f06f 030f 	mvn.w	r3, #15
 800b9bc:	e060      	b.n	800ba80 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9c2:	4b35      	ldr	r3, [pc, #212]	; (800ba98 <udp_bind+0x10c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e009      	b.n	800b9de <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d102      	bne.n	800b9d8 <udp_bind+0x4c>
      rebind = 1;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	74fb      	strb	r3, [r7, #19]
      break;
 800b9d6:	e005      	b.n	800b9e4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1f2      	bne.n	800b9ca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b9e4:	88fb      	ldrh	r3, [r7, #6]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d109      	bne.n	800b9fe <udp_bind+0x72>
    port = udp_new_port();
 800b9ea:	f7ff fc35 	bl	800b258 <udp_new_port>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b9f2:	88fb      	ldrh	r3, [r7, #6]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d12c      	bne.n	800ba52 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b9f8:	f06f 0307 	mvn.w	r3, #7
 800b9fc:	e040      	b.n	800ba80 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9fe:	4b26      	ldr	r3, [pc, #152]	; (800ba98 <udp_bind+0x10c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	e022      	b.n	800ba4c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d01b      	beq.n	800ba46 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	8a5b      	ldrh	r3, [r3, #18]
 800ba12:	88fa      	ldrh	r2, [r7, #6]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d116      	bne.n	800ba46 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d00d      	beq.n	800ba40 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <udp_bind+0xb4>
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d006      	beq.n	800ba40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ba32:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d003      	beq.n	800ba40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ba40:	f06f 0307 	mvn.w	r3, #7
 800ba44:	e01c      	b.n	800ba80 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1d9      	bne.n	800ba06 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <udp_bind+0xd2>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	e000      	b.n	800ba60 <udp_bind+0xd4>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	88fa      	ldrh	r2, [r7, #6]
 800ba68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ba6a:	7cfb      	ldrb	r3, [r7, #19]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d106      	bne.n	800ba7e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ba70:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <udp_bind+0x10c>)
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ba78:	4a07      	ldr	r2, [pc, #28]	; (800ba98 <udp_bind+0x10c>)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	08011f14 	.word	0x08011f14
 800ba8c:	0801140c 	.word	0x0801140c
 800ba90:	080116d4 	.word	0x080116d4
 800ba94:	08011460 	.word	0x08011460
 800ba98:	2000679c 	.word	0x2000679c

0800ba9c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	4613      	mov	r3, r2
 800baa8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d109      	bne.n	800bac4 <udp_connect+0x28>
 800bab0:	4b2c      	ldr	r3, [pc, #176]	; (800bb64 <udp_connect+0xc8>)
 800bab2:	f240 4235 	movw	r2, #1077	; 0x435
 800bab6:	492c      	ldr	r1, [pc, #176]	; (800bb68 <udp_connect+0xcc>)
 800bab8:	482c      	ldr	r0, [pc, #176]	; (800bb6c <udp_connect+0xd0>)
 800baba:	f002 fc3f 	bl	800e33c <iprintf>
 800babe:	f06f 030f 	mvn.w	r3, #15
 800bac2:	e04b      	b.n	800bb5c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <udp_connect+0x42>
 800baca:	4b26      	ldr	r3, [pc, #152]	; (800bb64 <udp_connect+0xc8>)
 800bacc:	f240 4236 	movw	r2, #1078	; 0x436
 800bad0:	4927      	ldr	r1, [pc, #156]	; (800bb70 <udp_connect+0xd4>)
 800bad2:	4826      	ldr	r0, [pc, #152]	; (800bb6c <udp_connect+0xd0>)
 800bad4:	f002 fc32 	bl	800e33c <iprintf>
 800bad8:	f06f 030f 	mvn.w	r3, #15
 800badc:	e03e      	b.n	800bb5c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	8a5b      	ldrh	r3, [r3, #18]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10f      	bne.n	800bb06 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	8a5b      	ldrh	r3, [r3, #18]
 800baec:	461a      	mov	r2, r3
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f7ff ff4c 	bl	800b98c <udp_bind>
 800baf4:	4603      	mov	r3, r0
 800baf6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800baf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <udp_connect+0x6a>
      return err;
 800bb00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb04:	e02a      	b.n	800bb5c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <udp_connect+0x76>
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	e000      	b.n	800bb14 <udp_connect+0x78>
 800bb12:	2300      	movs	r3, #0
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	88fa      	ldrh	r2, [r7, #6]
 800bb1c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	7c1b      	ldrb	r3, [r3, #16]
 800bb22:	f043 0304 	orr.w	r3, r3, #4
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb2c:	4b11      	ldr	r3, [pc, #68]	; (800bb74 <udp_connect+0xd8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	617b      	str	r3, [r7, #20]
 800bb32:	e008      	b.n	800bb46 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d101      	bne.n	800bb40 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e00d      	b.n	800bb5c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1f3      	bne.n	800bb34 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <udp_connect+0xd8>)
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bb54:	4a07      	ldr	r2, [pc, #28]	; (800bb74 <udp_connect+0xd8>)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	0801140c 	.word	0x0801140c
 800bb68:	080116ec 	.word	0x080116ec
 800bb6c:	08011460 	.word	0x08011460
 800bb70:	08011708 	.word	0x08011708
 800bb74:	2000679c 	.word	0x2000679c

0800bb78 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d107      	bne.n	800bb96 <udp_disconnect+0x1e>
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <udp_disconnect+0x44>)
 800bb88:	f240 426a 	movw	r2, #1130	; 0x46a
 800bb8c:	490c      	ldr	r1, [pc, #48]	; (800bbc0 <udp_disconnect+0x48>)
 800bb8e:	480d      	ldr	r0, [pc, #52]	; (800bbc4 <udp_disconnect+0x4c>)
 800bb90:	f002 fbd4 	bl	800e33c <iprintf>
 800bb94:	e00f      	b.n	800bbb6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7c1b      	ldrb	r3, [r3, #16]
 800bbac:	f023 0304 	bic.w	r3, r3, #4
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	741a      	strb	r2, [r3, #16]
}
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	0801140c 	.word	0x0801140c
 800bbc0:	08011724 	.word	0x08011724
 800bbc4:	08011460 	.word	0x08011460

0800bbc8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d107      	bne.n	800bbea <udp_recv+0x22>
 800bbda:	4b08      	ldr	r3, [pc, #32]	; (800bbfc <udp_recv+0x34>)
 800bbdc:	f240 428a 	movw	r2, #1162	; 0x48a
 800bbe0:	4907      	ldr	r1, [pc, #28]	; (800bc00 <udp_recv+0x38>)
 800bbe2:	4808      	ldr	r0, [pc, #32]	; (800bc04 <udp_recv+0x3c>)
 800bbe4:	f002 fbaa 	bl	800e33c <iprintf>
 800bbe8:	e005      	b.n	800bbf6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	61da      	str	r2, [r3, #28]
}
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	0801140c 	.word	0x0801140c
 800bc00:	08011740 	.word	0x08011740
 800bc04:	08011460 	.word	0x08011460

0800bc08 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d107      	bne.n	800bc26 <udp_remove+0x1e>
 800bc16:	4b19      	ldr	r3, [pc, #100]	; (800bc7c <udp_remove+0x74>)
 800bc18:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800bc1c:	4918      	ldr	r1, [pc, #96]	; (800bc80 <udp_remove+0x78>)
 800bc1e:	4819      	ldr	r0, [pc, #100]	; (800bc84 <udp_remove+0x7c>)
 800bc20:	f002 fb8c 	bl	800e33c <iprintf>
 800bc24:	e026      	b.n	800bc74 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bc26:	4b18      	ldr	r3, [pc, #96]	; (800bc88 <udp_remove+0x80>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d105      	bne.n	800bc3c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bc30:	4b15      	ldr	r3, [pc, #84]	; (800bc88 <udp_remove+0x80>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	4a14      	ldr	r2, [pc, #80]	; (800bc88 <udp_remove+0x80>)
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	e017      	b.n	800bc6c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bc3c:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <udp_remove+0x80>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	e010      	b.n	800bc66 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d009      	beq.n	800bc60 <udp_remove+0x58>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d104      	bne.n	800bc60 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	60da      	str	r2, [r3, #12]
        break;
 800bc5e:	e005      	b.n	800bc6c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1eb      	bne.n	800bc44 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	2000      	movs	r0, #0
 800bc70:	f7f8 f8a6 	bl	8003dc0 <memp_free>
}
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0801140c 	.word	0x0801140c
 800bc80:	08011758 	.word	0x08011758
 800bc84:	08011460 	.word	0x08011460
 800bc88:	2000679c 	.word	0x2000679c

0800bc8c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bc92:	2000      	movs	r0, #0
 800bc94:	f7f8 f848 	bl	8003d28 <memp_malloc>
 800bc98:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d007      	beq.n	800bcb0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bca0:	2220      	movs	r2, #32
 800bca2:	2100      	movs	r1, #0
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f002 fb41 	bl	800e32c <memset>
    pcb->ttl = UDP_TTL;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	22ff      	movs	r2, #255	; 0xff
 800bcae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bcb0:	687b      	ldr	r3, [r7, #4]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d01e      	beq.n	800bd0a <udp_netif_ip_addr_changed+0x4e>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d01a      	beq.n	800bd0a <udp_netif_ip_addr_changed+0x4e>
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d017      	beq.n	800bd0a <udp_netif_ip_addr_changed+0x4e>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d013      	beq.n	800bd0a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bce2:	4b0d      	ldr	r3, [pc, #52]	; (800bd18 <udp_netif_ip_addr_changed+0x5c>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e00c      	b.n	800bd04 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d103      	bne.n	800bcfe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1ef      	bne.n	800bcea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bd0a:	bf00      	nop
 800bd0c:	3714      	adds	r7, #20
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	2000679c 	.word	0x2000679c

0800bd1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bd24:	4915      	ldr	r1, [pc, #84]	; (800bd7c <etharp_free_entry+0x60>)
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	4413      	add	r3, r2
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	440b      	add	r3, r1
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d013      	beq.n	800bd60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bd38:	4910      	ldr	r1, [pc, #64]	; (800bd7c <etharp_free_entry+0x60>)
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	4413      	add	r3, r2
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	440b      	add	r3, r1
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f8 fe37 	bl	80049bc <pbuf_free>
    arp_table[i].q = NULL;
 800bd4e:	490b      	ldr	r1, [pc, #44]	; (800bd7c <etharp_free_entry+0x60>)
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	4413      	add	r3, r2
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	440b      	add	r3, r1
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bd60:	4906      	ldr	r1, [pc, #24]	; (800bd7c <etharp_free_entry+0x60>)
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	4613      	mov	r3, r2
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	4413      	add	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	440b      	add	r3, r1
 800bd6e:	3314      	adds	r3, #20
 800bd70:	2200      	movs	r2, #0
 800bd72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	200067a0 	.word	0x200067a0

0800bd80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd86:	2300      	movs	r3, #0
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	e096      	b.n	800beba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bd8c:	494f      	ldr	r1, [pc, #316]	; (800becc <etharp_tmr+0x14c>)
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	4613      	mov	r3, r2
 800bd92:	005b      	lsls	r3, r3, #1
 800bd94:	4413      	add	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	440b      	add	r3, r1
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 8086 	beq.w	800beb4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bda8:	4948      	ldr	r1, [pc, #288]	; (800becc <etharp_tmr+0x14c>)
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	4613      	mov	r3, r2
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	4413      	add	r3, r2
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	440b      	add	r3, r1
 800bdb6:	3312      	adds	r3, #18
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	b298      	uxth	r0, r3
 800bdbe:	4943      	ldr	r1, [pc, #268]	; (800becc <etharp_tmr+0x14c>)
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	3312      	adds	r3, #18
 800bdce:	4602      	mov	r2, r0
 800bdd0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bdd2:	493e      	ldr	r1, [pc, #248]	; (800becc <etharp_tmr+0x14c>)
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	440b      	add	r3, r1
 800bde0:	3312      	adds	r3, #18
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bde8:	d215      	bcs.n	800be16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bdea:	4938      	ldr	r1, [pc, #224]	; (800becc <etharp_tmr+0x14c>)
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3314      	adds	r3, #20
 800bdfa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d10e      	bne.n	800be1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800be00:	4932      	ldr	r1, [pc, #200]	; (800becc <etharp_tmr+0x14c>)
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	4613      	mov	r3, r2
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	4413      	add	r3, r2
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	440b      	add	r3, r1
 800be0e:	3312      	adds	r3, #18
 800be10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800be12:	2b04      	cmp	r3, #4
 800be14:	d903      	bls.n	800be1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7ff ff80 	bl	800bd1c <etharp_free_entry>
 800be1c:	e04a      	b.n	800beb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800be1e:	492b      	ldr	r1, [pc, #172]	; (800becc <etharp_tmr+0x14c>)
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	4413      	add	r3, r2
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	440b      	add	r3, r1
 800be2c:	3314      	adds	r3, #20
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b03      	cmp	r3, #3
 800be32:	d10a      	bne.n	800be4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800be34:	4925      	ldr	r1, [pc, #148]	; (800becc <etharp_tmr+0x14c>)
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	4613      	mov	r3, r2
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	4413      	add	r3, r2
 800be3e:	00db      	lsls	r3, r3, #3
 800be40:	440b      	add	r3, r1
 800be42:	3314      	adds	r3, #20
 800be44:	2204      	movs	r2, #4
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	e034      	b.n	800beb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800be4a:	4920      	ldr	r1, [pc, #128]	; (800becc <etharp_tmr+0x14c>)
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4413      	add	r3, r2
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	440b      	add	r3, r1
 800be58:	3314      	adds	r3, #20
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	d10a      	bne.n	800be76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800be60:	491a      	ldr	r1, [pc, #104]	; (800becc <etharp_tmr+0x14c>)
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	4413      	add	r3, r2
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	440b      	add	r3, r1
 800be6e:	3314      	adds	r3, #20
 800be70:	2202      	movs	r2, #2
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	e01e      	b.n	800beb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800be76:	4915      	ldr	r1, [pc, #84]	; (800becc <etharp_tmr+0x14c>)
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	440b      	add	r3, r1
 800be84:	3314      	adds	r3, #20
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d113      	bne.n	800beb4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800be8c:	490f      	ldr	r1, [pc, #60]	; (800becc <etharp_tmr+0x14c>)
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4613      	mov	r3, r2
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	440b      	add	r3, r1
 800be9a:	3308      	adds	r3, #8
 800be9c:	6818      	ldr	r0, [r3, #0]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	4613      	mov	r3, r2
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	4413      	add	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	4a08      	ldr	r2, [pc, #32]	; (800becc <etharp_tmr+0x14c>)
 800beaa:	4413      	add	r3, r2
 800beac:	3304      	adds	r3, #4
 800beae:	4619      	mov	r1, r3
 800beb0:	f000 fe6e 	bl	800cb90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3301      	adds	r3, #1
 800beb8:	607b      	str	r3, [r7, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b09      	cmp	r3, #9
 800bebe:	f77f af65 	ble.w	800bd8c <etharp_tmr+0xc>
      }
    }
  }
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	200067a0 	.word	0x200067a0

0800bed0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b08a      	sub	sp, #40	; 0x28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	460b      	mov	r3, r1
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bede:	230a      	movs	r3, #10
 800bee0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bee2:	230a      	movs	r3, #10
 800bee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bee6:	230a      	movs	r3, #10
 800bee8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800beee:	230a      	movs	r3, #10
 800bef0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	83bb      	strh	r3, [r7, #28]
 800bef6:	2300      	movs	r3, #0
 800bef8:	837b      	strh	r3, [r7, #26]
 800befa:	2300      	movs	r3, #0
 800befc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800befe:	2300      	movs	r3, #0
 800bf00:	843b      	strh	r3, [r7, #32]
 800bf02:	e0ae      	b.n	800c062 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bf04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf08:	49a6      	ldr	r1, [pc, #664]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	440b      	add	r3, r1
 800bf14:	3314      	adds	r3, #20
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bf1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf1e:	2b0a      	cmp	r3, #10
 800bf20:	d105      	bne.n	800bf2e <etharp_find_entry+0x5e>
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d102      	bne.n	800bf2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bf28:	8c3b      	ldrh	r3, [r7, #32]
 800bf2a:	847b      	strh	r3, [r7, #34]	; 0x22
 800bf2c:	e095      	b.n	800c05a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 8092 	beq.w	800c05a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d009      	beq.n	800bf50 <etharp_find_entry+0x80>
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d806      	bhi.n	800bf50 <etharp_find_entry+0x80>
 800bf42:	4b99      	ldr	r3, [pc, #612]	; (800c1a8 <etharp_find_entry+0x2d8>)
 800bf44:	f240 1223 	movw	r2, #291	; 0x123
 800bf48:	4998      	ldr	r1, [pc, #608]	; (800c1ac <etharp_find_entry+0x2dc>)
 800bf4a:	4899      	ldr	r0, [pc, #612]	; (800c1b0 <etharp_find_entry+0x2e0>)
 800bf4c:	f002 f9f6 	bl	800e33c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d020      	beq.n	800bf98 <etharp_find_entry+0xc8>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6819      	ldr	r1, [r3, #0]
 800bf5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf5e:	4891      	ldr	r0, [pc, #580]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bf60:	4613      	mov	r3, r2
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	4413      	add	r3, r2
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	4403      	add	r3, r0
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	d112      	bne.n	800bf98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00c      	beq.n	800bf92 <etharp_find_entry+0xc2>
 800bf78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf7c:	4989      	ldr	r1, [pc, #548]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bf7e:	4613      	mov	r3, r2
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	4413      	add	r3, r2
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	440b      	add	r3, r1
 800bf88:	3308      	adds	r3, #8
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d102      	bne.n	800bf98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bf92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf96:	e100      	b.n	800c19a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d140      	bne.n	800c020 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bf9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfa2:	4980      	ldr	r1, [pc, #512]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	4413      	add	r3, r2
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	440b      	add	r3, r1
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d01a      	beq.n	800bfea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bfb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfb8:	497a      	ldr	r1, [pc, #488]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bfba:	4613      	mov	r3, r2
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	4413      	add	r3, r2
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	440b      	add	r3, r1
 800bfc4:	3312      	adds	r3, #18
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	8bba      	ldrh	r2, [r7, #28]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d845      	bhi.n	800c05a <etharp_find_entry+0x18a>
            old_queue = i;
 800bfce:	8c3b      	ldrh	r3, [r7, #32]
 800bfd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bfd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfd6:	4973      	ldr	r1, [pc, #460]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bfd8:	4613      	mov	r3, r2
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	4413      	add	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	440b      	add	r3, r1
 800bfe2:	3312      	adds	r3, #18
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	83bb      	strh	r3, [r7, #28]
 800bfe8:	e037      	b.n	800c05a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bfea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfee:	496d      	ldr	r1, [pc, #436]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800bff0:	4613      	mov	r3, r2
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	4413      	add	r3, r2
 800bff6:	00db      	lsls	r3, r3, #3
 800bff8:	440b      	add	r3, r1
 800bffa:	3312      	adds	r3, #18
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	8b7a      	ldrh	r2, [r7, #26]
 800c000:	429a      	cmp	r2, r3
 800c002:	d82a      	bhi.n	800c05a <etharp_find_entry+0x18a>
            old_pending = i;
 800c004:	8c3b      	ldrh	r3, [r7, #32]
 800c006:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c00c:	4965      	ldr	r1, [pc, #404]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c00e:	4613      	mov	r3, r2
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	4413      	add	r3, r2
 800c014:	00db      	lsls	r3, r3, #3
 800c016:	440b      	add	r3, r1
 800c018:	3312      	adds	r3, #18
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	837b      	strh	r3, [r7, #26]
 800c01e:	e01c      	b.n	800c05a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d919      	bls.n	800c05a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c026:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c02a:	495e      	ldr	r1, [pc, #376]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c02c:	4613      	mov	r3, r2
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	4413      	add	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	440b      	add	r3, r1
 800c036:	3312      	adds	r3, #18
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	8b3a      	ldrh	r2, [r7, #24]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d80c      	bhi.n	800c05a <etharp_find_entry+0x18a>
            old_stable = i;
 800c040:	8c3b      	ldrh	r3, [r7, #32]
 800c042:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c044:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c048:	4956      	ldr	r1, [pc, #344]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c04a:	4613      	mov	r3, r2
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	4413      	add	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	440b      	add	r3, r1
 800c054:	3312      	adds	r3, #18
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c05a:	8c3b      	ldrh	r3, [r7, #32]
 800c05c:	3301      	adds	r3, #1
 800c05e:	b29b      	uxth	r3, r3
 800c060:	843b      	strh	r3, [r7, #32]
 800c062:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c066:	2b09      	cmp	r3, #9
 800c068:	f77f af4c 	ble.w	800bf04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c06c:	7afb      	ldrb	r3, [r7, #11]
 800c06e:	f003 0302 	and.w	r3, r3, #2
 800c072:	2b00      	cmp	r3, #0
 800c074:	d108      	bne.n	800c088 <etharp_find_entry+0x1b8>
 800c076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c07a:	2b0a      	cmp	r3, #10
 800c07c:	d107      	bne.n	800c08e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c07e:	7afb      	ldrb	r3, [r7, #11]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c088:	f04f 33ff 	mov.w	r3, #4294967295
 800c08c:	e085      	b.n	800c19a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c08e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c092:	2b09      	cmp	r3, #9
 800c094:	dc02      	bgt.n	800c09c <etharp_find_entry+0x1cc>
    i = empty;
 800c096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c098:	843b      	strh	r3, [r7, #32]
 800c09a:	e039      	b.n	800c110 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c09c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c0a0:	2b09      	cmp	r3, #9
 800c0a2:	dc14      	bgt.n	800c0ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c0a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c0a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0ac:	493d      	ldr	r1, [pc, #244]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4413      	add	r3, r2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	440b      	add	r3, r1
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d018      	beq.n	800c0f0 <etharp_find_entry+0x220>
 800c0be:	4b3a      	ldr	r3, [pc, #232]	; (800c1a8 <etharp_find_entry+0x2d8>)
 800c0c0:	f240 126d 	movw	r2, #365	; 0x16d
 800c0c4:	493b      	ldr	r1, [pc, #236]	; (800c1b4 <etharp_find_entry+0x2e4>)
 800c0c6:	483a      	ldr	r0, [pc, #232]	; (800c1b0 <etharp_find_entry+0x2e0>)
 800c0c8:	f002 f938 	bl	800e33c <iprintf>
 800c0cc:	e010      	b.n	800c0f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c0ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c0d2:	2b09      	cmp	r3, #9
 800c0d4:	dc02      	bgt.n	800c0dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c0d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0d8:	843b      	strh	r3, [r7, #32]
 800c0da:	e009      	b.n	800c0f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c0dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c0e0:	2b09      	cmp	r3, #9
 800c0e2:	dc02      	bgt.n	800c0ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c0e4:	8bfb      	ldrh	r3, [r7, #30]
 800c0e6:	843b      	strh	r3, [r7, #32]
 800c0e8:	e002      	b.n	800c0f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ee:	e054      	b.n	800c19a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c0f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c0f4:	2b09      	cmp	r3, #9
 800c0f6:	dd06      	ble.n	800c106 <etharp_find_entry+0x236>
 800c0f8:	4b2b      	ldr	r3, [pc, #172]	; (800c1a8 <etharp_find_entry+0x2d8>)
 800c0fa:	f240 127f 	movw	r2, #383	; 0x17f
 800c0fe:	492e      	ldr	r1, [pc, #184]	; (800c1b8 <etharp_find_entry+0x2e8>)
 800c100:	482b      	ldr	r0, [pc, #172]	; (800c1b0 <etharp_find_entry+0x2e0>)
 800c102:	f002 f91b 	bl	800e33c <iprintf>
    etharp_free_entry(i);
 800c106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff fe06 	bl	800bd1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c110:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c114:	2b09      	cmp	r3, #9
 800c116:	dd06      	ble.n	800c126 <etharp_find_entry+0x256>
 800c118:	4b23      	ldr	r3, [pc, #140]	; (800c1a8 <etharp_find_entry+0x2d8>)
 800c11a:	f240 1283 	movw	r2, #387	; 0x183
 800c11e:	4926      	ldr	r1, [pc, #152]	; (800c1b8 <etharp_find_entry+0x2e8>)
 800c120:	4823      	ldr	r0, [pc, #140]	; (800c1b0 <etharp_find_entry+0x2e0>)
 800c122:	f002 f90b 	bl	800e33c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c12a:	491e      	ldr	r1, [pc, #120]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c12c:	4613      	mov	r3, r2
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4413      	add	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	440b      	add	r3, r1
 800c136:	3314      	adds	r3, #20
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <etharp_find_entry+0x27c>
 800c13e:	4b1a      	ldr	r3, [pc, #104]	; (800c1a8 <etharp_find_entry+0x2d8>)
 800c140:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c144:	491d      	ldr	r1, [pc, #116]	; (800c1bc <etharp_find_entry+0x2ec>)
 800c146:	481a      	ldr	r0, [pc, #104]	; (800c1b0 <etharp_find_entry+0x2e0>)
 800c148:	f002 f8f8 	bl	800e33c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00b      	beq.n	800c16a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6819      	ldr	r1, [r3, #0]
 800c15a:	4812      	ldr	r0, [pc, #72]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c15c:	4613      	mov	r3, r2
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	4413      	add	r3, r2
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	4403      	add	r3, r0
 800c166:	3304      	adds	r3, #4
 800c168:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c16a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c16e:	490d      	ldr	r1, [pc, #52]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c170:	4613      	mov	r3, r2
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	4413      	add	r3, r2
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	440b      	add	r3, r1
 800c17a:	3312      	adds	r3, #18
 800c17c:	2200      	movs	r2, #0
 800c17e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c184:	4907      	ldr	r1, [pc, #28]	; (800c1a4 <etharp_find_entry+0x2d4>)
 800c186:	4613      	mov	r3, r2
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	4413      	add	r3, r2
 800c18c:	00db      	lsls	r3, r3, #3
 800c18e:	440b      	add	r3, r1
 800c190:	3308      	adds	r3, #8
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3728      	adds	r7, #40	; 0x28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	200067a0 	.word	0x200067a0
 800c1a8:	08011770 	.word	0x08011770
 800c1ac:	080117a8 	.word	0x080117a8
 800c1b0:	080117e8 	.word	0x080117e8
 800c1b4:	08011810 	.word	0x08011810
 800c1b8:	08011828 	.word	0x08011828
 800c1bc:	0801183c 	.word	0x0801183c

0800c1c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1d4:	2b06      	cmp	r3, #6
 800c1d6:	d006      	beq.n	800c1e6 <etharp_update_arp_entry+0x26>
 800c1d8:	4b48      	ldr	r3, [pc, #288]	; (800c2fc <etharp_update_arp_entry+0x13c>)
 800c1da:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c1de:	4948      	ldr	r1, [pc, #288]	; (800c300 <etharp_update_arp_entry+0x140>)
 800c1e0:	4848      	ldr	r0, [pc, #288]	; (800c304 <etharp_update_arp_entry+0x144>)
 800c1e2:	f002 f8ab 	bl	800e33c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d012      	beq.n	800c212 <etharp_update_arp_entry+0x52>
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00e      	beq.n	800c212 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68f9      	ldr	r1, [r7, #12]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f001 f8fe 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800c200:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c202:	2b00      	cmp	r3, #0
 800c204:	d105      	bne.n	800c212 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c20e:	2be0      	cmp	r3, #224	; 0xe0
 800c210:	d102      	bne.n	800c218 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c212:	f06f 030f 	mvn.w	r3, #15
 800c216:	e06c      	b.n	800c2f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c218:	78fb      	ldrb	r3, [r7, #3]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	4619      	mov	r1, r3
 800c21e:	68b8      	ldr	r0, [r7, #8]
 800c220:	f7ff fe56 	bl	800bed0 <etharp_find_entry>
 800c224:	4603      	mov	r3, r0
 800c226:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c228:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	da02      	bge.n	800c236 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c230:	8afb      	ldrh	r3, [r7, #22]
 800c232:	b25b      	sxtb	r3, r3
 800c234:	e05d      	b.n	800c2f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c236:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c23a:	4933      	ldr	r1, [pc, #204]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c23c:	4613      	mov	r3, r2
 800c23e:	005b      	lsls	r3, r3, #1
 800c240:	4413      	add	r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	440b      	add	r3, r1
 800c246:	3314      	adds	r3, #20
 800c248:	2202      	movs	r2, #2
 800c24a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c24c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c250:	492d      	ldr	r1, [pc, #180]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c252:	4613      	mov	r3, r2
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	4413      	add	r3, r2
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	440b      	add	r3, r1
 800c25c:	3308      	adds	r3, #8
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c266:	4613      	mov	r3, r2
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	4413      	add	r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	3308      	adds	r3, #8
 800c270:	4a25      	ldr	r2, [pc, #148]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c272:	4413      	add	r3, r2
 800c274:	3304      	adds	r3, #4
 800c276:	2206      	movs	r2, #6
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f002 f848 	bl	800e310 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c284:	4920      	ldr	r1, [pc, #128]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c286:	4613      	mov	r3, r2
 800c288:	005b      	lsls	r3, r3, #1
 800c28a:	4413      	add	r3, r2
 800c28c:	00db      	lsls	r3, r3, #3
 800c28e:	440b      	add	r3, r1
 800c290:	3312      	adds	r3, #18
 800c292:	2200      	movs	r2, #0
 800c294:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c296:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c29a:	491b      	ldr	r1, [pc, #108]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c29c:	4613      	mov	r3, r2
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	4413      	add	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	440b      	add	r3, r1
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d021      	beq.n	800c2f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c2ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2b0:	4915      	ldr	r1, [pc, #84]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	4413      	add	r3, r2
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	440b      	add	r3, r1
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c2c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2c4:	4910      	ldr	r1, [pc, #64]	; (800c308 <etharp_update_arp_entry+0x148>)
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	4413      	add	r3, r2
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	440b      	add	r3, r1
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800c2da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6939      	ldr	r1, [r7, #16]
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f001 ff97 	bl	800e218 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f7f8 fb66 	bl	80049bc <pbuf_free>
  }
  return ERR_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	08011770 	.word	0x08011770
 800c300:	08011868 	.word	0x08011868
 800c304:	080117e8 	.word	0x080117e8
 800c308:	200067a0 	.word	0x200067a0

0800c30c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c314:	2300      	movs	r3, #0
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e01e      	b.n	800c358 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c31a:	4913      	ldr	r1, [pc, #76]	; (800c368 <etharp_cleanup_netif+0x5c>)
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	440b      	add	r3, r1
 800c328:	3314      	adds	r3, #20
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c32e:	7afb      	ldrb	r3, [r7, #11]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00e      	beq.n	800c352 <etharp_cleanup_netif+0x46>
 800c334:	490c      	ldr	r1, [pc, #48]	; (800c368 <etharp_cleanup_netif+0x5c>)
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	4613      	mov	r3, r2
 800c33a:	005b      	lsls	r3, r3, #1
 800c33c:	4413      	add	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	440b      	add	r3, r1
 800c342:	3308      	adds	r3, #8
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d102      	bne.n	800c352 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fce5 	bl	800bd1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2b09      	cmp	r3, #9
 800c35c:	dddd      	ble.n	800c31a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c35e:	bf00      	nop
 800c360:	bf00      	nop
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	200067a0 	.word	0x200067a0

0800c36c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c36c:	b5b0      	push	{r4, r5, r7, lr}
 800c36e:	b08a      	sub	sp, #40	; 0x28
 800c370:	af04      	add	r7, sp, #16
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d107      	bne.n	800c38c <etharp_input+0x20>
 800c37c:	4b3d      	ldr	r3, [pc, #244]	; (800c474 <etharp_input+0x108>)
 800c37e:	f240 228a 	movw	r2, #650	; 0x28a
 800c382:	493d      	ldr	r1, [pc, #244]	; (800c478 <etharp_input+0x10c>)
 800c384:	483d      	ldr	r0, [pc, #244]	; (800c47c <etharp_input+0x110>)
 800c386:	f001 ffd9 	bl	800e33c <iprintf>
 800c38a:	e06f      	b.n	800c46c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	b29b      	uxth	r3, r3
 800c398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c39c:	d10c      	bne.n	800c3b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c3a2:	2b06      	cmp	r3, #6
 800c3a4:	d108      	bne.n	800c3b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	d104      	bne.n	800c3b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	885b      	ldrh	r3, [r3, #2]
 800c3b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d003      	beq.n	800c3c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7f8 faff 	bl	80049bc <pbuf_free>
    return;
 800c3be:	e055      	b.n	800c46c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	330e      	adds	r3, #14
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	3318      	adds	r3, #24
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <etharp_input+0x74>
    for_us = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	75fb      	strb	r3, [r7, #23]
 800c3de:	e009      	b.n	800c3f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	bf0c      	ite	eq
 800c3ec:	2301      	moveq	r3, #1
 800c3ee:	2300      	movne	r3, #0
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f103 0208 	add.w	r2, r3, #8
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d001      	beq.n	800c404 <etharp_input+0x98>
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <etharp_input+0x9a>
 800c404:	2302      	movs	r3, #2
 800c406:	f107 010c 	add.w	r1, r7, #12
 800c40a:	6838      	ldr	r0, [r7, #0]
 800c40c:	f7ff fed8 	bl	800c1c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	88db      	ldrh	r3, [r3, #6]
 800c414:	b29b      	uxth	r3, r3
 800c416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c41a:	d003      	beq.n	800c424 <etharp_input+0xb8>
 800c41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c420:	d01e      	beq.n	800c460 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c422:	e020      	b.n	800c466 <etharp_input+0xfa>
      if (for_us) {
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01c      	beq.n	800c464 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c444:	2102      	movs	r1, #2
 800c446:	9103      	str	r1, [sp, #12]
 800c448:	f107 010c 	add.w	r1, r7, #12
 800c44c:	9102      	str	r1, [sp, #8]
 800c44e:	9201      	str	r2, [sp, #4]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	462b      	mov	r3, r5
 800c454:	4622      	mov	r2, r4
 800c456:	4601      	mov	r1, r0
 800c458:	6838      	ldr	r0, [r7, #0]
 800c45a:	f000 faeb 	bl	800ca34 <etharp_raw>
      break;
 800c45e:	e001      	b.n	800c464 <etharp_input+0xf8>
      break;
 800c460:	bf00      	nop
 800c462:	e000      	b.n	800c466 <etharp_input+0xfa>
      break;
 800c464:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7f8 faa8 	bl	80049bc <pbuf_free>
}
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bdb0      	pop	{r4, r5, r7, pc}
 800c472:	bf00      	nop
 800c474:	08011770 	.word	0x08011770
 800c478:	080118c0 	.word	0x080118c0
 800c47c:	080117e8 	.word	0x080117e8

0800c480 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af02      	add	r7, sp, #8
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4613      	mov	r3, r2
 800c48c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c48e:	79fa      	ldrb	r2, [r7, #7]
 800c490:	4944      	ldr	r1, [pc, #272]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c492:	4613      	mov	r3, r2
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	4413      	add	r3, r2
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	440b      	add	r3, r1
 800c49c:	3314      	adds	r3, #20
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d806      	bhi.n	800c4b2 <etharp_output_to_arp_index+0x32>
 800c4a4:	4b40      	ldr	r3, [pc, #256]	; (800c5a8 <etharp_output_to_arp_index+0x128>)
 800c4a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c4aa:	4940      	ldr	r1, [pc, #256]	; (800c5ac <etharp_output_to_arp_index+0x12c>)
 800c4ac:	4840      	ldr	r0, [pc, #256]	; (800c5b0 <etharp_output_to_arp_index+0x130>)
 800c4ae:	f001 ff45 	bl	800e33c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c4b2:	79fa      	ldrb	r2, [r7, #7]
 800c4b4:	493b      	ldr	r1, [pc, #236]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4413      	add	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	440b      	add	r3, r1
 800c4c0:	3314      	adds	r3, #20
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d153      	bne.n	800c570 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c4c8:	79fa      	ldrb	r2, [r7, #7]
 800c4ca:	4936      	ldr	r1, [pc, #216]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	4413      	add	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	440b      	add	r3, r1
 800c4d6:	3312      	adds	r3, #18
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c4de:	d919      	bls.n	800c514 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c4e0:	79fa      	ldrb	r2, [r7, #7]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	4a2e      	ldr	r2, [pc, #184]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c4ec:	4413      	add	r3, r2
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fb4c 	bl	800cb90 <etharp_request>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d138      	bne.n	800c570 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c4fe:	79fa      	ldrb	r2, [r7, #7]
 800c500:	4928      	ldr	r1, [pc, #160]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c502:	4613      	mov	r3, r2
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	440b      	add	r3, r1
 800c50c:	3314      	adds	r3, #20
 800c50e:	2203      	movs	r2, #3
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	e02d      	b.n	800c570 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c514:	79fa      	ldrb	r2, [r7, #7]
 800c516:	4923      	ldr	r1, [pc, #140]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c518:	4613      	mov	r3, r2
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	4413      	add	r3, r2
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	440b      	add	r3, r1
 800c522:	3312      	adds	r3, #18
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c52a:	d321      	bcc.n	800c570 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c52c:	79fa      	ldrb	r2, [r7, #7]
 800c52e:	4613      	mov	r3, r2
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	4413      	add	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c538:	4413      	add	r3, r2
 800c53a:	1d19      	adds	r1, r3, #4
 800c53c:	79fa      	ldrb	r2, [r7, #7]
 800c53e:	4613      	mov	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	4413      	add	r3, r2
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	3308      	adds	r3, #8
 800c548:	4a16      	ldr	r2, [pc, #88]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c54a:	4413      	add	r3, r2
 800c54c:	3304      	adds	r3, #4
 800c54e:	461a      	mov	r2, r3
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f000 fafb 	bl	800cb4c <etharp_request_dst>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d109      	bne.n	800c570 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c55c:	79fa      	ldrb	r2, [r7, #7]
 800c55e:	4911      	ldr	r1, [pc, #68]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c560:	4613      	mov	r3, r2
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	4413      	add	r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	440b      	add	r3, r1
 800c56a:	3314      	adds	r3, #20
 800c56c:	2203      	movs	r2, #3
 800c56e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800c576:	79fa      	ldrb	r2, [r7, #7]
 800c578:	4613      	mov	r3, r2
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	4413      	add	r3, r2
 800c57e:	00db      	lsls	r3, r3, #3
 800c580:	3308      	adds	r3, #8
 800c582:	4a08      	ldr	r2, [pc, #32]	; (800c5a4 <etharp_output_to_arp_index+0x124>)
 800c584:	4413      	add	r3, r2
 800c586:	3304      	adds	r3, #4
 800c588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c58c:	9200      	str	r2, [sp, #0]
 800c58e:	460a      	mov	r2, r1
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f001 fe40 	bl	800e218 <ethernet_output>
 800c598:	4603      	mov	r3, r0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	200067a0 	.word	0x200067a0
 800c5a8:	08011770 	.word	0x08011770
 800c5ac:	080118e0 	.word	0x080118e0
 800c5b0:	080117e8 	.word	0x080117e8

0800c5b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08a      	sub	sp, #40	; 0x28
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <etharp_output+0x24>
 800c5ca:	4b73      	ldr	r3, [pc, #460]	; (800c798 <etharp_output+0x1e4>)
 800c5cc:	f240 321e 	movw	r2, #798	; 0x31e
 800c5d0:	4972      	ldr	r1, [pc, #456]	; (800c79c <etharp_output+0x1e8>)
 800c5d2:	4873      	ldr	r0, [pc, #460]	; (800c7a0 <etharp_output+0x1ec>)
 800c5d4:	f001 feb2 	bl	800e33c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <etharp_output+0x38>
 800c5de:	4b6e      	ldr	r3, [pc, #440]	; (800c798 <etharp_output+0x1e4>)
 800c5e0:	f240 321f 	movw	r2, #799	; 0x31f
 800c5e4:	496f      	ldr	r1, [pc, #444]	; (800c7a4 <etharp_output+0x1f0>)
 800c5e6:	486e      	ldr	r0, [pc, #440]	; (800c7a0 <etharp_output+0x1ec>)
 800c5e8:	f001 fea8 	bl	800e33c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <etharp_output+0x4c>
 800c5f2:	4b69      	ldr	r3, [pc, #420]	; (800c798 <etharp_output+0x1e4>)
 800c5f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c5f8:	496b      	ldr	r1, [pc, #428]	; (800c7a8 <etharp_output+0x1f4>)
 800c5fa:	4869      	ldr	r0, [pc, #420]	; (800c7a0 <etharp_output+0x1ec>)
 800c5fc:	f001 fe9e 	bl	800e33c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68f9      	ldr	r1, [r7, #12]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fef8 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c612:	4b66      	ldr	r3, [pc, #408]	; (800c7ac <etharp_output+0x1f8>)
 800c614:	61fb      	str	r3, [r7, #28]
 800c616:	e0af      	b.n	800c778 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c620:	2be0      	cmp	r3, #224	; 0xe0
 800c622:	d118      	bne.n	800c656 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c624:	2301      	movs	r3, #1
 800c626:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c628:	2300      	movs	r3, #0
 800c62a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c62c:	235e      	movs	r3, #94	; 0x5e
 800c62e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3301      	adds	r3, #1
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3302      	adds	r3, #2
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3303      	adds	r3, #3
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c64e:	f107 0310 	add.w	r3, r7, #16
 800c652:	61fb      	str	r3, [r7, #28]
 800c654:	e090      	b.n	800c778 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3304      	adds	r3, #4
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	405a      	eors	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3308      	adds	r3, #8
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4013      	ands	r3, r2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d012      	beq.n	800c694 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c674:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c678:	4293      	cmp	r3, r2
 800c67a:	d00b      	beq.n	800c694 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	330c      	adds	r3, #12
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	330c      	adds	r3, #12
 800c68a:	61bb      	str	r3, [r7, #24]
 800c68c:	e002      	b.n	800c694 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c68e:	f06f 0303 	mvn.w	r3, #3
 800c692:	e07d      	b.n	800c790 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c694:	4b46      	ldr	r3, [pc, #280]	; (800c7b0 <etharp_output+0x1fc>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	4a46      	ldr	r2, [pc, #280]	; (800c7b4 <etharp_output+0x200>)
 800c69c:	460b      	mov	r3, r1
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	440b      	add	r3, r1
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	4413      	add	r3, r2
 800c6a6:	3314      	adds	r3, #20
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d925      	bls.n	800c6fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c6ae:	4b40      	ldr	r3, [pc, #256]	; (800c7b0 <etharp_output+0x1fc>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4a3f      	ldr	r2, [pc, #252]	; (800c7b4 <etharp_output+0x200>)
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	005b      	lsls	r3, r3, #1
 800c6ba:	440b      	add	r3, r1
 800c6bc:	00db      	lsls	r3, r3, #3
 800c6be:	4413      	add	r3, r2
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d117      	bne.n	800c6fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	4b38      	ldr	r3, [pc, #224]	; (800c7b0 <etharp_output+0x1fc>)
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	4937      	ldr	r1, [pc, #220]	; (800c7b4 <etharp_output+0x200>)
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	005b      	lsls	r3, r3, #1
 800c6da:	4403      	add	r3, r0
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	440b      	add	r3, r1
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d108      	bne.n	800c6fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c6e8:	4b31      	ldr	r3, [pc, #196]	; (800c7b0 <etharp_output+0x1fc>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f7ff fec5 	bl	800c480 <etharp_output_to_arp_index>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	e04a      	b.n	800c790 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	75fb      	strb	r3, [r7, #23]
 800c6fe:	e031      	b.n	800c764 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c700:	7dfa      	ldrb	r2, [r7, #23]
 800c702:	492c      	ldr	r1, [pc, #176]	; (800c7b4 <etharp_output+0x200>)
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	440b      	add	r3, r1
 800c70e:	3314      	adds	r3, #20
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d923      	bls.n	800c75e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c716:	7dfa      	ldrb	r2, [r7, #23]
 800c718:	4926      	ldr	r1, [pc, #152]	; (800c7b4 <etharp_output+0x200>)
 800c71a:	4613      	mov	r3, r2
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	4413      	add	r3, r2
 800c720:	00db      	lsls	r3, r3, #3
 800c722:	440b      	add	r3, r1
 800c724:	3308      	adds	r3, #8
 800c726:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d117      	bne.n	800c75e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	6819      	ldr	r1, [r3, #0]
 800c732:	7dfa      	ldrb	r2, [r7, #23]
 800c734:	481f      	ldr	r0, [pc, #124]	; (800c7b4 <etharp_output+0x200>)
 800c736:	4613      	mov	r3, r2
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	4413      	add	r3, r2
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	4403      	add	r3, r0
 800c740:	3304      	adds	r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c744:	4299      	cmp	r1, r3
 800c746:	d10a      	bne.n	800c75e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c748:	4a19      	ldr	r2, [pc, #100]	; (800c7b0 <etharp_output+0x1fc>)
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
 800c74c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c74e:	7dfb      	ldrb	r3, [r7, #23]
 800c750:	461a      	mov	r2, r3
 800c752:	68b9      	ldr	r1, [r7, #8]
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f7ff fe93 	bl	800c480 <etharp_output_to_arp_index>
 800c75a:	4603      	mov	r3, r0
 800c75c:	e018      	b.n	800c790 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	3301      	adds	r3, #1
 800c762:	75fb      	strb	r3, [r7, #23]
 800c764:	7dfb      	ldrb	r3, [r7, #23]
 800c766:	2b09      	cmp	r3, #9
 800c768:	d9ca      	bls.n	800c700 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c76a:	68ba      	ldr	r2, [r7, #8]
 800c76c:	69b9      	ldr	r1, [r7, #24]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f822 	bl	800c7b8 <etharp_query>
 800c774:	4603      	mov	r3, r0
 800c776:	e00b      	b.n	800c790 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800c77e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f001 fd45 	bl	800e218 <ethernet_output>
 800c78e:	4603      	mov	r3, r0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	08011770 	.word	0x08011770
 800c79c:	080118c0 	.word	0x080118c0
 800c7a0:	080117e8 	.word	0x080117e8
 800c7a4:	08011910 	.word	0x08011910
 800c7a8:	080118b0 	.word	0x080118b0
 800c7ac:	08011f18 	.word	0x08011f18
 800c7b0:	20006890 	.word	0x20006890
 800c7b4:	200067a0 	.word	0x200067a0

0800c7b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08c      	sub	sp, #48	; 0x30
 800c7bc:	af02      	add	r7, sp, #8
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3322      	adds	r3, #34	; 0x22
 800c7c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c7ca:	23ff      	movs	r3, #255	; 0xff
 800c7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68f9      	ldr	r1, [r7, #12]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fe0e 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10c      	bne.n	800c800 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c7ee:	2be0      	cmp	r3, #224	; 0xe0
 800c7f0:	d006      	beq.n	800c800 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c800:	f06f 030f 	mvn.w	r3, #15
 800c804:	e101      	b.n	800ca0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	2101      	movs	r1, #1
 800c80a:	68b8      	ldr	r0, [r7, #8]
 800c80c:	f7ff fb60 	bl	800bed0 <etharp_find_entry>
 800c810:	4603      	mov	r3, r0
 800c812:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	da02      	bge.n	800c822 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c81c:	8a7b      	ldrh	r3, [r7, #18]
 800c81e:	b25b      	sxtb	r3, r3
 800c820:	e0f3      	b.n	800ca0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c822:	8a7b      	ldrh	r3, [r7, #18]
 800c824:	2b7e      	cmp	r3, #126	; 0x7e
 800c826:	d906      	bls.n	800c836 <etharp_query+0x7e>
 800c828:	4b7a      	ldr	r3, [pc, #488]	; (800ca14 <etharp_query+0x25c>)
 800c82a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c82e:	497a      	ldr	r1, [pc, #488]	; (800ca18 <etharp_query+0x260>)
 800c830:	487a      	ldr	r0, [pc, #488]	; (800ca1c <etharp_query+0x264>)
 800c832:	f001 fd83 	bl	800e33c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c836:	8a7b      	ldrh	r3, [r7, #18]
 800c838:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c83a:	7c7a      	ldrb	r2, [r7, #17]
 800c83c:	4978      	ldr	r1, [pc, #480]	; (800ca20 <etharp_query+0x268>)
 800c83e:	4613      	mov	r3, r2
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	4413      	add	r3, r2
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	440b      	add	r3, r1
 800c848:	3314      	adds	r3, #20
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d115      	bne.n	800c87c <etharp_query+0xc4>
    is_new_entry = 1;
 800c850:	2301      	movs	r3, #1
 800c852:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c854:	7c7a      	ldrb	r2, [r7, #17]
 800c856:	4972      	ldr	r1, [pc, #456]	; (800ca20 <etharp_query+0x268>)
 800c858:	4613      	mov	r3, r2
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	4413      	add	r3, r2
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	440b      	add	r3, r1
 800c862:	3314      	adds	r3, #20
 800c864:	2201      	movs	r2, #1
 800c866:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c868:	7c7a      	ldrb	r2, [r7, #17]
 800c86a:	496d      	ldr	r1, [pc, #436]	; (800ca20 <etharp_query+0x268>)
 800c86c:	4613      	mov	r3, r2
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	4413      	add	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	440b      	add	r3, r1
 800c876:	3308      	adds	r3, #8
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c87c:	7c7a      	ldrb	r2, [r7, #17]
 800c87e:	4968      	ldr	r1, [pc, #416]	; (800ca20 <etharp_query+0x268>)
 800c880:	4613      	mov	r3, r2
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	4413      	add	r3, r2
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	440b      	add	r3, r1
 800c88a:	3314      	adds	r3, #20
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d011      	beq.n	800c8b6 <etharp_query+0xfe>
 800c892:	7c7a      	ldrb	r2, [r7, #17]
 800c894:	4962      	ldr	r1, [pc, #392]	; (800ca20 <etharp_query+0x268>)
 800c896:	4613      	mov	r3, r2
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	4413      	add	r3, r2
 800c89c:	00db      	lsls	r3, r3, #3
 800c89e:	440b      	add	r3, r1
 800c8a0:	3314      	adds	r3, #20
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d806      	bhi.n	800c8b6 <etharp_query+0xfe>
 800c8a8:	4b5a      	ldr	r3, [pc, #360]	; (800ca14 <etharp_query+0x25c>)
 800c8aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c8ae:	495d      	ldr	r1, [pc, #372]	; (800ca24 <etharp_query+0x26c>)
 800c8b0:	485a      	ldr	r0, [pc, #360]	; (800ca1c <etharp_query+0x264>)
 800c8b2:	f001 fd43 	bl	800e33c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d102      	bne.n	800c8c2 <etharp_query+0x10a>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10c      	bne.n	800c8dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c8c2:	68b9      	ldr	r1, [r7, #8]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 f963 	bl	800cb90 <etharp_request>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <etharp_query+0x124>
      return result;
 800c8d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8da:	e096      	b.n	800ca0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <etharp_query+0x138>
 800c8e2:	4b4c      	ldr	r3, [pc, #304]	; (800ca14 <etharp_query+0x25c>)
 800c8e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c8e8:	494f      	ldr	r1, [pc, #316]	; (800ca28 <etharp_query+0x270>)
 800c8ea:	484c      	ldr	r0, [pc, #304]	; (800ca1c <etharp_query+0x264>)
 800c8ec:	f001 fd26 	bl	800e33c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c8f0:	7c7a      	ldrb	r2, [r7, #17]
 800c8f2:	494b      	ldr	r1, [pc, #300]	; (800ca20 <etharp_query+0x268>)
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	440b      	add	r3, r1
 800c8fe:	3314      	adds	r3, #20
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d917      	bls.n	800c936 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c906:	4a49      	ldr	r2, [pc, #292]	; (800ca2c <etharp_query+0x274>)
 800c908:	7c7b      	ldrb	r3, [r7, #17]
 800c90a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c90c:	7c7a      	ldrb	r2, [r7, #17]
 800c90e:	4613      	mov	r3, r2
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4413      	add	r3, r2
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	3308      	adds	r3, #8
 800c918:	4a41      	ldr	r2, [pc, #260]	; (800ca20 <etharp_query+0x268>)
 800c91a:	4413      	add	r3, r2
 800c91c:	3304      	adds	r3, #4
 800c91e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c922:	9200      	str	r2, [sp, #0]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f001 fc75 	bl	800e218 <ethernet_output>
 800c92e:	4603      	mov	r3, r0
 800c930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c934:	e067      	b.n	800ca06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c936:	7c7a      	ldrb	r2, [r7, #17]
 800c938:	4939      	ldr	r1, [pc, #228]	; (800ca20 <etharp_query+0x268>)
 800c93a:	4613      	mov	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	4413      	add	r3, r2
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	440b      	add	r3, r1
 800c944:	3314      	adds	r3, #20
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d15c      	bne.n	800ca06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c954:	e01c      	b.n	800c990 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	895a      	ldrh	r2, [r3, #10]
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	891b      	ldrh	r3, [r3, #8]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d10a      	bne.n	800c978 <etharp_query+0x1c0>
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d006      	beq.n	800c978 <etharp_query+0x1c0>
 800c96a:	4b2a      	ldr	r3, [pc, #168]	; (800ca14 <etharp_query+0x25c>)
 800c96c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c970:	492f      	ldr	r1, [pc, #188]	; (800ca30 <etharp_query+0x278>)
 800c972:	482a      	ldr	r0, [pc, #168]	; (800ca1c <etharp_query+0x264>)
 800c974:	f001 fce2 	bl	800e33c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	7b1b      	ldrb	r3, [r3, #12]
 800c97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <etharp_query+0x1d2>
        copy_needed = 1;
 800c984:	2301      	movs	r3, #1
 800c986:	61bb      	str	r3, [r7, #24]
        break;
 800c988:	e005      	b.n	800c996 <etharp_query+0x1de>
      }
      p = p->next;
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1df      	bne.n	800c956 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d007      	beq.n	800c9ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c9a2:	200e      	movs	r0, #14
 800c9a4:	f7f8 fa76 	bl	8004e94 <pbuf_clone>
 800c9a8:	61f8      	str	r0, [r7, #28]
 800c9aa:	e004      	b.n	800c9b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c9b0:	69f8      	ldr	r0, [r7, #28]
 800c9b2:	f7f8 f8a3 	bl	8004afc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d021      	beq.n	800ca00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c9bc:	7c7a      	ldrb	r2, [r7, #17]
 800c9be:	4918      	ldr	r1, [pc, #96]	; (800ca20 <etharp_query+0x268>)
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	4413      	add	r3, r2
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	440b      	add	r3, r1
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00a      	beq.n	800c9e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c9d0:	7c7a      	ldrb	r2, [r7, #17]
 800c9d2:	4913      	ldr	r1, [pc, #76]	; (800ca20 <etharp_query+0x268>)
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	4413      	add	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	440b      	add	r3, r1
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f7 ffeb 	bl	80049bc <pbuf_free>
      }
      arp_table[i].q = p;
 800c9e6:	7c7a      	ldrb	r2, [r7, #17]
 800c9e8:	490d      	ldr	r1, [pc, #52]	; (800ca20 <etharp_query+0x268>)
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4413      	add	r3, r2
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	440b      	add	r3, r1
 800c9f4:	69fa      	ldr	r2, [r7, #28]
 800c9f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9fe:	e002      	b.n	800ca06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ca00:	23ff      	movs	r3, #255	; 0xff
 800ca02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ca06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3728      	adds	r7, #40	; 0x28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	08011770 	.word	0x08011770
 800ca18:	0801191c 	.word	0x0801191c
 800ca1c:	080117e8 	.word	0x080117e8
 800ca20:	200067a0 	.word	0x200067a0
 800ca24:	0801192c 	.word	0x0801192c
 800ca28:	08011910 	.word	0x08011910
 800ca2c:	20006890 	.word	0x20006890
 800ca30:	08011954 	.word	0x08011954

0800ca34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08a      	sub	sp, #40	; 0x28
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d106      	bne.n	800ca5a <etharp_raw+0x26>
 800ca4c:	4b3a      	ldr	r3, [pc, #232]	; (800cb38 <etharp_raw+0x104>)
 800ca4e:	f240 4257 	movw	r2, #1111	; 0x457
 800ca52:	493a      	ldr	r1, [pc, #232]	; (800cb3c <etharp_raw+0x108>)
 800ca54:	483a      	ldr	r0, [pc, #232]	; (800cb40 <etharp_raw+0x10c>)
 800ca56:	f001 fc71 	bl	800e33c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ca5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca5e:	211c      	movs	r1, #28
 800ca60:	200e      	movs	r0, #14
 800ca62:	f7f7 fcc7 	bl	80043f4 <pbuf_alloc>
 800ca66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d102      	bne.n	800ca74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ca6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca72:	e05d      	b.n	800cb30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	895b      	ldrh	r3, [r3, #10]
 800ca78:	2b1b      	cmp	r3, #27
 800ca7a:	d806      	bhi.n	800ca8a <etharp_raw+0x56>
 800ca7c:	4b2e      	ldr	r3, [pc, #184]	; (800cb38 <etharp_raw+0x104>)
 800ca7e:	f240 4262 	movw	r2, #1122	; 0x462
 800ca82:	4930      	ldr	r1, [pc, #192]	; (800cb44 <etharp_raw+0x110>)
 800ca84:	482e      	ldr	r0, [pc, #184]	; (800cb40 <etharp_raw+0x10c>)
 800ca86:	f001 fc59 	bl	800e33c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ca90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7f6 fcf3 	bl	800347e <lwip_htons>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caa6:	2b06      	cmp	r3, #6
 800caa8:	d006      	beq.n	800cab8 <etharp_raw+0x84>
 800caaa:	4b23      	ldr	r3, [pc, #140]	; (800cb38 <etharp_raw+0x104>)
 800caac:	f240 4269 	movw	r2, #1129	; 0x469
 800cab0:	4925      	ldr	r1, [pc, #148]	; (800cb48 <etharp_raw+0x114>)
 800cab2:	4823      	ldr	r0, [pc, #140]	; (800cb40 <etharp_raw+0x10c>)
 800cab4:	f001 fc42 	bl	800e33c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	3308      	adds	r3, #8
 800cabc:	2206      	movs	r2, #6
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f001 fc25 	bl	800e310 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	3312      	adds	r3, #18
 800caca:	2206      	movs	r2, #6
 800cacc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cace:	4618      	mov	r0, r3
 800cad0:	f001 fc1e 	bl	800e310 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	330e      	adds	r3, #14
 800cad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cada:	6812      	ldr	r2, [r2, #0]
 800cadc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	3318      	adds	r3, #24
 800cae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae4:	6812      	ldr	r2, [r2, #0]
 800cae6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2200      	movs	r2, #0
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	2200      	movs	r2, #0
 800caf0:	f042 0201 	orr.w	r2, r2, #1
 800caf4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f042 0208 	orr.w	r2, r2, #8
 800cafe:	709a      	strb	r2, [r3, #2]
 800cb00:	2200      	movs	r2, #0
 800cb02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2206      	movs	r2, #6
 800cb08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cb10:	f640 0306 	movw	r3, #2054	; 0x806
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	69b9      	ldr	r1, [r7, #24]
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f001 fb7b 	bl	800e218 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cb22:	69b8      	ldr	r0, [r7, #24]
 800cb24:	f7f7 ff4a 	bl	80049bc <pbuf_free>
  p = NULL;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cb2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	08011770 	.word	0x08011770
 800cb3c:	080118c0 	.word	0x080118c0
 800cb40:	080117e8 	.word	0x080117e8
 800cb44:	08011970 	.word	0x08011970
 800cb48:	080119a4 	.word	0x080119a4

0800cb4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb68:	2201      	movs	r2, #1
 800cb6a:	9203      	str	r2, [sp, #12]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	9202      	str	r2, [sp, #8]
 800cb70:	4a06      	ldr	r2, [pc, #24]	; (800cb8c <etharp_request_dst+0x40>)
 800cb72:	9201      	str	r2, [sp, #4]
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	4603      	mov	r3, r0
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7ff ff5a 	bl	800ca34 <etharp_raw>
 800cb80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	08011f20 	.word	0x08011f20

0800cb90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cb9a:	4a05      	ldr	r2, [pc, #20]	; (800cbb0 <etharp_request+0x20>)
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff ffd4 	bl	800cb4c <etharp_request_dst>
 800cba4:	4603      	mov	r3, r0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	08011f18 	.word	0x08011f18

0800cbb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08e      	sub	sp, #56	; 0x38
 800cbb8:	af04      	add	r7, sp, #16
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cbbe:	4b79      	ldr	r3, [pc, #484]	; (800cda4 <icmp_input+0x1f0>)
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	f003 030f 	and.w	r3, r3, #15
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cbd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbd6:	2b13      	cmp	r3, #19
 800cbd8:	f240 80cd 	bls.w	800cd76 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	895b      	ldrh	r3, [r3, #10]
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	f240 80ca 	bls.w	800cd7a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cbf0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 80b7 	beq.w	800cd68 <icmp_input+0x1b4>
 800cbfa:	2b08      	cmp	r3, #8
 800cbfc:	f040 80b7 	bne.w	800cd6e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cc00:	4b69      	ldr	r3, [pc, #420]	; (800cda8 <icmp_input+0x1f4>)
 800cc02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cc04:	4b67      	ldr	r3, [pc, #412]	; (800cda4 <icmp_input+0x1f0>)
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc0c:	2be0      	cmp	r3, #224	; 0xe0
 800cc0e:	f000 80bb 	beq.w	800cd88 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cc12:	4b64      	ldr	r3, [pc, #400]	; (800cda4 <icmp_input+0x1f0>)
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	4a63      	ldr	r2, [pc, #396]	; (800cda4 <icmp_input+0x1f0>)
 800cc18:	6812      	ldr	r2, [r2, #0]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 fbed 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f040 80b1 	bne.w	800cd8c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	891b      	ldrh	r3, [r3, #8]
 800cc2e:	2b07      	cmp	r3, #7
 800cc30:	f240 80a5 	bls.w	800cd7e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cc34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc36:	330e      	adds	r3, #14
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7f7 fe28 	bl	8004890 <pbuf_add_header>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d04b      	beq.n	800ccde <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	891a      	ldrh	r2, [r3, #8]
 800cc4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc4c:	4413      	add	r3, r2
 800cc4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	891b      	ldrh	r3, [r3, #8]
 800cc54:	8b7a      	ldrh	r2, [r7, #26]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	f0c0 809a 	bcc.w	800cd90 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cc5c:	8b7b      	ldrh	r3, [r7, #26]
 800cc5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc62:	4619      	mov	r1, r3
 800cc64:	200e      	movs	r0, #14
 800cc66:	f7f7 fbc5 	bl	80043f4 <pbuf_alloc>
 800cc6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 8090 	beq.w	800cd94 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	895b      	ldrh	r3, [r3, #10]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc7c:	3308      	adds	r3, #8
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d203      	bcs.n	800cc8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cc82:	6978      	ldr	r0, [r7, #20]
 800cc84:	f7f7 fe9a 	bl	80049bc <pbuf_free>
          goto icmperr;
 800cc88:	e085      	b.n	800cd96 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc92:	4618      	mov	r0, r3
 800cc94:	f001 fb3c 	bl	800e310 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cc98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6978      	ldr	r0, [r7, #20]
 800cc9e:	f7f7 fe07 	bl	80048b0 <pbuf_remove_header>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d009      	beq.n	800ccbc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cca8:	4b40      	ldr	r3, [pc, #256]	; (800cdac <icmp_input+0x1f8>)
 800ccaa:	22b6      	movs	r2, #182	; 0xb6
 800ccac:	4940      	ldr	r1, [pc, #256]	; (800cdb0 <icmp_input+0x1fc>)
 800ccae:	4841      	ldr	r0, [pc, #260]	; (800cdb4 <icmp_input+0x200>)
 800ccb0:	f001 fb44 	bl	800e33c <iprintf>
          pbuf_free(r);
 800ccb4:	6978      	ldr	r0, [r7, #20]
 800ccb6:	f7f7 fe81 	bl	80049bc <pbuf_free>
          goto icmperr;
 800ccba:	e06c      	b.n	800cd96 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	6978      	ldr	r0, [r7, #20]
 800ccc0:	f7f7 ffa4 	bl	8004c0c <pbuf_copy>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d003      	beq.n	800ccd2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ccca:	6978      	ldr	r0, [r7, #20]
 800cccc:	f7f7 fe76 	bl	80049bc <pbuf_free>
          goto icmperr;
 800ccd0:	e061      	b.n	800cd96 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7f7 fe72 	bl	80049bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	607b      	str	r3, [r7, #4]
 800ccdc:	e00f      	b.n	800ccfe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ccde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cce0:	330e      	adds	r3, #14
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7f7 fde3 	bl	80048b0 <pbuf_remove_header>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d006      	beq.n	800ccfe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ccf0:	4b2e      	ldr	r3, [pc, #184]	; (800cdac <icmp_input+0x1f8>)
 800ccf2:	22c7      	movs	r2, #199	; 0xc7
 800ccf4:	4930      	ldr	r1, [pc, #192]	; (800cdb8 <icmp_input+0x204>)
 800ccf6:	482f      	ldr	r0, [pc, #188]	; (800cdb4 <icmp_input+0x200>)
 800ccf8:	f001 fb20 	bl	800e33c <iprintf>
          goto icmperr;
 800ccfc:	e04b      	b.n	800cd96 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cd04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7f7 fdc1 	bl	8004890 <pbuf_add_header>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d12b      	bne.n	800cd6c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cd22:	4b20      	ldr	r3, [pc, #128]	; (800cda4 <icmp_input+0x1f0>)
 800cd24:	691a      	ldr	r2, [r3, #16]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2200      	movs	r2, #0
 800cd34:	709a      	strb	r2, [r3, #2]
 800cd36:	2200      	movs	r2, #0
 800cd38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	22ff      	movs	r2, #255	; 0xff
 800cd3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	729a      	strb	r2, [r3, #10]
 800cd46:	2200      	movs	r2, #0
 800cd48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	9302      	str	r3, [sp, #8]
 800cd4e:	2301      	movs	r3, #1
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	2300      	movs	r3, #0
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	23ff      	movs	r3, #255	; 0xff
 800cd58:	2200      	movs	r2, #0
 800cd5a:	69f9      	ldr	r1, [r7, #28]
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fa75 	bl	800d24c <ip4_output_if>
 800cd62:	4603      	mov	r3, r0
 800cd64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cd66:	e001      	b.n	800cd6c <icmp_input+0x1b8>
      break;
 800cd68:	bf00      	nop
 800cd6a:	e000      	b.n	800cd6e <icmp_input+0x1ba>
      break;
 800cd6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7f7 fe24 	bl	80049bc <pbuf_free>
  return;
 800cd74:	e013      	b.n	800cd9e <icmp_input+0x1ea>
    goto lenerr;
 800cd76:	bf00      	nop
 800cd78:	e002      	b.n	800cd80 <icmp_input+0x1cc>
    goto lenerr;
 800cd7a:	bf00      	nop
 800cd7c:	e000      	b.n	800cd80 <icmp_input+0x1cc>
        goto lenerr;
 800cd7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7f7 fe1b 	bl	80049bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cd86:	e00a      	b.n	800cd9e <icmp_input+0x1ea>
        goto icmperr;
 800cd88:	bf00      	nop
 800cd8a:	e004      	b.n	800cd96 <icmp_input+0x1e2>
        goto icmperr;
 800cd8c:	bf00      	nop
 800cd8e:	e002      	b.n	800cd96 <icmp_input+0x1e2>
          goto icmperr;
 800cd90:	bf00      	nop
 800cd92:	e000      	b.n	800cd96 <icmp_input+0x1e2>
          goto icmperr;
 800cd94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7f7 fe10 	bl	80049bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cd9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cd9e:	3728      	adds	r7, #40	; 0x28
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	200031d0 	.word	0x200031d0
 800cda8:	200031e4 	.word	0x200031e4
 800cdac:	080119e8 	.word	0x080119e8
 800cdb0:	08011a20 	.word	0x08011a20
 800cdb4:	08011a58 	.word	0x08011a58
 800cdb8:	08011a80 	.word	0x08011a80

0800cdbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	2103      	movs	r1, #3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f814 	bl	800cdfc <icmp_send_response>
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	460b      	mov	r3, r1
 800cde6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	461a      	mov	r2, r3
 800cdec:	210b      	movs	r1, #11
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f804 	bl	800cdfc <icmp_send_response>
}
 800cdf4:	bf00      	nop
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08c      	sub	sp, #48	; 0x30
 800ce00:	af04      	add	r7, sp, #16
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ce0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce10:	2124      	movs	r1, #36	; 0x24
 800ce12:	2022      	movs	r0, #34	; 0x22
 800ce14:	f7f7 faee 	bl	80043f4 <pbuf_alloc>
 800ce18:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d04c      	beq.n	800ceba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	895b      	ldrh	r3, [r3, #10]
 800ce24:	2b23      	cmp	r3, #35	; 0x23
 800ce26:	d806      	bhi.n	800ce36 <icmp_send_response+0x3a>
 800ce28:	4b26      	ldr	r3, [pc, #152]	; (800cec4 <icmp_send_response+0xc8>)
 800ce2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce2e:	4926      	ldr	r1, [pc, #152]	; (800cec8 <icmp_send_response+0xcc>)
 800ce30:	4826      	ldr	r0, [pc, #152]	; (800cecc <icmp_send_response+0xd0>)
 800ce32:	f001 fa83 	bl	800e33c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	78fa      	ldrb	r2, [r7, #3]
 800ce46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	78ba      	ldrb	r2, [r7, #2]
 800ce4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	2200      	movs	r2, #0
 800ce52:	711a      	strb	r2, [r3, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	719a      	strb	r2, [r3, #6]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f103 0008 	add.w	r0, r3, #8
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	221c      	movs	r2, #28
 800ce70:	4619      	mov	r1, r3
 800ce72:	f001 fa4d 	bl	800e310 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ce7c:	f107 030c 	add.w	r3, r7, #12
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 f825 	bl	800ced0 <ip4_route>
 800ce86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d011      	beq.n	800ceb2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2200      	movs	r2, #0
 800ce92:	709a      	strb	r2, [r3, #2]
 800ce94:	2200      	movs	r2, #0
 800ce96:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce98:	f107 020c 	add.w	r2, r7, #12
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	9302      	str	r3, [sp, #8]
 800cea0:	2301      	movs	r3, #1
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	2300      	movs	r3, #0
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	23ff      	movs	r3, #255	; 0xff
 800ceaa:	2100      	movs	r1, #0
 800ceac:	69f8      	ldr	r0, [r7, #28]
 800ceae:	f000 f9cd 	bl	800d24c <ip4_output_if>
  }
  pbuf_free(q);
 800ceb2:	69f8      	ldr	r0, [r7, #28]
 800ceb4:	f7f7 fd82 	bl	80049bc <pbuf_free>
 800ceb8:	e000      	b.n	800cebc <icmp_send_response+0xc0>
    return;
 800ceba:	bf00      	nop
}
 800cebc:	3720      	adds	r7, #32
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	080119e8 	.word	0x080119e8
 800cec8:	08011ab4 	.word	0x08011ab4
 800cecc:	08011a58 	.word	0x08011a58

0800ced0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ced8:	4b33      	ldr	r3, [pc, #204]	; (800cfa8 <ip4_route+0xd8>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	e036      	b.n	800cf4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d02b      	beq.n	800cf48 <ip4_route+0x78>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cef6:	089b      	lsrs	r3, r3, #2
 800cef8:	f003 0301 	and.w	r3, r3, #1
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d022      	beq.n	800cf48 <ip4_route+0x78>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3304      	adds	r3, #4
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d01d      	beq.n	800cf48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3304      	adds	r3, #4
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	405a      	eors	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	e038      	b.n	800cf9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cf2e:	f003 0302 	and.w	r3, r3, #2
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d108      	bne.n	800cf48 <ip4_route+0x78>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	330c      	adds	r3, #12
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d101      	bne.n	800cf48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	e028      	b.n	800cf9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1c5      	bne.n	800cee0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cf54:	4b15      	ldr	r3, [pc, #84]	; (800cfac <ip4_route+0xdc>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d01a      	beq.n	800cf92 <ip4_route+0xc2>
 800cf5c:	4b13      	ldr	r3, [pc, #76]	; (800cfac <ip4_route+0xdc>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d012      	beq.n	800cf92 <ip4_route+0xc2>
 800cf6c:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <ip4_route+0xdc>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cf74:	f003 0304 	and.w	r3, r3, #4
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00a      	beq.n	800cf92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cf7c:	4b0b      	ldr	r3, [pc, #44]	; (800cfac <ip4_route+0xdc>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3304      	adds	r3, #4
 800cf82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d004      	beq.n	800cf92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf90:	d101      	bne.n	800cf96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	e001      	b.n	800cf9a <ip4_route+0xca>
  }

  return netif_default;
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <ip4_route+0xdc>)
 800cf98:	681b      	ldr	r3, [r3, #0]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	20006734 	.word	0x20006734
 800cfac:	20006738 	.word	0x20006738

0800cfb0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d016      	beq.n	800cff6 <ip4_input_accept+0x46>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d011      	beq.n	800cff6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <ip4_input_accept+0x50>)
 800cfd4:	695a      	ldr	r2, [r3, #20]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d008      	beq.n	800cff2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cfe0:	4b07      	ldr	r3, [pc, #28]	; (800d000 <ip4_input_accept+0x50>)
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fa08 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800cfec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	200031d0 	.word	0x200031d0

0800d004 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	091b      	lsrs	r3, r3, #4
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d004      	beq.n	800d02a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7f7 fccb 	bl	80049bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	e107      	b.n	800d23a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	f003 030f 	and.w	r3, r3, #15
 800d032:	b2db      	uxtb	r3, r3
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	b2db      	uxtb	r3, r3
 800d038:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	885b      	ldrh	r3, [r3, #2]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	4618      	mov	r0, r3
 800d042:	f7f6 fa1c 	bl	800347e <lwip_htons>
 800d046:	4603      	mov	r3, r0
 800d048:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	891b      	ldrh	r3, [r3, #8]
 800d04e:	89ba      	ldrh	r2, [r7, #12]
 800d050:	429a      	cmp	r2, r3
 800d052:	d204      	bcs.n	800d05e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d054:	89bb      	ldrh	r3, [r7, #12]
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7f7 fb29 	bl	80046b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	89fa      	ldrh	r2, [r7, #14]
 800d064:	429a      	cmp	r2, r3
 800d066:	d807      	bhi.n	800d078 <ip4_input+0x74>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	891b      	ldrh	r3, [r3, #8]
 800d06c:	89ba      	ldrh	r2, [r7, #12]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d802      	bhi.n	800d078 <ip4_input+0x74>
 800d072:	89fb      	ldrh	r3, [r7, #14]
 800d074:	2b13      	cmp	r3, #19
 800d076:	d804      	bhi.n	800d082 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7f7 fc9f 	bl	80049bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	e0db      	b.n	800d23a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	4a6f      	ldr	r2, [pc, #444]	; (800d244 <ip4_input+0x240>)
 800d088:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	4a6d      	ldr	r2, [pc, #436]	; (800d244 <ip4_input+0x240>)
 800d090:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d092:	4b6c      	ldr	r3, [pc, #432]	; (800d244 <ip4_input+0x240>)
 800d094:	695b      	ldr	r3, [r3, #20]
 800d096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d09a:	2be0      	cmp	r3, #224	; 0xe0
 800d09c:	d112      	bne.n	800d0c4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d0a4:	f003 0301 	and.w	r3, r3, #1
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <ip4_input+0xba>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <ip4_input+0xba>
      netif = inp;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	613b      	str	r3, [r7, #16]
 800d0bc:	e02a      	b.n	800d114 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	613b      	str	r3, [r7, #16]
 800d0c2:	e027      	b.n	800d114 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d0c4:	6838      	ldr	r0, [r7, #0]
 800d0c6:	f7ff ff73 	bl	800cfb0 <ip4_input_accept>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <ip4_input+0xd2>
      netif = inp;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	613b      	str	r3, [r7, #16]
 800d0d4:	e01e      	b.n	800d114 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d0da:	4b5a      	ldr	r3, [pc, #360]	; (800d244 <ip4_input+0x240>)
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b7f      	cmp	r3, #127	; 0x7f
 800d0e2:	d017      	beq.n	800d114 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d0e4:	4b58      	ldr	r3, [pc, #352]	; (800d248 <ip4_input+0x244>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	613b      	str	r3, [r7, #16]
 800d0ea:	e00e      	b.n	800d10a <ip4_input+0x106>
          if (netif == inp) {
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d006      	beq.n	800d102 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d0f4:	6938      	ldr	r0, [r7, #16]
 800d0f6:	f7ff ff5b 	bl	800cfb0 <ip4_input_accept>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d108      	bne.n	800d112 <ip4_input+0x10e>
 800d100:	e000      	b.n	800d104 <ip4_input+0x100>
            continue;
 800d102:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	613b      	str	r3, [r7, #16]
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1ed      	bne.n	800d0ec <ip4_input+0xe8>
 800d110:	e000      	b.n	800d114 <ip4_input+0x110>
            break;
 800d112:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d114:	4b4b      	ldr	r3, [pc, #300]	; (800d244 <ip4_input+0x240>)
 800d116:	691b      	ldr	r3, [r3, #16]
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f96e 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d105      	bne.n	800d132 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d126:	4b47      	ldr	r3, [pc, #284]	; (800d244 <ip4_input+0x240>)
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d12e:	2be0      	cmp	r3, #224	; 0xe0
 800d130:	d104      	bne.n	800d13c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7f7 fc42 	bl	80049bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	e07e      	b.n	800d23a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d104      	bne.n	800d14c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7f7 fc3a 	bl	80049bc <pbuf_free>
    return ERR_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	e076      	b.n	800d23a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	88db      	ldrh	r3, [r3, #6]
 800d150:	b29b      	uxth	r3, r3
 800d152:	461a      	mov	r2, r3
 800d154:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d158:	4013      	ands	r3, r2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00b      	beq.n	800d176 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fc92 	bl	800da88 <ip4_reass>
 800d164:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <ip4_input+0x16c>
      return ERR_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e064      	b.n	800d23a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d176:	4a33      	ldr	r2, [pc, #204]	; (800d244 <ip4_input+0x240>)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d17c:	4a31      	ldr	r2, [pc, #196]	; (800d244 <ip4_input+0x240>)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d182:	4a30      	ldr	r2, [pc, #192]	; (800d244 <ip4_input+0x240>)
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	f003 030f 	and.w	r3, r3, #15
 800d190:	b2db      	uxtb	r3, r3
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	b2db      	uxtb	r3, r3
 800d196:	b29a      	uxth	r2, r3
 800d198:	4b2a      	ldr	r3, [pc, #168]	; (800d244 <ip4_input+0x240>)
 800d19a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d19c:	89fb      	ldrh	r3, [r7, #14]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7f7 fb85 	bl	80048b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	7a5b      	ldrb	r3, [r3, #9]
 800d1aa:	2b11      	cmp	r3, #17
 800d1ac:	d006      	beq.n	800d1bc <ip4_input+0x1b8>
 800d1ae:	2b11      	cmp	r3, #17
 800d1b0:	dc13      	bgt.n	800d1da <ip4_input+0x1d6>
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d00c      	beq.n	800d1d0 <ip4_input+0x1cc>
 800d1b6:	2b06      	cmp	r3, #6
 800d1b8:	d005      	beq.n	800d1c6 <ip4_input+0x1c2>
 800d1ba:	e00e      	b.n	800d1da <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7fe f8e6 	bl	800b390 <udp_input>
        break;
 800d1c4:	e026      	b.n	800d214 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7f9 fccf 	bl	8006b6c <tcp_input>
        break;
 800d1ce:	e021      	b.n	800d214 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff fcee 	bl	800cbb4 <icmp_input>
        break;
 800d1d8:	e01c      	b.n	800d214 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d1da:	4b1a      	ldr	r3, [pc, #104]	; (800d244 <ip4_input+0x240>)
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	6939      	ldr	r1, [r7, #16]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 f90b 	bl	800d3fc <ip4_addr_isbroadcast_u32>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10f      	bne.n	800d20c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d1ec:	4b15      	ldr	r3, [pc, #84]	; (800d244 <ip4_input+0x240>)
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d1f4:	2be0      	cmp	r3, #224	; 0xe0
 800d1f6:	d009      	beq.n	800d20c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d1f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7f7 fbc9 	bl	8004996 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d204:	2102      	movs	r1, #2
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff fdd8 	bl	800cdbc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7f7 fbd5 	bl	80049bc <pbuf_free>
        break;
 800d212:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d214:	4b0b      	ldr	r3, [pc, #44]	; (800d244 <ip4_input+0x240>)
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d21a:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <ip4_input+0x240>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d220:	4b08      	ldr	r3, [pc, #32]	; (800d244 <ip4_input+0x240>)
 800d222:	2200      	movs	r2, #0
 800d224:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d226:	4b07      	ldr	r3, [pc, #28]	; (800d244 <ip4_input+0x240>)
 800d228:	2200      	movs	r2, #0
 800d22a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d22c:	4b05      	ldr	r3, [pc, #20]	; (800d244 <ip4_input+0x240>)
 800d22e:	2200      	movs	r2, #0
 800d230:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d232:	4b04      	ldr	r3, [pc, #16]	; (800d244 <ip4_input+0x240>)
 800d234:	2200      	movs	r2, #0
 800d236:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	200031d0 	.word	0x200031d0
 800d248:	20006734 	.word	0x20006734

0800d24c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af04      	add	r7, sp, #16
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d009      	beq.n	800d278 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <ip4_output_if+0x26>
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d102      	bne.n	800d278 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	3304      	adds	r3, #4
 800d276:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d278:	78fa      	ldrb	r2, [r7, #3]
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	9302      	str	r3, [sp, #8]
 800d27e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	4613      	mov	r3, r2
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6979      	ldr	r1, [r7, #20]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 f805 	bl	800d2a0 <ip4_output_if_src>
 800d296:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	7b9b      	ldrb	r3, [r3, #14]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d006      	beq.n	800d2c4 <ip4_output_if_src+0x24>
 800d2b6:	4b4b      	ldr	r3, [pc, #300]	; (800d3e4 <ip4_output_if_src+0x144>)
 800d2b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d2bc:	494a      	ldr	r1, [pc, #296]	; (800d3e8 <ip4_output_if_src+0x148>)
 800d2be:	484b      	ldr	r0, [pc, #300]	; (800d3ec <ip4_output_if_src+0x14c>)
 800d2c0:	f001 f83c 	bl	800e33c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d060      	beq.n	800d38c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d2ca:	2314      	movs	r3, #20
 800d2cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d2ce:	2114      	movs	r1, #20
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	f7f7 fadd 	bl	8004890 <pbuf_add_header>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d2dc:	f06f 0301 	mvn.w	r3, #1
 800d2e0:	e07c      	b.n	800d3dc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	895b      	ldrh	r3, [r3, #10]
 800d2ec:	2b13      	cmp	r3, #19
 800d2ee:	d806      	bhi.n	800d2fe <ip4_output_if_src+0x5e>
 800d2f0:	4b3c      	ldr	r3, [pc, #240]	; (800d3e4 <ip4_output_if_src+0x144>)
 800d2f2:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d2f6:	493e      	ldr	r1, [pc, #248]	; (800d3f0 <ip4_output_if_src+0x150>)
 800d2f8:	483c      	ldr	r0, [pc, #240]	; (800d3ec <ip4_output_if_src+0x14c>)
 800d2fa:	f001 f81f 	bl	800e33c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	78fa      	ldrb	r2, [r7, #3]
 800d302:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d30a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d314:	8b7b      	ldrh	r3, [r7, #26]
 800d316:	089b      	lsrs	r3, r3, #2
 800d318:	b29b      	uxth	r3, r3
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d320:	b2da      	uxtb	r2, r3
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d32c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	891b      	ldrh	r3, [r3, #8]
 800d332:	4618      	mov	r0, r3
 800d334:	f7f6 f8a3 	bl	800347e <lwip_htons>
 800d338:	4603      	mov	r3, r0
 800d33a:	461a      	mov	r2, r3
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	2200      	movs	r2, #0
 800d344:	719a      	strb	r2, [r3, #6]
 800d346:	2200      	movs	r2, #0
 800d348:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d34a:	4b2a      	ldr	r3, [pc, #168]	; (800d3f4 <ip4_output_if_src+0x154>)
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7f6 f895 	bl	800347e <lwip_htons>
 800d354:	4603      	mov	r3, r0
 800d356:	461a      	mov	r2, r3
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d35c:	4b25      	ldr	r3, [pc, #148]	; (800d3f4 <ip4_output_if_src+0x154>)
 800d35e:	881b      	ldrh	r3, [r3, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	b29a      	uxth	r2, r3
 800d364:	4b23      	ldr	r3, [pc, #140]	; (800d3f4 <ip4_output_if_src+0x154>)
 800d366:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d104      	bne.n	800d378 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d36e:	4b22      	ldr	r3, [pc, #136]	; (800d3f8 <ip4_output_if_src+0x158>)
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	60da      	str	r2, [r3, #12]
 800d376:	e003      	b.n	800d380 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	2200      	movs	r2, #0
 800d384:	729a      	strb	r2, [r3, #10]
 800d386:	2200      	movs	r2, #0
 800d388:	72da      	strb	r2, [r3, #11]
 800d38a:	e00f      	b.n	800d3ac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	895b      	ldrh	r3, [r3, #10]
 800d390:	2b13      	cmp	r3, #19
 800d392:	d802      	bhi.n	800d39a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d394:	f06f 0301 	mvn.w	r3, #1
 800d398:	e020      	b.n	800d3dc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d3a6:	f107 0314 	add.w	r3, r7, #20
 800d3aa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ae:	8c1b      	ldrh	r3, [r3, #32]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00c      	beq.n	800d3ce <ip4_output_if_src+0x12e>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	891a      	ldrh	r2, [r3, #8]
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	8c1b      	ldrh	r3, [r3, #32]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d906      	bls.n	800d3ce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 fd53 	bl	800de70 <ip4_frag>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	e006      	b.n	800d3dc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	68f9      	ldr	r1, [r7, #12]
 800d3d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3d8:	4798      	blx	r3
 800d3da:	4603      	mov	r3, r0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3720      	adds	r7, #32
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08011ae0 	.word	0x08011ae0
 800d3e8:	08011b14 	.word	0x08011b14
 800d3ec:	08011b20 	.word	0x08011b20
 800d3f0:	08011b48 	.word	0x08011b48
 800d3f4:	20006892 	.word	0x20006892
 800d3f8:	08011f14 	.word	0x08011f14

0800d3fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d410:	d002      	beq.n	800d418 <ip4_addr_isbroadcast_u32+0x1c>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d418:	2301      	movs	r3, #1
 800d41a:	e02a      	b.n	800d472 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	e021      	b.n	800d472 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	3304      	adds	r3, #4
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	429a      	cmp	r2, r3
 800d438:	d101      	bne.n	800d43e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	e019      	b.n	800d472 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	3304      	adds	r3, #4
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	405a      	eors	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	3308      	adds	r3, #8
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4013      	ands	r3, r2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10d      	bne.n	800d470 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	43da      	mvns	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	3308      	adds	r3, #8
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d468:	429a      	cmp	r2, r3
 800d46a:	d101      	bne.n	800d470 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d46c:	2301      	movs	r3, #1
 800d46e:	e000      	b.n	800d472 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d470:	2300      	movs	r3, #0
  }
}
 800d472:	4618      	mov	r0, r3
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
	...

0800d480 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d486:	2300      	movs	r3, #0
 800d488:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d48a:	4b12      	ldr	r3, [pc, #72]	; (800d4d4 <ip_reass_tmr+0x54>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d490:	e018      	b.n	800d4c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	7fdb      	ldrb	r3, [r3, #31]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00b      	beq.n	800d4b2 <ip_reass_tmr+0x32>
      r->timer--;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	7fdb      	ldrb	r3, [r3, #31]
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e008      	b.n	800d4c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f80a 	bl	800d4d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1e3      	bne.n	800d492 <ip_reass_tmr+0x12>
    }
  }
}
 800d4ca:	bf00      	nop
 800d4cc:	bf00      	nop
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20006894 	.word	0x20006894

0800d4d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b088      	sub	sp, #32
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d105      	bne.n	800d4fa <ip_reass_free_complete_datagram+0x22>
 800d4ee:	4b45      	ldr	r3, [pc, #276]	; (800d604 <ip_reass_free_complete_datagram+0x12c>)
 800d4f0:	22ab      	movs	r2, #171	; 0xab
 800d4f2:	4945      	ldr	r1, [pc, #276]	; (800d608 <ip_reass_free_complete_datagram+0x130>)
 800d4f4:	4845      	ldr	r0, [pc, #276]	; (800d60c <ip_reass_free_complete_datagram+0x134>)
 800d4f6:	f000 ff21 	bl	800e33c <iprintf>
  if (prev != NULL) {
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00a      	beq.n	800d516 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	429a      	cmp	r2, r3
 800d508:	d005      	beq.n	800d516 <ip_reass_free_complete_datagram+0x3e>
 800d50a:	4b3e      	ldr	r3, [pc, #248]	; (800d604 <ip_reass_free_complete_datagram+0x12c>)
 800d50c:	22ad      	movs	r2, #173	; 0xad
 800d50e:	4940      	ldr	r1, [pc, #256]	; (800d610 <ip_reass_free_complete_datagram+0x138>)
 800d510:	483e      	ldr	r0, [pc, #248]	; (800d60c <ip_reass_free_complete_datagram+0x134>)
 800d512:	f000 ff13 	bl	800e33c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	889b      	ldrh	r3, [r3, #4]
 800d522:	b29b      	uxth	r3, r3
 800d524:	2b00      	cmp	r3, #0
 800d526:	d12a      	bne.n	800d57e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	6858      	ldr	r0, [r3, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	3308      	adds	r3, #8
 800d53e:	2214      	movs	r2, #20
 800d540:	4619      	mov	r1, r3
 800d542:	f000 fee5 	bl	800e310 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d546:	2101      	movs	r1, #1
 800d548:	69b8      	ldr	r0, [r7, #24]
 800d54a:	f7ff fc47 	bl	800cddc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d54e:	69b8      	ldr	r0, [r7, #24]
 800d550:	f7f7 fabc 	bl	8004acc <pbuf_clen>
 800d554:	4603      	mov	r3, r0
 800d556:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d558:	8bfa      	ldrh	r2, [r7, #30]
 800d55a:	8a7b      	ldrh	r3, [r7, #18]
 800d55c:	4413      	add	r3, r2
 800d55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d562:	db05      	blt.n	800d570 <ip_reass_free_complete_datagram+0x98>
 800d564:	4b27      	ldr	r3, [pc, #156]	; (800d604 <ip_reass_free_complete_datagram+0x12c>)
 800d566:	22bc      	movs	r2, #188	; 0xbc
 800d568:	492a      	ldr	r1, [pc, #168]	; (800d614 <ip_reass_free_complete_datagram+0x13c>)
 800d56a:	4828      	ldr	r0, [pc, #160]	; (800d60c <ip_reass_free_complete_datagram+0x134>)
 800d56c:	f000 fee6 	bl	800e33c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d570:	8bfa      	ldrh	r2, [r7, #30]
 800d572:	8a7b      	ldrh	r3, [r7, #18]
 800d574:	4413      	add	r3, r2
 800d576:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d578:	69b8      	ldr	r0, [r7, #24]
 800d57a:	f7f7 fa1f 	bl	80049bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d584:	e01f      	b.n	800d5c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f7f7 fa98 	bl	8004acc <pbuf_clen>
 800d59c:	4603      	mov	r3, r0
 800d59e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d5a0:	8bfa      	ldrh	r2, [r7, #30]
 800d5a2:	8a7b      	ldrh	r3, [r7, #18]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5aa:	db05      	blt.n	800d5b8 <ip_reass_free_complete_datagram+0xe0>
 800d5ac:	4b15      	ldr	r3, [pc, #84]	; (800d604 <ip_reass_free_complete_datagram+0x12c>)
 800d5ae:	22cc      	movs	r2, #204	; 0xcc
 800d5b0:	4918      	ldr	r1, [pc, #96]	; (800d614 <ip_reass_free_complete_datagram+0x13c>)
 800d5b2:	4816      	ldr	r0, [pc, #88]	; (800d60c <ip_reass_free_complete_datagram+0x134>)
 800d5b4:	f000 fec2 	bl	800e33c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d5b8:	8bfa      	ldrh	r2, [r7, #30]
 800d5ba:	8a7b      	ldrh	r3, [r7, #18]
 800d5bc:	4413      	add	r3, r2
 800d5be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7f7 f9fb 	bl	80049bc <pbuf_free>
  while (p != NULL) {
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1dc      	bne.n	800d586 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f8c2 	bl	800d758 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d5d4:	4b10      	ldr	r3, [pc, #64]	; (800d618 <ip_reass_free_complete_datagram+0x140>)
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	8bfa      	ldrh	r2, [r7, #30]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d905      	bls.n	800d5ea <ip_reass_free_complete_datagram+0x112>
 800d5de:	4b09      	ldr	r3, [pc, #36]	; (800d604 <ip_reass_free_complete_datagram+0x12c>)
 800d5e0:	22d2      	movs	r2, #210	; 0xd2
 800d5e2:	490e      	ldr	r1, [pc, #56]	; (800d61c <ip_reass_free_complete_datagram+0x144>)
 800d5e4:	4809      	ldr	r0, [pc, #36]	; (800d60c <ip_reass_free_complete_datagram+0x134>)
 800d5e6:	f000 fea9 	bl	800e33c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d5ea:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <ip_reass_free_complete_datagram+0x140>)
 800d5ec:	881a      	ldrh	r2, [r3, #0]
 800d5ee:	8bfb      	ldrh	r3, [r7, #30]
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	4b08      	ldr	r3, [pc, #32]	; (800d618 <ip_reass_free_complete_datagram+0x140>)
 800d5f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d5f8:	8bfb      	ldrh	r3, [r7, #30]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3720      	adds	r7, #32
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	08011b78 	.word	0x08011b78
 800d608:	08011bb4 	.word	0x08011bb4
 800d60c:	08011bc0 	.word	0x08011bc0
 800d610:	08011be8 	.word	0x08011be8
 800d614:	08011bfc 	.word	0x08011bfc
 800d618:	20006898 	.word	0x20006898
 800d61c:	08011c1c 	.word	0x08011c1c

0800d620 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08a      	sub	sp, #40	; 0x28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d62e:	2300      	movs	r3, #0
 800d630:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d632:	2300      	movs	r3, #0
 800d634:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d63e:	4b28      	ldr	r3, [pc, #160]	; (800d6e0 <ip_reass_remove_oldest_datagram+0xc0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d644:	e030      	b.n	800d6a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	695a      	ldr	r2, [r3, #20]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d10c      	bne.n	800d66c <ip_reass_remove_oldest_datagram+0x4c>
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	699a      	ldr	r2, [r3, #24]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d106      	bne.n	800d66c <ip_reass_remove_oldest_datagram+0x4c>
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	899a      	ldrh	r2, [r3, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	889b      	ldrh	r3, [r3, #4]
 800d666:	b29b      	uxth	r3, r3
 800d668:	429a      	cmp	r2, r3
 800d66a:	d014      	beq.n	800d696 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	3301      	adds	r3, #1
 800d670:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d104      	bne.n	800d682 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	61bb      	str	r3, [r7, #24]
 800d680:	e009      	b.n	800d696 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d684:	7fda      	ldrb	r2, [r3, #31]
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	7fdb      	ldrb	r3, [r3, #31]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d803      	bhi.n	800d696 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d690:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1cb      	bne.n	800d646 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d008      	beq.n	800d6c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d6b4:	69b9      	ldr	r1, [r7, #24]
 800d6b6:	6a38      	ldr	r0, [r7, #32]
 800d6b8:	f7ff ff0e 	bl	800d4d8 <ip_reass_free_complete_datagram>
 800d6bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d6be:	697a      	ldr	r2, [r7, #20]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	da02      	bge.n	800d6d4 <ip_reass_remove_oldest_datagram+0xb4>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	dcac      	bgt.n	800d62e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d6d4:	697b      	ldr	r3, [r7, #20]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3728      	adds	r7, #40	; 0x28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20006894 	.word	0x20006894

0800d6e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d6ee:	2004      	movs	r0, #4
 800d6f0:	f7f6 fb1a 	bl	8003d28 <memp_malloc>
 800d6f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d110      	bne.n	800d71e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7ff ff8e 	bl	800d620 <ip_reass_remove_oldest_datagram>
 800d704:	4602      	mov	r2, r0
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	4293      	cmp	r3, r2
 800d70a:	dc03      	bgt.n	800d714 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d70c:	2004      	movs	r0, #4
 800d70e:	f7f6 fb0b 	bl	8003d28 <memp_malloc>
 800d712:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	e016      	b.n	800d74c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d71e:	2220      	movs	r2, #32
 800d720:	2100      	movs	r1, #0
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 fe02 	bl	800e32c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	220f      	movs	r2, #15
 800d72c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d72e:	4b09      	ldr	r3, [pc, #36]	; (800d754 <ip_reass_enqueue_new_datagram+0x70>)
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d736:	4a07      	ldr	r2, [pc, #28]	; (800d754 <ip_reass_enqueue_new_datagram+0x70>)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3308      	adds	r3, #8
 800d740:	2214      	movs	r2, #20
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 fde3 	bl	800e310 <memcpy>
  return ipr;
 800d74a:	68fb      	ldr	r3, [r7, #12]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20006894 	.word	0x20006894

0800d758 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d762:	4b10      	ldr	r3, [pc, #64]	; (800d7a4 <ip_reass_dequeue_datagram+0x4c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d104      	bne.n	800d776 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a0c      	ldr	r2, [pc, #48]	; (800d7a4 <ip_reass_dequeue_datagram+0x4c>)
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	e00d      	b.n	800d792 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <ip_reass_dequeue_datagram+0x32>
 800d77c:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <ip_reass_dequeue_datagram+0x50>)
 800d77e:	f240 1245 	movw	r2, #325	; 0x145
 800d782:	490a      	ldr	r1, [pc, #40]	; (800d7ac <ip_reass_dequeue_datagram+0x54>)
 800d784:	480a      	ldr	r0, [pc, #40]	; (800d7b0 <ip_reass_dequeue_datagram+0x58>)
 800d786:	f000 fdd9 	bl	800e33c <iprintf>
    prev->next = ipr->next;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	2004      	movs	r0, #4
 800d796:	f7f6 fb13 	bl	8003dc0 <memp_free>
}
 800d79a:	bf00      	nop
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20006894 	.word	0x20006894
 800d7a8:	08011b78 	.word	0x08011b78
 800d7ac:	08011c40 	.word	0x08011c40
 800d7b0:	08011bc0 	.word	0x08011bc0

0800d7b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b08c      	sub	sp, #48	; 0x30
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	885b      	ldrh	r3, [r3, #2]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7f5 fe52 	bl	800347e <lwip_htons>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	f003 030f 	and.w	r3, r3, #15
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d7ec:	7e7b      	ldrb	r3, [r7, #25]
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	8b7a      	ldrh	r2, [r7, #26]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d202      	bcs.n	800d7fc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7fa:	e135      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d7fc:	7e7b      	ldrb	r3, [r7, #25]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	8b7a      	ldrh	r2, [r7, #26]
 800d802:	1ad3      	subs	r3, r2, r3
 800d804:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	88db      	ldrh	r3, [r3, #6]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7f5 fe36 	bl	800347e <lwip_htons>
 800d812:	4603      	mov	r3, r0
 800d814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d818:	b29b      	uxth	r3, r3
 800d81a:	00db      	lsls	r3, r3, #3
 800d81c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	2200      	movs	r2, #0
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	2200      	movs	r2, #0
 800d82c:	705a      	strb	r2, [r3, #1]
 800d82e:	2200      	movs	r2, #0
 800d830:	709a      	strb	r2, [r3, #2]
 800d832:	2200      	movs	r2, #0
 800d834:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	8afa      	ldrh	r2, [r7, #22]
 800d83a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d83c:	8afa      	ldrh	r2, [r7, #22]
 800d83e:	8b7b      	ldrh	r3, [r7, #26]
 800d840:	4413      	add	r3, r2
 800d842:	b29a      	uxth	r2, r3
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84a:	88db      	ldrh	r3, [r3, #6]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	8afa      	ldrh	r2, [r7, #22]
 800d850:	429a      	cmp	r2, r3
 800d852:	d902      	bls.n	800d85a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d854:	f04f 33ff 	mov.w	r3, #4294967295
 800d858:	e106      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	627b      	str	r3, [r7, #36]	; 0x24
 800d860:	e068      	b.n	800d934 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	889b      	ldrh	r3, [r3, #4]
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	889b      	ldrh	r3, [r3, #4]
 800d872:	b29b      	uxth	r3, r3
 800d874:	429a      	cmp	r2, r3
 800d876:	d235      	bcs.n	800d8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d87c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	2b00      	cmp	r3, #0
 800d882:	d020      	beq.n	800d8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	889b      	ldrh	r3, [r3, #4]
 800d888:	b29a      	uxth	r2, r3
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	88db      	ldrh	r3, [r3, #6]
 800d88e:	b29b      	uxth	r3, r3
 800d890:	429a      	cmp	r2, r3
 800d892:	d307      	bcc.n	800d8a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	88db      	ldrh	r3, [r3, #6]
 800d898:	b29a      	uxth	r2, r3
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	889b      	ldrh	r3, [r3, #4]
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d902      	bls.n	800d8aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a8:	e0de      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	88db      	ldrh	r3, [r3, #6]
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	889b      	ldrh	r3, [r3, #4]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d03d      	beq.n	800d93c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d8c4:	e03a      	b.n	800d93c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c8:	88db      	ldrh	r3, [r3, #6]
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	889b      	ldrh	r3, [r3, #4]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d902      	bls.n	800d8dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8da:	e0c5      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	605a      	str	r2, [r3, #4]
      break;
 800d8e2:	e02b      	b.n	800d93c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	889b      	ldrh	r3, [r3, #4]
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	889b      	ldrh	r3, [r3, #4]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d102      	bne.n	800d8fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f8:	e0b6      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fc:	889b      	ldrh	r3, [r3, #4]
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	88db      	ldrh	r3, [r3, #6]
 800d904:	b29b      	uxth	r3, r3
 800d906:	429a      	cmp	r2, r3
 800d908:	d202      	bcs.n	800d910 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d90a:	f04f 33ff 	mov.w	r3, #4294967295
 800d90e:	e0ab      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d912:	2b00      	cmp	r3, #0
 800d914:	d009      	beq.n	800d92a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	88db      	ldrh	r3, [r3, #6]
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	889b      	ldrh	r3, [r3, #4]
 800d920:	b29b      	uxth	r3, r3
 800d922:	429a      	cmp	r2, r3
 800d924:	d001      	beq.n	800d92a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	2b00      	cmp	r3, #0
 800d938:	d193      	bne.n	800d862 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d93a:	e000      	b.n	800d93e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d93c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	2b00      	cmp	r3, #0
 800d942:	d12d      	bne.n	800d9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	2b00      	cmp	r3, #0
 800d948:	d01c      	beq.n	800d984 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94c:	88db      	ldrh	r3, [r3, #6]
 800d94e:	b29a      	uxth	r2, r3
 800d950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d952:	889b      	ldrh	r3, [r3, #4]
 800d954:	b29b      	uxth	r3, r3
 800d956:	429a      	cmp	r2, r3
 800d958:	d906      	bls.n	800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d95a:	4b45      	ldr	r3, [pc, #276]	; (800da70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d95c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d960:	4944      	ldr	r1, [pc, #272]	; (800da74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d962:	4845      	ldr	r0, [pc, #276]	; (800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d964:	f000 fcea 	bl	800e33c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d970:	88db      	ldrh	r3, [r3, #6]
 800d972:	b29a      	uxth	r2, r3
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	889b      	ldrh	r3, [r3, #4]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d010      	beq.n	800d9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	623b      	str	r3, [r7, #32]
 800d982:	e00d      	b.n	800d9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d006      	beq.n	800d99a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d98c:	4b38      	ldr	r3, [pc, #224]	; (800da70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d98e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d992:	493a      	ldr	r1, [pc, #232]	; (800da7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d994:	4838      	ldr	r0, [pc, #224]	; (800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d996:	f000 fcd1 	bl	800e33c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d105      	bne.n	800d9b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	7f9b      	ldrb	r3, [r3, #30]
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d059      	beq.n	800da66 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d9b2:	6a3b      	ldr	r3, [r7, #32]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d04f      	beq.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d006      	beq.n	800d9ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	889b      	ldrh	r3, [r3, #4]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	623b      	str	r3, [r7, #32]
 800d9d2:	e041      	b.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d9de:	e012      	b.n	800da06 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	88db      	ldrh	r3, [r3, #6]
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	889b      	ldrh	r3, [r3, #4]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d002      	beq.n	800d9fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	623b      	str	r3, [r7, #32]
            break;
 800d9fa:	e007      	b.n	800da0c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1e9      	bne.n	800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d022      	beq.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800da1a:	4b15      	ldr	r3, [pc, #84]	; (800da70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da1c:	f240 12df 	movw	r2, #479	; 0x1df
 800da20:	4917      	ldr	r1, [pc, #92]	; (800da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da22:	4815      	ldr	r0, [pc, #84]	; (800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da24:	f000 fc8a 	bl	800e33c <iprintf>
          LWIP_ASSERT("sanity check",
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da30:	429a      	cmp	r2, r3
 800da32:	d106      	bne.n	800da42 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800da34:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800da3a:	4911      	ldr	r1, [pc, #68]	; (800da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da3c:	480e      	ldr	r0, [pc, #56]	; (800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da3e:	f000 fc7d 	bl	800e33c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d006      	beq.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800da4a:	4b09      	ldr	r3, [pc, #36]	; (800da70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da4c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800da50:	490c      	ldr	r1, [pc, #48]	; (800da84 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800da52:	4809      	ldr	r0, [pc, #36]	; (800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da54:	f000 fc72 	bl	800e33c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	bf14      	ite	ne
 800da5e:	2301      	movne	r3, #1
 800da60:	2300      	moveq	r3, #0
 800da62:	b2db      	uxtb	r3, r3
 800da64:	e000      	b.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3730      	adds	r7, #48	; 0x30
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	08011b78 	.word	0x08011b78
 800da74:	08011c5c 	.word	0x08011c5c
 800da78:	08011bc0 	.word	0x08011bc0
 800da7c:	08011c7c 	.word	0x08011c7c
 800da80:	08011cb4 	.word	0x08011cb4
 800da84:	08011cc4 	.word	0x08011cc4

0800da88 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08e      	sub	sp, #56	; 0x38
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800da96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	f003 030f 	and.w	r3, r3, #15
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b14      	cmp	r3, #20
 800daa6:	f040 8171 	bne.w	800dd8c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	88db      	ldrh	r3, [r3, #6]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f5 fce4 	bl	800347e <lwip_htons>
 800dab6:	4603      	mov	r3, r0
 800dab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	885b      	ldrh	r3, [r3, #2]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4618      	mov	r0, r3
 800daca:	f7f5 fcd8 	bl	800347e <lwip_htons>
 800dace:	4603      	mov	r3, r0
 800dad0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	f003 030f 	and.w	r3, r3, #15
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800daea:	429a      	cmp	r2, r3
 800daec:	f0c0 8150 	bcc.w	800dd90 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800daf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7f6 ffe5 	bl	8004acc <pbuf_clen>
 800db02:	4603      	mov	r3, r0
 800db04:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800db06:	4b8c      	ldr	r3, [pc, #560]	; (800dd38 <ip4_reass+0x2b0>)
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	461a      	mov	r2, r3
 800db0c:	8c3b      	ldrh	r3, [r7, #32]
 800db0e:	4413      	add	r3, r2
 800db10:	2b0a      	cmp	r3, #10
 800db12:	dd10      	ble.n	800db36 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db14:	8c3b      	ldrh	r3, [r7, #32]
 800db16:	4619      	mov	r1, r3
 800db18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db1a:	f7ff fd81 	bl	800d620 <ip_reass_remove_oldest_datagram>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	f000 8137 	beq.w	800dd94 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800db26:	4b84      	ldr	r3, [pc, #528]	; (800dd38 <ip4_reass+0x2b0>)
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	8c3b      	ldrh	r3, [r7, #32]
 800db2e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db30:	2b0a      	cmp	r3, #10
 800db32:	f300 812f 	bgt.w	800dd94 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800db36:	4b81      	ldr	r3, [pc, #516]	; (800dd3c <ip4_reass+0x2b4>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	633b      	str	r3, [r7, #48]	; 0x30
 800db3c:	e015      	b.n	800db6a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	695a      	ldr	r2, [r3, #20]
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	429a      	cmp	r2, r3
 800db48:	d10c      	bne.n	800db64 <ip4_reass+0xdc>
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	699a      	ldr	r2, [r3, #24]
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	d106      	bne.n	800db64 <ip4_reass+0xdc>
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	899a      	ldrh	r2, [r3, #12]
 800db5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5c:	889b      	ldrh	r3, [r3, #4]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	429a      	cmp	r2, r3
 800db62:	d006      	beq.n	800db72 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	633b      	str	r3, [r7, #48]	; 0x30
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1e6      	bne.n	800db3e <ip4_reass+0xb6>
 800db70:	e000      	b.n	800db74 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800db72:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	2b00      	cmp	r3, #0
 800db78:	d109      	bne.n	800db8e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800db7a:	8c3b      	ldrh	r3, [r7, #32]
 800db7c:	4619      	mov	r1, r3
 800db7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db80:	f7ff fdb0 	bl	800d6e4 <ip_reass_enqueue_new_datagram>
 800db84:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d11c      	bne.n	800dbc6 <ip4_reass+0x13e>
      goto nullreturn;
 800db8c:	e105      	b.n	800dd9a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	88db      	ldrh	r3, [r3, #6]
 800db92:	b29b      	uxth	r3, r3
 800db94:	4618      	mov	r0, r3
 800db96:	f7f5 fc72 	bl	800347e <lwip_htons>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d110      	bne.n	800dbc6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba6:	89db      	ldrh	r3, [r3, #14]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7f5 fc68 	bl	800347e <lwip_htons>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d006      	beq.n	800dbc6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	3308      	adds	r3, #8
 800dbbc:	2214      	movs	r2, #20
 800dbbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 fba5 	bl	800e310 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	88db      	ldrh	r3, [r3, #6]
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	f003 0320 	and.w	r3, r3, #32
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bf0c      	ite	eq
 800dbd4:	2301      	moveq	r3, #1
 800dbd6:	2300      	movne	r3, #0
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00e      	beq.n	800dc00 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dbe2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dbe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbe6:	4413      	add	r3, r2
 800dbe8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dbea:	8b7a      	ldrh	r2, [r7, #26]
 800dbec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	f0c0 80a0 	bcc.w	800dd34 <ip4_reass+0x2ac>
 800dbf4:	8b7b      	ldrh	r3, [r7, #26]
 800dbf6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	f200 809a 	bhi.w	800dd34 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dc00:	69fa      	ldr	r2, [r7, #28]
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc06:	f7ff fdd5 	bl	800d7b4 <ip_reass_chain_frag_into_datagram_and_validate>
 800dc0a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc12:	f000 809b 	beq.w	800dd4c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc16:	4b48      	ldr	r3, [pc, #288]	; (800dd38 <ip4_reass+0x2b0>)
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	8c3b      	ldrh	r3, [r7, #32]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	4b45      	ldr	r3, [pc, #276]	; (800dd38 <ip4_reass+0x2b0>)
 800dc22:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00d      	beq.n	800dc46 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc2e:	4413      	add	r3, r2
 800dc30:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	8a7a      	ldrh	r2, [r7, #18]
 800dc36:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	7f9b      	ldrb	r3, [r3, #30]
 800dc3c:	f043 0301 	orr.w	r3, r3, #1
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d171      	bne.n	800dd30 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4e:	8b9b      	ldrh	r3, [r3, #28]
 800dc50:	3314      	adds	r3, #20
 800dc52:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc68:	3308      	adds	r3, #8
 800dc6a:	2214      	movs	r2, #20
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc70:	f000 fb4e 	bl	800e310 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dc74:	8a3b      	ldrh	r3, [r7, #16]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f5 fc01 	bl	800347e <lwip_htons>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc86:	2200      	movs	r2, #0
 800dc88:	719a      	strb	r2, [r3, #6]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	2200      	movs	r2, #0
 800dc92:	729a      	strb	r2, [r3, #10]
 800dc94:	2200      	movs	r2, #0
 800dc96:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dc9e:	e00d      	b.n	800dcbc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dca6:	2114      	movs	r1, #20
 800dca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcaa:	f7f6 fe01 	bl	80048b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dcae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7f6 ff45 	bl	8004b40 <pbuf_cat>
      r = iprh->next_pbuf;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dcbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1ee      	bne.n	800dca0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dcc2:	4b1e      	ldr	r3, [pc, #120]	; (800dd3c <ip4_reass+0x2b4>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d102      	bne.n	800dcd2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dccc:	2300      	movs	r3, #0
 800dcce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcd0:	e010      	b.n	800dcf4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dcd2:	4b1a      	ldr	r3, [pc, #104]	; (800dd3c <ip4_reass+0x2b4>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcd8:	e007      	b.n	800dcea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d006      	beq.n	800dcf2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1f4      	bne.n	800dcda <ip4_reass+0x252>
 800dcf0:	e000      	b.n	800dcf4 <ip4_reass+0x26c>
          break;
 800dcf2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dcf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcf8:	f7ff fd2e 	bl	800d758 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7f6 fee5 	bl	8004acc <pbuf_clen>
 800dd02:	4603      	mov	r3, r0
 800dd04:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dd06:	4b0c      	ldr	r3, [pc, #48]	; (800dd38 <ip4_reass+0x2b0>)
 800dd08:	881b      	ldrh	r3, [r3, #0]
 800dd0a:	8c3a      	ldrh	r2, [r7, #32]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d906      	bls.n	800dd1e <ip4_reass+0x296>
 800dd10:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <ip4_reass+0x2b8>)
 800dd12:	f240 229b 	movw	r2, #667	; 0x29b
 800dd16:	490b      	ldr	r1, [pc, #44]	; (800dd44 <ip4_reass+0x2bc>)
 800dd18:	480b      	ldr	r0, [pc, #44]	; (800dd48 <ip4_reass+0x2c0>)
 800dd1a:	f000 fb0f 	bl	800e33c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dd1e:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <ip4_reass+0x2b0>)
 800dd20:	881a      	ldrh	r2, [r3, #0]
 800dd22:	8c3b      	ldrh	r3, [r7, #32]
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	4b03      	ldr	r3, [pc, #12]	; (800dd38 <ip4_reass+0x2b0>)
 800dd2a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	e038      	b.n	800dda2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dd30:	2300      	movs	r3, #0
 800dd32:	e036      	b.n	800dda2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800dd34:	bf00      	nop
 800dd36:	e00a      	b.n	800dd4e <ip4_reass+0x2c6>
 800dd38:	20006898 	.word	0x20006898
 800dd3c:	20006894 	.word	0x20006894
 800dd40:	08011b78 	.word	0x08011b78
 800dd44:	08011ce8 	.word	0x08011ce8
 800dd48:	08011bc0 	.word	0x08011bc0
    goto nullreturn_ipr;
 800dd4c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d106      	bne.n	800dd62 <ip4_reass+0x2da>
 800dd54:	4b15      	ldr	r3, [pc, #84]	; (800ddac <ip4_reass+0x324>)
 800dd56:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dd5a:	4915      	ldr	r1, [pc, #84]	; (800ddb0 <ip4_reass+0x328>)
 800dd5c:	4815      	ldr	r0, [pc, #84]	; (800ddb4 <ip4_reass+0x32c>)
 800dd5e:	f000 faed 	bl	800e33c <iprintf>
  if (ipr->p == NULL) {
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d116      	bne.n	800dd98 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dd6a:	4b13      	ldr	r3, [pc, #76]	; (800ddb8 <ip4_reass+0x330>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d006      	beq.n	800dd82 <ip4_reass+0x2fa>
 800dd74:	4b0d      	ldr	r3, [pc, #52]	; (800ddac <ip4_reass+0x324>)
 800dd76:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dd7a:	4910      	ldr	r1, [pc, #64]	; (800ddbc <ip4_reass+0x334>)
 800dd7c:	480d      	ldr	r0, [pc, #52]	; (800ddb4 <ip4_reass+0x32c>)
 800dd7e:	f000 fadd 	bl	800e33c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dd82:	2100      	movs	r1, #0
 800dd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd86:	f7ff fce7 	bl	800d758 <ip_reass_dequeue_datagram>
 800dd8a:	e006      	b.n	800dd9a <ip4_reass+0x312>
    goto nullreturn;
 800dd8c:	bf00      	nop
 800dd8e:	e004      	b.n	800dd9a <ip4_reass+0x312>
    goto nullreturn;
 800dd90:	bf00      	nop
 800dd92:	e002      	b.n	800dd9a <ip4_reass+0x312>
      goto nullreturn;
 800dd94:	bf00      	nop
 800dd96:	e000      	b.n	800dd9a <ip4_reass+0x312>
  }

nullreturn:
 800dd98:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7f6 fe0e 	bl	80049bc <pbuf_free>
  return NULL;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3738      	adds	r7, #56	; 0x38
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	08011b78 	.word	0x08011b78
 800ddb0:	08011d04 	.word	0x08011d04
 800ddb4:	08011bc0 	.word	0x08011bc0
 800ddb8:	20006894 	.word	0x20006894
 800ddbc:	08011d10 	.word	0x08011d10

0800ddc0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ddc4:	2005      	movs	r0, #5
 800ddc6:	f7f5 ffaf 	bl	8003d28 <memp_malloc>
 800ddca:	4603      	mov	r3, r0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <ip_frag_free_pbuf_custom_ref+0x1c>
 800ddde:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dde0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dde4:	4906      	ldr	r1, [pc, #24]	; (800de00 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dde6:	4807      	ldr	r0, [pc, #28]	; (800de04 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dde8:	f000 faa8 	bl	800e33c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	2005      	movs	r0, #5
 800ddf0:	f7f5 ffe6 	bl	8003dc0 <memp_free>
}
 800ddf4:	bf00      	nop
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	08011b78 	.word	0x08011b78
 800de00:	08011d30 	.word	0x08011d30
 800de04:	08011bc0 	.word	0x08011bc0

0800de08 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <ipfrag_free_pbuf_custom+0x20>
 800de1a:	4b11      	ldr	r3, [pc, #68]	; (800de60 <ipfrag_free_pbuf_custom+0x58>)
 800de1c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800de20:	4910      	ldr	r1, [pc, #64]	; (800de64 <ipfrag_free_pbuf_custom+0x5c>)
 800de22:	4811      	ldr	r0, [pc, #68]	; (800de68 <ipfrag_free_pbuf_custom+0x60>)
 800de24:	f000 fa8a 	bl	800e33c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d006      	beq.n	800de3e <ipfrag_free_pbuf_custom+0x36>
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <ipfrag_free_pbuf_custom+0x58>)
 800de32:	f240 22cf 	movw	r2, #719	; 0x2cf
 800de36:	490d      	ldr	r1, [pc, #52]	; (800de6c <ipfrag_free_pbuf_custom+0x64>)
 800de38:	480b      	ldr	r0, [pc, #44]	; (800de68 <ipfrag_free_pbuf_custom+0x60>)
 800de3a:	f000 fa7f 	bl	800e33c <iprintf>
  if (pcr->original != NULL) {
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7f6 fdb6 	bl	80049bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7ff ffbd 	bl	800ddd0 <ip_frag_free_pbuf_custom_ref>
}
 800de56:	bf00      	nop
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	08011b78 	.word	0x08011b78
 800de64:	08011d3c 	.word	0x08011d3c
 800de68:	08011bc0 	.word	0x08011bc0
 800de6c:	08011d48 	.word	0x08011d48

0800de70 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b094      	sub	sp, #80	; 0x50
 800de74:	af02      	add	r7, sp, #8
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	8c1b      	ldrh	r3, [r3, #32]
 800de86:	3b14      	subs	r3, #20
 800de88:	2b00      	cmp	r3, #0
 800de8a:	da00      	bge.n	800de8e <ip4_frag+0x1e>
 800de8c:	3307      	adds	r3, #7
 800de8e:	10db      	asrs	r3, r3, #3
 800de90:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800de92:	2314      	movs	r3, #20
 800de94:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800de9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	f003 030f 	and.w	r3, r3, #15
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	b2db      	uxtb	r3, r3
 800deae:	2b14      	cmp	r3, #20
 800deb0:	d002      	beq.n	800deb8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800deb2:	f06f 0305 	mvn.w	r3, #5
 800deb6:	e110      	b.n	800e0da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	895b      	ldrh	r3, [r3, #10]
 800debc:	2b13      	cmp	r3, #19
 800debe:	d809      	bhi.n	800ded4 <ip4_frag+0x64>
 800dec0:	4b88      	ldr	r3, [pc, #544]	; (800e0e4 <ip4_frag+0x274>)
 800dec2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dec6:	4988      	ldr	r1, [pc, #544]	; (800e0e8 <ip4_frag+0x278>)
 800dec8:	4888      	ldr	r0, [pc, #544]	; (800e0ec <ip4_frag+0x27c>)
 800deca:	f000 fa37 	bl	800e33c <iprintf>
 800dece:	f06f 0305 	mvn.w	r3, #5
 800ded2:	e102      	b.n	800e0da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	88db      	ldrh	r3, [r3, #6]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f5 facf 	bl	800347e <lwip_htons>
 800dee0:	4603      	mov	r3, r0
 800dee2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800dee4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dee6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800deea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800deee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800def0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800def4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	3b14      	subs	r3, #20
 800defc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800df00:	e0e1      	b.n	800e0c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800df02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	b29b      	uxth	r3, r3
 800df08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df0c:	4293      	cmp	r3, r2
 800df0e:	bf28      	it	cs
 800df10:	4613      	movcs	r3, r2
 800df12:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800df14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df18:	2114      	movs	r1, #20
 800df1a:	200e      	movs	r0, #14
 800df1c:	f7f6 fa6a 	bl	80043f4 <pbuf_alloc>
 800df20:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 80d5 	beq.w	800e0d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	895b      	ldrh	r3, [r3, #10]
 800df2e:	2b13      	cmp	r3, #19
 800df30:	d806      	bhi.n	800df40 <ip4_frag+0xd0>
 800df32:	4b6c      	ldr	r3, [pc, #432]	; (800e0e4 <ip4_frag+0x274>)
 800df34:	f44f 7249 	mov.w	r2, #804	; 0x324
 800df38:	496d      	ldr	r1, [pc, #436]	; (800e0f0 <ip4_frag+0x280>)
 800df3a:	486c      	ldr	r0, [pc, #432]	; (800e0ec <ip4_frag+0x27c>)
 800df3c:	f000 f9fe 	bl	800e33c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	2214      	movs	r2, #20
 800df46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 f9e1 	bl	800e310 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800df54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800df5a:	e064      	b.n	800e026 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	895a      	ldrh	r2, [r3, #10]
 800df60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	895b      	ldrh	r3, [r3, #10]
 800df6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d906      	bls.n	800df7e <ip4_frag+0x10e>
 800df70:	4b5c      	ldr	r3, [pc, #368]	; (800e0e4 <ip4_frag+0x274>)
 800df72:	f240 322d 	movw	r2, #813	; 0x32d
 800df76:	495f      	ldr	r1, [pc, #380]	; (800e0f4 <ip4_frag+0x284>)
 800df78:	485c      	ldr	r0, [pc, #368]	; (800e0ec <ip4_frag+0x27c>)
 800df7a:	f000 f9df 	bl	800e33c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800df7e:	8bfa      	ldrh	r2, [r7, #30]
 800df80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df84:	4293      	cmp	r3, r2
 800df86:	bf28      	it	cs
 800df88:	4613      	movcs	r3, r2
 800df8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800df8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df92:	2b00      	cmp	r3, #0
 800df94:	d105      	bne.n	800dfa2 <ip4_frag+0x132>
        poff = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	60fb      	str	r3, [r7, #12]
        continue;
 800dfa0:	e041      	b.n	800e026 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dfa2:	f7ff ff0d 	bl	800ddc0 <ip_frag_alloc_pbuf_custom_ref>
 800dfa6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d103      	bne.n	800dfb6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfb0:	f7f6 fd04 	bl	80049bc <pbuf_free>
        goto memerr;
 800dfb4:	e08f      	b.n	800e0d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dfb6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dfbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfbe:	4413      	add	r3, r2
 800dfc0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800dfc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dfc8:	9201      	str	r2, [sp, #4]
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2241      	movs	r2, #65	; 0x41
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	f7f6 fb39 	bl	8004648 <pbuf_alloced_custom>
 800dfd6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dfde:	69b8      	ldr	r0, [r7, #24]
 800dfe0:	f7ff fef6 	bl	800ddd0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dfe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfe6:	f7f6 fce9 	bl	80049bc <pbuf_free>
        goto memerr;
 800dfea:	e074      	b.n	800e0d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7f6 fd85 	bl	8004afc <pbuf_ref>
      pcr->original = p;
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	4a3f      	ldr	r2, [pc, #252]	; (800e0f8 <ip4_frag+0x288>)
 800dffc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dffe:	6979      	ldr	r1, [r7, #20]
 800e000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e002:	f7f6 fd9d 	bl	8004b40 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e006:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e00a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d004      	beq.n	800e026 <ip4_frag+0x1b6>
        poff = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e026:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d196      	bne.n	800df5c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e02e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e030:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e034:	4413      	add	r3, r2
 800e036:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	8c1b      	ldrh	r3, [r3, #32]
 800e03c:	f1a3 0213 	sub.w	r2, r3, #19
 800e040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e044:	429a      	cmp	r2, r3
 800e046:	bfcc      	ite	gt
 800e048:	2301      	movgt	r3, #1
 800e04a:	2300      	movle	r3, #0
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e050:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e058:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <ip4_frag+0x1f6>
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d003      	beq.n	800e06e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e06c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e06e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e070:	4618      	mov	r0, r3
 800e072:	f7f5 fa04 	bl	800347e <lwip_htons>
 800e076:	4603      	mov	r3, r0
 800e078:	461a      	mov	r2, r3
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e07e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e080:	3314      	adds	r3, #20
 800e082:	b29b      	uxth	r3, r3
 800e084:	4618      	mov	r0, r3
 800e086:	f7f5 f9fa 	bl	800347e <lwip_htons>
 800e08a:	4603      	mov	r3, r0
 800e08c:	461a      	mov	r2, r3
 800e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e090:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	2200      	movs	r2, #0
 800e096:	729a      	strb	r2, [r3, #10]
 800e098:	2200      	movs	r2, #0
 800e09a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	695b      	ldr	r3, [r3, #20]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0a4:	68b8      	ldr	r0, [r7, #8]
 800e0a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e0a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0aa:	f7f6 fc87 	bl	80049bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e0ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e0ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e0be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e0c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f47f af19 	bne.w	800df02 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e002      	b.n	800e0da <ip4_frag+0x26a>
      goto memerr;
 800e0d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e0d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3748      	adds	r7, #72	; 0x48
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	08011b78 	.word	0x08011b78
 800e0e8:	08011d54 	.word	0x08011d54
 800e0ec:	08011bc0 	.word	0x08011bc0
 800e0f0:	08011d70 	.word	0x08011d70
 800e0f4:	08011d90 	.word	0x08011d90
 800e0f8:	0800de09 	.word	0x0800de09

0800e0fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e106:	230e      	movs	r3, #14
 800e108:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	895b      	ldrh	r3, [r3, #10]
 800e10e:	2b0e      	cmp	r3, #14
 800e110:	d96e      	bls.n	800e1f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	7bdb      	ldrb	r3, [r3, #15]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e120:	3301      	adds	r3, #1
 800e122:	b2da      	uxtb	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	7b1a      	ldrb	r2, [r3, #12]
 800e132:	7b5b      	ldrb	r3, [r3, #13]
 800e134:	021b      	lsls	r3, r3, #8
 800e136:	4313      	orrs	r3, r2
 800e138:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	f003 0301 	and.w	r3, r3, #1
 800e142:	2b00      	cmp	r3, #0
 800e144:	d023      	beq.n	800e18e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d10f      	bne.n	800e16e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d11b      	bne.n	800e18e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e15a:	2b5e      	cmp	r3, #94	; 0x5e
 800e15c:	d117      	bne.n	800e18e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	7b5b      	ldrb	r3, [r3, #13]
 800e162:	f043 0310 	orr.w	r3, r3, #16
 800e166:	b2da      	uxtb	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	735a      	strb	r2, [r3, #13]
 800e16c:	e00f      	b.n	800e18e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2206      	movs	r2, #6
 800e172:	4928      	ldr	r1, [pc, #160]	; (800e214 <ethernet_input+0x118>)
 800e174:	4618      	mov	r0, r3
 800e176:	f000 f8bb 	bl	800e2f0 <memcmp>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d106      	bne.n	800e18e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	7b5b      	ldrb	r3, [r3, #13]
 800e184:	f043 0308 	orr.w	r3, r3, #8
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e18e:	89fb      	ldrh	r3, [r7, #14]
 800e190:	2b08      	cmp	r3, #8
 800e192:	d003      	beq.n	800e19c <ethernet_input+0xa0>
 800e194:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e198:	d014      	beq.n	800e1c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e19a:	e032      	b.n	800e202 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e1a2:	f003 0308 	and.w	r3, r3, #8
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d024      	beq.n	800e1f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e1aa:	8afb      	ldrh	r3, [r7, #22]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7f6 fb7e 	bl	80048b0 <pbuf_remove_header>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d11e      	bne.n	800e1f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7fe ff21 	bl	800d004 <ip4_input>
      break;
 800e1c2:	e013      	b.n	800e1ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e1ca:	f003 0308 	and.w	r3, r3, #8
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d014      	beq.n	800e1fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e1d2:	8afb      	ldrh	r3, [r7, #22]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7f6 fb6a 	bl	80048b0 <pbuf_remove_header>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10e      	bne.n	800e200 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7fe f8c1 	bl	800c36c <etharp_input>
      break;
 800e1ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e00c      	b.n	800e20a <ethernet_input+0x10e>
    goto free_and_return;
 800e1f0:	bf00      	nop
 800e1f2:	e006      	b.n	800e202 <ethernet_input+0x106>
        goto free_and_return;
 800e1f4:	bf00      	nop
 800e1f6:	e004      	b.n	800e202 <ethernet_input+0x106>
        goto free_and_return;
 800e1f8:	bf00      	nop
 800e1fa:	e002      	b.n	800e202 <ethernet_input+0x106>
        goto free_and_return;
 800e1fc:	bf00      	nop
 800e1fe:	e000      	b.n	800e202 <ethernet_input+0x106>
        goto free_and_return;
 800e200:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7f6 fbda 	bl	80049bc <pbuf_free>
  return ERR_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	08011f18 	.word	0x08011f18

0800e218 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
 800e224:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e226:	8c3b      	ldrh	r3, [r7, #32]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f5 f928 	bl	800347e <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e232:	210e      	movs	r1, #14
 800e234:	68b8      	ldr	r0, [r7, #8]
 800e236:	f7f6 fb2b 	bl	8004890 <pbuf_add_header>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d125      	bne.n	800e28c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	8afa      	ldrh	r2, [r7, #22]
 800e24a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	2206      	movs	r2, #6
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	4618      	mov	r0, r3
 800e254:	f000 f85c 	bl	800e310 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	3306      	adds	r3, #6
 800e25c:	2206      	movs	r2, #6
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f855 	bl	800e310 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e26c:	2b06      	cmp	r3, #6
 800e26e:	d006      	beq.n	800e27e <ethernet_output+0x66>
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <ethernet_output+0x84>)
 800e272:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e276:	490a      	ldr	r1, [pc, #40]	; (800e2a0 <ethernet_output+0x88>)
 800e278:	480a      	ldr	r0, [pc, #40]	; (800e2a4 <ethernet_output+0x8c>)
 800e27a:	f000 f85f 	bl	800e33c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	68b9      	ldr	r1, [r7, #8]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	4798      	blx	r3
 800e288:	4603      	mov	r3, r0
 800e28a:	e002      	b.n	800e292 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e28c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e28e:	f06f 0301 	mvn.w	r3, #1
}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	08011da0 	.word	0x08011da0
 800e2a0:	08011dd8 	.word	0x08011dd8
 800e2a4:	08011e0c 	.word	0x08011e0c

0800e2a8 <__libc_init_array>:
 800e2a8:	b570      	push	{r4, r5, r6, lr}
 800e2aa:	4d0d      	ldr	r5, [pc, #52]	; (800e2e0 <__libc_init_array+0x38>)
 800e2ac:	4c0d      	ldr	r4, [pc, #52]	; (800e2e4 <__libc_init_array+0x3c>)
 800e2ae:	1b64      	subs	r4, r4, r5
 800e2b0:	10a4      	asrs	r4, r4, #2
 800e2b2:	2600      	movs	r6, #0
 800e2b4:	42a6      	cmp	r6, r4
 800e2b6:	d109      	bne.n	800e2cc <__libc_init_array+0x24>
 800e2b8:	4d0b      	ldr	r5, [pc, #44]	; (800e2e8 <__libc_init_array+0x40>)
 800e2ba:	4c0c      	ldr	r4, [pc, #48]	; (800e2ec <__libc_init_array+0x44>)
 800e2bc:	f001 f88e 	bl	800f3dc <_init>
 800e2c0:	1b64      	subs	r4, r4, r5
 800e2c2:	10a4      	asrs	r4, r4, #2
 800e2c4:	2600      	movs	r6, #0
 800e2c6:	42a6      	cmp	r6, r4
 800e2c8:	d105      	bne.n	800e2d6 <__libc_init_array+0x2e>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d0:	4798      	blx	r3
 800e2d2:	3601      	adds	r6, #1
 800e2d4:	e7ee      	b.n	800e2b4 <__libc_init_array+0xc>
 800e2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2da:	4798      	blx	r3
 800e2dc:	3601      	adds	r6, #1
 800e2de:	e7f2      	b.n	800e2c6 <__libc_init_array+0x1e>
 800e2e0:	08012078 	.word	0x08012078
 800e2e4:	08012078 	.word	0x08012078
 800e2e8:	08012078 	.word	0x08012078
 800e2ec:	0801207c 	.word	0x0801207c

0800e2f0 <memcmp>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	3901      	subs	r1, #1
 800e2f4:	4402      	add	r2, r0
 800e2f6:	4290      	cmp	r0, r2
 800e2f8:	d101      	bne.n	800e2fe <memcmp+0xe>
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	e005      	b.n	800e30a <memcmp+0x1a>
 800e2fe:	7803      	ldrb	r3, [r0, #0]
 800e300:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e304:	42a3      	cmp	r3, r4
 800e306:	d001      	beq.n	800e30c <memcmp+0x1c>
 800e308:	1b18      	subs	r0, r3, r4
 800e30a:	bd10      	pop	{r4, pc}
 800e30c:	3001      	adds	r0, #1
 800e30e:	e7f2      	b.n	800e2f6 <memcmp+0x6>

0800e310 <memcpy>:
 800e310:	440a      	add	r2, r1
 800e312:	4291      	cmp	r1, r2
 800e314:	f100 33ff 	add.w	r3, r0, #4294967295
 800e318:	d100      	bne.n	800e31c <memcpy+0xc>
 800e31a:	4770      	bx	lr
 800e31c:	b510      	push	{r4, lr}
 800e31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e322:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e326:	4291      	cmp	r1, r2
 800e328:	d1f9      	bne.n	800e31e <memcpy+0xe>
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <memset>:
 800e32c:	4402      	add	r2, r0
 800e32e:	4603      	mov	r3, r0
 800e330:	4293      	cmp	r3, r2
 800e332:	d100      	bne.n	800e336 <memset+0xa>
 800e334:	4770      	bx	lr
 800e336:	f803 1b01 	strb.w	r1, [r3], #1
 800e33a:	e7f9      	b.n	800e330 <memset+0x4>

0800e33c <iprintf>:
 800e33c:	b40f      	push	{r0, r1, r2, r3}
 800e33e:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <iprintf+0x2c>)
 800e340:	b513      	push	{r0, r1, r4, lr}
 800e342:	681c      	ldr	r4, [r3, #0]
 800e344:	b124      	cbz	r4, 800e350 <iprintf+0x14>
 800e346:	69a3      	ldr	r3, [r4, #24]
 800e348:	b913      	cbnz	r3, 800e350 <iprintf+0x14>
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 f8c2 	bl	800e4d4 <__sinit>
 800e350:	ab05      	add	r3, sp, #20
 800e352:	9a04      	ldr	r2, [sp, #16]
 800e354:	68a1      	ldr	r1, [r4, #8]
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 fa7f 	bl	800e85c <_vfiprintf_r>
 800e35e:	b002      	add	sp, #8
 800e360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e364:	b004      	add	sp, #16
 800e366:	4770      	bx	lr
 800e368:	20000014 	.word	0x20000014

0800e36c <rand>:
 800e36c:	4b16      	ldr	r3, [pc, #88]	; (800e3c8 <rand+0x5c>)
 800e36e:	b510      	push	{r4, lr}
 800e370:	681c      	ldr	r4, [r3, #0]
 800e372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e374:	b9b3      	cbnz	r3, 800e3a4 <rand+0x38>
 800e376:	2018      	movs	r0, #24
 800e378:	f000 f95e 	bl	800e638 <malloc>
 800e37c:	63a0      	str	r0, [r4, #56]	; 0x38
 800e37e:	b928      	cbnz	r0, 800e38c <rand+0x20>
 800e380:	4602      	mov	r2, r0
 800e382:	4b12      	ldr	r3, [pc, #72]	; (800e3cc <rand+0x60>)
 800e384:	4812      	ldr	r0, [pc, #72]	; (800e3d0 <rand+0x64>)
 800e386:	214e      	movs	r1, #78	; 0x4e
 800e388:	f000 f82e 	bl	800e3e8 <__assert_func>
 800e38c:	4a11      	ldr	r2, [pc, #68]	; (800e3d4 <rand+0x68>)
 800e38e:	4b12      	ldr	r3, [pc, #72]	; (800e3d8 <rand+0x6c>)
 800e390:	e9c0 2300 	strd	r2, r3, [r0]
 800e394:	4b11      	ldr	r3, [pc, #68]	; (800e3dc <rand+0x70>)
 800e396:	6083      	str	r3, [r0, #8]
 800e398:	230b      	movs	r3, #11
 800e39a:	8183      	strh	r3, [r0, #12]
 800e39c:	2201      	movs	r2, #1
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e3a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e3a6:	4a0e      	ldr	r2, [pc, #56]	; (800e3e0 <rand+0x74>)
 800e3a8:	6920      	ldr	r0, [r4, #16]
 800e3aa:	6963      	ldr	r3, [r4, #20]
 800e3ac:	490d      	ldr	r1, [pc, #52]	; (800e3e4 <rand+0x78>)
 800e3ae:	4342      	muls	r2, r0
 800e3b0:	fb01 2203 	mla	r2, r1, r3, r2
 800e3b4:	fba0 0101 	umull	r0, r1, r0, r1
 800e3b8:	1c43      	adds	r3, r0, #1
 800e3ba:	eb42 0001 	adc.w	r0, r2, r1
 800e3be:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e3c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e3c6:	bd10      	pop	{r4, pc}
 800e3c8:	20000014 	.word	0x20000014
 800e3cc:	08011f2c 	.word	0x08011f2c
 800e3d0:	08011f43 	.word	0x08011f43
 800e3d4:	abcd330e 	.word	0xabcd330e
 800e3d8:	e66d1234 	.word	0xe66d1234
 800e3dc:	0005deec 	.word	0x0005deec
 800e3e0:	5851f42d 	.word	0x5851f42d
 800e3e4:	4c957f2d 	.word	0x4c957f2d

0800e3e8 <__assert_func>:
 800e3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3ea:	4614      	mov	r4, r2
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	4b09      	ldr	r3, [pc, #36]	; (800e414 <__assert_func+0x2c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	68d8      	ldr	r0, [r3, #12]
 800e3f6:	b14c      	cbz	r4, 800e40c <__assert_func+0x24>
 800e3f8:	4b07      	ldr	r3, [pc, #28]	; (800e418 <__assert_func+0x30>)
 800e3fa:	9100      	str	r1, [sp, #0]
 800e3fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e400:	4906      	ldr	r1, [pc, #24]	; (800e41c <__assert_func+0x34>)
 800e402:	462b      	mov	r3, r5
 800e404:	f000 f8e4 	bl	800e5d0 <fiprintf>
 800e408:	f000 fe12 	bl	800f030 <abort>
 800e40c:	4b04      	ldr	r3, [pc, #16]	; (800e420 <__assert_func+0x38>)
 800e40e:	461c      	mov	r4, r3
 800e410:	e7f3      	b.n	800e3fa <__assert_func+0x12>
 800e412:	bf00      	nop
 800e414:	20000014 	.word	0x20000014
 800e418:	08011f9e 	.word	0x08011f9e
 800e41c:	08011fab 	.word	0x08011fab
 800e420:	08011fd9 	.word	0x08011fd9

0800e424 <std>:
 800e424:	2300      	movs	r3, #0
 800e426:	b510      	push	{r4, lr}
 800e428:	4604      	mov	r4, r0
 800e42a:	e9c0 3300 	strd	r3, r3, [r0]
 800e42e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e432:	6083      	str	r3, [r0, #8]
 800e434:	8181      	strh	r1, [r0, #12]
 800e436:	6643      	str	r3, [r0, #100]	; 0x64
 800e438:	81c2      	strh	r2, [r0, #14]
 800e43a:	6183      	str	r3, [r0, #24]
 800e43c:	4619      	mov	r1, r3
 800e43e:	2208      	movs	r2, #8
 800e440:	305c      	adds	r0, #92	; 0x5c
 800e442:	f7ff ff73 	bl	800e32c <memset>
 800e446:	4b05      	ldr	r3, [pc, #20]	; (800e45c <std+0x38>)
 800e448:	6263      	str	r3, [r4, #36]	; 0x24
 800e44a:	4b05      	ldr	r3, [pc, #20]	; (800e460 <std+0x3c>)
 800e44c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e44e:	4b05      	ldr	r3, [pc, #20]	; (800e464 <std+0x40>)
 800e450:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e452:	4b05      	ldr	r3, [pc, #20]	; (800e468 <std+0x44>)
 800e454:	6224      	str	r4, [r4, #32]
 800e456:	6323      	str	r3, [r4, #48]	; 0x30
 800e458:	bd10      	pop	{r4, pc}
 800e45a:	bf00      	nop
 800e45c:	0800ee05 	.word	0x0800ee05
 800e460:	0800ee27 	.word	0x0800ee27
 800e464:	0800ee5f 	.word	0x0800ee5f
 800e468:	0800ee83 	.word	0x0800ee83

0800e46c <_cleanup_r>:
 800e46c:	4901      	ldr	r1, [pc, #4]	; (800e474 <_cleanup_r+0x8>)
 800e46e:	f000 b8c1 	b.w	800e5f4 <_fwalk_reent>
 800e472:	bf00      	nop
 800e474:	0800f16d 	.word	0x0800f16d

0800e478 <__sfmoreglue>:
 800e478:	b570      	push	{r4, r5, r6, lr}
 800e47a:	2268      	movs	r2, #104	; 0x68
 800e47c:	1e4d      	subs	r5, r1, #1
 800e47e:	4355      	muls	r5, r2
 800e480:	460e      	mov	r6, r1
 800e482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e486:	f000 f94b 	bl	800e720 <_malloc_r>
 800e48a:	4604      	mov	r4, r0
 800e48c:	b140      	cbz	r0, 800e4a0 <__sfmoreglue+0x28>
 800e48e:	2100      	movs	r1, #0
 800e490:	e9c0 1600 	strd	r1, r6, [r0]
 800e494:	300c      	adds	r0, #12
 800e496:	60a0      	str	r0, [r4, #8]
 800e498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e49c:	f7ff ff46 	bl	800e32c <memset>
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}

0800e4a4 <__sfp_lock_acquire>:
 800e4a4:	4801      	ldr	r0, [pc, #4]	; (800e4ac <__sfp_lock_acquire+0x8>)
 800e4a6:	f000 b8c5 	b.w	800e634 <__retarget_lock_acquire_recursive>
 800e4aa:	bf00      	nop
 800e4ac:	200068a1 	.word	0x200068a1

0800e4b0 <__sfp_lock_release>:
 800e4b0:	4801      	ldr	r0, [pc, #4]	; (800e4b8 <__sfp_lock_release+0x8>)
 800e4b2:	f000 b8c0 	b.w	800e636 <__retarget_lock_release_recursive>
 800e4b6:	bf00      	nop
 800e4b8:	200068a1 	.word	0x200068a1

0800e4bc <__sinit_lock_acquire>:
 800e4bc:	4801      	ldr	r0, [pc, #4]	; (800e4c4 <__sinit_lock_acquire+0x8>)
 800e4be:	f000 b8b9 	b.w	800e634 <__retarget_lock_acquire_recursive>
 800e4c2:	bf00      	nop
 800e4c4:	200068a2 	.word	0x200068a2

0800e4c8 <__sinit_lock_release>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	; (800e4d0 <__sinit_lock_release+0x8>)
 800e4ca:	f000 b8b4 	b.w	800e636 <__retarget_lock_release_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	200068a2 	.word	0x200068a2

0800e4d4 <__sinit>:
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	f7ff fff0 	bl	800e4bc <__sinit_lock_acquire>
 800e4dc:	69a3      	ldr	r3, [r4, #24]
 800e4de:	b11b      	cbz	r3, 800e4e8 <__sinit+0x14>
 800e4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4e4:	f7ff bff0 	b.w	800e4c8 <__sinit_lock_release>
 800e4e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4ec:	6523      	str	r3, [r4, #80]	; 0x50
 800e4ee:	4b13      	ldr	r3, [pc, #76]	; (800e53c <__sinit+0x68>)
 800e4f0:	4a13      	ldr	r2, [pc, #76]	; (800e540 <__sinit+0x6c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e4f6:	42a3      	cmp	r3, r4
 800e4f8:	bf04      	itt	eq
 800e4fa:	2301      	moveq	r3, #1
 800e4fc:	61a3      	streq	r3, [r4, #24]
 800e4fe:	4620      	mov	r0, r4
 800e500:	f000 f820 	bl	800e544 <__sfp>
 800e504:	6060      	str	r0, [r4, #4]
 800e506:	4620      	mov	r0, r4
 800e508:	f000 f81c 	bl	800e544 <__sfp>
 800e50c:	60a0      	str	r0, [r4, #8]
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 f818 	bl	800e544 <__sfp>
 800e514:	2200      	movs	r2, #0
 800e516:	60e0      	str	r0, [r4, #12]
 800e518:	2104      	movs	r1, #4
 800e51a:	6860      	ldr	r0, [r4, #4]
 800e51c:	f7ff ff82 	bl	800e424 <std>
 800e520:	68a0      	ldr	r0, [r4, #8]
 800e522:	2201      	movs	r2, #1
 800e524:	2109      	movs	r1, #9
 800e526:	f7ff ff7d 	bl	800e424 <std>
 800e52a:	68e0      	ldr	r0, [r4, #12]
 800e52c:	2202      	movs	r2, #2
 800e52e:	2112      	movs	r1, #18
 800e530:	f7ff ff78 	bl	800e424 <std>
 800e534:	2301      	movs	r3, #1
 800e536:	61a3      	str	r3, [r4, #24]
 800e538:	e7d2      	b.n	800e4e0 <__sinit+0xc>
 800e53a:	bf00      	nop
 800e53c:	08011f28 	.word	0x08011f28
 800e540:	0800e46d 	.word	0x0800e46d

0800e544 <__sfp>:
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	4607      	mov	r7, r0
 800e548:	f7ff ffac 	bl	800e4a4 <__sfp_lock_acquire>
 800e54c:	4b1e      	ldr	r3, [pc, #120]	; (800e5c8 <__sfp+0x84>)
 800e54e:	681e      	ldr	r6, [r3, #0]
 800e550:	69b3      	ldr	r3, [r6, #24]
 800e552:	b913      	cbnz	r3, 800e55a <__sfp+0x16>
 800e554:	4630      	mov	r0, r6
 800e556:	f7ff ffbd 	bl	800e4d4 <__sinit>
 800e55a:	3648      	adds	r6, #72	; 0x48
 800e55c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e560:	3b01      	subs	r3, #1
 800e562:	d503      	bpl.n	800e56c <__sfp+0x28>
 800e564:	6833      	ldr	r3, [r6, #0]
 800e566:	b30b      	cbz	r3, 800e5ac <__sfp+0x68>
 800e568:	6836      	ldr	r6, [r6, #0]
 800e56a:	e7f7      	b.n	800e55c <__sfp+0x18>
 800e56c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e570:	b9d5      	cbnz	r5, 800e5a8 <__sfp+0x64>
 800e572:	4b16      	ldr	r3, [pc, #88]	; (800e5cc <__sfp+0x88>)
 800e574:	60e3      	str	r3, [r4, #12]
 800e576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e57a:	6665      	str	r5, [r4, #100]	; 0x64
 800e57c:	f000 f859 	bl	800e632 <__retarget_lock_init_recursive>
 800e580:	f7ff ff96 	bl	800e4b0 <__sfp_lock_release>
 800e584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e58c:	6025      	str	r5, [r4, #0]
 800e58e:	61a5      	str	r5, [r4, #24]
 800e590:	2208      	movs	r2, #8
 800e592:	4629      	mov	r1, r5
 800e594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e598:	f7ff fec8 	bl	800e32c <memset>
 800e59c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5a8:	3468      	adds	r4, #104	; 0x68
 800e5aa:	e7d9      	b.n	800e560 <__sfp+0x1c>
 800e5ac:	2104      	movs	r1, #4
 800e5ae:	4638      	mov	r0, r7
 800e5b0:	f7ff ff62 	bl	800e478 <__sfmoreglue>
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	6030      	str	r0, [r6, #0]
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d1d5      	bne.n	800e568 <__sfp+0x24>
 800e5bc:	f7ff ff78 	bl	800e4b0 <__sfp_lock_release>
 800e5c0:	230c      	movs	r3, #12
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	e7ee      	b.n	800e5a4 <__sfp+0x60>
 800e5c6:	bf00      	nop
 800e5c8:	08011f28 	.word	0x08011f28
 800e5cc:	ffff0001 	.word	0xffff0001

0800e5d0 <fiprintf>:
 800e5d0:	b40e      	push	{r1, r2, r3}
 800e5d2:	b503      	push	{r0, r1, lr}
 800e5d4:	4601      	mov	r1, r0
 800e5d6:	ab03      	add	r3, sp, #12
 800e5d8:	4805      	ldr	r0, [pc, #20]	; (800e5f0 <fiprintf+0x20>)
 800e5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5de:	6800      	ldr	r0, [r0, #0]
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	f000 f93b 	bl	800e85c <_vfiprintf_r>
 800e5e6:	b002      	add	sp, #8
 800e5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ec:	b003      	add	sp, #12
 800e5ee:	4770      	bx	lr
 800e5f0:	20000014 	.word	0x20000014

0800e5f4 <_fwalk_reent>:
 800e5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	4688      	mov	r8, r1
 800e5fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e600:	2700      	movs	r7, #0
 800e602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e606:	f1b9 0901 	subs.w	r9, r9, #1
 800e60a:	d505      	bpl.n	800e618 <_fwalk_reent+0x24>
 800e60c:	6824      	ldr	r4, [r4, #0]
 800e60e:	2c00      	cmp	r4, #0
 800e610:	d1f7      	bne.n	800e602 <_fwalk_reent+0xe>
 800e612:	4638      	mov	r0, r7
 800e614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e618:	89ab      	ldrh	r3, [r5, #12]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d907      	bls.n	800e62e <_fwalk_reent+0x3a>
 800e61e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e622:	3301      	adds	r3, #1
 800e624:	d003      	beq.n	800e62e <_fwalk_reent+0x3a>
 800e626:	4629      	mov	r1, r5
 800e628:	4630      	mov	r0, r6
 800e62a:	47c0      	blx	r8
 800e62c:	4307      	orrs	r7, r0
 800e62e:	3568      	adds	r5, #104	; 0x68
 800e630:	e7e9      	b.n	800e606 <_fwalk_reent+0x12>

0800e632 <__retarget_lock_init_recursive>:
 800e632:	4770      	bx	lr

0800e634 <__retarget_lock_acquire_recursive>:
 800e634:	4770      	bx	lr

0800e636 <__retarget_lock_release_recursive>:
 800e636:	4770      	bx	lr

0800e638 <malloc>:
 800e638:	4b02      	ldr	r3, [pc, #8]	; (800e644 <malloc+0xc>)
 800e63a:	4601      	mov	r1, r0
 800e63c:	6818      	ldr	r0, [r3, #0]
 800e63e:	f000 b86f 	b.w	800e720 <_malloc_r>
 800e642:	bf00      	nop
 800e644:	20000014 	.word	0x20000014

0800e648 <_free_r>:
 800e648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e64a:	2900      	cmp	r1, #0
 800e64c:	d044      	beq.n	800e6d8 <_free_r+0x90>
 800e64e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e652:	9001      	str	r0, [sp, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	f1a1 0404 	sub.w	r4, r1, #4
 800e65a:	bfb8      	it	lt
 800e65c:	18e4      	addlt	r4, r4, r3
 800e65e:	f000 fe39 	bl	800f2d4 <__malloc_lock>
 800e662:	4a1e      	ldr	r2, [pc, #120]	; (800e6dc <_free_r+0x94>)
 800e664:	9801      	ldr	r0, [sp, #4]
 800e666:	6813      	ldr	r3, [r2, #0]
 800e668:	b933      	cbnz	r3, 800e678 <_free_r+0x30>
 800e66a:	6063      	str	r3, [r4, #4]
 800e66c:	6014      	str	r4, [r2, #0]
 800e66e:	b003      	add	sp, #12
 800e670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e674:	f000 be34 	b.w	800f2e0 <__malloc_unlock>
 800e678:	42a3      	cmp	r3, r4
 800e67a:	d908      	bls.n	800e68e <_free_r+0x46>
 800e67c:	6825      	ldr	r5, [r4, #0]
 800e67e:	1961      	adds	r1, r4, r5
 800e680:	428b      	cmp	r3, r1
 800e682:	bf01      	itttt	eq
 800e684:	6819      	ldreq	r1, [r3, #0]
 800e686:	685b      	ldreq	r3, [r3, #4]
 800e688:	1949      	addeq	r1, r1, r5
 800e68a:	6021      	streq	r1, [r4, #0]
 800e68c:	e7ed      	b.n	800e66a <_free_r+0x22>
 800e68e:	461a      	mov	r2, r3
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	b10b      	cbz	r3, 800e698 <_free_r+0x50>
 800e694:	42a3      	cmp	r3, r4
 800e696:	d9fa      	bls.n	800e68e <_free_r+0x46>
 800e698:	6811      	ldr	r1, [r2, #0]
 800e69a:	1855      	adds	r5, r2, r1
 800e69c:	42a5      	cmp	r5, r4
 800e69e:	d10b      	bne.n	800e6b8 <_free_r+0x70>
 800e6a0:	6824      	ldr	r4, [r4, #0]
 800e6a2:	4421      	add	r1, r4
 800e6a4:	1854      	adds	r4, r2, r1
 800e6a6:	42a3      	cmp	r3, r4
 800e6a8:	6011      	str	r1, [r2, #0]
 800e6aa:	d1e0      	bne.n	800e66e <_free_r+0x26>
 800e6ac:	681c      	ldr	r4, [r3, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	6053      	str	r3, [r2, #4]
 800e6b2:	4421      	add	r1, r4
 800e6b4:	6011      	str	r1, [r2, #0]
 800e6b6:	e7da      	b.n	800e66e <_free_r+0x26>
 800e6b8:	d902      	bls.n	800e6c0 <_free_r+0x78>
 800e6ba:	230c      	movs	r3, #12
 800e6bc:	6003      	str	r3, [r0, #0]
 800e6be:	e7d6      	b.n	800e66e <_free_r+0x26>
 800e6c0:	6825      	ldr	r5, [r4, #0]
 800e6c2:	1961      	adds	r1, r4, r5
 800e6c4:	428b      	cmp	r3, r1
 800e6c6:	bf04      	itt	eq
 800e6c8:	6819      	ldreq	r1, [r3, #0]
 800e6ca:	685b      	ldreq	r3, [r3, #4]
 800e6cc:	6063      	str	r3, [r4, #4]
 800e6ce:	bf04      	itt	eq
 800e6d0:	1949      	addeq	r1, r1, r5
 800e6d2:	6021      	streq	r1, [r4, #0]
 800e6d4:	6054      	str	r4, [r2, #4]
 800e6d6:	e7ca      	b.n	800e66e <_free_r+0x26>
 800e6d8:	b003      	add	sp, #12
 800e6da:	bd30      	pop	{r4, r5, pc}
 800e6dc:	200068a4 	.word	0x200068a4

0800e6e0 <sbrk_aligned>:
 800e6e0:	b570      	push	{r4, r5, r6, lr}
 800e6e2:	4e0e      	ldr	r6, [pc, #56]	; (800e71c <sbrk_aligned+0x3c>)
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	6831      	ldr	r1, [r6, #0]
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	b911      	cbnz	r1, 800e6f2 <sbrk_aligned+0x12>
 800e6ec:	f000 fb7a 	bl	800ede4 <_sbrk_r>
 800e6f0:	6030      	str	r0, [r6, #0]
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f000 fb75 	bl	800ede4 <_sbrk_r>
 800e6fa:	1c43      	adds	r3, r0, #1
 800e6fc:	d00a      	beq.n	800e714 <sbrk_aligned+0x34>
 800e6fe:	1cc4      	adds	r4, r0, #3
 800e700:	f024 0403 	bic.w	r4, r4, #3
 800e704:	42a0      	cmp	r0, r4
 800e706:	d007      	beq.n	800e718 <sbrk_aligned+0x38>
 800e708:	1a21      	subs	r1, r4, r0
 800e70a:	4628      	mov	r0, r5
 800e70c:	f000 fb6a 	bl	800ede4 <_sbrk_r>
 800e710:	3001      	adds	r0, #1
 800e712:	d101      	bne.n	800e718 <sbrk_aligned+0x38>
 800e714:	f04f 34ff 	mov.w	r4, #4294967295
 800e718:	4620      	mov	r0, r4
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
 800e71c:	200068a8 	.word	0x200068a8

0800e720 <_malloc_r>:
 800e720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e724:	1ccd      	adds	r5, r1, #3
 800e726:	f025 0503 	bic.w	r5, r5, #3
 800e72a:	3508      	adds	r5, #8
 800e72c:	2d0c      	cmp	r5, #12
 800e72e:	bf38      	it	cc
 800e730:	250c      	movcc	r5, #12
 800e732:	2d00      	cmp	r5, #0
 800e734:	4607      	mov	r7, r0
 800e736:	db01      	blt.n	800e73c <_malloc_r+0x1c>
 800e738:	42a9      	cmp	r1, r5
 800e73a:	d905      	bls.n	800e748 <_malloc_r+0x28>
 800e73c:	230c      	movs	r3, #12
 800e73e:	603b      	str	r3, [r7, #0]
 800e740:	2600      	movs	r6, #0
 800e742:	4630      	mov	r0, r6
 800e744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e748:	4e2e      	ldr	r6, [pc, #184]	; (800e804 <_malloc_r+0xe4>)
 800e74a:	f000 fdc3 	bl	800f2d4 <__malloc_lock>
 800e74e:	6833      	ldr	r3, [r6, #0]
 800e750:	461c      	mov	r4, r3
 800e752:	bb34      	cbnz	r4, 800e7a2 <_malloc_r+0x82>
 800e754:	4629      	mov	r1, r5
 800e756:	4638      	mov	r0, r7
 800e758:	f7ff ffc2 	bl	800e6e0 <sbrk_aligned>
 800e75c:	1c43      	adds	r3, r0, #1
 800e75e:	4604      	mov	r4, r0
 800e760:	d14d      	bne.n	800e7fe <_malloc_r+0xde>
 800e762:	6834      	ldr	r4, [r6, #0]
 800e764:	4626      	mov	r6, r4
 800e766:	2e00      	cmp	r6, #0
 800e768:	d140      	bne.n	800e7ec <_malloc_r+0xcc>
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	4631      	mov	r1, r6
 800e76e:	4638      	mov	r0, r7
 800e770:	eb04 0803 	add.w	r8, r4, r3
 800e774:	f000 fb36 	bl	800ede4 <_sbrk_r>
 800e778:	4580      	cmp	r8, r0
 800e77a:	d13a      	bne.n	800e7f2 <_malloc_r+0xd2>
 800e77c:	6821      	ldr	r1, [r4, #0]
 800e77e:	3503      	adds	r5, #3
 800e780:	1a6d      	subs	r5, r5, r1
 800e782:	f025 0503 	bic.w	r5, r5, #3
 800e786:	3508      	adds	r5, #8
 800e788:	2d0c      	cmp	r5, #12
 800e78a:	bf38      	it	cc
 800e78c:	250c      	movcc	r5, #12
 800e78e:	4629      	mov	r1, r5
 800e790:	4638      	mov	r0, r7
 800e792:	f7ff ffa5 	bl	800e6e0 <sbrk_aligned>
 800e796:	3001      	adds	r0, #1
 800e798:	d02b      	beq.n	800e7f2 <_malloc_r+0xd2>
 800e79a:	6823      	ldr	r3, [r4, #0]
 800e79c:	442b      	add	r3, r5
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	e00e      	b.n	800e7c0 <_malloc_r+0xa0>
 800e7a2:	6822      	ldr	r2, [r4, #0]
 800e7a4:	1b52      	subs	r2, r2, r5
 800e7a6:	d41e      	bmi.n	800e7e6 <_malloc_r+0xc6>
 800e7a8:	2a0b      	cmp	r2, #11
 800e7aa:	d916      	bls.n	800e7da <_malloc_r+0xba>
 800e7ac:	1961      	adds	r1, r4, r5
 800e7ae:	42a3      	cmp	r3, r4
 800e7b0:	6025      	str	r5, [r4, #0]
 800e7b2:	bf18      	it	ne
 800e7b4:	6059      	strne	r1, [r3, #4]
 800e7b6:	6863      	ldr	r3, [r4, #4]
 800e7b8:	bf08      	it	eq
 800e7ba:	6031      	streq	r1, [r6, #0]
 800e7bc:	5162      	str	r2, [r4, r5]
 800e7be:	604b      	str	r3, [r1, #4]
 800e7c0:	4638      	mov	r0, r7
 800e7c2:	f104 060b 	add.w	r6, r4, #11
 800e7c6:	f000 fd8b 	bl	800f2e0 <__malloc_unlock>
 800e7ca:	f026 0607 	bic.w	r6, r6, #7
 800e7ce:	1d23      	adds	r3, r4, #4
 800e7d0:	1af2      	subs	r2, r6, r3
 800e7d2:	d0b6      	beq.n	800e742 <_malloc_r+0x22>
 800e7d4:	1b9b      	subs	r3, r3, r6
 800e7d6:	50a3      	str	r3, [r4, r2]
 800e7d8:	e7b3      	b.n	800e742 <_malloc_r+0x22>
 800e7da:	6862      	ldr	r2, [r4, #4]
 800e7dc:	42a3      	cmp	r3, r4
 800e7de:	bf0c      	ite	eq
 800e7e0:	6032      	streq	r2, [r6, #0]
 800e7e2:	605a      	strne	r2, [r3, #4]
 800e7e4:	e7ec      	b.n	800e7c0 <_malloc_r+0xa0>
 800e7e6:	4623      	mov	r3, r4
 800e7e8:	6864      	ldr	r4, [r4, #4]
 800e7ea:	e7b2      	b.n	800e752 <_malloc_r+0x32>
 800e7ec:	4634      	mov	r4, r6
 800e7ee:	6876      	ldr	r6, [r6, #4]
 800e7f0:	e7b9      	b.n	800e766 <_malloc_r+0x46>
 800e7f2:	230c      	movs	r3, #12
 800e7f4:	603b      	str	r3, [r7, #0]
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	f000 fd72 	bl	800f2e0 <__malloc_unlock>
 800e7fc:	e7a1      	b.n	800e742 <_malloc_r+0x22>
 800e7fe:	6025      	str	r5, [r4, #0]
 800e800:	e7de      	b.n	800e7c0 <_malloc_r+0xa0>
 800e802:	bf00      	nop
 800e804:	200068a4 	.word	0x200068a4

0800e808 <__sfputc_r>:
 800e808:	6893      	ldr	r3, [r2, #8]
 800e80a:	3b01      	subs	r3, #1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	b410      	push	{r4}
 800e810:	6093      	str	r3, [r2, #8]
 800e812:	da08      	bge.n	800e826 <__sfputc_r+0x1e>
 800e814:	6994      	ldr	r4, [r2, #24]
 800e816:	42a3      	cmp	r3, r4
 800e818:	db01      	blt.n	800e81e <__sfputc_r+0x16>
 800e81a:	290a      	cmp	r1, #10
 800e81c:	d103      	bne.n	800e826 <__sfputc_r+0x1e>
 800e81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e822:	f000 bb33 	b.w	800ee8c <__swbuf_r>
 800e826:	6813      	ldr	r3, [r2, #0]
 800e828:	1c58      	adds	r0, r3, #1
 800e82a:	6010      	str	r0, [r2, #0]
 800e82c:	7019      	strb	r1, [r3, #0]
 800e82e:	4608      	mov	r0, r1
 800e830:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <__sfputs_r>:
 800e836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e838:	4606      	mov	r6, r0
 800e83a:	460f      	mov	r7, r1
 800e83c:	4614      	mov	r4, r2
 800e83e:	18d5      	adds	r5, r2, r3
 800e840:	42ac      	cmp	r4, r5
 800e842:	d101      	bne.n	800e848 <__sfputs_r+0x12>
 800e844:	2000      	movs	r0, #0
 800e846:	e007      	b.n	800e858 <__sfputs_r+0x22>
 800e848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84c:	463a      	mov	r2, r7
 800e84e:	4630      	mov	r0, r6
 800e850:	f7ff ffda 	bl	800e808 <__sfputc_r>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d1f3      	bne.n	800e840 <__sfputs_r+0xa>
 800e858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e85c <_vfiprintf_r>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	460d      	mov	r5, r1
 800e862:	b09d      	sub	sp, #116	; 0x74
 800e864:	4614      	mov	r4, r2
 800e866:	4698      	mov	r8, r3
 800e868:	4606      	mov	r6, r0
 800e86a:	b118      	cbz	r0, 800e874 <_vfiprintf_r+0x18>
 800e86c:	6983      	ldr	r3, [r0, #24]
 800e86e:	b90b      	cbnz	r3, 800e874 <_vfiprintf_r+0x18>
 800e870:	f7ff fe30 	bl	800e4d4 <__sinit>
 800e874:	4b89      	ldr	r3, [pc, #548]	; (800ea9c <_vfiprintf_r+0x240>)
 800e876:	429d      	cmp	r5, r3
 800e878:	d11b      	bne.n	800e8b2 <_vfiprintf_r+0x56>
 800e87a:	6875      	ldr	r5, [r6, #4]
 800e87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	d405      	bmi.n	800e88e <_vfiprintf_r+0x32>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	059a      	lsls	r2, r3, #22
 800e886:	d402      	bmi.n	800e88e <_vfiprintf_r+0x32>
 800e888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e88a:	f7ff fed3 	bl	800e634 <__retarget_lock_acquire_recursive>
 800e88e:	89ab      	ldrh	r3, [r5, #12]
 800e890:	071b      	lsls	r3, r3, #28
 800e892:	d501      	bpl.n	800e898 <_vfiprintf_r+0x3c>
 800e894:	692b      	ldr	r3, [r5, #16]
 800e896:	b9eb      	cbnz	r3, 800e8d4 <_vfiprintf_r+0x78>
 800e898:	4629      	mov	r1, r5
 800e89a:	4630      	mov	r0, r6
 800e89c:	f000 fb5a 	bl	800ef54 <__swsetup_r>
 800e8a0:	b1c0      	cbz	r0, 800e8d4 <_vfiprintf_r+0x78>
 800e8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8a4:	07dc      	lsls	r4, r3, #31
 800e8a6:	d50e      	bpl.n	800e8c6 <_vfiprintf_r+0x6a>
 800e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ac:	b01d      	add	sp, #116	; 0x74
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	4b7b      	ldr	r3, [pc, #492]	; (800eaa0 <_vfiprintf_r+0x244>)
 800e8b4:	429d      	cmp	r5, r3
 800e8b6:	d101      	bne.n	800e8bc <_vfiprintf_r+0x60>
 800e8b8:	68b5      	ldr	r5, [r6, #8]
 800e8ba:	e7df      	b.n	800e87c <_vfiprintf_r+0x20>
 800e8bc:	4b79      	ldr	r3, [pc, #484]	; (800eaa4 <_vfiprintf_r+0x248>)
 800e8be:	429d      	cmp	r5, r3
 800e8c0:	bf08      	it	eq
 800e8c2:	68f5      	ldreq	r5, [r6, #12]
 800e8c4:	e7da      	b.n	800e87c <_vfiprintf_r+0x20>
 800e8c6:	89ab      	ldrh	r3, [r5, #12]
 800e8c8:	0598      	lsls	r0, r3, #22
 800e8ca:	d4ed      	bmi.n	800e8a8 <_vfiprintf_r+0x4c>
 800e8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ce:	f7ff feb2 	bl	800e636 <__retarget_lock_release_recursive>
 800e8d2:	e7e9      	b.n	800e8a8 <_vfiprintf_r+0x4c>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d8:	2320      	movs	r3, #32
 800e8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8e2:	2330      	movs	r3, #48	; 0x30
 800e8e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eaa8 <_vfiprintf_r+0x24c>
 800e8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8ec:	f04f 0901 	mov.w	r9, #1
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	469a      	mov	sl, r3
 800e8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8f8:	b10a      	cbz	r2, 800e8fe <_vfiprintf_r+0xa2>
 800e8fa:	2a25      	cmp	r2, #37	; 0x25
 800e8fc:	d1f9      	bne.n	800e8f2 <_vfiprintf_r+0x96>
 800e8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e902:	d00b      	beq.n	800e91c <_vfiprintf_r+0xc0>
 800e904:	465b      	mov	r3, fp
 800e906:	4622      	mov	r2, r4
 800e908:	4629      	mov	r1, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7ff ff93 	bl	800e836 <__sfputs_r>
 800e910:	3001      	adds	r0, #1
 800e912:	f000 80aa 	beq.w	800ea6a <_vfiprintf_r+0x20e>
 800e916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e918:	445a      	add	r2, fp
 800e91a:	9209      	str	r2, [sp, #36]	; 0x24
 800e91c:	f89a 3000 	ldrb.w	r3, [sl]
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 80a2 	beq.w	800ea6a <_vfiprintf_r+0x20e>
 800e926:	2300      	movs	r3, #0
 800e928:	f04f 32ff 	mov.w	r2, #4294967295
 800e92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e930:	f10a 0a01 	add.w	sl, sl, #1
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	9307      	str	r3, [sp, #28]
 800e938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e93c:	931a      	str	r3, [sp, #104]	; 0x68
 800e93e:	4654      	mov	r4, sl
 800e940:	2205      	movs	r2, #5
 800e942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e946:	4858      	ldr	r0, [pc, #352]	; (800eaa8 <_vfiprintf_r+0x24c>)
 800e948:	f7f1 fc42 	bl	80001d0 <memchr>
 800e94c:	9a04      	ldr	r2, [sp, #16]
 800e94e:	b9d8      	cbnz	r0, 800e988 <_vfiprintf_r+0x12c>
 800e950:	06d1      	lsls	r1, r2, #27
 800e952:	bf44      	itt	mi
 800e954:	2320      	movmi	r3, #32
 800e956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e95a:	0713      	lsls	r3, r2, #28
 800e95c:	bf44      	itt	mi
 800e95e:	232b      	movmi	r3, #43	; 0x2b
 800e960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e964:	f89a 3000 	ldrb.w	r3, [sl]
 800e968:	2b2a      	cmp	r3, #42	; 0x2a
 800e96a:	d015      	beq.n	800e998 <_vfiprintf_r+0x13c>
 800e96c:	9a07      	ldr	r2, [sp, #28]
 800e96e:	4654      	mov	r4, sl
 800e970:	2000      	movs	r0, #0
 800e972:	f04f 0c0a 	mov.w	ip, #10
 800e976:	4621      	mov	r1, r4
 800e978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e97c:	3b30      	subs	r3, #48	; 0x30
 800e97e:	2b09      	cmp	r3, #9
 800e980:	d94e      	bls.n	800ea20 <_vfiprintf_r+0x1c4>
 800e982:	b1b0      	cbz	r0, 800e9b2 <_vfiprintf_r+0x156>
 800e984:	9207      	str	r2, [sp, #28]
 800e986:	e014      	b.n	800e9b2 <_vfiprintf_r+0x156>
 800e988:	eba0 0308 	sub.w	r3, r0, r8
 800e98c:	fa09 f303 	lsl.w	r3, r9, r3
 800e990:	4313      	orrs	r3, r2
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	46a2      	mov	sl, r4
 800e996:	e7d2      	b.n	800e93e <_vfiprintf_r+0xe2>
 800e998:	9b03      	ldr	r3, [sp, #12]
 800e99a:	1d19      	adds	r1, r3, #4
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	9103      	str	r1, [sp, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bfbb      	ittet	lt
 800e9a4:	425b      	neglt	r3, r3
 800e9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9aa:	9307      	strge	r3, [sp, #28]
 800e9ac:	9307      	strlt	r3, [sp, #28]
 800e9ae:	bfb8      	it	lt
 800e9b0:	9204      	strlt	r2, [sp, #16]
 800e9b2:	7823      	ldrb	r3, [r4, #0]
 800e9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b6:	d10c      	bne.n	800e9d2 <_vfiprintf_r+0x176>
 800e9b8:	7863      	ldrb	r3, [r4, #1]
 800e9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e9bc:	d135      	bne.n	800ea2a <_vfiprintf_r+0x1ce>
 800e9be:	9b03      	ldr	r3, [sp, #12]
 800e9c0:	1d1a      	adds	r2, r3, #4
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	9203      	str	r2, [sp, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bfb8      	it	lt
 800e9ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9ce:	3402      	adds	r4, #2
 800e9d0:	9305      	str	r3, [sp, #20]
 800e9d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eab8 <_vfiprintf_r+0x25c>
 800e9d6:	7821      	ldrb	r1, [r4, #0]
 800e9d8:	2203      	movs	r2, #3
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f7f1 fbf8 	bl	80001d0 <memchr>
 800e9e0:	b140      	cbz	r0, 800e9f4 <_vfiprintf_r+0x198>
 800e9e2:	2340      	movs	r3, #64	; 0x40
 800e9e4:	eba0 000a 	sub.w	r0, r0, sl
 800e9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e9ec:	9b04      	ldr	r3, [sp, #16]
 800e9ee:	4303      	orrs	r3, r0
 800e9f0:	3401      	adds	r4, #1
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f8:	482c      	ldr	r0, [pc, #176]	; (800eaac <_vfiprintf_r+0x250>)
 800e9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9fe:	2206      	movs	r2, #6
 800ea00:	f7f1 fbe6 	bl	80001d0 <memchr>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d03f      	beq.n	800ea88 <_vfiprintf_r+0x22c>
 800ea08:	4b29      	ldr	r3, [pc, #164]	; (800eab0 <_vfiprintf_r+0x254>)
 800ea0a:	bb1b      	cbnz	r3, 800ea54 <_vfiprintf_r+0x1f8>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	3307      	adds	r3, #7
 800ea10:	f023 0307 	bic.w	r3, r3, #7
 800ea14:	3308      	adds	r3, #8
 800ea16:	9303      	str	r3, [sp, #12]
 800ea18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea1a:	443b      	add	r3, r7
 800ea1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1e:	e767      	b.n	800e8f0 <_vfiprintf_r+0x94>
 800ea20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea24:	460c      	mov	r4, r1
 800ea26:	2001      	movs	r0, #1
 800ea28:	e7a5      	b.n	800e976 <_vfiprintf_r+0x11a>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	3401      	adds	r4, #1
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	4619      	mov	r1, r3
 800ea32:	f04f 0c0a 	mov.w	ip, #10
 800ea36:	4620      	mov	r0, r4
 800ea38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea3c:	3a30      	subs	r2, #48	; 0x30
 800ea3e:	2a09      	cmp	r2, #9
 800ea40:	d903      	bls.n	800ea4a <_vfiprintf_r+0x1ee>
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d0c5      	beq.n	800e9d2 <_vfiprintf_r+0x176>
 800ea46:	9105      	str	r1, [sp, #20]
 800ea48:	e7c3      	b.n	800e9d2 <_vfiprintf_r+0x176>
 800ea4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea4e:	4604      	mov	r4, r0
 800ea50:	2301      	movs	r3, #1
 800ea52:	e7f0      	b.n	800ea36 <_vfiprintf_r+0x1da>
 800ea54:	ab03      	add	r3, sp, #12
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	462a      	mov	r2, r5
 800ea5a:	4b16      	ldr	r3, [pc, #88]	; (800eab4 <_vfiprintf_r+0x258>)
 800ea5c:	a904      	add	r1, sp, #16
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f3af 8000 	nop.w
 800ea64:	4607      	mov	r7, r0
 800ea66:	1c78      	adds	r0, r7, #1
 800ea68:	d1d6      	bne.n	800ea18 <_vfiprintf_r+0x1bc>
 800ea6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea6c:	07d9      	lsls	r1, r3, #31
 800ea6e:	d405      	bmi.n	800ea7c <_vfiprintf_r+0x220>
 800ea70:	89ab      	ldrh	r3, [r5, #12]
 800ea72:	059a      	lsls	r2, r3, #22
 800ea74:	d402      	bmi.n	800ea7c <_vfiprintf_r+0x220>
 800ea76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea78:	f7ff fddd 	bl	800e636 <__retarget_lock_release_recursive>
 800ea7c:	89ab      	ldrh	r3, [r5, #12]
 800ea7e:	065b      	lsls	r3, r3, #25
 800ea80:	f53f af12 	bmi.w	800e8a8 <_vfiprintf_r+0x4c>
 800ea84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea86:	e711      	b.n	800e8ac <_vfiprintf_r+0x50>
 800ea88:	ab03      	add	r3, sp, #12
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <_vfiprintf_r+0x258>)
 800ea90:	a904      	add	r1, sp, #16
 800ea92:	4630      	mov	r0, r6
 800ea94:	f000 f880 	bl	800eb98 <_printf_i>
 800ea98:	e7e4      	b.n	800ea64 <_vfiprintf_r+0x208>
 800ea9a:	bf00      	nop
 800ea9c:	08011ffc 	.word	0x08011ffc
 800eaa0:	0801201c 	.word	0x0801201c
 800eaa4:	08011fdc 	.word	0x08011fdc
 800eaa8:	0801203c 	.word	0x0801203c
 800eaac:	08012046 	.word	0x08012046
 800eab0:	00000000 	.word	0x00000000
 800eab4:	0800e837 	.word	0x0800e837
 800eab8:	08012042 	.word	0x08012042

0800eabc <_printf_common>:
 800eabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eac0:	4616      	mov	r6, r2
 800eac2:	4699      	mov	r9, r3
 800eac4:	688a      	ldr	r2, [r1, #8]
 800eac6:	690b      	ldr	r3, [r1, #16]
 800eac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eacc:	4293      	cmp	r3, r2
 800eace:	bfb8      	it	lt
 800ead0:	4613      	movlt	r3, r2
 800ead2:	6033      	str	r3, [r6, #0]
 800ead4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ead8:	4607      	mov	r7, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	b10a      	cbz	r2, 800eae2 <_printf_common+0x26>
 800eade:	3301      	adds	r3, #1
 800eae0:	6033      	str	r3, [r6, #0]
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	0699      	lsls	r1, r3, #26
 800eae6:	bf42      	ittt	mi
 800eae8:	6833      	ldrmi	r3, [r6, #0]
 800eaea:	3302      	addmi	r3, #2
 800eaec:	6033      	strmi	r3, [r6, #0]
 800eaee:	6825      	ldr	r5, [r4, #0]
 800eaf0:	f015 0506 	ands.w	r5, r5, #6
 800eaf4:	d106      	bne.n	800eb04 <_printf_common+0x48>
 800eaf6:	f104 0a19 	add.w	sl, r4, #25
 800eafa:	68e3      	ldr	r3, [r4, #12]
 800eafc:	6832      	ldr	r2, [r6, #0]
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	42ab      	cmp	r3, r5
 800eb02:	dc26      	bgt.n	800eb52 <_printf_common+0x96>
 800eb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb08:	1e13      	subs	r3, r2, #0
 800eb0a:	6822      	ldr	r2, [r4, #0]
 800eb0c:	bf18      	it	ne
 800eb0e:	2301      	movne	r3, #1
 800eb10:	0692      	lsls	r2, r2, #26
 800eb12:	d42b      	bmi.n	800eb6c <_printf_common+0xb0>
 800eb14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb18:	4649      	mov	r1, r9
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	47c0      	blx	r8
 800eb1e:	3001      	adds	r0, #1
 800eb20:	d01e      	beq.n	800eb60 <_printf_common+0xa4>
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	68e5      	ldr	r5, [r4, #12]
 800eb26:	6832      	ldr	r2, [r6, #0]
 800eb28:	f003 0306 	and.w	r3, r3, #6
 800eb2c:	2b04      	cmp	r3, #4
 800eb2e:	bf08      	it	eq
 800eb30:	1aad      	subeq	r5, r5, r2
 800eb32:	68a3      	ldr	r3, [r4, #8]
 800eb34:	6922      	ldr	r2, [r4, #16]
 800eb36:	bf0c      	ite	eq
 800eb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb3c:	2500      	movne	r5, #0
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	bfc4      	itt	gt
 800eb42:	1a9b      	subgt	r3, r3, r2
 800eb44:	18ed      	addgt	r5, r5, r3
 800eb46:	2600      	movs	r6, #0
 800eb48:	341a      	adds	r4, #26
 800eb4a:	42b5      	cmp	r5, r6
 800eb4c:	d11a      	bne.n	800eb84 <_printf_common+0xc8>
 800eb4e:	2000      	movs	r0, #0
 800eb50:	e008      	b.n	800eb64 <_printf_common+0xa8>
 800eb52:	2301      	movs	r3, #1
 800eb54:	4652      	mov	r2, sl
 800eb56:	4649      	mov	r1, r9
 800eb58:	4638      	mov	r0, r7
 800eb5a:	47c0      	blx	r8
 800eb5c:	3001      	adds	r0, #1
 800eb5e:	d103      	bne.n	800eb68 <_printf_common+0xac>
 800eb60:	f04f 30ff 	mov.w	r0, #4294967295
 800eb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb68:	3501      	adds	r5, #1
 800eb6a:	e7c6      	b.n	800eafa <_printf_common+0x3e>
 800eb6c:	18e1      	adds	r1, r4, r3
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	2030      	movs	r0, #48	; 0x30
 800eb72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb76:	4422      	add	r2, r4
 800eb78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb80:	3302      	adds	r3, #2
 800eb82:	e7c7      	b.n	800eb14 <_printf_common+0x58>
 800eb84:	2301      	movs	r3, #1
 800eb86:	4622      	mov	r2, r4
 800eb88:	4649      	mov	r1, r9
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	47c0      	blx	r8
 800eb8e:	3001      	adds	r0, #1
 800eb90:	d0e6      	beq.n	800eb60 <_printf_common+0xa4>
 800eb92:	3601      	adds	r6, #1
 800eb94:	e7d9      	b.n	800eb4a <_printf_common+0x8e>
	...

0800eb98 <_printf_i>:
 800eb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb9c:	7e0f      	ldrb	r7, [r1, #24]
 800eb9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eba0:	2f78      	cmp	r7, #120	; 0x78
 800eba2:	4691      	mov	r9, r2
 800eba4:	4680      	mov	r8, r0
 800eba6:	460c      	mov	r4, r1
 800eba8:	469a      	mov	sl, r3
 800ebaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ebae:	d807      	bhi.n	800ebc0 <_printf_i+0x28>
 800ebb0:	2f62      	cmp	r7, #98	; 0x62
 800ebb2:	d80a      	bhi.n	800ebca <_printf_i+0x32>
 800ebb4:	2f00      	cmp	r7, #0
 800ebb6:	f000 80d8 	beq.w	800ed6a <_printf_i+0x1d2>
 800ebba:	2f58      	cmp	r7, #88	; 0x58
 800ebbc:	f000 80a3 	beq.w	800ed06 <_printf_i+0x16e>
 800ebc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebc8:	e03a      	b.n	800ec40 <_printf_i+0xa8>
 800ebca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebce:	2b15      	cmp	r3, #21
 800ebd0:	d8f6      	bhi.n	800ebc0 <_printf_i+0x28>
 800ebd2:	a101      	add	r1, pc, #4	; (adr r1, 800ebd8 <_printf_i+0x40>)
 800ebd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebd8:	0800ec31 	.word	0x0800ec31
 800ebdc:	0800ec45 	.word	0x0800ec45
 800ebe0:	0800ebc1 	.word	0x0800ebc1
 800ebe4:	0800ebc1 	.word	0x0800ebc1
 800ebe8:	0800ebc1 	.word	0x0800ebc1
 800ebec:	0800ebc1 	.word	0x0800ebc1
 800ebf0:	0800ec45 	.word	0x0800ec45
 800ebf4:	0800ebc1 	.word	0x0800ebc1
 800ebf8:	0800ebc1 	.word	0x0800ebc1
 800ebfc:	0800ebc1 	.word	0x0800ebc1
 800ec00:	0800ebc1 	.word	0x0800ebc1
 800ec04:	0800ed51 	.word	0x0800ed51
 800ec08:	0800ec75 	.word	0x0800ec75
 800ec0c:	0800ed33 	.word	0x0800ed33
 800ec10:	0800ebc1 	.word	0x0800ebc1
 800ec14:	0800ebc1 	.word	0x0800ebc1
 800ec18:	0800ed73 	.word	0x0800ed73
 800ec1c:	0800ebc1 	.word	0x0800ebc1
 800ec20:	0800ec75 	.word	0x0800ec75
 800ec24:	0800ebc1 	.word	0x0800ebc1
 800ec28:	0800ebc1 	.word	0x0800ebc1
 800ec2c:	0800ed3b 	.word	0x0800ed3b
 800ec30:	682b      	ldr	r3, [r5, #0]
 800ec32:	1d1a      	adds	r2, r3, #4
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	602a      	str	r2, [r5, #0]
 800ec38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec40:	2301      	movs	r3, #1
 800ec42:	e0a3      	b.n	800ed8c <_printf_i+0x1f4>
 800ec44:	6820      	ldr	r0, [r4, #0]
 800ec46:	6829      	ldr	r1, [r5, #0]
 800ec48:	0606      	lsls	r6, r0, #24
 800ec4a:	f101 0304 	add.w	r3, r1, #4
 800ec4e:	d50a      	bpl.n	800ec66 <_printf_i+0xce>
 800ec50:	680e      	ldr	r6, [r1, #0]
 800ec52:	602b      	str	r3, [r5, #0]
 800ec54:	2e00      	cmp	r6, #0
 800ec56:	da03      	bge.n	800ec60 <_printf_i+0xc8>
 800ec58:	232d      	movs	r3, #45	; 0x2d
 800ec5a:	4276      	negs	r6, r6
 800ec5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec60:	485e      	ldr	r0, [pc, #376]	; (800eddc <_printf_i+0x244>)
 800ec62:	230a      	movs	r3, #10
 800ec64:	e019      	b.n	800ec9a <_printf_i+0x102>
 800ec66:	680e      	ldr	r6, [r1, #0]
 800ec68:	602b      	str	r3, [r5, #0]
 800ec6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec6e:	bf18      	it	ne
 800ec70:	b236      	sxthne	r6, r6
 800ec72:	e7ef      	b.n	800ec54 <_printf_i+0xbc>
 800ec74:	682b      	ldr	r3, [r5, #0]
 800ec76:	6820      	ldr	r0, [r4, #0]
 800ec78:	1d19      	adds	r1, r3, #4
 800ec7a:	6029      	str	r1, [r5, #0]
 800ec7c:	0601      	lsls	r1, r0, #24
 800ec7e:	d501      	bpl.n	800ec84 <_printf_i+0xec>
 800ec80:	681e      	ldr	r6, [r3, #0]
 800ec82:	e002      	b.n	800ec8a <_printf_i+0xf2>
 800ec84:	0646      	lsls	r6, r0, #25
 800ec86:	d5fb      	bpl.n	800ec80 <_printf_i+0xe8>
 800ec88:	881e      	ldrh	r6, [r3, #0]
 800ec8a:	4854      	ldr	r0, [pc, #336]	; (800eddc <_printf_i+0x244>)
 800ec8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ec8e:	bf0c      	ite	eq
 800ec90:	2308      	moveq	r3, #8
 800ec92:	230a      	movne	r3, #10
 800ec94:	2100      	movs	r1, #0
 800ec96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec9a:	6865      	ldr	r5, [r4, #4]
 800ec9c:	60a5      	str	r5, [r4, #8]
 800ec9e:	2d00      	cmp	r5, #0
 800eca0:	bfa2      	ittt	ge
 800eca2:	6821      	ldrge	r1, [r4, #0]
 800eca4:	f021 0104 	bicge.w	r1, r1, #4
 800eca8:	6021      	strge	r1, [r4, #0]
 800ecaa:	b90e      	cbnz	r6, 800ecb0 <_printf_i+0x118>
 800ecac:	2d00      	cmp	r5, #0
 800ecae:	d04d      	beq.n	800ed4c <_printf_i+0x1b4>
 800ecb0:	4615      	mov	r5, r2
 800ecb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ecb6:	fb03 6711 	mls	r7, r3, r1, r6
 800ecba:	5dc7      	ldrb	r7, [r0, r7]
 800ecbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ecc0:	4637      	mov	r7, r6
 800ecc2:	42bb      	cmp	r3, r7
 800ecc4:	460e      	mov	r6, r1
 800ecc6:	d9f4      	bls.n	800ecb2 <_printf_i+0x11a>
 800ecc8:	2b08      	cmp	r3, #8
 800ecca:	d10b      	bne.n	800ece4 <_printf_i+0x14c>
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	07de      	lsls	r6, r3, #31
 800ecd0:	d508      	bpl.n	800ece4 <_printf_i+0x14c>
 800ecd2:	6923      	ldr	r3, [r4, #16]
 800ecd4:	6861      	ldr	r1, [r4, #4]
 800ecd6:	4299      	cmp	r1, r3
 800ecd8:	bfde      	ittt	le
 800ecda:	2330      	movle	r3, #48	; 0x30
 800ecdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ece0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ece4:	1b52      	subs	r2, r2, r5
 800ece6:	6122      	str	r2, [r4, #16]
 800ece8:	f8cd a000 	str.w	sl, [sp]
 800ecec:	464b      	mov	r3, r9
 800ecee:	aa03      	add	r2, sp, #12
 800ecf0:	4621      	mov	r1, r4
 800ecf2:	4640      	mov	r0, r8
 800ecf4:	f7ff fee2 	bl	800eabc <_printf_common>
 800ecf8:	3001      	adds	r0, #1
 800ecfa:	d14c      	bne.n	800ed96 <_printf_i+0x1fe>
 800ecfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ed00:	b004      	add	sp, #16
 800ed02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed06:	4835      	ldr	r0, [pc, #212]	; (800eddc <_printf_i+0x244>)
 800ed08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ed0c:	6829      	ldr	r1, [r5, #0]
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed14:	6029      	str	r1, [r5, #0]
 800ed16:	061d      	lsls	r5, r3, #24
 800ed18:	d514      	bpl.n	800ed44 <_printf_i+0x1ac>
 800ed1a:	07df      	lsls	r7, r3, #31
 800ed1c:	bf44      	itt	mi
 800ed1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ed22:	6023      	strmi	r3, [r4, #0]
 800ed24:	b91e      	cbnz	r6, 800ed2e <_printf_i+0x196>
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	f023 0320 	bic.w	r3, r3, #32
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	2310      	movs	r3, #16
 800ed30:	e7b0      	b.n	800ec94 <_printf_i+0xfc>
 800ed32:	6823      	ldr	r3, [r4, #0]
 800ed34:	f043 0320 	orr.w	r3, r3, #32
 800ed38:	6023      	str	r3, [r4, #0]
 800ed3a:	2378      	movs	r3, #120	; 0x78
 800ed3c:	4828      	ldr	r0, [pc, #160]	; (800ede0 <_printf_i+0x248>)
 800ed3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed42:	e7e3      	b.n	800ed0c <_printf_i+0x174>
 800ed44:	0659      	lsls	r1, r3, #25
 800ed46:	bf48      	it	mi
 800ed48:	b2b6      	uxthmi	r6, r6
 800ed4a:	e7e6      	b.n	800ed1a <_printf_i+0x182>
 800ed4c:	4615      	mov	r5, r2
 800ed4e:	e7bb      	b.n	800ecc8 <_printf_i+0x130>
 800ed50:	682b      	ldr	r3, [r5, #0]
 800ed52:	6826      	ldr	r6, [r4, #0]
 800ed54:	6961      	ldr	r1, [r4, #20]
 800ed56:	1d18      	adds	r0, r3, #4
 800ed58:	6028      	str	r0, [r5, #0]
 800ed5a:	0635      	lsls	r5, r6, #24
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	d501      	bpl.n	800ed64 <_printf_i+0x1cc>
 800ed60:	6019      	str	r1, [r3, #0]
 800ed62:	e002      	b.n	800ed6a <_printf_i+0x1d2>
 800ed64:	0670      	lsls	r0, r6, #25
 800ed66:	d5fb      	bpl.n	800ed60 <_printf_i+0x1c8>
 800ed68:	8019      	strh	r1, [r3, #0]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	6123      	str	r3, [r4, #16]
 800ed6e:	4615      	mov	r5, r2
 800ed70:	e7ba      	b.n	800ece8 <_printf_i+0x150>
 800ed72:	682b      	ldr	r3, [r5, #0]
 800ed74:	1d1a      	adds	r2, r3, #4
 800ed76:	602a      	str	r2, [r5, #0]
 800ed78:	681d      	ldr	r5, [r3, #0]
 800ed7a:	6862      	ldr	r2, [r4, #4]
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f7f1 fa26 	bl	80001d0 <memchr>
 800ed84:	b108      	cbz	r0, 800ed8a <_printf_i+0x1f2>
 800ed86:	1b40      	subs	r0, r0, r5
 800ed88:	6060      	str	r0, [r4, #4]
 800ed8a:	6863      	ldr	r3, [r4, #4]
 800ed8c:	6123      	str	r3, [r4, #16]
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed94:	e7a8      	b.n	800ece8 <_printf_i+0x150>
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	462a      	mov	r2, r5
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	4640      	mov	r0, r8
 800ed9e:	47d0      	blx	sl
 800eda0:	3001      	adds	r0, #1
 800eda2:	d0ab      	beq.n	800ecfc <_printf_i+0x164>
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	079b      	lsls	r3, r3, #30
 800eda8:	d413      	bmi.n	800edd2 <_printf_i+0x23a>
 800edaa:	68e0      	ldr	r0, [r4, #12]
 800edac:	9b03      	ldr	r3, [sp, #12]
 800edae:	4298      	cmp	r0, r3
 800edb0:	bfb8      	it	lt
 800edb2:	4618      	movlt	r0, r3
 800edb4:	e7a4      	b.n	800ed00 <_printf_i+0x168>
 800edb6:	2301      	movs	r3, #1
 800edb8:	4632      	mov	r2, r6
 800edba:	4649      	mov	r1, r9
 800edbc:	4640      	mov	r0, r8
 800edbe:	47d0      	blx	sl
 800edc0:	3001      	adds	r0, #1
 800edc2:	d09b      	beq.n	800ecfc <_printf_i+0x164>
 800edc4:	3501      	adds	r5, #1
 800edc6:	68e3      	ldr	r3, [r4, #12]
 800edc8:	9903      	ldr	r1, [sp, #12]
 800edca:	1a5b      	subs	r3, r3, r1
 800edcc:	42ab      	cmp	r3, r5
 800edce:	dcf2      	bgt.n	800edb6 <_printf_i+0x21e>
 800edd0:	e7eb      	b.n	800edaa <_printf_i+0x212>
 800edd2:	2500      	movs	r5, #0
 800edd4:	f104 0619 	add.w	r6, r4, #25
 800edd8:	e7f5      	b.n	800edc6 <_printf_i+0x22e>
 800edda:	bf00      	nop
 800eddc:	0801204d 	.word	0x0801204d
 800ede0:	0801205e 	.word	0x0801205e

0800ede4 <_sbrk_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d06      	ldr	r5, [pc, #24]	; (800ee00 <_sbrk_r+0x1c>)
 800ede8:	2300      	movs	r3, #0
 800edea:	4604      	mov	r4, r0
 800edec:	4608      	mov	r0, r1
 800edee:	602b      	str	r3, [r5, #0]
 800edf0:	f7f1 fd72 	bl	80008d8 <_sbrk>
 800edf4:	1c43      	adds	r3, r0, #1
 800edf6:	d102      	bne.n	800edfe <_sbrk_r+0x1a>
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	b103      	cbz	r3, 800edfe <_sbrk_r+0x1a>
 800edfc:	6023      	str	r3, [r4, #0]
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	2000689c 	.word	0x2000689c

0800ee04 <__sread>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	460c      	mov	r4, r1
 800ee08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee0c:	f000 fa6e 	bl	800f2ec <_read_r>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	bfab      	itete	ge
 800ee14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee16:	89a3      	ldrhlt	r3, [r4, #12]
 800ee18:	181b      	addge	r3, r3, r0
 800ee1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee1e:	bfac      	ite	ge
 800ee20:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee22:	81a3      	strhlt	r3, [r4, #12]
 800ee24:	bd10      	pop	{r4, pc}

0800ee26 <__swrite>:
 800ee26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2a:	461f      	mov	r7, r3
 800ee2c:	898b      	ldrh	r3, [r1, #12]
 800ee2e:	05db      	lsls	r3, r3, #23
 800ee30:	4605      	mov	r5, r0
 800ee32:	460c      	mov	r4, r1
 800ee34:	4616      	mov	r6, r2
 800ee36:	d505      	bpl.n	800ee44 <__swrite+0x1e>
 800ee38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee3c:	2302      	movs	r3, #2
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f000 f9d0 	bl	800f1e4 <_lseek_r>
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee4e:	81a3      	strh	r3, [r4, #12]
 800ee50:	4632      	mov	r2, r6
 800ee52:	463b      	mov	r3, r7
 800ee54:	4628      	mov	r0, r5
 800ee56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee5a:	f000 b869 	b.w	800ef30 <_write_r>

0800ee5e <__sseek>:
 800ee5e:	b510      	push	{r4, lr}
 800ee60:	460c      	mov	r4, r1
 800ee62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee66:	f000 f9bd 	bl	800f1e4 <_lseek_r>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	89a3      	ldrh	r3, [r4, #12]
 800ee6e:	bf15      	itete	ne
 800ee70:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee7a:	81a3      	strheq	r3, [r4, #12]
 800ee7c:	bf18      	it	ne
 800ee7e:	81a3      	strhne	r3, [r4, #12]
 800ee80:	bd10      	pop	{r4, pc}

0800ee82 <__sclose>:
 800ee82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee86:	f000 b8db 	b.w	800f040 <_close_r>
	...

0800ee8c <__swbuf_r>:
 800ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8e:	460e      	mov	r6, r1
 800ee90:	4614      	mov	r4, r2
 800ee92:	4605      	mov	r5, r0
 800ee94:	b118      	cbz	r0, 800ee9e <__swbuf_r+0x12>
 800ee96:	6983      	ldr	r3, [r0, #24]
 800ee98:	b90b      	cbnz	r3, 800ee9e <__swbuf_r+0x12>
 800ee9a:	f7ff fb1b 	bl	800e4d4 <__sinit>
 800ee9e:	4b21      	ldr	r3, [pc, #132]	; (800ef24 <__swbuf_r+0x98>)
 800eea0:	429c      	cmp	r4, r3
 800eea2:	d12b      	bne.n	800eefc <__swbuf_r+0x70>
 800eea4:	686c      	ldr	r4, [r5, #4]
 800eea6:	69a3      	ldr	r3, [r4, #24]
 800eea8:	60a3      	str	r3, [r4, #8]
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	071a      	lsls	r2, r3, #28
 800eeae:	d52f      	bpl.n	800ef10 <__swbuf_r+0x84>
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	b36b      	cbz	r3, 800ef10 <__swbuf_r+0x84>
 800eeb4:	6923      	ldr	r3, [r4, #16]
 800eeb6:	6820      	ldr	r0, [r4, #0]
 800eeb8:	1ac0      	subs	r0, r0, r3
 800eeba:	6963      	ldr	r3, [r4, #20]
 800eebc:	b2f6      	uxtb	r6, r6
 800eebe:	4283      	cmp	r3, r0
 800eec0:	4637      	mov	r7, r6
 800eec2:	dc04      	bgt.n	800eece <__swbuf_r+0x42>
 800eec4:	4621      	mov	r1, r4
 800eec6:	4628      	mov	r0, r5
 800eec8:	f000 f950 	bl	800f16c <_fflush_r>
 800eecc:	bb30      	cbnz	r0, 800ef1c <__swbuf_r+0x90>
 800eece:	68a3      	ldr	r3, [r4, #8]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	60a3      	str	r3, [r4, #8]
 800eed4:	6823      	ldr	r3, [r4, #0]
 800eed6:	1c5a      	adds	r2, r3, #1
 800eed8:	6022      	str	r2, [r4, #0]
 800eeda:	701e      	strb	r6, [r3, #0]
 800eedc:	6963      	ldr	r3, [r4, #20]
 800eede:	3001      	adds	r0, #1
 800eee0:	4283      	cmp	r3, r0
 800eee2:	d004      	beq.n	800eeee <__swbuf_r+0x62>
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	07db      	lsls	r3, r3, #31
 800eee8:	d506      	bpl.n	800eef8 <__swbuf_r+0x6c>
 800eeea:	2e0a      	cmp	r6, #10
 800eeec:	d104      	bne.n	800eef8 <__swbuf_r+0x6c>
 800eeee:	4621      	mov	r1, r4
 800eef0:	4628      	mov	r0, r5
 800eef2:	f000 f93b 	bl	800f16c <_fflush_r>
 800eef6:	b988      	cbnz	r0, 800ef1c <__swbuf_r+0x90>
 800eef8:	4638      	mov	r0, r7
 800eefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <__swbuf_r+0x9c>)
 800eefe:	429c      	cmp	r4, r3
 800ef00:	d101      	bne.n	800ef06 <__swbuf_r+0x7a>
 800ef02:	68ac      	ldr	r4, [r5, #8]
 800ef04:	e7cf      	b.n	800eea6 <__swbuf_r+0x1a>
 800ef06:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <__swbuf_r+0xa0>)
 800ef08:	429c      	cmp	r4, r3
 800ef0a:	bf08      	it	eq
 800ef0c:	68ec      	ldreq	r4, [r5, #12]
 800ef0e:	e7ca      	b.n	800eea6 <__swbuf_r+0x1a>
 800ef10:	4621      	mov	r1, r4
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 f81e 	bl	800ef54 <__swsetup_r>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d0cb      	beq.n	800eeb4 <__swbuf_r+0x28>
 800ef1c:	f04f 37ff 	mov.w	r7, #4294967295
 800ef20:	e7ea      	b.n	800eef8 <__swbuf_r+0x6c>
 800ef22:	bf00      	nop
 800ef24:	08011ffc 	.word	0x08011ffc
 800ef28:	0801201c 	.word	0x0801201c
 800ef2c:	08011fdc 	.word	0x08011fdc

0800ef30 <_write_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d07      	ldr	r5, [pc, #28]	; (800ef50 <_write_r+0x20>)
 800ef34:	4604      	mov	r4, r0
 800ef36:	4608      	mov	r0, r1
 800ef38:	4611      	mov	r1, r2
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	602a      	str	r2, [r5, #0]
 800ef3e:	461a      	mov	r2, r3
 800ef40:	f7f1 fc79 	bl	8000836 <_write>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	d102      	bne.n	800ef4e <_write_r+0x1e>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	b103      	cbz	r3, 800ef4e <_write_r+0x1e>
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	bd38      	pop	{r3, r4, r5, pc}
 800ef50:	2000689c 	.word	0x2000689c

0800ef54 <__swsetup_r>:
 800ef54:	4b32      	ldr	r3, [pc, #200]	; (800f020 <__swsetup_r+0xcc>)
 800ef56:	b570      	push	{r4, r5, r6, lr}
 800ef58:	681d      	ldr	r5, [r3, #0]
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	b125      	cbz	r5, 800ef6a <__swsetup_r+0x16>
 800ef60:	69ab      	ldr	r3, [r5, #24]
 800ef62:	b913      	cbnz	r3, 800ef6a <__swsetup_r+0x16>
 800ef64:	4628      	mov	r0, r5
 800ef66:	f7ff fab5 	bl	800e4d4 <__sinit>
 800ef6a:	4b2e      	ldr	r3, [pc, #184]	; (800f024 <__swsetup_r+0xd0>)
 800ef6c:	429c      	cmp	r4, r3
 800ef6e:	d10f      	bne.n	800ef90 <__swsetup_r+0x3c>
 800ef70:	686c      	ldr	r4, [r5, #4]
 800ef72:	89a3      	ldrh	r3, [r4, #12]
 800ef74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef78:	0719      	lsls	r1, r3, #28
 800ef7a:	d42c      	bmi.n	800efd6 <__swsetup_r+0x82>
 800ef7c:	06dd      	lsls	r5, r3, #27
 800ef7e:	d411      	bmi.n	800efa4 <__swsetup_r+0x50>
 800ef80:	2309      	movs	r3, #9
 800ef82:	6033      	str	r3, [r6, #0]
 800ef84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef88:	81a3      	strh	r3, [r4, #12]
 800ef8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8e:	e03e      	b.n	800f00e <__swsetup_r+0xba>
 800ef90:	4b25      	ldr	r3, [pc, #148]	; (800f028 <__swsetup_r+0xd4>)
 800ef92:	429c      	cmp	r4, r3
 800ef94:	d101      	bne.n	800ef9a <__swsetup_r+0x46>
 800ef96:	68ac      	ldr	r4, [r5, #8]
 800ef98:	e7eb      	b.n	800ef72 <__swsetup_r+0x1e>
 800ef9a:	4b24      	ldr	r3, [pc, #144]	; (800f02c <__swsetup_r+0xd8>)
 800ef9c:	429c      	cmp	r4, r3
 800ef9e:	bf08      	it	eq
 800efa0:	68ec      	ldreq	r4, [r5, #12]
 800efa2:	e7e6      	b.n	800ef72 <__swsetup_r+0x1e>
 800efa4:	0758      	lsls	r0, r3, #29
 800efa6:	d512      	bpl.n	800efce <__swsetup_r+0x7a>
 800efa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efaa:	b141      	cbz	r1, 800efbe <__swsetup_r+0x6a>
 800efac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efb0:	4299      	cmp	r1, r3
 800efb2:	d002      	beq.n	800efba <__swsetup_r+0x66>
 800efb4:	4630      	mov	r0, r6
 800efb6:	f7ff fb47 	bl	800e648 <_free_r>
 800efba:	2300      	movs	r3, #0
 800efbc:	6363      	str	r3, [r4, #52]	; 0x34
 800efbe:	89a3      	ldrh	r3, [r4, #12]
 800efc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800efc4:	81a3      	strh	r3, [r4, #12]
 800efc6:	2300      	movs	r3, #0
 800efc8:	6063      	str	r3, [r4, #4]
 800efca:	6923      	ldr	r3, [r4, #16]
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	f043 0308 	orr.w	r3, r3, #8
 800efd4:	81a3      	strh	r3, [r4, #12]
 800efd6:	6923      	ldr	r3, [r4, #16]
 800efd8:	b94b      	cbnz	r3, 800efee <__swsetup_r+0x9a>
 800efda:	89a3      	ldrh	r3, [r4, #12]
 800efdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800efe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efe4:	d003      	beq.n	800efee <__swsetup_r+0x9a>
 800efe6:	4621      	mov	r1, r4
 800efe8:	4630      	mov	r0, r6
 800efea:	f000 f933 	bl	800f254 <__smakebuf_r>
 800efee:	89a0      	ldrh	r0, [r4, #12]
 800eff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eff4:	f010 0301 	ands.w	r3, r0, #1
 800eff8:	d00a      	beq.n	800f010 <__swsetup_r+0xbc>
 800effa:	2300      	movs	r3, #0
 800effc:	60a3      	str	r3, [r4, #8]
 800effe:	6963      	ldr	r3, [r4, #20]
 800f000:	425b      	negs	r3, r3
 800f002:	61a3      	str	r3, [r4, #24]
 800f004:	6923      	ldr	r3, [r4, #16]
 800f006:	b943      	cbnz	r3, 800f01a <__swsetup_r+0xc6>
 800f008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f00c:	d1ba      	bne.n	800ef84 <__swsetup_r+0x30>
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	0781      	lsls	r1, r0, #30
 800f012:	bf58      	it	pl
 800f014:	6963      	ldrpl	r3, [r4, #20]
 800f016:	60a3      	str	r3, [r4, #8]
 800f018:	e7f4      	b.n	800f004 <__swsetup_r+0xb0>
 800f01a:	2000      	movs	r0, #0
 800f01c:	e7f7      	b.n	800f00e <__swsetup_r+0xba>
 800f01e:	bf00      	nop
 800f020:	20000014 	.word	0x20000014
 800f024:	08011ffc 	.word	0x08011ffc
 800f028:	0801201c 	.word	0x0801201c
 800f02c:	08011fdc 	.word	0x08011fdc

0800f030 <abort>:
 800f030:	b508      	push	{r3, lr}
 800f032:	2006      	movs	r0, #6
 800f034:	f000 f994 	bl	800f360 <raise>
 800f038:	2001      	movs	r0, #1
 800f03a:	f7f1 fbd5 	bl	80007e8 <_exit>
	...

0800f040 <_close_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d06      	ldr	r5, [pc, #24]	; (800f05c <_close_r+0x1c>)
 800f044:	2300      	movs	r3, #0
 800f046:	4604      	mov	r4, r0
 800f048:	4608      	mov	r0, r1
 800f04a:	602b      	str	r3, [r5, #0]
 800f04c:	f7f1 fc0f 	bl	800086e <_close>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d102      	bne.n	800f05a <_close_r+0x1a>
 800f054:	682b      	ldr	r3, [r5, #0]
 800f056:	b103      	cbz	r3, 800f05a <_close_r+0x1a>
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	2000689c 	.word	0x2000689c

0800f060 <__sflush_r>:
 800f060:	898a      	ldrh	r2, [r1, #12]
 800f062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f066:	4605      	mov	r5, r0
 800f068:	0710      	lsls	r0, r2, #28
 800f06a:	460c      	mov	r4, r1
 800f06c:	d458      	bmi.n	800f120 <__sflush_r+0xc0>
 800f06e:	684b      	ldr	r3, [r1, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	dc05      	bgt.n	800f080 <__sflush_r+0x20>
 800f074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f076:	2b00      	cmp	r3, #0
 800f078:	dc02      	bgt.n	800f080 <__sflush_r+0x20>
 800f07a:	2000      	movs	r0, #0
 800f07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f082:	2e00      	cmp	r6, #0
 800f084:	d0f9      	beq.n	800f07a <__sflush_r+0x1a>
 800f086:	2300      	movs	r3, #0
 800f088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f08c:	682f      	ldr	r7, [r5, #0]
 800f08e:	602b      	str	r3, [r5, #0]
 800f090:	d032      	beq.n	800f0f8 <__sflush_r+0x98>
 800f092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	075a      	lsls	r2, r3, #29
 800f098:	d505      	bpl.n	800f0a6 <__sflush_r+0x46>
 800f09a:	6863      	ldr	r3, [r4, #4]
 800f09c:	1ac0      	subs	r0, r0, r3
 800f09e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0a0:	b10b      	cbz	r3, 800f0a6 <__sflush_r+0x46>
 800f0a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0a4:	1ac0      	subs	r0, r0, r3
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ac:	6a21      	ldr	r1, [r4, #32]
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	47b0      	blx	r6
 800f0b2:	1c43      	adds	r3, r0, #1
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	d106      	bne.n	800f0c6 <__sflush_r+0x66>
 800f0b8:	6829      	ldr	r1, [r5, #0]
 800f0ba:	291d      	cmp	r1, #29
 800f0bc:	d82c      	bhi.n	800f118 <__sflush_r+0xb8>
 800f0be:	4a2a      	ldr	r2, [pc, #168]	; (800f168 <__sflush_r+0x108>)
 800f0c0:	40ca      	lsrs	r2, r1
 800f0c2:	07d6      	lsls	r6, r2, #31
 800f0c4:	d528      	bpl.n	800f118 <__sflush_r+0xb8>
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	6062      	str	r2, [r4, #4]
 800f0ca:	04d9      	lsls	r1, r3, #19
 800f0cc:	6922      	ldr	r2, [r4, #16]
 800f0ce:	6022      	str	r2, [r4, #0]
 800f0d0:	d504      	bpl.n	800f0dc <__sflush_r+0x7c>
 800f0d2:	1c42      	adds	r2, r0, #1
 800f0d4:	d101      	bne.n	800f0da <__sflush_r+0x7a>
 800f0d6:	682b      	ldr	r3, [r5, #0]
 800f0d8:	b903      	cbnz	r3, 800f0dc <__sflush_r+0x7c>
 800f0da:	6560      	str	r0, [r4, #84]	; 0x54
 800f0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0de:	602f      	str	r7, [r5, #0]
 800f0e0:	2900      	cmp	r1, #0
 800f0e2:	d0ca      	beq.n	800f07a <__sflush_r+0x1a>
 800f0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0e8:	4299      	cmp	r1, r3
 800f0ea:	d002      	beq.n	800f0f2 <__sflush_r+0x92>
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f7ff faab 	bl	800e648 <_free_r>
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	6360      	str	r0, [r4, #52]	; 0x34
 800f0f6:	e7c1      	b.n	800f07c <__sflush_r+0x1c>
 800f0f8:	6a21      	ldr	r1, [r4, #32]
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b0      	blx	r6
 800f100:	1c41      	adds	r1, r0, #1
 800f102:	d1c7      	bne.n	800f094 <__sflush_r+0x34>
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d0c4      	beq.n	800f094 <__sflush_r+0x34>
 800f10a:	2b1d      	cmp	r3, #29
 800f10c:	d001      	beq.n	800f112 <__sflush_r+0xb2>
 800f10e:	2b16      	cmp	r3, #22
 800f110:	d101      	bne.n	800f116 <__sflush_r+0xb6>
 800f112:	602f      	str	r7, [r5, #0]
 800f114:	e7b1      	b.n	800f07a <__sflush_r+0x1a>
 800f116:	89a3      	ldrh	r3, [r4, #12]
 800f118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f11c:	81a3      	strh	r3, [r4, #12]
 800f11e:	e7ad      	b.n	800f07c <__sflush_r+0x1c>
 800f120:	690f      	ldr	r7, [r1, #16]
 800f122:	2f00      	cmp	r7, #0
 800f124:	d0a9      	beq.n	800f07a <__sflush_r+0x1a>
 800f126:	0793      	lsls	r3, r2, #30
 800f128:	680e      	ldr	r6, [r1, #0]
 800f12a:	bf08      	it	eq
 800f12c:	694b      	ldreq	r3, [r1, #20]
 800f12e:	600f      	str	r7, [r1, #0]
 800f130:	bf18      	it	ne
 800f132:	2300      	movne	r3, #0
 800f134:	eba6 0807 	sub.w	r8, r6, r7
 800f138:	608b      	str	r3, [r1, #8]
 800f13a:	f1b8 0f00 	cmp.w	r8, #0
 800f13e:	dd9c      	ble.n	800f07a <__sflush_r+0x1a>
 800f140:	6a21      	ldr	r1, [r4, #32]
 800f142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f144:	4643      	mov	r3, r8
 800f146:	463a      	mov	r2, r7
 800f148:	4628      	mov	r0, r5
 800f14a:	47b0      	blx	r6
 800f14c:	2800      	cmp	r0, #0
 800f14e:	dc06      	bgt.n	800f15e <__sflush_r+0xfe>
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	e78e      	b.n	800f07c <__sflush_r+0x1c>
 800f15e:	4407      	add	r7, r0
 800f160:	eba8 0800 	sub.w	r8, r8, r0
 800f164:	e7e9      	b.n	800f13a <__sflush_r+0xda>
 800f166:	bf00      	nop
 800f168:	20400001 	.word	0x20400001

0800f16c <_fflush_r>:
 800f16c:	b538      	push	{r3, r4, r5, lr}
 800f16e:	690b      	ldr	r3, [r1, #16]
 800f170:	4605      	mov	r5, r0
 800f172:	460c      	mov	r4, r1
 800f174:	b913      	cbnz	r3, 800f17c <_fflush_r+0x10>
 800f176:	2500      	movs	r5, #0
 800f178:	4628      	mov	r0, r5
 800f17a:	bd38      	pop	{r3, r4, r5, pc}
 800f17c:	b118      	cbz	r0, 800f186 <_fflush_r+0x1a>
 800f17e:	6983      	ldr	r3, [r0, #24]
 800f180:	b90b      	cbnz	r3, 800f186 <_fflush_r+0x1a>
 800f182:	f7ff f9a7 	bl	800e4d4 <__sinit>
 800f186:	4b14      	ldr	r3, [pc, #80]	; (800f1d8 <_fflush_r+0x6c>)
 800f188:	429c      	cmp	r4, r3
 800f18a:	d11b      	bne.n	800f1c4 <_fflush_r+0x58>
 800f18c:	686c      	ldr	r4, [r5, #4]
 800f18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d0ef      	beq.n	800f176 <_fflush_r+0xa>
 800f196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f198:	07d0      	lsls	r0, r2, #31
 800f19a:	d404      	bmi.n	800f1a6 <_fflush_r+0x3a>
 800f19c:	0599      	lsls	r1, r3, #22
 800f19e:	d402      	bmi.n	800f1a6 <_fflush_r+0x3a>
 800f1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1a2:	f7ff fa47 	bl	800e634 <__retarget_lock_acquire_recursive>
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	f7ff ff59 	bl	800f060 <__sflush_r>
 800f1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1b0:	07da      	lsls	r2, r3, #31
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	d4e0      	bmi.n	800f178 <_fflush_r+0xc>
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	059b      	lsls	r3, r3, #22
 800f1ba:	d4dd      	bmi.n	800f178 <_fflush_r+0xc>
 800f1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1be:	f7ff fa3a 	bl	800e636 <__retarget_lock_release_recursive>
 800f1c2:	e7d9      	b.n	800f178 <_fflush_r+0xc>
 800f1c4:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <_fflush_r+0x70>)
 800f1c6:	429c      	cmp	r4, r3
 800f1c8:	d101      	bne.n	800f1ce <_fflush_r+0x62>
 800f1ca:	68ac      	ldr	r4, [r5, #8]
 800f1cc:	e7df      	b.n	800f18e <_fflush_r+0x22>
 800f1ce:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <_fflush_r+0x74>)
 800f1d0:	429c      	cmp	r4, r3
 800f1d2:	bf08      	it	eq
 800f1d4:	68ec      	ldreq	r4, [r5, #12]
 800f1d6:	e7da      	b.n	800f18e <_fflush_r+0x22>
 800f1d8:	08011ffc 	.word	0x08011ffc
 800f1dc:	0801201c 	.word	0x0801201c
 800f1e0:	08011fdc 	.word	0x08011fdc

0800f1e4 <_lseek_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4d07      	ldr	r5, [pc, #28]	; (800f204 <_lseek_r+0x20>)
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	602a      	str	r2, [r5, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f7f1 fb62 	bl	80008bc <_lseek>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_lseek_r+0x1e>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_lseek_r+0x1e>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	2000689c 	.word	0x2000689c

0800f208 <__swhatbuf_r>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	460e      	mov	r6, r1
 800f20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f210:	2900      	cmp	r1, #0
 800f212:	b096      	sub	sp, #88	; 0x58
 800f214:	4614      	mov	r4, r2
 800f216:	461d      	mov	r5, r3
 800f218:	da08      	bge.n	800f22c <__swhatbuf_r+0x24>
 800f21a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f21e:	2200      	movs	r2, #0
 800f220:	602a      	str	r2, [r5, #0]
 800f222:	061a      	lsls	r2, r3, #24
 800f224:	d410      	bmi.n	800f248 <__swhatbuf_r+0x40>
 800f226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f22a:	e00e      	b.n	800f24a <__swhatbuf_r+0x42>
 800f22c:	466a      	mov	r2, sp
 800f22e:	f000 f8b3 	bl	800f398 <_fstat_r>
 800f232:	2800      	cmp	r0, #0
 800f234:	dbf1      	blt.n	800f21a <__swhatbuf_r+0x12>
 800f236:	9a01      	ldr	r2, [sp, #4]
 800f238:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f23c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f240:	425a      	negs	r2, r3
 800f242:	415a      	adcs	r2, r3
 800f244:	602a      	str	r2, [r5, #0]
 800f246:	e7ee      	b.n	800f226 <__swhatbuf_r+0x1e>
 800f248:	2340      	movs	r3, #64	; 0x40
 800f24a:	2000      	movs	r0, #0
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	b016      	add	sp, #88	; 0x58
 800f250:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f254 <__smakebuf_r>:
 800f254:	898b      	ldrh	r3, [r1, #12]
 800f256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f258:	079d      	lsls	r5, r3, #30
 800f25a:	4606      	mov	r6, r0
 800f25c:	460c      	mov	r4, r1
 800f25e:	d507      	bpl.n	800f270 <__smakebuf_r+0x1c>
 800f260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	6123      	str	r3, [r4, #16]
 800f268:	2301      	movs	r3, #1
 800f26a:	6163      	str	r3, [r4, #20]
 800f26c:	b002      	add	sp, #8
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
 800f270:	ab01      	add	r3, sp, #4
 800f272:	466a      	mov	r2, sp
 800f274:	f7ff ffc8 	bl	800f208 <__swhatbuf_r>
 800f278:	9900      	ldr	r1, [sp, #0]
 800f27a:	4605      	mov	r5, r0
 800f27c:	4630      	mov	r0, r6
 800f27e:	f7ff fa4f 	bl	800e720 <_malloc_r>
 800f282:	b948      	cbnz	r0, 800f298 <__smakebuf_r+0x44>
 800f284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f288:	059a      	lsls	r2, r3, #22
 800f28a:	d4ef      	bmi.n	800f26c <__smakebuf_r+0x18>
 800f28c:	f023 0303 	bic.w	r3, r3, #3
 800f290:	f043 0302 	orr.w	r3, r3, #2
 800f294:	81a3      	strh	r3, [r4, #12]
 800f296:	e7e3      	b.n	800f260 <__smakebuf_r+0xc>
 800f298:	4b0d      	ldr	r3, [pc, #52]	; (800f2d0 <__smakebuf_r+0x7c>)
 800f29a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	6020      	str	r0, [r4, #0]
 800f2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2a4:	81a3      	strh	r3, [r4, #12]
 800f2a6:	9b00      	ldr	r3, [sp, #0]
 800f2a8:	6163      	str	r3, [r4, #20]
 800f2aa:	9b01      	ldr	r3, [sp, #4]
 800f2ac:	6120      	str	r0, [r4, #16]
 800f2ae:	b15b      	cbz	r3, 800f2c8 <__smakebuf_r+0x74>
 800f2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f000 f881 	bl	800f3bc <_isatty_r>
 800f2ba:	b128      	cbz	r0, 800f2c8 <__smakebuf_r+0x74>
 800f2bc:	89a3      	ldrh	r3, [r4, #12]
 800f2be:	f023 0303 	bic.w	r3, r3, #3
 800f2c2:	f043 0301 	orr.w	r3, r3, #1
 800f2c6:	81a3      	strh	r3, [r4, #12]
 800f2c8:	89a0      	ldrh	r0, [r4, #12]
 800f2ca:	4305      	orrs	r5, r0
 800f2cc:	81a5      	strh	r5, [r4, #12]
 800f2ce:	e7cd      	b.n	800f26c <__smakebuf_r+0x18>
 800f2d0:	0800e46d 	.word	0x0800e46d

0800f2d4 <__malloc_lock>:
 800f2d4:	4801      	ldr	r0, [pc, #4]	; (800f2dc <__malloc_lock+0x8>)
 800f2d6:	f7ff b9ad 	b.w	800e634 <__retarget_lock_acquire_recursive>
 800f2da:	bf00      	nop
 800f2dc:	200068a0 	.word	0x200068a0

0800f2e0 <__malloc_unlock>:
 800f2e0:	4801      	ldr	r0, [pc, #4]	; (800f2e8 <__malloc_unlock+0x8>)
 800f2e2:	f7ff b9a8 	b.w	800e636 <__retarget_lock_release_recursive>
 800f2e6:	bf00      	nop
 800f2e8:	200068a0 	.word	0x200068a0

0800f2ec <_read_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d07      	ldr	r5, [pc, #28]	; (800f30c <_read_r+0x20>)
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f7f1 fa7e 	bl	80007fc <_read>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_read_r+0x1e>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_read_r+0x1e>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	2000689c 	.word	0x2000689c

0800f310 <_raise_r>:
 800f310:	291f      	cmp	r1, #31
 800f312:	b538      	push	{r3, r4, r5, lr}
 800f314:	4604      	mov	r4, r0
 800f316:	460d      	mov	r5, r1
 800f318:	d904      	bls.n	800f324 <_raise_r+0x14>
 800f31a:	2316      	movs	r3, #22
 800f31c:	6003      	str	r3, [r0, #0]
 800f31e:	f04f 30ff 	mov.w	r0, #4294967295
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f326:	b112      	cbz	r2, 800f32e <_raise_r+0x1e>
 800f328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f32c:	b94b      	cbnz	r3, 800f342 <_raise_r+0x32>
 800f32e:	4620      	mov	r0, r4
 800f330:	f000 f830 	bl	800f394 <_getpid_r>
 800f334:	462a      	mov	r2, r5
 800f336:	4601      	mov	r1, r0
 800f338:	4620      	mov	r0, r4
 800f33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f33e:	f000 b817 	b.w	800f370 <_kill_r>
 800f342:	2b01      	cmp	r3, #1
 800f344:	d00a      	beq.n	800f35c <_raise_r+0x4c>
 800f346:	1c59      	adds	r1, r3, #1
 800f348:	d103      	bne.n	800f352 <_raise_r+0x42>
 800f34a:	2316      	movs	r3, #22
 800f34c:	6003      	str	r3, [r0, #0]
 800f34e:	2001      	movs	r0, #1
 800f350:	e7e7      	b.n	800f322 <_raise_r+0x12>
 800f352:	2400      	movs	r4, #0
 800f354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f358:	4628      	mov	r0, r5
 800f35a:	4798      	blx	r3
 800f35c:	2000      	movs	r0, #0
 800f35e:	e7e0      	b.n	800f322 <_raise_r+0x12>

0800f360 <raise>:
 800f360:	4b02      	ldr	r3, [pc, #8]	; (800f36c <raise+0xc>)
 800f362:	4601      	mov	r1, r0
 800f364:	6818      	ldr	r0, [r3, #0]
 800f366:	f7ff bfd3 	b.w	800f310 <_raise_r>
 800f36a:	bf00      	nop
 800f36c:	20000014 	.word	0x20000014

0800f370 <_kill_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4d07      	ldr	r5, [pc, #28]	; (800f390 <_kill_r+0x20>)
 800f374:	2300      	movs	r3, #0
 800f376:	4604      	mov	r4, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	4611      	mov	r1, r2
 800f37c:	602b      	str	r3, [r5, #0]
 800f37e:	f7f1 fa21 	bl	80007c4 <_kill>
 800f382:	1c43      	adds	r3, r0, #1
 800f384:	d102      	bne.n	800f38c <_kill_r+0x1c>
 800f386:	682b      	ldr	r3, [r5, #0]
 800f388:	b103      	cbz	r3, 800f38c <_kill_r+0x1c>
 800f38a:	6023      	str	r3, [r4, #0]
 800f38c:	bd38      	pop	{r3, r4, r5, pc}
 800f38e:	bf00      	nop
 800f390:	2000689c 	.word	0x2000689c

0800f394 <_getpid_r>:
 800f394:	f7f1 ba0e 	b.w	80007b4 <_getpid>

0800f398 <_fstat_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4d07      	ldr	r5, [pc, #28]	; (800f3b8 <_fstat_r+0x20>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4604      	mov	r4, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	f7f1 fa6e 	bl	8000886 <_fstat>
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	d102      	bne.n	800f3b4 <_fstat_r+0x1c>
 800f3ae:	682b      	ldr	r3, [r5, #0]
 800f3b0:	b103      	cbz	r3, 800f3b4 <_fstat_r+0x1c>
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	bd38      	pop	{r3, r4, r5, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2000689c 	.word	0x2000689c

0800f3bc <_isatty_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d06      	ldr	r5, [pc, #24]	; (800f3d8 <_isatty_r+0x1c>)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	602b      	str	r3, [r5, #0]
 800f3c8:	f7f1 fa6d 	bl	80008a6 <_isatty>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_isatty_r+0x1a>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_isatty_r+0x1a>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	2000689c 	.word	0x2000689c

0800f3dc <_init>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	bf00      	nop
 800f3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e2:	bc08      	pop	{r3}
 800f3e4:	469e      	mov	lr, r3
 800f3e6:	4770      	bx	lr

0800f3e8 <_fini>:
 800f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ea:	bf00      	nop
 800f3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ee:	bc08      	pop	{r3}
 800f3f0:	469e      	mov	lr, r3
 800f3f2:	4770      	bx	lr
